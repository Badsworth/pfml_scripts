# This action is intended to trigger the E2E testing workflow from other workflows.
name: "Trigger E2E Tests"
description: "Trigger End-To-End Test workflow to run against a particular environment"
inputs:
  target_environment:
    description: "The target environment ID (eg: test, stage)"
    required: true
  cypress_tags:
    description: "The tags to apply to the recorded Cypress run."
    default: ""
  github_token:
    decription: "A Github token that is authorized to trigger workflows"
    required: true
  workflow_id:
    description: "The ID of the E2E workflow"
    default: "e2e-cypress.yml"

runs:
  using: "composite"
  steps:
    - run: |
        # Capture the reference we need to trigger for. If we're inside a PR for any reason,
        # this will be $GITHUB_HEAD_REF. Otherwise, extract the branch name from $GITHUB_REF.
        REF=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
        echo "Proceeding with ref: $REF"

        function get_running_workflow() {
          local _RUNNING_WORKFLOW_ID=$(
            curl -Ls -X GET "https://api.github.com/repos/${{ github.repository }}/actions/workflows/${{ inputs.workflow_id }}/runs?event=workflow_dispatch&branch=${REF}" \
              -H "Authorization: Bearer ${{ inputs.github_token }}" \
              -H "Accept: application/vnd.github.v3+json" |
            jq '.workflow_runs | map(select(.status | test("queued|in_progress"))) | first | .id'
          )
          echo "$_RUNNING_WORKFLOW_ID"
        }

        RUN_ID=$(get_running_workflow)
        if [ "$RUN_ID" = "null" ]; then
          echo "Dispatching a new E2E test workflow..."
          curl -Ls -X POST "https://api.github.com/repos/${{ github.repository }}/actions/workflows/${{ inputs.workflow_id }}/dispatches" \
            -d '{"ref": "'${REF}'", "inputs": { "target_environment": "${{ inputs.target_environment }}", "cypress_tags": "${{ inputs.cypress_tags }}" }}' \
            -H "Authorization: Bearer ${{ inputs.github_token }}" \
            -H "Accept: application/vnd.github.v3+json"

          # Loop until we can pick up the triggered workflow ID.
          for i in {1..30}; do
            echo "::debug::Checking for the workflow we just triggered..."
            RUN_ID=$(get_running_workflow)
            test "$RUN_ID" != "null" && break || sleep 2;
          done
          if [ "$RUN_ID" = "null" ]; then
            echo "::error::Unable to find triggered worfklow"
            exit 1
          fi
        fi

        # Wait for up to 20 minutes for this workflow to complete by looping with a 10s delay. We hope it will
        # never take this long to run the tests, but a timeout would not be helpful.
        for i in {1..120}; do
          echo "Waiting for workflow ${RUN_ID} to complete. This may take a while."
          RUN_CONCLUSION=$(
            curl -Ls -X GET "https://api.github.com/repos/${{ github.repository }}/actions/runs/$RUN_ID" \
              -H "Authorization: Bearer ${{ inputs.github_token }}" \
              -H "Accept: application/vnd.github.v3+json" |
            jq -cr '.conclusion'
          )
          case "$RUN_CONCLUSION" in
            "null")
              echo "::debug::Workflow has not completed. Waiting for results..."
              sleep 10
              ;;
            "success")
              echo "E2E Test workflow concluded successfully."
              echo "See more details at https://github.com/${{ github.repository }}/actions/runs/${RUN_ID}"
              exit 0;
              ;;
            *)
              echo "::error::E2E workflow concluded with ${RUN_CONCLUSION}"
              echo "See more details at https://github.com/${{ github.repository }}/actions/runs/${RUN_ID}"
              exit 1
          esac
        done

        echo "::error::Timeout while waiting for workflow to complete"
        exit 1
      shell: bash

