# Build and export the Paid Leave static website, and deploy to S3/Cloudfront
#
name: Portal deploy

on:
  workflow_dispatch:
    inputs:
      version:
        required: false
        description: |
          ⬆️️ Env to deploy to. For test deploys, select master or a feature branch.
          For all other envs, use "deploy/portal/*".
          --------------------------------------
          ⬇️ Tag or branch to be deployed. For deploys to test, leave blank to deploy master.
          For all other deploys, select an appropriate tag or feature branch.
        default: null
  push:
    branches:
      - master
    paths:
      - "portal/**"
      - "!portal/__mocks__/**"
      - "!portal/playroom/**"
      - "!portal/storybook/**"
      - "!portal/tests/**"

env:
  nodeVersion: 12.x
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  terraformVersion: 0.12.24
  terraformBaseDir: ./infra/portal/environments/
  # Map branch name to environment name. This is used to set the portal_env variable below in combination with git refs.
  refs/heads/master: test
  refs/heads/deploy/portal/stage: stage
  refs/heads/deploy/portal/prod: prod
  refs/heads/deploy/portal/performance: performance
  refs/heads/deploy/portal/training: training

jobs:
  prod-check:
    # run if environment is production
    runs-on: ubuntu-latest
    steps:
      - name: check users
        if: contains(github.ref, 'deploy/portal/prod')
        id: get_teams
        env:
          GITHUB_TOKEN: ${{ secrets.PFML_DEVOPS_TOKEN }}
        uses: octokit/graphql-action@v2.x
        with:
          query: |
            query {
              organization(login:"EOLWD"){
                team(slug:"pfml-devops"){
                  members(membership: ALL, query:"${{ github.actor }}"){
                    nodes {
                      login
                    }
                  }
                }
              }
            }

      - name: fail if not a member
        if: contains(github.ref, 'deploy/portal/prod') && contains('', fromJSON(steps.get_teams.outputs.data).organization.team.members.nodes[0])
        run: |
          echo "Not part of pfml-devops, cancelling workflow"
          exit 1
  update-the-deploy-branch:
    name: Update archival branch
    needs: prod-check
    runs-on: ubuntu-latest

    outputs:
      commit_hash: ${{ steps.commit_and_push.outputs.commit_hash || github.sha }}

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Commit and push new code to archival branch
        id: commit_and_push
        if: github.event.inputs.version && contains(github.ref, 'deploy/portal')
        run: |
          git config user.name "PFMLDevOps"
          git config user.email "68565627+PFMLDevOps@users.noreply.github.com"
          branch_or_tag=$(echo ${{github.ref}} | sed -E 's/^refs\/(heads|tags)\///')
          if commit_hash=$(git rev-parse origin/${{github.event.inputs.version}} 2>/dev/null); then
            echo "Received branch"
          else
            commit_hash=$(git rev-parse ${{github.event.inputs.version}})
            echo "Received tag"
          fi
          echo "about to commit $commit_hash to $branch_or_tag..."
          git pull origin $branch_or_tag --ff-only
          git reset --hard $commit_hash
          git push -f origin HEAD
          echo "::set-output name=commit_hash::$commit_hash"

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: update-the-deploy-branch
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ needs.update-the-deploy-branch.outputs.commit_hash }}

      - name: Set portal_env Value
        # see https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#github-context
        # github.ref will give the branch or tag reference that triggered the workflow
        # e.g refs/heads/master or refs/heads/deploy/portal/stage
        run: echo "portal_env=${{ env[github.ref] || 'test' }}" >> $GITHUB_ENV

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PFML_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PFML_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-duration-seconds: 3600
          role-to-assume: ci-run-deploys

      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.nodeVersion }}

      - name: Install
        run: npm ci --prefix portal

      - name: Build
        run: npm run build:${{ env.portal_env }} --prefix portal

      - name: Sync S3 Bucket
        env:
          BUCKET_NAME: massgov-pfml-${{ env.portal_env }}-portal-site-builds
          RELEASE_HASH: ${{ github.sha }}
          NEXT_OUTPUT_DIR: ./portal/out
        run: |
          aws s3 sync $NEXT_OUTPUT_DIR s3://$BUCKET_NAME/$RELEASE_HASH/ --exclude "*.html" --cache-control max-age=31536000,public &&
          aws s3 sync $NEXT_OUTPUT_DIR s3://$BUCKET_NAME/$RELEASE_HASH/ --exclude "*" --include "*.html" --cache-control s-maxage=86400,max-age=0,must-revalidate

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [update-the-deploy-branch, deploy]
    env:
      TF_VAR_cloudfront_origin_path: /${{ github.sha }}

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ needs.update-the-deploy-branch.outputs.commit_hash }}

      - name: Set portal_env Value
        # see https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#github-context
        # github.ref will give the branch or tag reference that triggered the workflow
        # e.g refs/heads/master or refs/heads/deploy/portal/stage
        run: echo "portal_env=${{ env[github.ref] || 'test' }}" >> $GITHUB_ENV

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PFML_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PFML_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-duration-seconds: 3600
          role-to-assume: ci-run-deploys

      - uses: hashicorp/setup-terraform@v1.2.1
        with:
          terraform_version: ${{ env.terraformVersion }}
          terraform_wrapper: false

      - name: Terraform Init
        id: terraform_init
        run: terraform init
        working-directory: ${{ env.terraformBaseDir }}${{ env.portal_env }}

      - name: Terraform Plan with new Cloudfront path
        id: terraform_plan
        run: terraform plan -out=plan.tfplan
        working-directory: ${{ env.terraformBaseDir }}${{ env.portal_env }}

      - name: Terraform Apply from execution plan
        id: terraform_apply
        run: terraform apply plan.tfplan
        working-directory: ${{ env.terraformBaseDir }}${{ env.portal_env }}
  invalidate-cloudfront:
    name: Invalidate Cloudfront Cache
    runs-on: ubuntu-latest
    needs: [update-the-deploy-branch, deploy, release]

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ needs.update-the-deploy-branch.outputs.commit_hash }}

      - name: Set portal_env Value
        # see https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#github-context
        # github.ref will give the branch or tag reference that triggered the workflow
        # e.g refs/heads/master or refs/heads/deploy/portal/stage
        run: echo "portal_env=${{ env[github.ref] || 'test' }}" >> $GITHUB_ENV

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PFML_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PFML_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-duration-seconds: 3600
          role-to-assume: ci-run-deploys

      - name: Terraform Init
        id: terraform_init
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.terraformVersion }}
          tf_actions_subcommand: init
          tf_actions_comment: false
          tf_actions_working_dir: ${{ env.terraformBaseDir }}${{ env.portal_env }}

      - name: Terraform Output
        id: terraform
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.terraformVersion }}
          tf_actions_subcommand: output
          tf_actions_working_dir: ${{ env.terraformBaseDir }}${{ env.portal_env }}

      - name: Invalidate old Cloudfront cache
        env:
          TF_OUTPUT: ${{ steps.terraform.outputs.tf_actions_output }}
        run: |
          sudo apt-get install jq
          DISTRIBUTION_ID=$(echo $TF_OUTPUT | jq -r '.cloudfront_distribution_id.value')
          aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"

  end-to-end:
    name: End-to-End Test Deployment
    runs-on: ubuntu-latest
    needs: [ update-the-deploy-branch, invalidate-cloudfront ]
    if: github.ref != 'refs/heads/deploy/portal/prod'
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ needs.update-the-deploy-branch.outputs.commit_hash }}

      - uses: ./.github/actions/trigger-cypress
        name: "Trigger Cypress Run"
        with:
          target_environment: ${{ env[github.ref] || 'test' }}
          cypress_tags: "Deploy,Deploy-Portal"
          github_token: ${{ secrets.PFML_DEVOPS_TOKEN }}
