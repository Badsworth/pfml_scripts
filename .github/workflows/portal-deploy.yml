# Build and export the Paid Leave static website, and deploy to S3/Cloudfront
#
name: Portal deploy

on:
  workflow_dispatch:
    inputs:
      version:
        required: false
        description: |
          ⬆️️ Env to deploy to. For test deploys, select main or a feature branch.
          For all other envs, use "deploy/portal/*".
          --------------------------------------
          ⬇️ Tag or branch to be deployed. For deploys to test, leave blank to deploy main.
          For all other deploys, select an appropriate tag or feature branch.
        default: ''
      extraUatDeploy:
        required: false
        default: "true"
        description: |
          --------------------------------------
          ⬇️ (For staging deploys only) Also deploy the above version to UAT?
      extraPerformanceDeploy:
        required: false
        default: "true"
        description: |
          --------------------------------------
          ⬇️ (Also for staging deploys only) Also deploy the above version to Performance?

  push:
    branches:
      - main
    paths:
      - "portal/**"
      - "!portal/__mocks__/**"
      - "!portal/playroom/**"
      - "!portal/storybook/**"
      - "!portal/tests/**"

env:
  github_api: "https://api.github.com/repos/EOLWD/pfml"
  workflow_self_link: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
  version_for_deploy: ${{ github.event.inputs.version || github.ref }}
  deploys_channel: "C01HEAJPE76" #mass-pfml-deploys-shared
  nodeVersion: 12.x
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  terraformVersion: 0.13.6
  terraformBaseDir: ./infra/portal/environments/
  # Map branch name to environment name. This is used to set the portal_env variable below in combination with git refs.
  refs/heads/main: test
  refs/heads/deploy/portal/stage: stage
  refs/heads/deploy/portal/prod: prod
  refs/heads/deploy/portal/performance: performance
  refs/heads/deploy/portal/training: training
  refs/heads/deploy/portal/uat: uat

jobs:
  prod-check:
    # run if environment is production
    runs-on: ubuntu-latest
    steps:
      - name: check users
        if: contains(github.ref, 'deploy/portal/prod')
        id: get_teams
        env:
          GITHUB_TOKEN: ${{ secrets.PFML_DEVOPS_TOKEN }}
        uses: octokit/graphql-action@v2.x
        with:
          query: |
            query {
              organization(login:"EOLWD"){
                team(slug:"pfml-devops"){
                  members(membership: ALL, query:"${{ github.actor }}"){
                    nodes {
                      login
                    }
                  }
                }
              }
            }

      - name: fail if not a member
        if: contains(github.ref, 'deploy/portal/prod') && contains('', fromJSON(steps.get_teams.outputs.data).organization.team.members.nodes[0])
        run: |
          echo "Not part of pfml-devops, cancelling workflow"
          exit 1

  update-the-deploy-branch:
    name: Update archival branch
    needs: prod-check
    runs-on: ubuntu-latest

    outputs:
      commit_hash: ${{ steps.commit_and_push.outputs.commit_hash || github.sha }}

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Commit and push new code to archival branch
        id: commit_and_push
        if: github.event.inputs.version && contains(github.ref, 'deploy/portal')
        run: |
          git config user.name "PFMLDevOps"
          git config user.email "68565627+PFMLDevOps@users.noreply.github.com"
          branch_or_tag=$(echo ${{github.ref}} | sed -E 's/^refs\/(heads|tags)\///')

          if commit_hash=$(git rev-parse origin/${{github.event.inputs.version}} 2>/dev/null); then
            echo "Received branch"
          else
            commit_hash=$(git rev-parse ${{github.event.inputs.version}})
            echo "Received tag"
          fi

          if [[ -z $commit_hash ]]; then
            echo "💣 No valid commit hash could be found in Git for the provided branch or tag '${{github.event.inputs.version}}'. This deploy can't proceed."
            exit 1
          fi

          echo "about to commit $commit_hash to $branch_or_tag..."
          git pull origin $branch_or_tag --ff-only
          git reset --hard $commit_hash
          git push -f origin HEAD
          echo "::set-output name=commit_hash::$commit_hash"

  deploy-info:
    name: Gather deploy info
    needs: update-the-deploy-branch
    runs-on: ubuntu-latest
    outputs:
      portal-env: ${{ steps.portal-env.outputs.portal-env }}
      deployed-url: ${{ steps.deployed-url.outputs.deployed-url }}
    steps:
      - name: Set portal-env value
        id: portal-env
        run: |
          echo "::set-output name=portal-env::${{ env[github.ref] || 'test' }}"

      - name: Set deployed-url value
        id: deployed-url
        # steps cannot refer to an output from a previous step in the same job, so portal-env has to be calculated again
        run: |
          if [[ "${{ env[github.ref] || 'test' }}" == 'prod' ]]; then
            echo "::set-output name=deployed-url::https://paidleave-api.mass.gov/api/docs/"
          else
            echo "::set-output name=deployed-url::https://paidleave-api-${{ env[github.ref] || 'test' }}.mass.gov/api/docs/"
          fi

  start-comms-github:
    name: Start deploy comms (GitHub)
    needs: [update-the-deploy-branch, deploy-info]
    runs-on: ubuntu-latest
    outputs:
      deploy-id: ${{ steps.create-deployment.outputs.deployment_id }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: chrnorm/deployment-action@releases/v1
        name: Create GitHub deployment
        id: create-deployment
        with:
          # NOTE: If you are intending for this GitHub deployment to trigger another
          #       workflow that's listening for on: [deployment], you need to update this
          #       to secrets.PFML_DEVOPS_TOKEN (same for the update step at the end.)
          #
          #       This is intentionally using the github.token right now to avoid unintended
          #       side-effects from happening off of the automated deployments.
          #
          token: "${{ github.token }}"
          target_url: ${{ needs.deploy-info.outputs.deployed-url }}
          environment: "Portal (${{ needs.deploy-info.outputs.portal-env }})"
          ref: ${{ needs.update-the-deploy-branch.outputs.commit_hash }}

  start-comms-slack:
    name: Start deploy comms (Slack)
    needs: [update-the-deploy-branch, deploy-info]
    outputs:
      subtitle: ${{ steps.choose_start_message.outputs.message }}
    if: ${{ !contains(github.ref, 'main') }} # Mutes notifications for auto-deploys to test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set commit_details value
        id: set-commit-details
        run: |
          echo "commit_details=$(git log --pretty=format:"<https://github.com/${{ github.repository }}/commit/${{needs.update-the-deploy-branch.outputs.commit_hash}}|%h %s>" -1 ${{needs.update-the-deploy-branch.outputs.commit_hash }})" >> $GITHUB_ENV

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PFML_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PFML_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ci-run-deploys
          role-duration-seconds: 3600

      - name: Pull slackbot API token from SSM
        uses: "marvinpinto/action-inject-ssm-secrets@latest"
        with:
          ssm_parameter: "/admin/common/nava-slackbot-api-key"
          env_variable_name: "slackbot_token"

      - name: Choose deployment start message
        id: choose_start_message
        env:
          just_the_deploy: "<${{ env.workflow_self_link }}|build logs> | <https://github.com/EOLWD/pfml/commits/${{ env.version_for_deploy }}|commit history>"
          with_release_notes: "<${{ env.workflow_self_link }}|build logs> | <https://github.com/EOLWD/pfml/releases/tag/${{ env.version_for_deploy }}|release notes>"
        run: |
          if [[ ${{ env.version_for_deploy }} == portal/* ]]; then
            echo "::set-output name=message::${{ env.with_release_notes }}"
          else
            echo "::set-output name=message::${{ env.just_the_deploy }}"
          fi

      - name: Post to Slack
        run: |
          SLACKBOT_RESPONSE=$(curl -fsLS -X POST -H "Authorization: Bearer ${{ env.SLACKBOT_TOKEN }}" \
          -H 'Content-Type: application/json;charset=utf-8' \
          --data '{
            "channel": "${{ env.deploys_channel }}",
            "attachments": [{
              "title": "Portal ${{ needs.deploy-info.outputs.portal-env }} deployment #${{ github.run_number }} was started\n${{ steps.choose_start_message.outputs.message }}",
              "color": "warning",
              "fields": [
                { "title": "started by", "value": "`${{ github.actor }}`", "short": true },
                { "title": "releasing", "value": "`${{ env.version_for_deploy }}`", "short": true },
                { "title": "commit details", "value": "`${{ env.commit_details }}`" }
              ]
            }]
          }' https://slack.com/api/chat.postMessage)


  extra-uat-deploy:
    if: contains(github.ref, 'deploy/portal/stage') && github.event.inputs.extraUatDeploy == 'true'
    name: (Stage) Extra UAT deploy
    needs: update-the-deploy-branch
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ needs.update-the-deploy-branch.outputs.commit_hash }}
      - name: Start a UAT deploy
        env:
          GITHUB_API: "https://api.github.com/repos/EOLWD/pfml"
          GITHUB_TOKEN: ${{ secrets.PFML_DEVOPS_TOKEN }}
          UAT_DEPLOYMENT_VERSION: ${{ github.event.inputs.version || 'main' }}
          WORKFLOW_NAME: "portal-deploy.yml"
        run: |
          echo "*** A Portal staging deploy is now in progress. Enqueuing an extra deployment to UAT... ***"
          curl -fLS -X POST "$GITHUB_API/actions/workflows/$WORKFLOW_NAME/dispatches" \
                        -H "Authorization: Bearer $GITHUB_TOKEN" \
                        -H "Accept: application/vnd.github.v3+json" \
                        -d '{ "ref": "deploy/portal/uat", "inputs": { "version": "${{ env.UAT_DEPLOYMENT_VERSION }}" } }'
          echo "Done."

  extra-performance-deploy:
    if: contains(github.ref, 'deploy/portal/performance') && github.event.inputs.extraPerformanceDeploy == 'true'
    name: (Stage) Extra Performance deploy
    needs: update-the-deploy-branch
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ needs.update-the-deploy-branch.outputs.commit_hash }}
      - name: Start a Performance deploy
        env:
          GITHUB_API: "https://api.github.com/repos/EOLWD/pfml"
          GITHUB_TOKEN: ${{ secrets.PFML_DEVOPS_TOKEN }}
          PERFORMANCE_DEPLOYMENT_VERSION: ${{ github.event.inputs.version || 'main' }}
          WORKFLOW_NAME: "portal-deploy.yml"
        run: |
          echo "*** A PORTAL staging deploy is now in progress. Enqueuing an extra deployment to Performance... ***"
          curl -fLS -X POST "$GITHUB_API/actions/workflows/$WORKFLOW_NAME/dispatches" \
                        -H "Authorization: Bearer $GITHUB_TOKEN" \
                        -H "Accept: application/vnd.github.v3+json" \
                        -d '{ "ref": "deploy/portal/performance", "inputs": { "version": "${{ env.PERFORMANCE_DEPLOYMENT_VERSION }}" } }'
          echo "Done."

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [update-the-deploy-branch, deploy-info]
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ needs.update-the-deploy-branch.outputs.commit_hash }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PFML_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PFML_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-duration-seconds: 3600
          role-to-assume: ci-run-deploys

      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.nodeVersion }}

      - name: Install
        run: npm ci --prefix portal

      - name: Build
        run: npm run build:${{ needs.deploy-info.outputs.portal-env }} --prefix portal

      - name: Sync S3 Bucket
        env:
          BUCKET_NAME: massgov-pfml-${{ needs.deploy-info.outputs.portal-env }}-portal-site-builds
          RELEASE_HASH: ${{ needs.update-the-deploy-branch.outputs.commit_hash }}
          NEXT_OUTPUT_DIR: ./portal/out
        run: |
          aws s3 sync $NEXT_OUTPUT_DIR s3://$BUCKET_NAME/$RELEASE_HASH/ --exclude "*.html" --cache-control max-age=31536000,public &&
          aws s3 sync $NEXT_OUTPUT_DIR s3://$BUCKET_NAME/$RELEASE_HASH/ --exclude "*" --include "*.html" --cache-control s-maxage=86400,max-age=0,must-revalidate

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [update-the-deploy-branch, deploy, deploy-info]
    env:
      TF_VAR_cloudfront_origin_path: /${{ needs.update-the-deploy-branch.outputs.commit_hash }}
      TF_CLI_ARGS: '-lock-timeout=120s'

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ needs.update-the-deploy-branch.outputs.commit_hash }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PFML_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PFML_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-duration-seconds: 3600
          role-to-assume: ci-run-deploys

      - uses: hashicorp/setup-terraform@v1.2.1
        with:
          terraform_version: ${{ env.terraformVersion }}
          terraform_wrapper: false

      - name: Terraform Init
        id: terraform_init
        run: terraform init
        working-directory: ${{ env.terraformBaseDir }}${{ needs.deploy-info.outputs.portal-env }}

      - name: Terraform Plan with new Cloudfront path
        id: terraform_plan
        run: terraform plan -out=plan.tfplan
        working-directory: ${{ env.terraformBaseDir }}${{ needs.deploy-info.outputs.portal-env }}

      - name: Terraform Apply from execution plan
        id: terraform_apply
        run: terraform apply plan.tfplan
        working-directory: ${{ env.terraformBaseDir }}${{ needs.deploy-info.outputs.portal-env }}

  invalidate-cloudfront:
    name: Invalidate Cloudfront Cache
    runs-on: ubuntu-latest
    needs: [update-the-deploy-branch, deploy, release, deploy-info]
    env:
      TF_CLI_ARGS: '-lock-timeout=120s'

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ needs.update-the-deploy-branch.outputs.commit_hash }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PFML_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PFML_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-duration-seconds: 3600
          role-to-assume: ci-run-deploys

      - name: Terraform Init
        id: terraform_init
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.terraformVersion }}
          tf_actions_subcommand: init
          tf_actions_comment: false
          tf_actions_working_dir: ${{ env.terraformBaseDir }}${{ needs.deploy-info.outputs.portal-env }}

      - name: Terraform Output
        id: terraform
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.terraformVersion }}
          tf_actions_subcommand: output
          tf_actions_working_dir: ${{ env.terraformBaseDir }}${{ needs.deploy-info.outputs.portal-env }}
        env:
          TF_CLI_ARGS: ''

      - name: Invalidate old Cloudfront cache
        env:
          TF_OUTPUT: ${{ steps.terraform.outputs.tf_actions_output }}
        run: |
          sudo apt-get install jq
          DISTRIBUTION_ID=$(echo $TF_OUTPUT | jq -r '.cloudfront_distribution_id.value')
          aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"

  postdeploy-info:
    name: Finalize deployment state
    needs: [invalidate-cloudfront]
    if: always()
    runs-on: ubuntu-latest
    outputs:
      deploy-state: ${{ steps.deploy-state.outputs.deploy-state }}
    steps:
      - name: Set deploy-state value
        id: deploy-state
        env:
          CLOUDFRONT_RESULT: ${{ needs.invalidate-cloudfront.result }}
        # the below shellcode must account for both 'cancelled' state, when a running job is cancelled while running
        # and 'skipped' state, when a job was skipped because a prior job was cancelled or did not need to be run
        # for brevity both are reported as 'cancelled'; portal releases are not run conditionally
        run: |
          if [[ $CLOUDFRONT_RESULT == 'cancelled' ]] || [[ $CLOUDFRONT_RESULT == 'skipped' ]]; then
            echo "::set-output name=deploy-state::inactive"
          fi

          if [[ $CLOUDFRONT_RESULT == 'success' ]]; then
            echo "::set-output name=deploy-state::success"
          fi

          if [[ $CLOUDFRONT_RESULT == 'failure' ]]; then
            echo "::set-output name=deploy-state::failure"
          fi

  finish-comms-github:
    name: Finish deploy comms (GitHub)
    needs: [start-comms-github, deploy-info, postdeploy-info]
    runs-on: ubuntu-latest
    if: always() && needs.start-comms-github.result == 'success'
    steps:
      - uses: chrnorm/deployment-status@releases/v1
        with:
          token: ${{ github.token }}
          # This should match target_url in start-comms-github.
          # see: https://github.com/chrnorm/deployment-status/issues/13#issuecomment-734731491
          environment_url: ${{ needs.deploy-info.outputs.deployed-url }}
          state: ${{ needs.postdeploy-info.outputs.deploy-state }}
          deployment_id: ${{ needs.start-comms-github.outputs.deploy-id }}

      - name: Update release page
        uses: benc-uk/workflow-dispatch@v1
        if: contains(github.ref, 'deploy/portal')
        with:
          workflow: GH Pages deploy
          token: ${{ secrets.PFML_DEVOPS_TOKEN }}
          ref: main

  finish-comms-slack:
    name: Finish deploy comms (Slack)
    needs: [start-comms-slack, deploy-info, postdeploy-info]
    runs-on: ubuntu-latest
    if: always() && needs.start-comms-slack.result == 'success' && !contains(github.ref, 'main') # Mutes notifications for auto-deploys to test
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PFML_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PFML_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ci-run-deploys
          role-duration-seconds: 3600

      - name: Pull slackbot API token from SSM
        uses: "marvinpinto/action-inject-ssm-secrets@latest"
        with:
          ssm_parameter: "/admin/common/nava-slackbot-api-key"
          env_variable_name: "slackbot_token"

      - name: Choose Slackbot message
        id: choose_finish_message
        env:
          deployment_success: "Portal ${{ needs.deploy-info.outputs.portal-env }} deployment #${{ github.run_number }} succeeded"
          deployment_failure: "Portal ${{ needs.deploy-info.outputs.portal-env }} deployment #${{ github.run_number }} failed"
          deployment_cancelled: "Portal ${{ needs.deploy-info.outputs.portal-env }} deployment #${{ github.run_number }} was cancelled"
        run: |
          if [[ ${{ needs.postdeploy-info.outputs.deploy-state }} == 'success' ]]; then
            echo "::set-output name=message::${{ env.deployment_success }}"
            echo "::set-output name=color::good"
          elif [[ ${{ needs.postdeploy-info.outputs.deploy-state }} == 'inactive' ]]; then
            echo "::set-output name=message::${{ env.deployment_cancelled }}"
            echo "::set-output name=color::#35373b"
          elif [[ ${{ needs.postdeploy-info.outputs.deploy-state }} == 'failure' ]]; then
            echo "::set-output name=message::${{ env.deployment_failure }}"
            echo "::set-output name=color::danger"
          else
            echo "::set-output name=message::${{ env.deployment_failure }}"
            echo "::set-output name=color::#2767cf"
          fi

      - name: Post to Slack
        run: |
          SLACKBOT_RESPONSE=$(curl -fsLS -X POST -H "Authorization: Bearer ${{ env.SLACKBOT_TOKEN }}" \
          -H 'Content-Type: application/json;charset=utf-8' \
          --data '{
            "channel": "${{ env.deploys_channel }}",
            "attachments": [{
              "title": "${{ steps.choose_finish_message.outputs.message }}\n${{ needs.start-comms-slack.outputs.subtitle }}",
              "color": "${{ steps.choose_finish_message.outputs.color }}",
              "fields": [
                { "title": "started by", "value": "`${{ github.actor }}`", "short": true },
                { "title": "released", "value": "`${{ env.version_for_deploy }}`", "short": true },
              ]
            }]
          }' https://slack.com/api/chat.postMessage)

  end-to-end:
    name: End-to-End Test Deployment
    runs-on: ubuntu-latest
    needs: [ update-the-deploy-branch, invalidate-cloudfront ]
    if: github.ref != 'refs/heads/deploy/portal/prod' && github.ref != 'refs/heads/deploy/portal/uat'
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ needs.update-the-deploy-branch.outputs.commit_hash }}

      - uses: ./.github/actions/trigger-cypress
        name: "Trigger Cypress Run"
        with:
          target_environment: ${{ env[github.ref] || 'test' }}
          cypress_tags: "Deploy,Deploy-Portal"
          github_token: ${{ secrets.PFML_DEVOPS_TOKEN }}
          # Limit to "stable" suite for any environment but test.
          only_stable: ${{ (env[github.ref] || 'test') == 'test' && 'false' || 'true' }}
