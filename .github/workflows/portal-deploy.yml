# Build and export the Paid Leave static website, and deploy to S3/Cloudfront
#
name: Portal deploy

on:
  workflow_dispatch:
    inputs:
      deployment_env:
        required: true
        default: "test"
        description: |
          🛑 DO NOT CHANGE THE DROPDOWN ABOVE FOR THE WORKFLOW. KEEP IT ON "main" BRANCH.
          --------------------------------------
          ⬇️ Environment to be deployed.
        type: choice
        options:
          - breakfix
          - cps-preview
          - infra-test
          - long
          - performance
          - prod
          - stage
          - test
          - training
          - trn2
          - uat
      version:
        required: true
        default: "main"
        description: |
          --------------------------------------
          ⬇️ Tag or branch to be deployed.
      extraUatDeploy:
        required: false
        default: "true"
        description: |
          --------------------------------------
          ⬇️ (For staging deploys only) Also deploy the above version to UAT?
      extraPerformanceDeploy:
        required: false
        default: "true"
        description: |
          --------------------------------------
          ⬇️ (Also for staging deploys only) Also deploy the above version to Performance?
  push:
    branches:
      - main
    paths:
      - "portal/**"
      - "!portal/__mocks__/**"
      - "!portal/storybook/**"
      - "!portal/tests/**"

env:
  github_api: "https://api.github.com/repos/EOLWD/pfml"
  workflow_self_link: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
  version: ${{ github.event.inputs.version || 'main' }}
  deployment_env: ${{ github.event.inputs.deployment_env || 'test' }}
  nodeVersion: 16.x
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  terraformVersion: 0.14.7
  terraformBaseDir: ./infra/portal/environments/

jobs:
  prod-check:
    # run if environment is production
    runs-on: ubuntu-latest
    steps:
      - name: check users
        if: contains(env.deployment_env, 'prod')
        id: get_teams
        env:
          GITHUB_TOKEN: ${{ secrets.PFML_DEVOPS_TOKEN }}
        uses: octokit/graphql-action@v2.x
        with:
          query: |
            query {
              organization(login:"EOLWD"){
                team(slug:"pfml-devops"){
                  members(membership: ALL, query:"${{ github.actor }}"){
                    nodes {
                      login
                    }
                  }
                }
              }
            }

      - name: fail if not a member
        if: contains(env.deployment_env, 'prod') && contains('', fromJSON(steps.get_teams.outputs.data).organization.team.members.nodes[0])
        run: |
          echo "Not part of pfml-devops, cancelling workflow"
          exit 1

  update-the-deploy-branch:
    name: Update archival branch
    needs: prod-check
    runs-on: ubuntu-latest

    outputs:
      commit_hash: ${{ steps.calculate_commit_hash.outputs.commit_hash }}

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Calculate commit hash
        id: calculate_commit_hash
        run: |
          if commit_hash=$(git rev-parse origin/${{env.version}} 2>/dev/null); then
            echo "Received branch"
          else
            commit_hash=$(git rev-parse ${{env.version}})
            echo "Received tag"
          fi

          if [[ -z $commit_hash ]]; then
            echo "💣 No valid commit hash could be found in Git for the provided branch or tag '${{env.version}}'. This deploy can't proceed."
            exit 1
          fi

          echo "::set-output name=commit_hash::$commit_hash"

      - name: Commit and push new code to archival branch
        if: "!contains(env.deployment_env, 'test')"
        run: |
          git config user.name "PFMLDevOps"
          git config user.email "68565627+PFMLDevOps@users.noreply.github.com"
          branch=deploy/portal/${{env.deployment_env}}
          echo "about to commit ${{steps.calculate_commit_hash.outputs.commit_hash}} to $branch..."
          git checkout $branch
          git reset --hard ${{steps.calculate_commit_hash.outputs.commit_hash}}
          git push -f origin HEAD

  deploy-info:
    name: Gather deploy info
    needs: update-the-deploy-branch
    runs-on: ubuntu-latest
    outputs:
      portal-env: ${{ steps.portal-env.outputs.portal-env }}
      deployed-url: ${{ steps.deployed-url.outputs.deployed-url }}
    steps:
      - name: Set portal-env value
        id: portal-env
        run: |
          echo "::set-output name=portal-env::${{ env.deployment_env || 'test' }}"

      - name: Set deployed-url value
        id: deployed-url
        # steps cannot refer to an output from a previous step in the same job, so portal-env has to be calculated again
        run: |
          if [[ "${{ env.deployment_env || 'test' }}" == 'prod' ]]; then
            echo "::set-output name=deployed-url::https://paidleave-api.mass.gov/api/docs/"
          else
            echo "::set-output name=deployed-url::https://paidleave-api-${{ env.deployment_env || 'test' }}.mass.gov/api/docs/"
          fi

  start-comms-github:
    name: Start deploy comms (GitHub)
    needs: [update-the-deploy-branch, deploy-info]
    runs-on: ubuntu-latest
    outputs:
      deploy-id: ${{ steps.create-deployment.outputs.deployment_id }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: chrnorm/deployment-action@releases/v1
        name: Create GitHub deployment
        id: create-deployment
        with:
          # NOTE: If you are intending for this GitHub deployment to trigger another
          #       workflow that's listening for on: [deployment], you need to update this
          #       to secrets.PFML_DEVOPS_TOKEN (same for the update step at the end.)
          #
          #       This is intentionally using the github.token right now to avoid unintended
          #       side-effects from happening off of the automated deployments.
          #
          token: "${{ github.token }}"
          target_url: ${{ needs.deploy-info.outputs.deployed-url }}
          environment: "Portal (${{ needs.deploy-info.outputs.portal-env }})"
          ref: ${{ needs.update-the-deploy-branch.outputs.commit_hash }}

  start-comms-teams:
    name: Start deploy comms (Teams)
    needs: [update-the-deploy-branch, deploy-info]
    outputs:
      version_link: ${{ steps.create_version_link.outputs.version_link }}
    if: ${{ !contains(github.event.inputs.version || 'main', 'main') || !contains(github.event.inputs.deployment_env || 'test', 'test' )}} # Mutes notifications for auto-deploys to test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set commit_details value
        id: set-commit-details
        run: |
          echo "commit_details=$(git log --pretty=format:"<https://github.com/${{ github.repository }}/commit/${{needs.update-the-deploy-branch.outputs.commit_hash}}|%h %s>" -1 ${{needs.update-the-deploy-branch.outputs.commit_hash }})" >> $GITHUB_ENV

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PFML_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PFML_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ci-run-deploys
          role-duration-seconds: 3600

      - name: Pull teams uri from SSM
        uses: "marvinpinto/action-inject-ssm-secrets@latest"
        with:
          ssm_parameter: "/admin/common/teams-deploy-uri"
          env_variable_name: "teams_uri"

      - name: Create version link
        id: create_version_link
        env:
          feature_branch_link: "[${{ env.version }}](https://github.com/EOLWD/pfml/commits/${{ env.version }})"
          release_tag_link: "[${{ env.version }}](https://github.com/EOLWD/pfml/releases/tag/${{ env.version }})"
        run: |
          if [[ ${{ env.version }} == portal/* ]]; then
            echo "::set-output name=version_link::${{ env.release_tag_link }}"
          else
            echo "::set-output name=version_link::${{ env.feature_branch_link }}"
          fi

      - name: Post to Teams
        run: |
          RESPONSE=$(curl -fsLS -X POST ${{ env.TEAMS_URI }} \
          --header 'Content-Type: application/json' \
          --data '{
            "@type": "MessageCard",
            "themeColor": "FF0000",
            "title": "Portal Deployment Started",
            "text": "Starting [Portal Deploy](${{ env.workflow_self_link }}) #${{ github.run_number }} of **${{ steps.create_version_link.outputs.version_link }}** to **${{ needs.deploy-info.outputs.portal-env }}**"
            }'
          )

  extra-uat-deploy:
    if: contains(github.event.inputs.deployment_env, 'stage') && github.event.inputs.extraUatDeploy == 'true'
    name: (Stage) Extra UAT deploy
    needs: update-the-deploy-branch
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ needs.update-the-deploy-branch.outputs.commit_hash }}
      - name: Start a UAT deploy
        env:
          GITHUB_API: "https://api.github.com/repos/EOLWD/pfml"
          GITHUB_TOKEN: ${{ secrets.PFML_DEVOPS_TOKEN }}
          WORKFLOW_NAME: "portal-deploy.yml"
        run: |
          echo "*** A Portal staging deploy is now in progress. Enqueuing an extra deployment to UAT... ***"
          curl -fLS -X POST "$GITHUB_API/actions/workflows/$WORKFLOW_NAME/dispatches" \
                        -H "Authorization: Bearer $GITHUB_TOKEN" \
                        -H "Accept: application/vnd.github.v3+json" \
                        -d '{ "ref": "${{ github.ref }}", "inputs": { "deployment_env": "uat", "version": "${{ env.version }}" } }'
          echo "Done."

  extra-performance-deploy:
    if: contains(github.event.inputs.deployment_env, 'stage') && github.event.inputs.extraPerformanceDeploy == 'true'
    name: (Stage) Extra Performance deploy
    needs: update-the-deploy-branch
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ needs.update-the-deploy-branch.outputs.commit_hash }}
      - name: Start a Performance deploy
        env:
          GITHUB_API: "https://api.github.com/repos/EOLWD/pfml"
          GITHUB_TOKEN: ${{ secrets.PFML_DEVOPS_TOKEN }}
          WORKFLOW_NAME: "portal-deploy.yml"
        run: |
          echo "*** A PORTAL staging deploy is now in progress. Enqueuing an extra deployment to Performance... ***"
          curl -fLS -X POST "$GITHUB_API/actions/workflows/$WORKFLOW_NAME/dispatches" \
                        -H "Authorization: Bearer $GITHUB_TOKEN" \
                        -H "Accept: application/vnd.github.v3+json" \
                        -d '{ "ref": "${{ github.ref }}", "inputs": { "deployment_env": "performance", "version": "${{ env.version }}" } }'
          echo "Done."

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [update-the-deploy-branch, deploy-info]
    env:
      releaseVersion: ${{ github.event.inputs.version }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ needs.update-the-deploy-branch.outputs.commit_hash }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PFML_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PFML_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-duration-seconds: 3600
          role-to-assume: ci-run-deploys

      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.nodeVersion }}

      - name: Install
        run: npm ci --prefix portal

      - name: Build
        run: BUILD_ENV=${{ needs.deploy-info.outputs.portal-env }} npm run build --prefix portal

      - name: Sync S3 Bucket
        env:
          BUCKET_NAME: massgov-pfml-${{ needs.deploy-info.outputs.portal-env }}-portal-site-builds
          RELEASE_HASH: ${{ needs.update-the-deploy-branch.outputs.commit_hash }}
          NEXT_OUTPUT_DIR: ./portal/out
        run: |
          aws s3 sync $NEXT_OUTPUT_DIR s3://$BUCKET_NAME/$RELEASE_HASH/ --exclude "*.html" --cache-control max-age=31536000,public &&
          aws s3 sync $NEXT_OUTPUT_DIR s3://$BUCKET_NAME/$RELEASE_HASH/ --exclude "*" --include "*.html" --cache-control s-maxage=86400,max-age=0,must-revalidate

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [update-the-deploy-branch, deploy, deploy-info]
    env:
      TF_VAR_cloudfront_origin_path: /${{ needs.update-the-deploy-branch.outputs.commit_hash }}
      TF_CLI_ARGS: '-lock-timeout=120s'

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ needs.update-the-deploy-branch.outputs.commit_hash }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PFML_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PFML_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-duration-seconds: 3600
          role-to-assume: ci-run-deploys

      - uses: hashicorp/setup-terraform@v1.2.1
        with:
          terraform_version: ${{ env.terraformVersion }}
          terraform_wrapper: false

      - name: Terraform Init
        id: terraform_init
        run: terraform init
        working-directory: ${{ env.terraformBaseDir }}${{ needs.deploy-info.outputs.portal-env }}

      - name: Terraform Plan with new Cloudfront path
        id: terraform_plan
        run: terraform plan -out=plan.tfplan
        working-directory: ${{ env.terraformBaseDir }}${{ needs.deploy-info.outputs.portal-env }}

      - name: Terraform Apply from execution plan
        id: terraform_apply
        run: terraform apply plan.tfplan
        working-directory: ${{ env.terraformBaseDir }}${{ needs.deploy-info.outputs.portal-env }}

  update-newrelic:
    name: Update New Relic
    runs-on: ubuntu-latest
    needs: [update-the-deploy-branch, deploy-info, release]
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PFML_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PFML_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ci-run-deploys
          role-duration-seconds: 3600

      - name: Setup & Configure New Relic CLI
        uses: ./.github/actions/setup-nr-cli

      - name: Create a custom deployment record
        run: |
          newrelic events post --event "{ \"eventType\": \"CustomDeploymentMarker\", \"component\": \"portal\", \"environment\":\"${{ needs.deploy-info.outputs.portal-env }}\", \"version\": \"${{ env.version || needs.update-the-deploy-branch.outputs.commit_hash }}\" }"

  invalidate-cloudfront:
    name: Invalidate Cloudfront Cache
    runs-on: ubuntu-latest
    needs: [update-the-deploy-branch, deploy, release, deploy-info]
    env:
      TF_CLI_ARGS: '-lock-timeout=120s'

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ needs.update-the-deploy-branch.outputs.commit_hash }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PFML_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PFML_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-duration-seconds: 3600
          role-to-assume: ci-run-deploys

      - uses: hashicorp/setup-terraform@v1.2.1
        with:
          terraform_version: ${{ env.terraformVersion }}
          terraform_wrapper: true

      - name: Terraform Init
        id: terraform_init
        run: terraform init
        working-directory: ${{ env.terraformBaseDir }}${{ needs.deploy-info.outputs.portal-env }}

      - name: Terraform Output
        id: terraform
        run: terraform output -json
        working-directory: ${{ env.terraformBaseDir }}${{ needs.deploy-info.outputs.portal-env }}
        env:
          TF_CLI_ARGS: ''

      - name: Invalidate old Cloudfront cache
        env:
          TF_OUTPUT: ${{ steps.terraform.outputs.stdout }}
        run: |
          DISTRIBUTION_ID=$(echo $TF_OUTPUT | jq -r '.cloudfront_distribution_id.value')
          echo $DISTRIBUTION_ID 
          aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"

  postdeploy-info:
    name: Finalize deployment state
    needs: [invalidate-cloudfront]
    if: always()
    runs-on: ubuntu-latest
    outputs:
      deploy-state: ${{ steps.deploy-state.outputs.deploy-state }}
    steps:
        # https://github.com/technote-space/workflow-conclusion-action
        # this action takes the "conclusion" status from jobs and compiles them together into an env variable with a rolled up status
      - uses: technote-space/workflow-conclusion-action@v2
      - name: Set deploy-state value
        id: deploy-state
        run: echo "::set-output name=deploy-state::${{ env.WORKFLOW_CONCLUSION }}"

  finish-comms-github:
    name: Finish deploy comms (GitHub)
    needs: [start-comms-github, deploy-info, postdeploy-info]
    runs-on: ubuntu-latest
    if: always() && needs.start-comms-github.result == 'success'
    steps:
      - uses: chrnorm/deployment-status@releases/v1
        with:
          token: ${{ github.token }}
          # This should match target_url in start-comms-github.
          # see: https://github.com/chrnorm/deployment-status/issues/13#issuecomment-734731491
          environment_url: ${{ needs.deploy-info.outputs.deployed-url }}
          state: ${{ needs.postdeploy-info.outputs.deploy-state }}
          deployment_id: ${{ needs.start-comms-github.outputs.deploy-id }}

      - name: Update release page
        uses: benc-uk/workflow-dispatch@v1
        if: ${{!contains(env.deployment_env, 'test')}}
        with:
          workflow: GH Pages deploy
          token: ${{ secrets.PFML_DEVOPS_TOKEN }}
          ref: main

  post-to-teams:
    name: post end status to teams
    needs: [start-comms-teams, deploy-info, postdeploy-info]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PFML_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PFML_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ci-run-deploys
          role-duration-seconds: 3600

      - name: Pull teams uri from SSM
        uses: "marvinpinto/action-inject-ssm-secrets@latest"
        with:
          ssm_parameter: "/admin/common/teams-deploy-uri"
          env_variable_name: "teams_uri"

      - name: Post to Teams
        run: |
          RESPONSE=$(curl -fsLS -X POST ${{ env.TEAMS_URI }} \
          --header 'Content-Type: application/json' \
          --data '{
            "@type": "MessageCard",
            "themeColor": "2986CC",
            "title": "Portal Deploy Completed",
            "text": "Portal deploy #${{ github.run_number }} ${{ needs.postdeploy-info.outputs.deploy-state }} in **${{ env.deployment_env}}**: [workflow run](${{ env.workflow_self_link }})"
            }'
          )

  end-to-end:
    name: E2E Tests
    needs: [ update-the-deploy-branch, invalidate-cloudfront ]
    if: github.event.inputs.deployment_env != 'prod' && github.event.inputs.deployment_env != 'infra-test'
    # Always run tests from main to avoid coupling test code to release code.
    uses: EOLWD/pfml/.github/workflows/e2e-tests.yml@main
    with:
      # We're not allowed to reference the env context when invoking reusable workflows,
      # only inputs, needs, github, and secrets.
      target_environment: ${{ github.event.inputs.deployment_env || 'test' }}
      cypress_tags: "Deploy,Deploy-Portal"
      run_stable: true
      title_override: "${{ format('Portal Deploy: {0} to {1}', github.event.inputs.version || 'main', github.event.inputs.deployment_env || 'test') }}"
    secrets:
      E2E_FINEOS_PASSWORD: ${{ secrets.E2E_FINEOS_PASSWORD }}
      E2E_PORTAL_PASSWORD: ${{ secrets.E2E_PORTAL_PASSWORD }}
      E2E_EMPLOYER_PORTAL_PASSWORD: ${{ secrets.E2E_EMPLOYER_PORTAL_PASSWORD }}
      E2E_TESTMAIL_APIKEY: ${{ secrets.E2E_TESTMAIL_APIKEY }}
      E2E_SSO_PASSWORD: ${{ secrets.E2E_SSO_PASSWORD }}
      E2E_SSO_USERNAME: ${{ secrets.E2E_SSO_USERNAME }}
      E2E_TWILIO_ACCOUNTSID: ${{ secrets.E2E_TWILIO_ACCOUNTSID }}
      E2E_TWILIO_AUTHTOKEN: ${{ secrets.E2E_TWILIO_AUTHTOKEN }}
      CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
      CYPRESS_RECORD_KEY_UNSTABLE: ${{ secrets.CYPRESS_RECORD_KEY_UNSTABLE }}
      CYPRESS_RECORD_KEY_MORNING: ${{ secrets.CYPRESS_RECORD_KEY_MORNING }}
      CYPRESS_RECORD_KEY_TARGETED: ${{ secrets.CYPRESS_RECORD_KEY_TARGETED }}
      PFML_AWS_ACCESS_KEY_ID: ${{ secrets.PFML_AWS_ACCESS_KEY_ID }}
      PFML_AWS_SECRET_ACCESS_KEY: ${{ secrets.PFML_AWS_SECRET_ACCESS_KEY }}

  post-e2e-failures-to-teams:
    name: Post E2E Failures to Teams
    needs: [post-to-teams, end-to-end]
    # Run if the E2E tests failed or timed out. Applies to any environment that runs E2E tests.
    if: always() && (needs.end-to-end.result == 'failure' || needs.end-to-end.result == 'timed_out')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PFML_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PFML_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ci-run-deploys
          role-duration-seconds: 3600

      - name: Pull teams uri from SSM
        uses: "marvinpinto/action-inject-ssm-secrets@latest"
        with:
          ssm_parameter: "/admin/common/teams-deploy-uri"
          env_variable_name: "teams_uri"

      - name: Post to Teams
        run: |
          RESPONSE=$(curl -fsLS -X POST ${{ env.TEAMS_URI }} \
          --header 'Content-Type: application/json' \
          --data '{
            "@type": "MessageCard",
            "themeColor": "FF0000",
            "title": "E2E Tests Failed",
            "text": "E2E tests failed in ${{ github.event.inputs.deployment_env || 'test'}} [build logs](${{ env.workflow_self_link }})",
            "sections": [{
                "activityImage":"https://th.bing.com/th/id/R.ee8882f44294e8a6f1732a54343ff17e?rik=FAYIPD4sACftKw&riu=http%3a%2f%2f3.bp.blogspot.com%2f-u6MZBWbGcZI%2fUT4mft01YTI%2fAAAAAAAADpU%2fJubGsyGdL00%2fs1600%2ffailure.png&ehk=ranH%2bkeeo59wsILuyxVyNTIR2oUECprijedE01jHq34%3d&risl=&pid=ImgRaw&r=0"
            }]
          }')
