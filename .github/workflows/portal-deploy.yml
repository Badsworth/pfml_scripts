name: Portal CI Deploy

on:
  push:
    branches:
      - master
    paths:
      - portal/**

env:
  nodeVersion: 12.x
  releaseHash: ${{ github.sha }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  bucketName: mpfml-prototype
  terraformVersion: 0.12.20
  terraformDir: ./infra/environments/sandbox

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          nodeVersion: ${{ env.nodeVersion }}

      - name: Install
        run:
          npm ci --prefix portal

      - name: Build
        run:
          npm run build:test --prefix portal

      - name: Sync S3 Bucket
        env:
          NEXT_OUTPUT_DIR: ./portal/out
          S3_BUCKET: s3://${{ env.bucketName }}/${{ env.releaseHash }}/
        run:
          aws s3 sync $NEXT_OUTPUT_DIR $S3_BUCKET --exclude "*.html" --cache-control max-age=31536000,public &&
          aws s3 sync $NEXT_OUTPUT_DIR $S3_BUCKET --exclude "*" --include "*.html" --cache-control s-maxage=86400,max-age=0,must-revalidate

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: deploy
    env:
      TF_VAR_cloudfront_origin_path: /${{ github.sha }}

    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Terraform Init
        id: terraform_init
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.terraformVersion }}
          tf_actions_subcommand: init
          tf_actions_comment: false
          tf_actions_working_dir: ${{ env.terraformDir }}

      - name: Terraform Apply with new Cloudfront path
        id: terraform_apply
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.terraformVersion }}
          tf_actions_subcommand: apply
          tf_actions_comment: false
          tf_actions_working_dir: ${{ env.terraformDir }}


  invalidate-cloudfront:
    name: Invalidate Cloudfront Cache
    runs-on: ubuntu-latest
    needs: [deploy, release]

    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Terraform Init
        id: terraform_init
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.terraformVersion }}
          tf_actions_subcommand: init
          tf_actions_comment: false
          tf_actions_working_dir: ${{ env.terraformDir }}

      - name: Terraform Output
        id: terraform
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.terraformVersion }}
          tf_actions_subcommand: output
          tf_actions_working_dir: ${{ env.terraformDir }}

      - name: Invalidate old Cloudfront cache
        env:
          TF_OUTPUT: ${{ steps.terraform.outputs.tf_actions_output }}
        run: |
          sudo apt-get install jq
          DISTRIBUTION_ID=$(echo $TF_OUTPUT | jq -r '.cloudfront_distribution_id.value')
          aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/index.html"
