# Scripted Releases Github Actions Workflow 

name: Scripted Releases

on:
  workflow_dispatch:
    inputs:
      application:
        description: |
          ⚠️ Only edit the above dropdown if you do not wish to use the GHA Workflow from main
          --------------------------------------------
          1️⃣ Application
        required: true
        type: choice
        options:
          - admin-portal
          - api
          - portal
          - foobar
      scripted-release-task:
        description: |
          2️⃣ Scripted Release Task
        required: true
        type: choice
        options:
          - start-release
          - update-release
          - finalize-release
          - hotfix
          - major-release
      arguments:
        description: |
          3️⃣ Arguments - 
          🤔 check bin/ci/README.md for help
        required: false
        type: string

env: 
  GITHUB_TOKEN: ${{ secrets.PFML_DEVOPS_TOKEN }}

jobs:
  run-scripted-releases:
    runs-on: ubuntu-latest
    steps:
      - name: Input parameters
        run: |
          echo "Application: ${{ github.event.inputs.application }}"
          echo "Scripted Release Task: ${{ github.event.inputs.scripted-release-task }}"
          echo "Arguments: ${{ github.event.inputs.arguments }}"
      
      - name: Configure git
        run: |
          git config --global user.email "pfmldevops@mass.gov"
          git config --global user.name "PFMLDevOps" 

      - name: Checkout PMFL repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Poetry
        working-directory: ./bin/ci
        # Installing with curl requires an extra step to add poetry to $PATH 
        run: pip install poetry

      - name: Install Poetry dependencies 
        working-directory: ./bin/ci
        run: poetry install
      
      - name: Run scripted releases with Poetry
        id: run-scripted-releases 
        working-directory: ./bin/ci
        run: poetry run scripted-releases -a ${{ github.event.inputs.application }} ${{ github.event.inputs.scripted-release-task }} ${{ github.event.inputs.arguments }}

      # Fetch all tags and create variable capturing the tag created in previous job
      # Will not run if Application == foobar
      - name: Fetch latest tag
        id: version
        if: steps.run-scripted-releases.outcome == 'success' && !contains(github.event.inputs.application, 'foobar')
        working-directory: ./bin/ci
        # The production-ready tag created from "finalize-release" will come before the "rc" tags due to lexicographic ordering. To correct this, the appended "-rc#" is removed
        # Resulting in an accurate, latest tag return
        run: |
          if [[ ${{ github.event.inputs.scripted-release-task }} == "finalize-release" ]]
          then
            tag=$(git tag -l "${{ github.event.inputs.application }}*" --sort=committerdate | tail -1 | sed -r 's/-[^-]+$//g')
            echo "::set-output name=tag::$tag"
            echo "Grabbed $tag - the latest tag for ${{ github.event.inputs.application }}"
          else
            tag=$(git tag -l "${{ github.event.inputs.application }}*" --sort=committerdate | tail -1)
            echo "::set-output name=tag::$tag"
            echo "Grabbed $tag - the latest tag for ${{ github.event.inputs.application }}"
          fi

      # Create release and notes in GitHub
      - name: Create release
        if: steps.version.outcome == 'success' && !contains(github.event.inputs.application, 'admin-portal')
        working-directory: ./${{ github.event.inputs.application }}
        # If there's "-rc" in the tag, then label the release as a pre-release 
        # If the tag is production ready, title the release accordingly i.e: api/v1.2.3 -> API v1.2.3
        run: |
          if [[ "${{ steps.version.outputs.tag }}" == *"-rc"* ]]
          then
            gh release create ${{ steps.version.outputs.tag }} --notes "$(make release-notes)" --title "${{ steps.version.outputs.tag }}" --prerelease
          else
            NAME="${{ steps.version.outputs.tag }}"
            NAME=$(echo $NAME | sed 's/\// /g' | sed -r 's/([a-z]+)\s/\U&/g')
            gh release create ${{ steps.version.outputs.tag }} --notes "$(make release-notes)" --title "$NAME"
          fi

      # Same as above, but for Admin Portal since the application's directory is named "admin" instead of "admin-portal"
      - name: Create release | Admin Portal
        if: steps.version.outcome == 'success' && contains(github.event.inputs.application, 'admin-portal')
        working-directory: ./admin
        # If there's "-rc" in the tag, then label the release as a pre-release 
        # If the tag is production ready, title the release accordingly i.e: api/v1.2.3 -> API v1.2.3
        run: |
          if [[ "${{ steps.version.outputs.tag }}" == *"-rc"* ]]
          then
            gh release create ${{ steps.version.outputs.tag }} --notes "$(make release-notes)" --title "${{ steps.version.outputs.tag }}" --prerelease
          else
            NAME="${{ steps.version.outputs.tag }}"
            NAME=$(echo $NAME | sed 's/\// /g' | sed -r 's/([a-z]+)\s/\U&/g')
            gh release create ${{ steps.version.outputs.tag }} --notes "$(make release-notes)" --title "$NAME"
          fi