# This workflow deploys application changes to our AWS environments.
#
# Deploy steps:
# - Build a docker release image and upload it to ECR, tagged with its latest git commit hash.
# - Apply the terraform changes, pointing it to the docker image that was uploaded.
# 
name: API CI Deploy

on:
  push:
    branches:
      - master
    paths:
      - api/**

env:
  working-dir: ./api
  terraform-version: 0.12.20

jobs:
  api-build:
    name: Build docker image
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Build and upload docker image artifact
        run: make release
        working-directory: ${{ env.working-dir }}

  api-release:
    name: Release
    runs-on: ubuntu-latest
    needs: api-build

    strategy:
      # Deploy master to our deprecated nava-internal sandbox,
      # and eventually to the new DFML AWS account as well.
      matrix:
        environment: [sandbox]

      # If one environment fails to deploy, don't fail all of them.
      fail-fast: false

    env:
      terraform-dir: ./infra/api/environments/${{ matrix.environment }}
      TF_VAR_service_docker_tag: ${{ github.sha }}

    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Terraform Init
        id: terraform_init
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.terraform-version }}
          tf_actions_subcommand: init
          tf_actions_comment: false
          tf_actions_working_dir: ${{ env.terraform-dir }}

      - name: Terraform Plan with new docker image
        id: terraform_plan
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.terraform-version }}
          tf_actions_subcommand: plan
          tf_actions_comment: false
          tf_actions_working_dir: ${{ env.terraform-dir }}
          args: '-out=plan.tfplan'

      - name: Terraform Apply from execution plan
        id: terraform_apply
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.terraform-version }}
          tf_actions_subcommand: apply
          tf_actions_comment: false
          tf_actions_working_dir: ${{ env.terraform-dir }}
          args: 'plan.tfplan'
