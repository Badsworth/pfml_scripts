# This workflow deploys application changes to our AWS environments.
#
# Deploy steps:
# - Build a docker release image and upload it to ECR, tagged with its latest git commit hash.
# - Apply the terraform changes, pointing it to the docker image that was uploaded.
##
name: API CI Deploy

on:
  workflow_dispatch:
    inputs:
      deployment_env:
        required: true
        default: "test"
        description: |
          🛑 DO NOT CHANGE THE DROPDOWN ABOVE FOR THE WORKFLOW. KEEP IT ON "main" BRANCH.     
          --------------------------------------
          ⬇️ Environment to be deployed.
            (test, performance, stage, training, uat, prod, breakfix, cps-preview).
      version:
        required: true
        default: "main"
        description: |
          --------------------------------------

                    ⬇️ Tag or branch to be deployed.
      extraUatDeploy:
        required: false
        default: "true"
        description: |
          --------------------------------------
          ⬇️ (For staging deploys only) Also deploy the above version to UAT?
      extraPerformanceDeploy:
        required: false
        default: "true"
        description: |
          --------------------------------------
          ⬇️ (Also for staging deploys only) Also deploy the above version to Performance?
      performLoadTest:
        required: false
        default: "true"
        description: |
          ⬇️ (For performance deploys only, including extra deploys from staging) Perform a small-scale load test in performance after deployment?
  push:
    branches:
      - main
    paths:
      - api/**
      - infra/api/**
      - infra/ecs-tasks/**
      - infra/env-shared/**

env:
  github_api: "https://api.github.com/repos/EOLWD/pfml"
  workflow_self_link: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
  version: ${{ github.event.inputs.version || 'main' }}
  deployment_env: ${{ github.event.inputs.deployment_env || 'test' }}
  deploys_channel: "C01HEAJPE76" #mass-pfml-deploys-shared
  working-dir: ./api
  terraform-api-dir: ./infra/api/environments
  terraform-env-shared-dir: ./infra/env-shared/environments
  terraform-ecs-tasks-dir: ./infra/ecs-tasks/environments
  terraform-version: 0.14.7
  python-version: 3.8

  # Set a timeout of two minutes for all terraform commands in the workflow
  # to account for parallel jobs working in the same environment with the same
  # terraform state files.
  TF_CLI_ARGS: '-lock-timeout=120s'

jobs:
  prod-check:
    # run if environment is production
    runs-on: ubuntu-latest
    steps:
      - name: check users
        if: contains(env.deployment_env, 'prod')
        id: get_teams
        env:
          GITHUB_TOKEN: ${{ secrets.PFML_DEVOPS_TOKEN }}
        uses: octokit/graphql-action@v2.x
        with:
          query: |
            query {
              organization(login:"EOLWD"){
                team(slug:"pfml-devops"){
                  members(membership: ALL, query:"${{ github.actor }}"){
                    nodes {
                      login
                    }
                  }
                }
              }
            }
      - name: fail if not a member
        if: contains(env.deployment_env, 'prod') && contains('', fromJSON(steps.get_teams.outputs.data).organization.team.members.nodes[0])
        run: |
          echo "Not part of pfml-devops, cancelling workflow"
          exit 1
  update-the-deploy-branch:
    name: Update archival branch
    needs: prod-check
    runs-on: ubuntu-latest

    outputs:
      commit_hash: ${{ steps.calculate_commit_hash.outputs.commit_hash }}

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Calculate commit hash
        id: calculate_commit_hash
        run: |
          if commit_hash=$(git rev-parse origin/${{env.version}} 2>/dev/null); then
            echo "Received branch"
          else
            commit_hash=$(git rev-parse ${{env.version}})
            echo "Received tag"
          fi

          if [[ -z $commit_hash ]]; then
            echo "💣 No valid commit hash could be found in Git for the provided branch or tag '${{env.version}}'. This deploy can't proceed."
            exit 1
          fi

          echo "::set-output name=commit_hash::$commit_hash"
          
      - name: Commit and push new code to archival branch
        if: "!contains(env.deployment_env, 'test')"
        run: |
          git config user.name "PFMLDevOps"
          git config user.email "68565627+PFMLDevOps@users.noreply.github.com"
          branch=deploy/api/${{env.deployment_env}}
          echo "about to commit ${{steps.calculate_commit_hash.outputs.commit_hash}} to $branch..."
          git checkout $branch
          git reset --hard ${{steps.calculate_commit_hash.outputs.commit_hash}}
          git push -f origin HEAD

  deploy-info:
    name: Gather deploy info
    needs: update-the-deploy-branch
    runs-on: ubuntu-latest
    outputs:
      api-env: ${{ steps.api-env.outputs.api-env }}
      deployed-url: ${{ steps.deployed-url.outputs.deployed-url }}
      subtitle: ${{ steps.choose-deploy-subtitle.outputs.message }}
    steps:
      - name: Set api-env value
        id: api-env
        run: |
          echo "::set-output name=api-env::${{ env.deployment_env }}"

      - name: Set deployed-url value
        id: deployed-url
        # steps cannot refer to an output from a previous step in the same job, so api-env has to be calculated again
        run: |
          if [[ "${{ env.deployment_env || 'test' }}" == 'prod' ]]; then
            echo "::set-output name=deployed-url::https://paidleave-api.mass.gov/api/docs/"
          else
            echo "::set-output name=deployed-url::https://paidleave-api-${{ env.deployment_env || 'test' }}.mass.gov/api/docs/"
          fi

      - name: Choose deployment subtitle
        id: choose-deploy-subtitle
        env:
          just_the_deploy: "<${{ env.workflow_self_link }}|build logs> | <https://github.com/EOLWD/pfml/commits/${{ env.version }}|commit history>"
          with_release_notes: "<${{ env.workflow_self_link }}|build logs> | <https://github.com/EOLWD/pfml/releases/tag/${{ env.version }}|release notes>"
        run: |
          if [[ ${{ env.version }} == api/* ]]; then
            echo "::set-output name=message::${{ env.with_release_notes }}"
          else
            echo "::set-output name=message::${{ env.just_the_deploy }}"
          fi


  start-comms-github:
    name: Start deploy comms (GitHub)
    needs: [update-the-deploy-branch, deploy-info]
    runs-on: ubuntu-latest
    outputs:
      deploy-id: ${{ steps.create-deployment.outputs.deployment_id }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: chrnorm/deployment-action@releases/v1
        name: Create GitHub deployment
        id: create-deployment
        with:
          # NOTE: If you are intending for this GitHub deployment to trigger another
          #       workflow that's listening for on: [deployment], you need to update this
          #       to secrets.PFML_DEVOPS_TOKEN (same for the update step at the end.)
          #
          #       This is intentionally using the github.token right now to avoid unintended
          #       side-effects from happening off of the automated deployments.
          #
          token: "${{ github.token }}"
          target_url: ${{ needs.deploy-info.outputs.deployed-url }}
          environment: "API (${{ needs.deploy-info.outputs.api-env }})"
          ref: ${{ needs.update-the-deploy-branch.outputs.commit_hash }}

  start-comms-slack:
    name: Start deploy comms (Slack)
    needs: [update-the-deploy-branch, deploy-info]
    if: ${{ !contains(github.event.inputs.version || 'main', 'main') || !contains(github.event.inputs.deployment_env || 'test', 'test' )}} # Mutes notifications for auto-deploys to test    
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set commit_details Value
        id: set-commit-details
        run: |
          echo "commit_details=$(git log --pretty=format:"<https://github.com/${{ github.repository }}/commit/${{needs.update-the-deploy-branch.outputs.commit_hash}}|%h %s>" -1 ${{needs.update-the-deploy-branch.outputs.commit_hash }})" >> $GITHUB_ENV
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PFML_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PFML_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ci-run-deploys
          role-duration-seconds: 3600

      - name: Pull slackbot API token from SSM
        uses: "marvinpinto/action-inject-ssm-secrets@latest"
        with:
          ssm_parameter: "/admin/common/nava-slackbot-api-key"
          env_variable_name: "slackbot_token"

      - name: Post to Slack
        run: |
          SLACKBOT_RESPONSE=$(curl -fsLS -X POST -H "Authorization: Bearer ${{ env.SLACKBOT_TOKEN }}" \
          -H 'Content-Type: application/json;charset=utf-8' \
          --data '{
            "channel": "${{ env.deploys_channel }}",
            "attachments": [{
              "title": "API ${{ needs.deploy-info.outputs.api-env }} deployment #${{ github.run_number }} was started\n${{ needs.deploy-info.outputs.subtitle }}",
              "color": "warning",
              "fields": [
                { "title": "started by", "value": "*${{ github.actor }}*", "short": true },
                { "title": "releasing", "value": "*${{ env.version }}*", "short": true },
                { "title": "commit details", "value": "*${{ env.commit_details }}*" }
              ]
            }]
          }' https://slack.com/api/chat.postMessage)


  extra-uat-deploy:
    if: contains(github.event.inputs.deployment_env, 'stage') && github.event.inputs.extraUatDeploy == 'true'
    name: (Stage) Extra UAT deploy
    needs: update-the-deploy-branch
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ needs.update-the-deploy-branch.outputs.commit_hash }}
      - name: Start a UAT deploy
        env:
          GITHUB_API: "https://api.github.com/repos/EOLWD/pfml"
          GITHUB_TOKEN: ${{ secrets.PFML_DEVOPS_TOKEN }}
          WORKFLOW_NAME: "api-deploy.yml"
        run: |
          echo "*** An API staging deploy is now in progress. Enqueuing an extra deployment to UAT... ***"
          curl -fLS -X POST "$GITHUB_API/actions/workflows/$WORKFLOW_NAME/dispatches" \
                        -H "Authorization: Bearer $GITHUB_TOKEN" \
                        -H "Accept: application/vnd.github.v3+json" \
                        -d '{ "ref": "${{ github.ref }}", "inputs": { "deployment_env": "uat", "version": "${{ env.version }}" } }'
          echo "Done."

  extra-performance-deploy:
    if: contains(github.event.inputs.deployment_env, 'stage') && github.event.inputs.extraPerformanceDeploy == 'true'
    name: (Stage) Extra Performance deploy
    needs: update-the-deploy-branch
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ needs.update-the-deploy-branch.outputs.commit_hash }}
      - name: Start a Perf deploy
        env:
          GITHUB_API: "https://api.github.com/repos/EOLWD/pfml"
          GITHUB_TOKEN: ${{ secrets.PFML_DEVOPS_TOKEN }}
          WORKFLOW_NAME: "api-deploy.yml"
        run: |
          echo "*** An API staging deploy is now in progress. Enqueuing an extra deployment to Performance... ***"
          curl -fLS -X POST "$GITHUB_API/actions/workflows/$WORKFLOW_NAME/dispatches" \
                        -H "Authorization: Bearer $GITHUB_TOKEN" \
                        -H "Accept: application/vnd.github.v3+json" \
                        -d '{ "ref": "${{ github.ref }}", "inputs": { "deployment_env": "performance", "version": "${{ env.version }}", "performLoadTest": "${{ github.event.inputs.performLoadTest }}" } }'
          echo "Done."

  api-build:
    name: Build docker image
    needs: update-the-deploy-branch
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ needs.update-the-deploy-branch.outputs.commit_hash }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PFML_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PFML_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ci-run-deploys
          role-duration-seconds: 3600

      - name: Check if the image exist in ECR
        id: ecr-check
        run: |
          make ecr-login
          aws ecr describe-images --repository-name=pfml-api --image-ids=imageTag=${{ needs.update-the-deploy-branch.outputs.commit_hash }} --region us-east-1
        continue-on-error: true
        working-directory: ${{ env.working-dir }}

      - name: Echo message
        if: steps.ecr-check.outcome == 'success'
        run: echo "Docker image already built; skipping rebuild."

      - name: Build and upload docker image artifact
        if: steps.ecr-check.outcome == 'failure'
        run: make build-and-publish
        working-directory: ${{ env.working-dir }}

  api-db-migrate-up:
    name: Run migrations
    runs-on: ubuntu-latest
    needs: [update-the-deploy-branch, api-build, deploy-info]

    env:
      TF_VAR_service_docker_tag: ${{ needs.update-the-deploy-branch.outputs.commit_hash }}

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ needs.update-the-deploy-branch.outputs.commit_hash }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PFML_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PFML_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ci-run-deploys
          role-duration-seconds: 3600

      - uses: hashicorp/setup-terraform@v1.2.1
        with:
          terraform_version: 0.14.7
          terraform_wrapper: false

      - name: Terraform Init
        id: terraform_init
        run: terraform init
        working-directory: ${{ env.terraform-ecs-tasks-dir }}/${{ needs.deploy-info.outputs.api-env }}

      - name: Terraform Plan with new docker image
        id: terraform_plan
        run: terraform plan -out=plan.tfplan
        working-directory: ${{ env.terraform-ecs-tasks-dir }}/${{ needs.deploy-info.outputs.api-env }}

      - name: Terraform Apply from execution plan
        id: terraform_apply
        run: terraform apply plan.tfplan
        working-directory: ${{ env.terraform-ecs-tasks-dir }}/${{ needs.deploy-info.outputs.api-env }}

      - name: Start migration ECS task
        run: make ecr-login && ../bin/run-ecs-task/run-task.sh ${{ needs.deploy-info.outputs.api-env }} db-migrate-up
        working-directory: ${{ env.working-dir }}
        env:
          # Clear out the invalid timeout setting when the run-task script runs terraform output.
          TF_CLI_ARGS: ''

  api-create-db-users:
    name: Create/update database users
    runs-on: ubuntu-latest
    needs: [update-the-deploy-branch, api-db-migrate-up, deploy-info]

    env:
      TF_VAR_service_docker_tag: ${{ needs.update-the-deploy-branch.outputs.commit_hash }}

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ needs.update-the-deploy-branch.outputs.commit_hash }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PFML_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PFML_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ci-run-deploys
          role-duration-seconds: 3600

      - uses: hashicorp/setup-terraform@v1.2.1
        with:
          terraform_version: 0.14.7
          terraform_wrapper: false

      - name: Terraform Init
        id: terraform_init
        run: terraform init
        working-directory: ${{ env.terraform-ecs-tasks-dir }}/${{ needs.deploy-info.outputs.api-env }}

      - name: Start DB user create ECS task
        run: make ecr-login && ../bin/run-ecs-task/run-task.sh ${{ needs.deploy-info.outputs.api-env }} db-admin-create-db-users
        working-directory: ${{ env.working-dir }}
        env:
          # Clear out the invalid timeout setting when the run-task script runs terraform output.
          TF_CLI_ARGS: ''

  api-release:
    name: Release
    runs-on: ubuntu-latest
    needs: [update-the-deploy-branch, api-db-migrate-up, deploy-info]

    env:
      TF_VAR_service_docker_tag: ${{ needs.update-the-deploy-branch.outputs.commit_hash }}
      TF_VAR_release_version: ${{ github.event.inputs.version || 'main' }}

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ needs.update-the-deploy-branch.outputs.commit_hash }}
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PFML_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PFML_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ci-run-deploys
          role-duration-seconds: 3600

      - uses: hashicorp/setup-terraform@v1.2.1
        with:
          terraform_version: ${{ env.terraform-version }}
          terraform_wrapper: false

      - name: Terraform Init
        id: terraform_init
        run: terraform init
        working-directory: ${{ env.terraform-api-dir }}/${{ needs.deploy-info.outputs.api-env }}

      - name: Terraform Plan with new docker image
        id: terraform_plan
        run: terraform plan -out=plan.tfplan
        working-directory: ${{ env.terraform-api-dir }}/${{ needs.deploy-info.outputs.api-env }}

      - name: Terraform Apply from execution plan
        id: terraform_apply
        run: terraform apply plan.tfplan
        working-directory: ${{ env.terraform-api-dir }}/${{ needs.deploy-info.outputs.api-env }}

      - name: Wait for stable ECS service
        env:
          # Clear out the invalid timeout args for terraform output
          TF_CLI_ARGS: ''
        run: |
          CLUSTER_ID=$(terraform output ecs_cluster_arn | sed s/\"//g | cut -d/ -f2)
          SVC_ID=$(terraform output ecs_service_id | sed s/\"//g | rev | cut -d/ -f1 | rev)

          # Wait for ECS service to be stable, and run it twice to allow for
          # abnormally long deploys (up to 20 minutes.)
          failures=0

          while [[ $failures -lt 2 ]]; do
            set +e -x
            result_msg=$(aws ecs wait services-stable --cluster $CLUSTER_ID --services $SVC_ID 2>&1)
            result_code=$?
            set -e +x

            if [[ ${result_code} -eq 0 ]]; then
              break
            elif [[ "${result_msg}" =~ "MISSING" ]]; then
              echo "ECS Cluster \"${CLUSTER_ID}\" or service \"${SVC_ID}\" does not exist"
              exit 1
            else
              failures=$((failures+=1))
            fi
          done

          if [[ $failures -ge 2 ]]; then
            echo "ECS service failed to stabilize within 20 minutes."
            echo "Please check the ECS service at https://console.aws.amazon.com/ecs/home?region=us-east-1#/clusters/${{ needs.deploy-info.outputs.api-env }}/services/pfml-api-${{ needs.deploy-info.outputs.api-env }}/events"
            echo "If the service stabilizes, you do not need to re-deploy. For lower environments you should run the E2E test job manually."
            echo
            echo "More info: https://lwd.atlassian.net/wiki/spaces/DD/pages/786694343/API+General+Runbook"
            exit 1
          fi

        working-directory: ${{ env.terraform-api-dir }}/${{ needs.deploy-info.outputs.api-env }}

  update-newrelic:
    name: Update New Relic
    runs-on: ubuntu-latest
    needs: [update-the-deploy-branch, api-release, deploy-info]

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PFML_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PFML_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ci-run-deploys
          role-duration-seconds: 3600

      - name: Pull the newrelic API key from parameter store
        uses: "marvinpinto/action-inject-ssm-secrets@latest"
        with:
          ssm_parameter: "/admin/pfml-api/newrelic-api-key"
          env_variable_name: "newrelic_api_key"

      - name: Create a deployment marker
        uses: newrelic/deployment-marker-action@v1
        env:
          prod: "868501894"
          performance: "980622863"
          test: "847219405"
          stage: "847267539"
          uat: "1114117515"
          training: "980608199"
          breakfix: "1298450359"
          cps-preview: "1386420590"
        with:
          apiKey: ${{ env.NEWRELIC_API_KEY }}
          accountId: "2837112"
          applicationId: ${{ env[needs.deploy-info.outputs.api-env] }}
          revision: ${{ env.version || needs.update-the-deploy-branch.outputs.commit_hash }}

  api-gateway-release:
    name: API Gateway Release
    runs-on: ubuntu-latest
    needs: [update-the-deploy-branch, api-db-migrate-up, deploy-info]

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ needs.update-the-deploy-branch.outputs.commit_hash }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PFML_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PFML_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ci-run-deploys
          role-duration-seconds: 3600

      - name: Terraform Init
        id: terraform_init
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.terraform-version }}
          tf_actions_subcommand: init
          tf_actions_comment: false
          tf_actions_working_dir: ${{ env.terraform-env-shared-dir }}/${{ needs.deploy-info.outputs.api-env }}

      - name: Terraform Plan with new docker image
        id: terraform_plan
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.terraform-version }}
          tf_actions_subcommand: plan
          tf_actions_comment: false
          tf_actions_working_dir: ${{ env.terraform-env-shared-dir }}/${{ needs.deploy-info.outputs.api-env }}
          args: "-out=plan.tfplan"

      - name: Terraform Apply from execution plan
        id: terraform_apply
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.terraform-version }}
          tf_actions_subcommand: apply
          tf_actions_comment: false
          tf_actions_working_dir: ${{ env.terraform-env-shared-dir }}/${{ needs.deploy-info.outputs.api-env }}
          args: "plan.tfplan"

      - name: Terraform Output
        id: terraform_output
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.terraform-version }}
          tf_actions_subcommand: output
          tf_actions_working_dir: ${{ env.terraform-env-shared-dir }}/${{ needs.deploy-info.outputs.api-env }}
        env:
        # Clear out the CLI args for terraform output
          TF_CLI_ARGS: ''

  postdeploy-info:
    name: Finalize deployment state
    needs: [api-release, api-gateway-release]
    if: always()
    runs-on: ubuntu-latest
    outputs:
      deploy-state: ${{ steps.deploy-state.outputs.deploy-state }}
    steps:
        # https://github.com/technote-space/workflow-conclusion-action
        # this action takes the "conclusion" status from jobs and compiles them together into an env variable with a rolled up status
      - uses: technote-space/workflow-conclusion-action@v2
      - name: Set deploy-state value
        id: deploy-state
        run: echo "::set-output name=deploy-state::${{ env.WORKFLOW_CONCLUSION }}"
  
  finish-comms-github:
    name: Finish deploy comms (GitHub)
    needs: [start-comms-github, deploy-info, postdeploy-info]
    runs-on: ubuntu-latest
    if: always() && needs.start-comms-github.result == 'success'
    steps:
      - uses: chrnorm/deployment-status@releases/v1
        with:
          token: ${{ github.token }}
          # This should match target_url in start-comms-github.
          # see: https://github.com/chrnorm/deployment-status/issues/13#issuecomment-734731491
          environment_url: ${{ needs.deploy-info.outputs.deployed-url }}
          state: ${{ needs.postdeploy-info.outputs.deploy-state }}
          deployment_id: ${{ needs.start-comms-github.outputs.deploy-id }}

      - name: Update release page
        uses: benc-uk/workflow-dispatch@v1
        if: ${{!contains(env.deployment_env, 'test')}}
        with:
          workflow: GH Pages deploy
          token: ${{ secrets.PFML_DEVOPS_TOKEN }}
          ref: main

  finish-comms-slack:
    name: Finish deploy comms (Slack)
    needs: [start-comms-slack, deploy-info, postdeploy-info]
    runs-on: ubuntu-latest
    outputs:
      message-ts: ${{ steps.post-to-slack.outputs.message-ts }}
    # Notifies if there's a failure on auto-deploys to test
    if: always() && 
      (
        (needs.start-comms-slack.result == 'success' && !contains(github.event.inputs.version || 'main', 'main')) ||
        (needs.postdeploy-info.outputs.deploy-state == 'timed_out' || needs.postdeploy-info.outputs.deploy-state == 'failure')
      )
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PFML_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PFML_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ci-run-deploys
          role-duration-seconds: 3600

      - name: Pull slackbot API token from SSM
        uses: "marvinpinto/action-inject-ssm-secrets@latest"
        with:
          ssm_parameter: "/admin/common/nava-slackbot-api-key"
          env_variable_name: "slackbot_token"

      - name: Choose Slackbot message
        id: choose_finish_message
        env:
          deployment_success: "API ${{ needs.deploy-info.outputs.api-env }} deployment #${{ github.run_number }} succeeded"
          deployment_failure: "API ${{ needs.deploy-info.outputs.api-env }} deployment #${{ github.run_number }} failed"
          deployment_cancelled: "API ${{ needs.deploy-info.outputs.api-env }} deployment #${{ github.run_number }} was cancelled"
        run: |
          if [[ ${{ needs.postdeploy-info.outputs.deploy-state }} == 'success' ]]; then
            echo "::set-output name=message::${{ env.deployment_success }}"
            echo "::set-output name=color::good"
          elif [[ ${{ needs.postdeploy-info.outputs.deploy-state }} == 'cancelled' ]]; then
            echo "::set-output name=message::${{ env.deployment_cancelled }}"
            echo "::set-output name=color::#35373b"
          elif [[ ${{ needs.postdeploy-info.outputs.deploy-state }} == 'skipped' ]]; then
            echo "::set-output name=message::${{ env.deployment_cancelled }}"
            echo "::set-output name=color::#35373b"
          elif [[ ${{ needs.postdeploy-info.outputs.deploy-state }} == 'neutral' ]]; then
            echo "::set-output name=message::${{ env.deployment_cancelled }}"
            echo "::set-output name=color::#35373b"
          elif [[ ${{ needs.postdeploy-info.outputs.deploy-state }} == 'timed_out' ]]; then
            echo "::set-output name=message::${{ env.deployment_failure }}"
            echo "::set-output name=color::danger"
          elif [[ ${{ needs.postdeploy-info.outputs.deploy-state }} == 'failure' ]]; then
            echo "::set-output name=message::${{ env.deployment_failure }}"
            echo "::set-output name=color::danger"
          else
            echo "::set-output name=message::${{ env.deployment_failure }}"
            echo "::set-output name=color::#2767cf"
          fi

      - name: Post to Slack
        id: post-to-slack
        run: |
          SLACKBOT_RESPONSE=$(curl -fsLS -X POST -H "Authorization: Bearer ${{ env.SLACKBOT_TOKEN }}" \
          -H 'Content-Type: application/json;charset=utf-8' \
          --data '{
            "channel": "${{ env.deploys_channel }}",
            "attachments": [{
              "title": "${{ steps.choose_finish_message.outputs.message }}\n${{ needs.deploy-info.outputs.subtitle }}",
              "color": "${{ steps.choose_finish_message.outputs.color }}",
              "fields": [
                { "title": "started by", "value": "`${{ github.actor }}`", "short": true },
                { "title": "released", "value": "`${{ env.version }}`", "short": true },
              ]
            }]
          }' https://slack.com/api/chat.postMessage)

          MESSAGE_TS=$(echo $SLACKBOT_RESPONSE | jq -r '.ts')
          echo $MESSAGE_TS
          echo "::set-output name=message-ts::$MESSAGE_TS"

  end-to-end:
    name: End-to-End Test Deployment
    runs-on: ubuntu-latest
    needs: [update-the-deploy-branch, api-release, api-gateway-release]
    if: github.event.inputs.deployment_env != 'prod' && github.event.inputs.deployment_env != 'uat'
    steps:
      - name: Trigger E2E Workflow
        uses: aurelien-baudet/workflow-dispatch@v2
        with:
          workflow: e2e-cypress.yml
          token: ${{ secrets.PFML_DEVOPS_TOKEN }}
          wait-for-completion: true
          ref: "main"
          inputs: |
            {
              "target_environment": ${{ toJSON(env.deployment_env) }},
              "cypress_tags": "Deploy,Deploy-API",
              "only_stable": "${{ env.deployment_env == 'test' && 'false' || 'true' }}",
              "title_override": ${{ toJSON(format('API Deploy: {0} to {1}', env.version, env.deployment_env)) }}
            }

  load-test:
    name: "Trigger Load Testing"
    runs-on: ubuntu-latest
    # We allow load testing to be triggered at the same time as E2E tests. Load testing and E2E testing share a
    # concurrency key, so they are guaranteed not to run concurrently.
    needs: [ update-the-deploy-branch, api-release, api-gateway-release ]
    if: github.event.inputs.deployment_env == 'performance' && github.event.inputs.performLoadTest == 'true'
    steps:
      - name: Trigger LST run with Base preset on Flood
        uses: aurelien-baudet/workflow-dispatch@v2
        with:
          workflow: e2e-flood.yml
          token: ${{ secrets.PFML_DEVOPS_TOKEN }}
          wait-for-completion: false
          ref: main
          inputs: |
            {
              "target_environment": "performance",
              "preset": "base",
            }

  post-e2e-failures-to-slack:
    name: Post E2E failures to Slack
    needs: [finish-comms-slack, end-to-end]
    # Run if the E2E tests failed or timed out. Applies to any environment that runs E2E tests.
    if: always() &&
        (needs.end-to-end.result == 'failure' || needs.end-to-end.result == 'timed_out')
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PFML_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PFML_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ci-run-deploys
          role-duration-seconds: 3600

      - name: Pull slackbot API token from SSM
        uses: "marvinpinto/action-inject-ssm-secrets@latest"
        with:
          ssm_parameter: "/admin/common/nava-slackbot-api-key"
          env_variable_name: "slackbot_token"

      - name: Post to Slack
        run: |
          echo "Slackbot message reply TS is ${{ needs.finish-comms-slack.outputs.message-ts }}"
          
          SLACKBOT_RESPONSE=$(curl -fsLS -X POST -H "Authorization: Bearer ${{ env.SLACKBOT_TOKEN }}" \
          -H 'Content-Type: application/json;charset=utf-8' \
          --data '{
            "channel": "${{ env.deploys_channel }}",
            "thread_ts": "${{ needs.finish-comms-slack.outputs.message-ts }}",
            "attachments": [{
              "title": "E2E Test failed in ${{ github.event.inputs.deployment_env || 'test' }} (<${{ env.workflow_self_link }}|build logs>)",
              "color": "danger"
            }]
          }' https://slack.com/api/chat.postMessage)
