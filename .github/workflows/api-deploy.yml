# This workflow deploys application changes to our AWS environments.
#
# Deploy steps:
# - Build a docker release image and upload it to ECR, tagged with its latest git commit hash.
# - Apply the terraform changes, pointing it to the docker image that was uploaded.
#
name: API CI Deploy

on:
  push:
    branches:
      - master
      - deploy/api/stage
      - deploy/api/prod
    paths:
      - api/**
      - infra/api/template/**
      - infra/api/environments/test/**

env:
  working-dir: ./api
  terraform-dir: ./infra/api/environments
  terraform-version: 0.12.24
  python-version: 3.8.2

  # Create a mapping of branches to environment names.
  #
  # The api-env step will grab the env name using github.ref, which
  # will be the branch or tag reference that triggered this Github Actions workflow.
  #
  # We could specify this directly in the bash script below, but this will be cleaner
  # to add and change items since bash doesn't have hashmaps/dicts.
  refs/heads/master: test
  refs/heads/deploy/api/stage: stage
  refs/heads/deploy/api/prod: prod

jobs:
  api-build:
    name: Build docker image
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PFML_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PFML_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ci-run-deploys
          role-duration-seconds: 3600

      - name: Build and upload docker image artifact
        run: make release
        working-directory: ${{ env.working-dir }}

  dor-import-build:
    name: Build lambda function for DOR import
    runs-on: ubuntu-latest
    env:
      infra-working-dir: ./api/import_infra/dor
    outputs:
      s3_key: ${{ steps.get_s3_key.outputs.s3_key }}
      dependencies_s3_key: ${{ steps.get_dependencies_s3_key.outputs.dependencies_s3_key }}

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: ${{ env.python-version }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PFML_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PFML_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ci-run-deploys
          role-duration-seconds: 3600

      - name: Install API Package Dependencies
        run: pip install wheel setuptools poetry
        working-directory:  ${{ env.working-dir }}

      - name: Build API package
        run: poetry build
        working-directory:  ${{ env.working-dir }}

      - name: Install Lambda CLI Dependencies
        run: pip install setuptools awscli aws-sam-cli
        working-directory:  ${{ env.infra-working-dir }}

      - name: Lambda Build, Package and Upload to S3
        run: make upload-release
        working-directory:  ${{ env.infra-working-dir }}

      - name: Get Package S3 Key
        id: get_s3_key
        run: echo "::set-output name=s3_key::$(python3 get-lambda-build.py)"
        working-directory:  ${{ env.infra-working-dir }}

      - name: Get Dependencies S3 Key
        id: get_dependencies_s3_key
        run: echo "::set-output name=dependencies_s3_key::$(python3 get-lambda-dependencies.py)"
        working-directory:  ${{ env.infra-working-dir }}

  api-release:
    name: Release
    runs-on: ubuntu-latest
    needs: [api-build, dor-import-build]

    env:
      TF_VAR_service_docker_tag: ${{ github.sha }}
      TF_VAR_dor_lambda_artifact_s3_key: ${{ needs.dor-import-build.outputs.s3_key }}
      TF_VAR_dor_import_lambda_dependencies_s3_key: ${{ needs.dor-import-build.outputs.dependencies_s3_key }}

    steps:
      - uses: actions/checkout@v2

      # Map the github.ref (the branch or tag that triggered the workflow) to an environment name.
      #   e.g refs/heads/master or refs/heads/deploy/api/stage
      #
      # For more info, see:
      # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#github-context
      - name: Set api-env Value
        run: echo "::set-env name=api-env::${{ env[github.ref] }}"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PFML_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PFML_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ci-run-deploys
          role-duration-seconds: 3600

      - name: Terraform Init
        id: terraform_init
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.terraform-version }}
          tf_actions_subcommand: init
          tf_actions_comment: false
          tf_actions_working_dir: ${{ env.terraform-dir }}/${{ env.api-env }}

      - name: Terraform Plan with new docker image
        id: terraform_plan
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.terraform-version }}
          tf_actions_subcommand: plan
          tf_actions_comment: false
          tf_actions_working_dir: ${{ env.terraform-dir }}/${{ env.api-env }}
          args: '-out=plan.tfplan'

      - name: Terraform Apply from execution plan
        id: terraform_apply
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.terraform-version }}
          tf_actions_subcommand: apply
          tf_actions_comment: false
          tf_actions_working_dir: ${{ env.terraform-dir }}/${{ env.api-env }}
          args: 'plan.tfplan'

  api-db-migrate-up:
    name: Run migrations
    runs-on: ubuntu-latest
    needs: api-release

    steps:
      - uses: actions/checkout@v2

      - name: Set api-env Value
        run: echo "::set-env name=api-env::${{ env[github.ref] }}"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PFML_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PFML_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ci-run-deploys
          role-duration-seconds: 3600

      # Initialize terraform config since we use the tfstate outputs
      # for launching an ECS task.
      - name: Terraform Init
        id: terraform_init
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.terraform-version }}
          tf_actions_subcommand: init
          tf_actions_comment: false
          tf_actions_working_dir: ${{ env.terraform-dir }}/${{ env.api-env }}

      - name: Start migration ECS task
        run: make ecr-login && ../bin/api-migrate/migrate.sh ${{ env.api-env }}
        working-directory: ${{ env.working-dir }}
