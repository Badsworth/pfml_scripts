# This workflow deploys application changes to our AWS environments.
#
# Deploy steps:
# - Build a docker release image and upload it to ECR, tagged with its latest git commit hash.
# - Apply the terraform changes, pointing it to the docker image that was uploaded.
##
name: API CI Deploy

on:
  workflow_dispatch:
    inputs:
      deployment_env:
        required: true
        default: "test"
        description: |
          üõë DO NOT CHANGE THE DROPDOWN ABOVE FOR THE WORKFLOW. KEEP IT ON "main" BRANCH.     
          --------------------------------------
          ‚¨áÔ∏è Environment to be deployed.
            (test, performance, stage, training, uat, prod, breakfix, cps-preview).
      version:
        required: true
        default: "main"
        description: |
          --------------------------------------
          ‚¨áÔ∏è Tag or branch to be deployed.
      extraUatDeploy:
        required: false
        default: "true"
        description: |
          --------------------------------------
          ‚¨áÔ∏è (For staging deploys only) Also deploy the above version to UAT?
      extraPerformanceDeploy:
        required: false
        default: "true"
        description: |
          --------------------------------------
          ‚¨áÔ∏è (Also for staging deploys only) Also deploy the above version to Performance?
  push:
    branches:
      - main
    paths:
      - api/**
      - infra/api/**
      - infra/ecs-tasks/**
      - infra/env-shared/**

env:
  github_api: "https://api.github.com/repos/EOLWD/pfml"
  workflow_self_link: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
  version: ${{ github.event.inputs.version || 'main' }}
  deployment_env: ${{ github.event.inputs.deployment_env || 'test' }}
  deploys_channel: "C01HEAJPE76" #mass-pfml-deploys-shared
  working-dir: ./api
  terraform-api-dir: ./infra/api/environments
  terraform-env-shared-dir: ./infra/env-shared/environments
  terraform-ecs-tasks-dir: ./infra/ecs-tasks/environments
  terraform-version: 0.14.7
  python-version: 3.8

  # Set a timeout of two minutes for all terraform commands in the workflow
  # to account for parallel jobs working in the same environment with the same
  # terraform state files.
  TF_CLI_ARGS: '-lock-timeout=120s'

jobs:
  prod-check:
    # run if environment is production
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PFML_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PFML_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ci-run-deploys
          role-duration-seconds: 3600

      - uses: hashicorp/setup-terraform@v1.2.1
        with:
          terraform_version: ${{ env.terraform-version }}
          terraform_wrapper: false

      - name: Wait for stable ECS service
        env:
          # Clear out the invalid timeout args for terraform output
          TF_CLI_ARGS: ''
        run: |
          terraform init
          CLUSTER_ID=$(terraform output ecs_cluster_arn | sed s/\"//g | cut -d/ -f2)
          SVC_ID=$(terraform output ecs_service_id | sed s/\"//g | cut -d/ -f2)

          # Wait for ECS service to be stable, and run it twice to allow for
          # abnormally long deploys (up to 20 minutes.)
          failures=0

          while [[ $failures -lt 2 ]]; do
            set +e -x
            if [[ $failures -eq 1 ]]; then
              result_msg=$(aws ecs wait services-stable --cluster $CLUSTER_ID --services $SVC_ID)
            else
              result_msg=$({ echo "Something something something aoeigjaiow MISSINGfigoegowh o weigoj \niowe gioe"; exit 1; })
            fi
            result_code=$?
            set -e +x

            if [[ ${result_code} -eq 0 ]]; then
              break
            elif [[ "${result_msg}" =~ "MISSING" ]]; then
              # This happens sometimes when the script runs too quickly after terraform apply.
              # Sleep for a little bit and try again without considering it a retry.
              echo "Sleeping for 5 seconds"
              sleep 5
            else
              ((failures++))
            fi
          done

          if [[ $failures -ge 2 ]]; then
            echo "ECS service failed to stabilize within 20 minutes."
            echo "Please check the ECS service at https://console.aws.amazon.com/ecs/home?region=us-east-1#/clusters/test/services/pfml-api-test/events"
            echo "If the service stabilizes, you do not need to re-deploy. For lower environments you should run the E2E test job manually."
            echo
            echo "More info: https://lwd.atlassian.net/wiki/spaces/DD/pages/786694343/API+General+Runbook"
            exit 1
          fi

        working-directory: ${{ env.terraform-api-dir }}/test
