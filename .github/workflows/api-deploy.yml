# This workflow deploys application changes to our AWS environments.
#
# Deploy steps:
# - Build a docker release image and upload it to ECR, tagged with its latest git commit hash.
# - Apply the terraform changes, pointing it to the docker image that was uploaded.
# 
name: API CI Deploy

on:
  push:
    branches:
      - master
      - deploy/api/stage
    paths:
      - api/**
      - infra/api/template/**
      - infra/api/environments/test/**

env:
  working-dir: ./api
  terraform-version: 0.12.24

jobs:
  api-build:
    name: Build docker image
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PFML_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PFML_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ci-run-deploys
          role-duration-seconds: 3600

      - name: Build and upload docker image artifact
        run: make release
        working-directory: ${{ env.working-dir }}

  api-release:
    name: Release
    runs-on: ubuntu-latest
    needs: api-build

    env:
      terraform-dir: ./infra/api/environments
      TF_VAR_service_docker_tag: ${{ github.sha }}

      # Create a mapping of branches to environment names.
      #
      # The api-env step will grab the env name using github.ref, which
      # will be the branch or tag reference that triggered this Github Actions workflow.
      #
      # We could specify this directly in the bash script below, but this will be cleaner
      # to add and change items since bash doesn't have hashmaps/dicts.
      refs/heads/master: test
      refs/heads/deploy/api/stage: stage
      refs/heads/deploy/api/prod: prod

    steps:
      - uses: actions/checkout@v2

      # Map the github.ref (the branch or tag that triggered the workflow) to an environment name.
      #   e.g refs/heads/master or refs/heads/deploy/api/stage
      #
      # For more info, see:
      # https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#github-context
      - name: Set api-env Value
        run: echo "::set-env name=api-env::${{ env[github.ref] }}"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PFML_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PFML_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ci-run-deploys
          role-duration-seconds: 3600

      - name: Terraform Init
        id: terraform_init
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.terraform-version }}
          tf_actions_subcommand: init
          tf_actions_comment: false
          tf_actions_working_dir: ${{ env.terraform-dir }}/${{ env.api-env }}

      - name: Terraform Plan with new docker image
        id: terraform_plan
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.terraform-version }}
          tf_actions_subcommand: plan
          tf_actions_comment: false
          tf_actions_working_dir: ${{ env.terraform-dir }}/${{ env.api-env }}
          args: '-out=plan.tfplan'

      - name: Terraform Apply from execution plan
        id: terraform_apply
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.terraform-version }}
          tf_actions_subcommand: apply
          tf_actions_comment: false
          tf_actions_working_dir: ${{ env.terraform-dir }}/${{ env.api-env }}
          args: 'plan.tfplan'
