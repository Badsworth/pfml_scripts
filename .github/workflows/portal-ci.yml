# Run tests and linting for the Portal
#
name: Portal CI

on:
  push:
    branches:
      - main
    paths:
      - portal/**
      - .github/workflows/portal-ci.yml
  pull_request:
    paths:
      - portal/**
      - .github/workflows/portal-ci.yml

concurrency:
  group: ${{ github.head_ref }}-ci
  cancel-in-progress: true

env:
  nodeVersion: 16.x
  deploys_channel: "C01HEAJPE76" #mass-pfml-deploys-shared
  working-dir: ./portal
  cache-package-lock: ./portal/package-lock.json
  workflow_self_link: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          cache: 'npm'
          cache-dependency-path: ${{ env.cache-package-lock }}
          node-version: ${{ env.nodeVersion }}

      - name: install
        run: npm ci --audit false
        working-directory: ${{ env.working-dir }}

      - name: format-check
        run: npm run format-check
        working-directory: ${{ env.working-dir }}
      - name: if format-check fails
        if: ${{ failure() }}
        run: echo "::warning file=portal/package.json,line=1,col=1::Make sure you have the latest version of Prettier setup locally. You can also trigger Prettier by commenting on the PR with '/gh portal format' as the body."

      - name: lint
        run: npm run lint:ci
        working-directory: ${{ env.working-dir }}

  type-check:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          cache: 'npm'
          cache-dependency-path: ${{ env.cache-package-lock }}
          node-version: ${{ env.nodeVersion }}

      - name: install
        run: npm ci --audit false
        working-directory: ${{ env.working-dir }}

      - name: TypeScript
        run: npm run ts:check
        working-directory: ${{ env.working-dir }}

  test-src:
    name: Test src
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          cache: 'npm'
          cache-dependency-path: ${{ env.cache-package-lock }}
          node-version: ${{ env.nodeVersion }}

      - name: install
        run: npm ci --audit false
        working-directory: ${{ env.working-dir }}

      - name: test (src)
        run: npm run test:ci:src
        working-directory: ${{ env.working-dir }}

      - name: Coveralls
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: "./portal/coverage/lcov.info"
          base-path: "./portal"

  test-storybook:
    name: Test stories
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          cache: "npm"
          cache-dependency-path: ${{ env.cache-package-lock }}
          node-version: ${{ env.nodeVersion }}

      - name: install
        run: npm ci --audit false
        working-directory: ${{ env.working-dir }}

      - name: test (storybook)
        run: npm run test:ci:storybook
        working-directory: ${{ env.working-dir }}

  get-test-state:
    name: Finalize test state
    needs: [lint, type-check, test-src, test-storybook]
    if: always() && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    outputs:
      test-state: ${{ steps.test-state.outputs.test-state }}
    steps:
        # https://github.com/technote-space/workflow-conclusion-action
        # this action takes the "conclusion" status from jobs and compiles them together into an env variable with a rolled up status
      - uses: technote-space/workflow-conclusion-action@v2
      - name: Set test-state value
        id: test-state
        run: echo "::set-output name=test-state::${{ env.WORKFLOW_CONCLUSION }}"

  post-to-teams:
    name: post failures to teams
    needs: [get-test-state]
    if: always() && (needs.get-test-state.outputs.test-state == 'failure' || needs.get-test-state.outputs.test-state == 'timed_out')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PFML_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PFML_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ci-run-deploys
          role-duration-seconds: 3600

      - name: Pull teams uri from SSM
        uses: "marvinpinto/action-inject-ssm-secrets@latest"
        with:
          ssm_parameter: "/admin/common/teams-deploy-uri"
          env_variable_name: "teams_uri"

      - name: Post to Teams
        run: |
          RESPONSE=$(curl -fsLS -X POST ${{ env.TEAMS_URI }} \
          --header 'Content-Type: application/json' \
          --data '{   
            "@type": "MessageCard",
            "themeColor": "2986CC",
            "title": "Portal Tests Failed",
            "text": "Portal tests failed in main [build logs](${{ env.workflow_self_link }})"
            }'
          )
