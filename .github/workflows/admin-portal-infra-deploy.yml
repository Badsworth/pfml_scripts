
# ----------------------------------------------------------------------------------------------------------------------------- #
# Workflow that triggers an automated code deployment of the infra/admin-portal/* directories                                   #
# Anytime a branch is merged to main or one of the numerous "deploy/admin-portal/<env>" this workflow kicks off a deployment    #
# This workflow (once merged to main) can be ran manually from the GH Actions UI with configurable inputs                       #
# ----------------------------------------------------------------------------------------------------------------------------- #

name: Admin Portal Infra Deploy

on:
  workflow_dispatch:
    inputs:
      deployment_env:
        required: true
        default: "infra-test"
        description: |
          🛑 The above value dictates which env's workflow to use. Default is main's workflows.     
          --------------------------------------
          ⬇️ Environment to be deployed.
            (test, performance, stage, training, uat, prod, breakfix, cps-preview).
      version:
        required: true
        default: "main"
        description: |
          --------------------------------------
          ⬇️ Tag or branch to be deployed.

  push:
    branches:
      # - main
      - bdlake/INFRA-821
    # paths:
    #   - infra/admin-portal/**

env:
  github_api: "https://api.github.com/repos/EOLWD/pfml"
  workflow_self_link: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
  version: ${{ github.event.inputs.version || 'main' }}
  deployment_env: ${{ github.event.inputs.deployment_env || 'infra-test' }}
  deploys_channel: "C01PADH2BJ8" # massgov-pfml-teamx
  nodeVersion: 15.x
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  terraformVersion: 0.14.7
  terraformBaseDir: ./infra/admin-portal/environments/

jobs:

  prod-check:
    # run if environment is production
    runs-on: ubuntu-latest
    steps:
      - name: check users
        if: contains(env.deployment_env, 'prod')
        id: get_teams
        env:
          GITHUB_TOKEN: ${{ secrets.PFML_DEVOPS_TOKEN }}
        uses: octokit/graphql-action@v2.x
        with:
          query: |
            query {
              organization(login:"EOLWD"){
                team(slug:"pfml-devops"){
                  members(membership: ALL, query:"${{ github.actor }}"){
                    nodes {
                      login
                    }
                  }
                }
              }
            }

      - name: fail if not a member
        if: contains(env.deployment_env, 'prod') && contains('', fromJSON(steps.get_teams.outputs.data).organization.team.members.nodes[0])
        run: |
          echo "Not part of pfml-devops, cancelling workflow"
          exit 1

  update-the-deploy-branch:
    name: Update archival branch
    needs: prod-check
    runs-on: ubuntu-latest

    outputs:
      commit_hash: ${{ steps.calculate_commit_hash.outputs.commit_hash }}

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Calculate commit hash
        id: calculate_commit_hash
        run: |
          if commit_hash=$(git rev-parse origin/${{env.version}} 2>/dev/null); then
            echo "Received branch"
          else
            commit_hash=$(git rev-parse ${{env.version}})
            echo "Received tag"
          fi

          if [[ -z $commit_hash ]]; then
            echo "💣 No valid commit hash could be found in Git for the provided branch or tag '${{env.version}}'. This deploy can't proceed."
            exit 1
          fi

          echo "::set-output name=commit_hash::$commit_hash"

      - name: Commit and push new code to archival branch
        if: "!contains(env.deployment_env, 'test')"
        run: |
          git config user.name "PFMLDevOps"
          git config user.email "68565627+PFMLDevOps@users.noreply.github.com"
          branch=deploy/admin-portal/${{env.deployment_env}}
          echo "about to commit ${{steps.calculate_commit_hash.outputs.commit_hash}} to $branch..."
          git checkout $branch
          git reset --hard ${{steps.calculate_commit_hash.outputs.commit_hash}}
          git push -f origin HEAD

  deploy-info:
    name: Gather deploy info
    needs: update-the-deploy-branch
    runs-on: ubuntu-latest
    outputs:
      admin-portal-env: ${{ steps.admin-portal-env.outputs.admin-portal-env }}
      deployed-url: ${{ steps.deployed-url.outputs.deployed-url }}
    steps:
      - name: Set admin-portal-env value
        id: admin-portal-env
        run: |
          echo "::set-output name=admin-portal-env::${{ env.deployment_env || 'test' }}"

      - name: Set deployed-url value
        id: deployed-url
        # steps cannot refer to an output from a previous step in the same job, so admin-portal-env has to be calculated again
        run: |
          if [[ "${{ env.deployment_env || 'test' }}" == 'prod' ]]; then
            echo "::set-output name=deployed-url::https://paidleave-admin.eol.mass.gov/"
          else
            echo "::set-output name=deployed-url::https://paidleave-admin-${{ env.deployment_env || 'test' }}.eol.mass.gov/"
          fi

  start-comms-github:
    name: Start deploy comms (GitHub)
    needs: [update-the-deploy-branch, deploy-info]
    runs-on: ubuntu-latest
    outputs:
      deploy-id: ${{ steps.create-deployment.outputs.deployment_id }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: chrnorm/deployment-action@releases/v1
        name: Create GitHub deployment
        id: create-deployment
        with:
          # NOTE: If you are intending for this GitHub deployment to trigger another
          #       workflow that's listening for on: [deployment], you need to update this
          #       to secrets.PFML_DEVOPS_TOKEN (same for the update step at the end.)
          #
          #       This is intentionally using the github.token right now to avoid unintended
          #       side-effects from happening off of the automated deployments.
          #
          token: "${{ github.token }}"
          target_url: ${{ needs.deploy-info.outputs.deployed-url }}
          environment: "Admin Portal (${{ needs.deploy-info.outputs.admin-portal-env }})"
          ref: ${{ needs.update-the-deploy-branch.outputs.commit_hash }}

  release:
    name: Release
    runs-on: ubuntu-latest
    env:
      TF_VAR_cloudfront_origin_path: /${{ needs.update-the-deploy-branch.outputs.commit_hash }}
      TF_CLI_ARGS: '-lock-timeout=120s'

    steps:
      - uses: actions/checkout@v2

      - name: Set admin_portal_env Value
        # see https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#github-context
        # github.ref will give the branch or tag reference that triggered the workflow
        # e.g refs/heads/main or refs/heads/deploy/admin-portal/stage
        run: |
          echo "admin_portal_env=${{ env[github.ref] || 'infra-test' }}" >> $GITHUB_ENV
          echo "CF Origin Path = ${{ env.TF_VAR_cloudfront_origin_path }}"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PFML_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PFML_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-duration-seconds: 3600
          role-to-assume: ci-run-deploys

      - uses: hashicorp/setup-terraform@v1.2.1
        with:
          terraform_version: ${{ env.terraformVersion }}
          terraform_wrapper: false

      - name: Terraform Init
        id: terraform_init
        run: terraform init
        working-directory: ${{ env.terraformBaseDir }}${{ env.admin_portal_env }}

      - name: Terraform Plan
        id: terraform_plan
        run: terraform plan -out=plan.tfplan
        working-directory: ${{ env.terraformBaseDir }}${{ env.admin_portal_env }}

      - name: Terraform Apply from execution plan
        id: terraform_apply
        run: terraform apply plan.tfplan
        working-directory: ${{ env.terraformBaseDir }}${{ env.admin_portal_env }}

  # end-to-end:
  #   name: End-to-End Test Deployment
  #   runs-on: ubuntu-latest
  #   needs: [ release ]
  #   if: github.ref != 'refs/heads/deploy/admin-portal/prod'
  #   steps:
  #     - name: Trigger E2E Workflow
  #       uses: aurelien-baudet/workflow-dispatch@v2
  #       with:
  #         workflow: e2e-cypress.yml
  #         token: ${{ secrets.PFML_DEVOPS_TOKEN }}
  #         wait-for-completion: true
  #         ref: "main"
  #         inputs: |
  #           {
  #             "target_environment": ${{ toJSON(env[github.ref] || 'test') }},
  #             "cypress_tags": "Deploy,Deploy-Infra",
  #             "run_unstable": "${{ (env[github.ref] || 'test') != 'test' && 'false' || 'true' }}",
  #             "run_nightly": "false",
  #             "title_override": ${{ toJSON(format('Infra Deploy: {0} to {1}', env.version, (env[github.ref] || 'test'))) }}
  #           }
