# Build and deploy the Portal's Storybook documentation so non-engineers can view it
# Similar to portal-deploy.yml except without the Cloudfront dependency
#
name: Portal Storybook Deploy

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - "portal/**"
      - "!portal/__mocks__/**"
      - "!portal/tests/**"

env:
  nodeVersion: 16.x
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  terraformVersion: 0.14.7
  terraformBaseDir: ./infra/portal/environments/
  # Map branch name to environment name. This is used to set the portal_env variable below in combination with git refs.
  refs/heads/main: test
  portal_env: test
  workflow_self_link: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set portal_env Value
        # see https://help.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#github-context
        # github.ref will give the branch or tag reference that triggered the workflow
        # e.g refs/heads/main or refs/heads/deploy/portal/stage
        run: echo "portal_env=${{ env[github.ref] || 'test' }}" >> $GITHUB_ENV

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PFML_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PFML_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-duration-seconds: 3600
          role-to-assume: ci-run-deploys

      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.nodeVersion }}

      - name: Install
        run: npm ci --prefix portal

      - name: Build
        run: npm run docs:build --prefix portal

      - name: Sync S3 Bucket
        env:
          BUCKET_NAME: massgov-pfml-${{ env.portal_env }}-storybook-builds
          OUTPUT_DIR: ./portal/out-storybook
        run: |
          aws s3 sync $OUTPUT_DIR s3://$BUCKET_NAME/ --exclude "*.html" --cache-control max-age=31536000,public &&
          aws s3 sync $OUTPUT_DIR s3://$BUCKET_NAME/ --exclude "*" --include "*.html" --cache-control s-maxage=86400,max-age=0,must-revalidate

  invalidate-cloudfront:
    name: Invalidate Cloudfront Cache
    runs-on: ubuntu-latest
    needs: deploy
    env:
      TF_CLI_ARGS: '-lock-timeout=120s'

    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PFML_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PFML_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-duration-seconds: 3600
          role-to-assume: ci-run-deploys

      - uses: hashicorp/setup-terraform@v1.2.1
        with:
          terraform_version: ${{ env.terraformVersion }}
          terraform_wrapper: true

      - name: Terraform Init
        id: terraform_init
        run: terraform init
        working-directory: ${{ env.terraformBaseDir }}${{ env.portal_env }}

      - name: Terraform Output
        id: terraform
        run: terraform output -json
        working-directory: ${{ env.terraformBaseDir }}${{ env.portal_env }}
        env:
          TF_CLI_ARGS: ''

      - name: Invalidate old Cloudfront cache
        env:
          TF_OUTPUT: ${{ steps.terraform.outputs.stdout }}
        run: |
          DISTRIBUTION_ID=$(echo $TF_OUTPUT | jq -r '.storybook_cloudfront_distribution_id.value')
          aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"

  post-to-teams:
    needs: deploy
    if: failure()
    name: Post to Teams if deploy failed
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PFML_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PFML_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ci-run-deploys
          role-duration-seconds: 3600

      - name: Pull teams uri from SSM
        uses: "marvinpinto/action-inject-ssm-secrets@latest"
        with:
          ssm_parameter: "/admin/common/teams-deploy-uri"
          env_variable_name: "teams_uri"

      - name: Post to Teams
        run: |
          RESPONSE=$(curl -fsLS -X POST ${{ env.TEAMS_URI }} \
          --header 'Content-Type: application/json' \
          --data '{
            "@type": "MessageCard",
            "themeColor": "FF0000",
            "title": "Failed to deploy Storybook",
            "text": "ðŸ“š Storybook deploy #${{ github.run_number }} failed: ${{ env.workflow_self_link }}",
            "sections": [{}]
            }'
          )
