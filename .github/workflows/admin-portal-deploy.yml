# Build and export the Paid Leave static website, and deploy to S3/Cloudfront
#
name: Admin Portal deploy

on:
  workflow_dispatch:
    inputs:
      deployment_env:
        required: true
        default: "test"
        description: |
          🛑 DO NOT CHANGE THE DROPDOWN ABOVE FOR THE WORKFLOW. KEEP IT ON "main" BRANCH.                         
          --------------------------------------                                                                     
          ⬇️ Environment to be deployed.
            (test, prod)
      version:
        required: true
        default: "main"
        description: |
          --------------------------------------
          ⬇️ Tag or branch to be deployed.
  push:
    branches:
      - main
    paths:
      - "admin/**"
      - "!admin/__mocks__/**"
      - "!admin/storybook/**"
      - "!admin/tests/**"

env:
  github_api: "https://api.github.com/repos/EOLWD/pfml"
  workflow_self_link: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
  version: ${{ github.event.inputs.version || 'main' }}
  deployment_env: ${{ github.event.inputs.deployment_env || 'test' }}
  deploys_channel: "C01PADH2BJ8" # massgov-pfml-teamx
  nodeVersion: 15.x
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  terraformVersion: 0.14.7
  terraformBaseDir: ./infra/admin-portal/environments/

jobs:
  prod-check:
    # run if environment is production
    runs-on: ubuntu-latest
    steps:
      - name: check users
        if: contains(env.deployment_env, 'prod')
        id: get_teams
        env:
          GITHUB_TOKEN: ${{ secrets.PFML_DEVOPS_TOKEN }}
        uses: octokit/graphql-action@v2.x
        with:
          query: |
            query {
              organization(login:"EOLWD"){
                team(slug:"pfml-devops"){
                  members(membership: ALL, query:"${{ github.actor }}"){
                    nodes {
                      login
                    }
                  }
                }
              }
            }

      - name: fail if not a member
        if: contains(env.deployment_env, 'prod') && contains('', fromJSON(steps.get_teams.outputs.data).organization.team.members.nodes[0])
        run: |
          echo "Not part of pfml-devops, cancelling workflow"
          exit 1

  update-the-deploy-branch:
    name: Update archival branch
    needs: prod-check
    runs-on: ubuntu-latest

    outputs:
      commit_hash: ${{ steps.calculate_commit_hash.outputs.commit_hash }}

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Calculate commit hash
        id: calculate_commit_hash
        run: |
          if commit_hash=$(git rev-parse origin/${{env.version}} 2>/dev/null); then
            echo "Received branch"
          else
            commit_hash=$(git rev-parse ${{env.version}})
            echo "Received tag"
          fi
          
          if [[ -z $commit_hash ]]; then
            echo "💣 No valid commit hash could be found in Git for the provided branch or tag '${{env.version}}'. This deploy can't proceed."
            exit 1
          fi
       
          echo "::set-output name=commit_hash::$commit_hash"
          
      - name: Commit and push new code to archival branch # TBD do we need to replace the user here?
        if: "!contains(env.deployment_env, 'test')"
        run: |
          git config user.name "PFMLDevOps"
          git config user.email "68565627+PFMLDevOps@users.noreply.github.com"
          branch=deploy/admin-portal/${{env.deployment_env}}
          echo "about to commit ${{steps.calculate_commit_hash.outputs.commit_hash}} to $branch..."
          git checkout $branch
          git reset --hard ${{steps.calculate_commit_hash.outputs.commit_hash}}
          git push -f origin HEAD

  deploy-info:
    name: Gather deploy info
    needs: update-the-deploy-branch
    runs-on: ubuntu-latest
    outputs: # TBD steps values here?
      admin-portal-env: ${{ steps.admin-portal-env.outputs.admin-portal-env }}
      deployed-url: ${{ steps.deployed-url.outputs.deployed-url }}
    steps:
      - name: Set admin-portal-env value
        id: admin-portal-env
        run: |
          echo "::set-output name=admin-portal-env::${{ env.deployment_env || 'test' }}"

      - name: Set deployed-url value
        id: deployed-url
        # steps cannot refer to an output from a previous step in the same job, so admin-portal-env has to be calculated again
        run: |
          if [[ "${{ env.deployment_env || 'test' }}" == 'prod' ]]; then
            echo "::set-output name=deployed-url::https://paidleave-admin.mass.gov/api/docs/"
          else
            echo "::set-output name=deployed-url::https://paidleave-admin-${{ env.deployment_env || 'test' }}.mass.gov/api/docs/"
          fi

  start-comms-github:
    name: Start deploy comms (GitHub)
    needs: [update-the-deploy-branch, deploy-info]
    runs-on: ubuntu-latest
    outputs:
      deploy-id: ${{ steps.create-deployment.outputs.deployment_id }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: chrnorm/deployment-action@releases/v1
        name: Create GitHub deployment
        id: create-deployment
        with:
          # NOTE: If you are intending for this GitHub deployment to trigger another
          #       workflow that's listening for on: [deployment], you need to update this
          #       to secrets.PFML_DEVOPS_TOKEN (same for the update step at the end.)
          #
          #       This is intentionally using the github.token right now to avoid unintended
          #       side-effects from happening off of the automated deployments.
          #
          token: "${{ github.token }}"
          target_url: ${{ needs.deploy-info.outputs.deployed-url }}
          environment: "Admin Portal (${{ needs.deploy-info.outputs.admin-portal-env }})"
          ref: ${{ needs.update-the-deploy-branch.outputs.commit_hash }}

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [update-the-deploy-branch, deploy-info]
    env: 
      releaseVersion: ${{ github.event.inputs.version }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ needs.update-the-deploy-branch.outputs.commit_hash }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PFML_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PFML_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-duration-seconds: 3600
          role-to-assume: ci-run-deploys

      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.nodeVersion }}

      - name: Install
        run: npm ci --prefix admin-portal

      - name: Build
        run: npm run build:${{ needs.deploy-info.outputs.admin-portal-env }} --prefix admin-portal

      - name: Sync S3 Bucket
        env:
          BUCKET_NAME: massgov-pfml-${{ needs.deploy-info.outputs.admin-portal-env }}-admin-portal-site-builds
          RELEASE_HASH: ${{ needs.update-the-deploy-branch.outputs.commit_hash }}
          NEXT_OUTPUT_DIR: ./admin-portal/out
        run: |
          aws s3 sync $NEXT_OUTPUT_DIR s3://$BUCKET_NAME/$RELEASE_HASH/ --exclude "*.html" --cache-control max-age=31536000,public &&
          aws s3 sync $NEXT_OUTPUT_DIR s3://$BUCKET_NAME/$RELEASE_HASH/ --exclude "*" --include "*.html" --cache-control s-maxage=86400,max-age=0,must-revalidate

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [update-the-deploy-branch, deploy, deploy-info]
    env:
      TF_VAR_cloudfront_origin_path: /${{ needs.update-the-deploy-branch.outputs.commit_hash }}
      TF_CLI_ARGS: '-lock-timeout=120s'

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ needs.update-the-deploy-branch.outputs.commit_hash }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PFML_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PFML_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-duration-seconds: 3600
          role-to-assume: ci-run-deploys

      - uses: hashicorp/setup-terraform@v1.2.1
        with:
          terraform_version: ${{ env.terraformVersion }}
          terraform_wrapper: false

      - name: Terraform Init
        id: terraform_init
        run: terraform init
        working-directory: ${{ env.terraformBaseDir }}${{ needs.deploy-info.outputs.admin-portal-env }}

      - name: Terraform Plan with new Cloudfront path
        id: terraform_plan
        run: terraform plan -out=plan.tfplan
        working-directory: ${{ env.terraformBaseDir }}${{ needs.deploy-info.outputs.admin-portal-env }}

      - name: Terraform Apply from execution plan
        id: terraform_apply
        run: terraform apply plan.tfplan
        working-directory: ${{ env.terraformBaseDir }}${{ needs.deploy-info.outputs.admin-portal-env }}

  invalidate-cloudfront:
    name: Invalidate Cloudfront Cache
    runs-on: ubuntu-latest
    needs: [update-the-deploy-branch, deploy, release, deploy-info]
    env:
      TF_CLI_ARGS: '-lock-timeout=120s'

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ needs.update-the-deploy-branch.outputs.commit_hash }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PFML_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PFML_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-duration-seconds: 3600
          role-to-assume: ci-run-deploys

      - name: Terraform Init
        id: terraform_init
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.terraformVersion }}
          tf_actions_subcommand: init
          tf_actions_comment: false
          tf_actions_working_dir: ${{ env.terraformBaseDir }}${{ needs.deploy-info.outputs.admin-portal-env }}

      - name: Terraform Output
        id: terraform
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.terraformVersion }}
          tf_actions_subcommand: output
          tf_actions_working_dir: ${{ env.terraformBaseDir }}${{ needs.deploy-info.outputs.admin-portal-env }}
        env:
          TF_CLI_ARGS: ''

      - name: Invalidate old Cloudfront cache
        env:
          TF_OUTPUT: ${{ steps.terraform.outputs.tf_actions_output }}
        run: |
          sudo apt-get install jq
          DISTRIBUTION_ID=$(echo $TF_OUTPUT | jq -r '.cloudfront_distribution_id.value')
          aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"

  postdeploy-info:
    name: Finalize deployment state
    needs: [invalidate-cloudfront]
    if: always()
    runs-on: ubuntu-latest
    outputs:
      deploy-state: ${{ steps.deploy-state.outputs.deploy-state }}
    steps:
        # https://github.com/technote-space/workflow-conclusion-action
        # this action takes the "conclusion" status from jobs and compiles them together into an env variable with a rolled up status
      - uses: technote-space/workflow-conclusion-action@v2
      - name: Set deploy-state value
        id: deploy-state
        run: echo "::set-output name=deploy-state::${{ env.WORKFLOW_CONCLUSION }}"

  finish-comms-github:
    name: Finish deploy comms (GitHub)
    needs: [start-comms-github, deploy-info, postdeploy-info]
    runs-on: ubuntu-latest
    if: always() && needs.start-comms-github.result == 'success'
    steps:
      - uses: chrnorm/deployment-status@releases/v1
        with:
          token: ${{ github.token }}
          # This should match target_url in start-comms-github.
          # see: https://github.com/chrnorm/deployment-status/issues/13#issuecomment-734731491
          environment_url: ${{ needs.deploy-info.outputs.deployed-url }}
          state: ${{ needs.postdeploy-info.outputs.deploy-state }}
          deployment_id: ${{ needs.start-comms-github.outputs.deploy-id }}

      - name: Update release page
        uses: benc-uk/workflow-dispatch@v1
        if: ${{!contains(env.deployment_env, 'test')}}
        with:
          workflow: GH Pages deploy
          token: ${{ secrets.PFML_DEVOPS_TOKEN }}
          ref: main
