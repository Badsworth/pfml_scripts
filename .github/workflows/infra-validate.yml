# Run linting and validation for terraform configs.
#
name: Infra CI Validation

on:
  pull_request: 
    paths:
      - infra/**

env:
  working-dir: ./infra
  tf-version: 0.14.7

jobs:
  tf-format:
    name: "tf format check"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: tf-format-check
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.tf-version }}
          tf_actions_subcommand: "fmt"
          tf_actions_working_dir: ${{ env.working-dir }}
          tf_actions_comment: false

  tf-validate:
    name: "tf validate"
    runs-on: ubuntu-latest

    env:
      baseref: ${{ github['base_ref'] }}
      TF_CLI_ARGS: '-lock-timeout=120s'

    # Run a job for each combination of a component and environment.
    # e.g. portal/test, portal/stage, env-shared/test, env-shared/stage
    strategy:
      fail-fast: false
      matrix:
        component: ["portal", "api", "env-shared", "ecs-tasks"]
        environment: ["test", "stage", "prod", "performance", "training", "uat", "breakfix", "cps-preview"]
        include:
        - component: "pfml-aws"
        - component: "monitoring"

    steps:
      - uses: actions/checkout@v2

      - name: "Fetch status of remote ref"
        run: |
          git fetch --no-tags --prune --depth=1 origin +refs/heads/${{ env.baseref }}:refs/remotes/origin/${{ env.baseref }}

      - name: "Check for changes"
        id: check-for-changes
        # Check whether the config has changed within the PR.
        # This is done by comparing the PR's base branch (usually main) against the current PR commit.
        run: |
          echo "::set-output name=has-changes::false"

          if [ -z "${{ matrix.environment }}" ]; then
            tf_dir=${{ env.working-dir }}/${{ matrix.component }}
          else
            tf_dir=${{ env.working-dir }}/${{ matrix.component }}/environments/${{ matrix.environment }}
          fi

          folders=${tf_dir}

          folders_to_search="$folders"

          while [[ ! -z "$folders_to_search" ]]; do
            new_folders=""

            for folder in $folders_to_search; do
              echo "looking for submodules in: $folder"
              echo "found:"
              new_folders="$new_folders $(git grep -Poh '(?<=source = ")\.\.[^"]*' -- ${folder} | sed s:^:${folder}/:g | xargs realpath)"
              # new_folders="$new_folders $(git grep -h 'source = "\.\.' -- ${folder} | sed 's/.*\"\(.*\)\".*/\1/' | sed s:^:${folder}/:g | xargs realpath)"
            done

            echo
            new_folders=$(echo "$new_folders" | xargs -n1 | sort | uniq)

            folders="$folders $new_folders"
            folders=$(echo "$folders" | xargs -n1 | sort | uniq)
            folders_to_search="$new_folders"
          done

          echo "::set-output name=tf_working_dir::${tf_dir}"

          for folder in $folders; do
            if [ -n "$(git --no-pager diff --name-only origin/${{ env.baseref }} ${GITHUB_SHA} -- ${folder})" ]; then
              echo "::set-output name=has-changes::true"
              break
            fi
          done

      - name: Configure AWS Credentials
        if: steps.check-for-changes.outputs.has-changes == 'true'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PFML_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PFML_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ci-run-deploys
          role-duration-seconds: 3600

      - name: tf-init
        if: steps.check-for-changes.outputs.has-changes == 'true'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.tf-version }}
          tf_actions_subcommand: "init"
          tf_actions_working_dir: ${{ steps.check-for-changes.outputs.tf_working_dir }}
          tf_actions_comment: false

      - name: tf-plan
        if: steps.check-for-changes.outputs.has-changes == 'true'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.tf-version }}
          tf_actions_subcommand: "plan"
          tf_actions_working_dir: ${{ steps.check-for-changes.outputs.tf_working_dir }}
          tf_actions_comment: false
