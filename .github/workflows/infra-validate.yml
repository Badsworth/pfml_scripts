# Run linting and validation for terraform configs.
#
name: Infra CI Validation

on:
  # This workflow only needs to run on pull requests, since all infra is automatically deployed to the
  # test environment when merged to the main branch.
  pull_request:
    paths:
      - infra/**
      - .github/workflows/infra-validate.yml

env:
  working-dir: ./infra
  terraformVersion: 0.14.7

jobs:
  tf-format-check:
    name: "tf format (run 'terraform fmt -recursive infra/' if this fails)"
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v1.2.1
        with:
          terraform_version: ${{ env.terraformVersion }}

      - run: terraform fmt -recursive -check ${{ env.working-dir }}

  tf-validate:
    name: "tf validate"
    runs-on: ubuntu-latest

    env:
      baseref: ${{ github['base_ref'] }}
      TF_CLI_ARGS: '-lock-timeout=120s'

    # Run a job for each combination of a component and environment.
    # e.g. portal/test, portal/stage, env-shared/test, env-shared/stage
    #
    # This should be automated as part of INFRA-558 to avoid developer maintenance costs.
    #
    strategy:
      fail-fast: false
      matrix:
        component: ["portal", "api", "env-shared", "ecs-tasks"]
        environment: ["test", "stage", "prod", "performance", "training", "uat", "breakfix", "cps-preview", "long", "trn2", "infra-test"]
        include:
        - component: "constants"
        - component: "pfml-aws"
        - component: "monitoring"

    steps:
      - uses: actions/checkout@v2

      - name: "Fetch status of remote ref"
        run: |
          git fetch --no-tags --prune --depth=1 origin +refs/heads/${{ env.baseref }}:refs/remotes/origin/${{ env.baseref }}

      - name: "Check for changes"
        id: check-for-changes
        # Check whether the config has changed within the PR.
        # This is done by comparing the PR's base branch (usually main) against the current PR commit.
        run: |
          echo "::set-output name=has-changes::false"

          if [ -z "${{ matrix.environment }}" ]; then
            tf_dir=${{ env.working-dir }}/${{ matrix.component }}
            folders=${tf_dir}
          else
            tf_dir=${{ env.working-dir }}/${{ matrix.component }}/environments/${{ matrix.environment }}
            template_dir=${{ env.working-dir }}/${{ matrix.component }}/template
            folders="${tf_dir} ${template_dir}"
          fi

          echo "::set-output name=tf_working_dir::${tf_dir}"

          for folder in $folders; do
            if [ -n "$(git --no-pager diff --name-only origin/${{ env.baseref }} ${GITHUB_SHA} -- ${folder})" ]; then
              echo "::set-output name=has-changes::true"
              break
            fi
          done

      - name: Configure AWS Credentials
        if: steps.check-for-changes.outputs.has-changes == 'true'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PFML_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PFML_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ci-run-deploys
          role-duration-seconds: 3600

      - uses: hashicorp/setup-terraform@v1.2.1
        with:
          terraform_version: ${{ env.terraformVersion }}
          terraform_wrapper: false

      - name: tf-init
        if: steps.check-for-changes.outputs.has-changes == 'true'
        run: terraform init
        working-directory: ${{ steps.check-for-changes.outputs.tf_working_dir }}


      - name: tf-plan
        if: steps.check-for-changes.outputs.has-changes == 'true'
        run: terraform plan
        working-directory: ${{ steps.check-for-changes.outputs.tf_working_dir }}
