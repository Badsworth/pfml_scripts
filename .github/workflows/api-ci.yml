# Run tests and linting for the Paid Leave API.
#
name: API CI Testing

on:
  push:
    branches:
      - main
    paths:
      - api/**
      - .github/workflows/api-ci.yml
  pull_request:
    paths:
      - api/**
      - .github/workflows/api-ci.yml

defaults:
  run:
    working-directory: ./api

env:
  CI: true
  workflow_self_link: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

jobs:
  # Check for formatting and linting issues.
  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: build container
        run: make build

      - name: install project dependencies not built into container
        run: make deps

      # TODO (API-1624) Re-enable once the dependency issue can be resolved.
      # Currently disabled so the rest of this CI action continues to operate and
      # block PR's as expected
      # - name: check dependencies
      #   run: make deps-check

      - name: format-check
        run: make format-check

      - name: run migrations
        run: make db-upgrade

      - name: lint
        run: make lint

      - name: security
        run: make lint-security

  # Check for test failures.
  get-test-dirs:
    runs-on: ubuntu-latest
  
    outputs:
      matrix: ${{ steps.get-dirs.outputs.matrix }}
    
    steps:
      - uses: actions/checkout@v2

      - name: get test directories
        id: get-dirs
        run: |
          sudo apt-get install jq
          cd tests/
          TEST_DIRS=$(ls -d */ | cut -f1 -d'/' | grep -v pycache | grep -v helpers | jq -R . | jq -s -c .)
          echo "::set-output name=matrix::$TEST_DIRS"
          
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    if: always()

    needs: get-test-dirs
    
    strategy:
      fail-fast: false
      matrix:
        test_dirs: ${{ fromJSON(needs.get-test-dirs.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v2

      - name: build container
        run: make build

      - name: test for multi-headed migration situation
        run: make test args="tests/db/test_migrations.py::test_only_single_head_revision_in_migrations"

      - name: start db
        run: make start-db

      - name: run migrations
        run: make db-upgrade

      - name: create database users
        run: make db-create-users

      - name: test with coverage
        run: make test-coverage args=tests/${{ matrix.test_dirs }}


  # Check we can build a release
  build-release:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: build
        run: make api-image-build

      - name: pre-flight-test
        run: make pre-flight-test

  # Run Tenable container scanning
  scan-api-container:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: build API image
        run: make api-image-build

      - name: pull latest tenable image
        env:
          DOCKER_PW: ${{ secrets.PFML_TENABLE_DOCKER_PASSWORD }}
          DOCKER_USER: ${{ secrets.PFML_TENABLE_DOCKER_USER }}
        run: |
          echo "$DOCKER_PW" | docker login --username "$DOCKER_USER" --password-stdin tenableio-docker-consec-local.jfrog.io
          docker pull tenableio-docker-consec-local.jfrog.io/cs-scanner:latest

      - name: run tenable scan on API image
        env:
          TENABLE_ACCESS_KEY: ${{ secrets.TENABLE_ACCESS_KEY }}
          TENABLE_SECRET_KEY: ${{ secrets.TENABLE_SECRET_KEY }}
        run: |
          DOCKER_TAG=$(docker images | grep mass-pfml-api | grep -v latest | awk '{print $2}')
          docker save mass-pfml-api:$DOCKER_TAG | docker run \
          --env TENABLE_ACCESS_KEY=$TENABLE_ACCESS_KEY \
          --env TENABLE_SECRET_KEY=$TENABLE_SECRET_KEY \
          --env IMPORT_REPO_NAME=mass-pfml-api \
          --env CHECK_POLICY=true \
          --interactive tenableio-docker-consec-local.jfrog.io/cs-scanner:latest inspect-image mass-pfml-api:$DOCKER_TAG

  scan-pdf-api-container:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: build PDF API image
        run: make -f ../api/Makefile pdf-api-image-build
        working-directory: ./pdf_api

      - name: pull latest tenable image
        env:
          DOCKER_PW: ${{ secrets.PFML_TENABLE_DOCKER_PASSWORD }}
          DOCKER_USER: ${{ secrets.PFML_TENABLE_DOCKER_USER }}
        run: |
          echo "$DOCKER_PW" | docker login --username "$DOCKER_USER" --password-stdin tenableio-docker-consec-local.jfrog.io
          docker pull tenableio-docker-consec-local.jfrog.io/cs-scanner:latest

      - name: run tenable scan on PDF API image
        env:
          TENABLE_ACCESS_KEY: ${{ secrets.TENABLE_ACCESS_KEY }}
          TENABLE_SECRET_KEY: ${{ secrets.TENABLE_SECRET_KEY }}
        run: |
          DOCKER_TAG=$(docker images | grep mass-pfml-api-pdf | grep -v latest | awk '{print $2}')
          docker save mass-pfml-api-pdf:$DOCKER_TAG | docker run \
          --env TENABLE_ACCESS_KEY=$TENABLE_ACCESS_KEY \
          --env TENABLE_SECRET_KEY=$TENABLE_SECRET_KEY \
          --env IMPORT_REPO_NAME=mass-pfml-api-pdf \
          --env CHECK_POLICY=true \
          --interactive tenableio-docker-consec-local.jfrog.io/cs-scanner:latest inspect-image mass-pfml-api-pdf:$DOCKER_TAG

  # Run Terriyay
  get-test-state:
    name: Finalize test state
    needs: [test]
    if: always() && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    outputs:
      test-state: ${{ steps.test-state.outputs.test-state }}
    steps:
        # https://github.com/technote-space/workflow-conclusion-action
        # this action takes the "conclusion" status from jobs and compiles them together into an env variable with a rolled up status
      - uses: actions/checkout@v2
      - uses: technote-space/workflow-conclusion-action@v2
      - name: Set test-state value
        id: test-state
        run: echo "::set-output name=test-state::${{ env.WORKFLOW_CONCLUSION }}"

  # Run Terriyay
  post-to-teams:
    name: post failures to teams
    needs: [get-test-state]
    if: always() && (needs.get-test-state.outputs.test-state == 'failure' || needs.get-test-state.outputs.test-state == 'timed_out')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PFML_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PFML_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ci-run-deploys
          role-duration-seconds: 3600

      - name: Pull teams uri from SSM
        uses: "marvinpinto/action-inject-ssm-secrets@latest"
        with:
          ssm_parameter: "/admin/common/teams-deploy-uri"
          env_variable_name: "teams_uri"

      - name: Post to Teams
        run: |
          RESPONSE=$(curl -fsLS -X POST ${{ env.TEAMS_URI }} \
          --header 'Content-Type: application/json' \
          --data '{   
            "@type": "MessageCard",
            "@context": "http://schema.org/extensions",
            "themeColor": "FF0000",
            "title": "API tests failed",
            "text": "API tests failed in main ${{ env.workflow_self_link }}",
            "sections": [{
                "activityImage":"https://th.bing.com/th/id/R.ee8882f44294e8a6f1732a54343ff17e?rik=FAYIPD4sACftKw&riu=http%3a%2f%2f3.bp.blogspot.com%2f-u6MZBWbGcZI%2fUT4mft01YTI%2fAAAAAAAADpU%2fJubGsyGdL00%2fs1600%2ffailure.png&ehk=ranH%2bkeeo59wsILuyxVyNTIR2oUECprijedE01jHq34%3d&risl=&pid=ImgRaw&r=0"
            }]'
          )