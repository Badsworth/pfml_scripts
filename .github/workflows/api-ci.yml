# Run tests and linting for the Paid Leave API.
#
name: API CI Testing

on:
  push:
    branches:
      - main
    paths:
      - api/**
      - .github/workflows/api-ci.yml
  pull_request:
    paths:
      - api/**
      - .github/workflows/api-ci.yml

defaults:
  run:
    working-directory: ./api

env:
  CI: true

jobs:
  # Check for formatting and linting issues.
  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: build container
        run: make build

      - name: install project dependencies not built into container
        run: make deps

      # TODO (API-1624) Re-enable once the dependency issue can be resolved.
      # Currently disabled so the rest of this CI action continues to operate and
      # block PR's as expected
      # - name: check dependencies
      #   run: make deps-check

      - name: format-check
        run: make format-check

      - name: run migrations
        run: make db-upgrade

      - name: lint
        run: make lint

      - name: security
        run: make lint-security

  # Check for test failures.
  get-test-dirs:
    runs-on: ubuntu-latest
  
    outputs:
      matrix: ${{ steps.get-dirs.outputs.matrix }}
    
    steps:
      - uses: actions/checkout@v2

      - name: get test directories
        id: get-dirs
        run: |
          sudo apt-get install jq
          cd tests/
          TEST_DIRS=$(ls -d */ | cut -f1 -d'/' | grep -v pycache | grep -v helpers | jq -R . | jq -s -c .)
          echo "::set-output name=matrix::$TEST_DIRS"
          
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    if: always()

    needs: get-test-dirs
    
    strategy:
      fail-fast: false
      matrix:
        test_dirs: ${{ fromJSON(needs.get-test-dirs.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v2

      - name: build container
        run: make build

      - name: test for multi-headed migration situation
        run: make test args="tests/db/test_migrations.py::test_only_single_head_revision_in_migrations"

      - name: start db
        run: make start-db

      - name: run migrations
        run: make db-upgrade

      - name: create database users
        run: make db-create-users

      - name: test with coverage
        run: make test-coverage args=tests/${{ matrix.test_dirs }}


  # Check that we can build a release
  build-release:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: build
        run: make api-image-build

      - name: pre-flight-test
        run: make pre-flight-test

  # Run Tenable container scanning
  # TEMPORARILY DISABLED (INFRA-568): our underlying Tenable license changed, & our old credentials are no longer valid.
#  scan-containers:
#    runs-on: ubuntu-latest
#
#    steps:
#      - uses: actions/checkout@v2
#
#      - name: build image
#        run: make api-image-build
#
#      - name: pull latest tenable image
#        env:
#          DOCKER_PW: ${{ secrets.PFML_TENABLE_DOCKER_PASSWORD }}
#          DOCKER_USER: ${{ secrets.PFML_TENABLE_DOCKER_USER }}
#        run: |
#          echo "$DOCKER_PW" | docker login --username "$DOCKER_USER" --password-stdin tenableio-docker-consec-local.jfrog.io
#          docker pull tenableio-docker-consec-local.jfrog.io/cs-scanner:latest
#
#      - name: run tenable scan
#        env:
#          TENABLE_ACCESS_KEY: ${{ secrets.TENABLE_ACCESS_KEY }}
#          TENABLE_SECRET_KEY: ${{ secrets.TENABLE_SECRET_KEY }}
#        run: |
#          DOCKER_TAG=$(docker images | grep mass-pfml-api | grep -v latest | awk '{print $2}')
#          docker save mass-pfml-api:$DOCKER_TAG | docker run \
#          --env TENABLE_ACCESS_KEY=$TENABLE_ACCESS_KEY \
#          --env TENABLE_SECRET_KEY=$TENABLE_SECRET_KEY \
#          --env IMPORT_REPO_NAME=mass-pfml-api \
#          --env CHECK_POLICY=true \
#          --interactive tenableio-docker-consec-local.jfrog.io/cs-scanner:latest inspect-image mass-pfml-api:$DOCKER_TAG

  post-failures-to-slack:
    name: Post failures to slack
    if: failure() && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      # Use a custom action to check overall workflow status, since cancelled workflow runs
      # are included in failure() checks but we do not want to be notified. Instead, only
      # notify on failure or timeout.
      - uses: technote-space/workflow-conclusion-action@v2      
      
      - if: ${{ env.WORKFLOW_CONCLUSION }} == 'failure' || ${{ env.WORKFLOW_CONCLUSION }} == 'timed_out'
        uses: ./.github/actions/send-slack-message
        with:
          title: "[main] API tests failed (<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|build logs>)"
          color: danger
          aws-access-key-id: ${{ secrets.PFML_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PFML_AWS_SECRET_ACCESS_KEY }}