import { subMonths, format } from "date-fns";
import { fineos, fineosPages } from "../../actions";

const OTHER_BENEFIT_AMOUNT = 100;
// @note: This can only be tested in environments with the March release
describe("Other benefits are reported for a claim after payments have been has been made and the leave is in progress", () => {
  it("CSR rep can create an offset recovery plan after an overpayment has been generated", () => {
    fineos.before();
    // @todo: Enter absence case ID here
    // Claim must have paid payments and future payments.
    // You can find an absence case in this state by looking at claims generated by
    // "api_medical_continuous__checkAllSecureActions.ts" 8-11 days ago from when you are running this test
    fineosPages.ClaimPage.visit("<absenceCaseId</absenceCaseId>")
      .paidLeave((leaveCase) => {
        leaveCase.getAmountsPending().then(([amountsPending]) => {
          cy.stash("amountsPendingBeforeRecovery", amountsPending);
          leaveCase.applyReductions({
            employer_benefits: [
              {
                benefit_amount_dollars: OTHER_BENEFIT_AMOUNT,
                benefit_amount_frequency: "In Total",
                benefit_type: "Family or medical leave insurance",
                is_full_salary_continuous: true,
                benefit_start_date: format(
                  subMonths(new Date(), 1),
                  "yyyy-MM-dd"
                ),
                benefit_end_date: format(new Date(), "yyyy-MM-dd"),
              },
            ],
          });
          leaveCase.assertOverpaymentRecord({
            status: "Pending Recovery",
            adjustment: 0,
            amount: OTHER_BENEFIT_AMOUNT,
            outstandingAmount: OTHER_BENEFIT_AMOUNT,
          });
        });
      })
      .tasks((tasks) => {
        tasks.assertIsAssignedToDepartment(
          "Send Overpayment Letter to Claimant (Payee)",
          "DFML Overpayments"
        );
      })
      .paidLeave((paidLeave) => {
        const recoveryPlanPage = paidLeave.createRecoveryPlan(
          OTHER_BENEFIT_AMOUNT,
          "OffsetRecovery"
        );
        recoveryPlanPage
          .addDocument(
            "OP-Full Balance Recovery",
            "Overpayment Notice-Full Balance Recovery"
          )
          .assertDocumentStatus(
            "Overpayment Notice-Full Balance Recovery",
            "Completed"
          );
      })
      .tasks((tasks) => tasks.assertTaskExists("Print and Mail Correspondence"))
      .paidLeave((paidLeave) => {
        cy.unstash<Record<"netAmount" | "netPaymentAmount", string>>(
          "amountsPendingBeforeRecovery"
        ).then((amountsPending) => {
          paidLeave.assertAmountsPending([
            {
              net_payment_amount:
                Number(amountsPending.netAmount) - OTHER_BENEFIT_AMOUNT,
            },
          ]);
        });
      });
  });
});
