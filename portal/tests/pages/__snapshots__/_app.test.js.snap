// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`App displaying errors displays errors that child pages set 1`] = `
AppErrorInfoCollection {
  "items": Array [
    AppErrorInfo {
      "field": null,
      "key": "mocked-for-snapshots",
      "message": "A test error happened",
      "type": null,
    },
  ],
  "itemsById": Object {
    "mocked-for-snapshots": AppErrorInfo {
      "field": null,
      "key": "mocked-for-snapshots",
      "message": "A test error happened",
      "type": null,
    },
  },
}
`;

exports[`App when authenticated user consented to data sharing renders the page component 1`] = `
<TestComponent
  appLogic={
    Object {
      "appErrors": AppErrorInfoCollection {
        "items": Array [],
        "itemsById": Object {},
      },
      "auth": Object {
        "authData": Object {},
        "createAccount": [Function],
        "forgotPassword": [Function],
        "isLoggedIn": null,
        "login": [Function],
        "logout": [Function],
        "requireLogin": [Function],
        "resendVerifyAccountCode": [Function],
        "resetPassword": [Function],
        "verifyAccount": [Function],
      },
      "claims": Object {
        "claims": null,
        "create": [Function],
        "load": [Function],
        "setClaims": [Function],
        "submit": [Function],
        "update": [Function],
      },
      "clearErrors": [Function],
      "goToNextPage": [Function],
      "setAppErrors": [Function],
      "users": Object {
        "loadUser": [Function],
        "requireUserConsentToDataAgreement": [Function],
        "updateUser": [Function],
        "user": User {
          "auth_id": "mock-auth-id",
          "consented_to_data_sharing": true,
          "email_address": "mock@example.com",
          "has_state_id": null,
          "state_id": null,
          "status": null,
          "user_id": "mock-user-id",
        },
      },
    }
  }
  query={Object {}}
  title="Test page"
>
  <div>
    Hello world
  </div>
</TestComponent>
`;

exports[`App when the authenticated user fails to be fetched from the API displays error for NetworkError 1`] = `
AppErrorInfoCollection {
  "items": Array [
    AppErrorInfo {
      "field": null,
      "key": "mocked-for-snapshots",
      "message": "Sorry, an error was encountered. This may occur for a variety of reasons, including temporarily losing an internet connection or an unexpected error in our system. If this continues to happen, you may call the Paid Family Leave Contact Center at (XXX) XXX-XXXX",
      "type": "NetworkError",
    },
  ],
  "itemsById": Object {
    "mocked-for-snapshots": AppErrorInfo {
      "field": null,
      "key": "mocked-for-snapshots",
      "message": "Sorry, an error was encountered. This may occur for a variety of reasons, including temporarily losing an internet connection or an unexpected error in our system. If this continues to happen, you may call the Paid Family Leave Contact Center at (XXX) XXX-XXXX",
      "type": "NetworkError",
    },
  },
}
`;

exports[`App when the authenticated user fails to be fetched from the API displays error for unsuccessful response 1`] = `
AppErrorInfoCollection {
  "items": Array [
    AppErrorInfo {
      "field": null,
      "key": "mocked-for-snapshots",
      "message": "Sorry, we were unable to retrieve your account. Please log out and try again. If this continues to happen, you may call the Paid Family Leave Contact Center at (XXX) XXX-XXXX",
      "type": "UserNotFoundError",
    },
  ],
  "itemsById": Object {
    "mocked-for-snapshots": AppErrorInfo {
      "field": null,
      "key": "mocked-for-snapshots",
      "message": "Sorry, we were unable to retrieve your account. Please log out and try again. If this continues to happen, you may call the Paid Family Leave Contact Center at (XXX) XXX-XXXX",
      "type": "UserNotFoundError",
    },
  },
}
`;
