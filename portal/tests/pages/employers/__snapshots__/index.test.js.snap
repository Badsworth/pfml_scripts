// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Employer index renders post-launch content when claimantShowMedicalLeaveType is true 1`] = `
<Index
  appLogic={
    Object {
      "appErrors": AppErrorInfoCollection {
        "items": Array [],
        "itemsById": Object {},
      },
      "auth": Object {
        "createAccount": [MockFunction],
        "createEmployerAccount": [MockFunction],
        "forgotPassword": [MockFunction],
        "isLoggedIn": true,
        "login": [MockFunction],
        "logout": [MockFunction],
        "requireLogin": [MockFunction],
        "resendForgotPasswordCode": [MockFunction],
        "resendVerifyAccountCode": [MockFunction],
        "resetEmployerPasswordAndCreateEmployerApiAccount": [MockFunction],
        "resetPassword": [MockFunction],
        "verifyAccount": [MockFunction],
        "verifyEmployerAccount": [MockFunction],
      },
      "catchError": [MockFunction],
      "claims": Object {
        "claims": ClaimCollection {
          "items": Array [],
          "itemsById": Object {},
        },
        "complete": [MockFunction],
        "create": [MockFunction],
        "get": [MockFunction],
        "hasLoadedAll": false,
        "hasLoadedClaimAndWarnings": [MockFunction],
        "load": [MockFunction],
        "loadAll": [MockFunction],
        "submit": [MockFunction],
        "submitPaymentPreference": [MockFunction],
        "update": [MockFunction],
        "warningsLists": Object {},
      },
      "documents": Object {
        "attach": [MockFunction],
        "documents": DocumentCollection {
          "items": Array [],
          "itemsById": Object {},
        },
        "hasLoadedClaimDocuments": [MockFunction],
        "loadAll": [MockFunction],
      },
      "employers": Object {
        "downloadDocument": [MockFunction],
        "loadClaim": [MockFunction],
        "loadDocuments": [MockFunction],
        "submit": [MockFunction],
      },
      "portalFlow": Object {
        "goTo": [MockFunction],
        "goToNextPage": [MockFunction],
        "goToPageFor": [MockFunction],
        "pathname": "/mock-portalFlow-pathname",
      },
      "setAppErrors": [MockFunction],
      "updateUser": [MockFunction],
      "user": User {
        "auth_id": null,
        "consented_to_data_sharing": true,
        "email_address": null,
        "roles": Array [],
        "status": null,
        "user_id": "mock_user_id",
      },
      "users": Object {
        "loadUser": [MockFunction],
        "requireUserConsentToDataAgreement": [MockFunction],
        "requireUserRole": [MockFunction],
        "updateUser": [MockFunction],
        "user": User {
          "auth_id": null,
          "consented_to_data_sharing": true,
          "email_address": null,
          "roles": Array [],
          "status": null,
          "user_id": "mock_user_id",
        },
      },
    }
  }
  user={
    User {
      "auth_id": null,
      "consented_to_data_sharing": true,
      "email_address": null,
      "roles": Array [],
      "status": null,
      "user_id": "mock_user_id",
    }
  }
/>
`;

exports[`Employer index renders pre-launch content when claimantShowMedicalLeaveType is false 1`] = `
<Index
  appLogic={
    Object {
      "appErrors": AppErrorInfoCollection {
        "items": Array [],
        "itemsById": Object {},
      },
      "auth": Object {
        "createAccount": [MockFunction],
        "createEmployerAccount": [MockFunction],
        "forgotPassword": [MockFunction],
        "isLoggedIn": true,
        "login": [MockFunction],
        "logout": [MockFunction],
        "requireLogin": [MockFunction],
        "resendForgotPasswordCode": [MockFunction],
        "resendVerifyAccountCode": [MockFunction],
        "resetEmployerPasswordAndCreateEmployerApiAccount": [MockFunction],
        "resetPassword": [MockFunction],
        "verifyAccount": [MockFunction],
        "verifyEmployerAccount": [MockFunction],
      },
      "catchError": [MockFunction],
      "claims": Object {
        "claims": ClaimCollection {
          "items": Array [],
          "itemsById": Object {},
        },
        "complete": [MockFunction],
        "create": [MockFunction],
        "get": [MockFunction],
        "hasLoadedAll": false,
        "hasLoadedClaimAndWarnings": [MockFunction],
        "load": [MockFunction],
        "loadAll": [MockFunction],
        "submit": [MockFunction],
        "submitPaymentPreference": [MockFunction],
        "update": [MockFunction],
        "warningsLists": Object {},
      },
      "documents": Object {
        "attach": [MockFunction],
        "documents": DocumentCollection {
          "items": Array [],
          "itemsById": Object {},
        },
        "hasLoadedClaimDocuments": [MockFunction],
        "loadAll": [MockFunction],
      },
      "employers": Object {
        "downloadDocument": [MockFunction],
        "loadClaim": [MockFunction],
        "loadDocuments": [MockFunction],
        "submit": [MockFunction],
      },
      "portalFlow": Object {
        "goTo": [MockFunction],
        "goToNextPage": [MockFunction],
        "goToPageFor": [MockFunction],
        "pathname": "/mock-portalFlow-pathname",
      },
      "setAppErrors": [MockFunction],
      "updateUser": [MockFunction],
      "user": User {
        "auth_id": null,
        "consented_to_data_sharing": true,
        "email_address": null,
        "roles": Array [],
        "status": null,
        "user_id": "mock_user_id",
      },
      "users": Object {
        "loadUser": [MockFunction],
        "requireUserConsentToDataAgreement": [MockFunction],
        "requireUserRole": [MockFunction],
        "updateUser": [MockFunction],
        "user": User {
          "auth_id": null,
          "consented_to_data_sharing": true,
          "email_address": null,
          "roles": Array [],
          "status": null,
          "user_id": "mock_user_id",
        },
      },
    }
  }
  user={
    User {
      "auth_id": null,
      "consented_to_data_sharing": true,
      "email_address": null,
      "roles": Array [],
      "status": null,
      "user_id": "mock_user_id",
    }
  }
/>
`;
