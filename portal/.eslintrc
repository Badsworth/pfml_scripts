{
  "root": true,
  "globals": {
    // Trackers loaded globally
    "newrelic": "readonly",
    "globalThis": "readonly"
  },
  "env": {
    "browser": true,
    "es6": true,
    "node": true,
    "jest": true
  },
  "extends": [
    "nava",
    "plugin:jest/recommended",
    "plugin:jsdoc/recommended",
    "prettier",
    "plugin:jsx-a11y/recommended",
    "plugin:react/recommended"
  ],
  "plugins": ["jest", "jsdoc", "lodash", "todo-plz", "jsx-a11y", "react-hooks"],
  "parser": "babel-eslint",
  "parserOptions": {
    "ecmaVersion": 2018,
    "sourceType": "module",
    "ecmaFeatures": {
      "jsx": true
    }
  },
  "overrides": [
    {
      "files": "**/*.+(ts|tsx)",
      "parser": "@typescript-eslint/parser",
      "plugins": ["@typescript-eslint/eslint-plugin"],
      "extends": [
        "plugin:@typescript-eslint/eslint-recommended", // removes redundant warnings between TS & ESLint
        "plugin:@typescript-eslint/recommended" // rules specific to typescript, e.g., writing interfaces
      ],
      "rules": {
        "@typescript-eslint/ban-ts-comment": [
          "error",
          {
            // Allow disabling type checking on a file as long as there's an
            // accompanying description for why it's disabled:
            "ts-nocheck": "allow-with-description"
          }
        ],
        // conflicts with @typescript-eslint/no-use-before-define:
        "no-use-before-define": "off",
        // suppress noisy errors that didn't exist prior to TS migration:
        "@typescript-eslint/no-use-before-define": "off",
        "@typescript-eslint/array-type": [
          "error",
          { "default": "array-simple" }
        ],
        "@typescript-eslint/consistent-type-definitions": "error",
        "@typescript-eslint/explicit-module-boundary-types": "off",
        "@typescript-eslint/naming-convention": [
          "error",
          {
            "selector": "typeLike",
            "format": ["PascalCase"]
          }
        ],
        "@typescript-eslint/no-parameter-properties": "error",
        "@typescript-eslint/no-unused-vars": [
          "error",
          { "argsIgnorePattern": "^_" }
        ],
        "jsdoc/check-param-names": "off",
        "jsdoc/require-param-type": "off",
        "jsdoc/require-returns": "off",
        "jsdoc/require-returns-type": "off",
        "no-restricted-syntax": [
          "error",
          {
            "selector": "TSEnumDeclaration",
            "message": "Don't use TypeScript enum syntax. Use `as const` instead."
          }
        ]
      }
    },
    {
      "files": ["src/components/*"],
      "rules": {
        "no-restricted-imports": [
          "error",
          {
            "paths": [
              {
                "name": "next/router",
                "message": "Components should not be responsibile for routing."
              }
            ],
            "patterns": [
              {
                "group": ["*/pages*"],
                "message": "Components should not depend on application code. Consider exposing events that clients handle."
              }
            ]
          }
        ]
      }
    },
    {
      "files": ["src/models/*"],
      "rules": {
        "no-restricted-imports": [
          "error",
          {
            "paths": [
              {
                "name": "next/router",
                "message": "Models should not have any dependencies. Consider moving routing logic to the app or page level, or check for accidental dependencies."
              },
              {
                "name": "js-cookie",
                "message": "Models should not have any dependencies. Consider moving routing logic to the app or page level, or check for accidental dependencies."
              }
            ],
            "patterns": [
              {
                "group": ["*/components*"],
                "message": "Models should not have any dependencies. Reconsider the software architecture, or check for accidental dependencies."
              },
              {
                "group": ["*/pages*"],
                "message": "Models should not have any dependencies. Reconsider the software architecture, or check for accidental dependencies."
              },
              {
                "group": ["*/hooks*"],
                "message": "Models should not have any dependencies. Reconsider the software architecture, or check for accidental dependencies."
              }
            ]
          }
        ]
      }
    }
  ],
  "rules": {
    "camelcase": "off",
    "import/no-useless-path-segments": "error",
    "jest/consistent-test-it": ["error", { "fn": "it" }],
    "jest/no-conditional-expect": "off",
    "jest/no-try-expect": "off",
    "jest/valid-title": "off",
    "jsdoc/check-param-names": "error",
    "jsdoc/newline-after-description": "off",
    "jsdoc/require-jsdoc": "off",
    "jsdoc/require-param": "off",
    "jsdoc/require-param-description": "off",
    "jsdoc/require-param-name": "error",
    "jsdoc/require-param-type": "error",
    "jsdoc/require-returns": "warn",
    "jsdoc/require-returns-description": "off",
    "jsdoc/no-undefined-types": "off",
    "jsdoc/tag-lines": "off",
    "jsx-a11y/anchor-has-content": "off",
    "jsx-a11y/no-onchange": "off",
    "lodash/import-scope": ["error", "member"],
    "lodash/path-style": ["error", "string"],
    "no-console": ["error", { "allow": ["error"] }],
    "no-irregular-whitespace": ["error", { "skipTemplates": true }],
    "no-prototype-builtins": "off",
    "object-shorthand": ["error", "properties", { "avoidQuotes": true }],
    "promise/no-native": "off",
    "react/button-has-type": "error",
    "react/jsx-handler-names": "off",
    "react/jsx-fragments": ["error", "element"],
    "react/jsx-no-target-blank": ["error", { "allowReferrer": true }],
    "react/no-unescaped-entities": "off",
    "react-hooks/rules-of-hooks": "error",
    "react-hooks/exhaustive-deps": "warn",
    "require-await": "error",
    "sort-imports": "error",
    "sort-vars": "error",
    "todo-plz/ticket-ref": [
      "error",
      { "pattern": "(API|CP|EMPLOYER|POL|PORTAL)-[0-9]+", "terms": ["TODO"] }
    ]
  },
  "settings": {
    "jest": {
      "version": "detect"
    },
    "jsdoc": {
      "mode": "typescript"
    },
    "react": {
      "version": "detect"
    }
  }
}
