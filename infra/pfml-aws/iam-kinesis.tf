resource "aws_iam_role" "firehose_to_newrelic_or_s3" {
  name               = "massgov-pfml-kinesis-newrelic"
  assume_role_policy = data.aws_iam_policy_document.firehose_assume_role_boilerplate.json
}

resource "aws_iam_role_policy_attachment" "firehose_to_newrelic_or_s3" {
  role       = aws_iam_role.firehose_to_newrelic_or_s3.name
  policy_arn = aws_iam_policy.firehose_to_newrelic_or_s3.arn
}

resource "aws_iam_policy" "firehose_to_newrelic_or_s3" {
  name   = "massgov-pfml-kinesis-newrelic"
  policy = data.aws_iam_policy_document.firehose_to_newrelic_or_s3.json
}

data "aws_iam_policy_document" "firehose_to_newrelic_or_s3" {
  # Allows the Kinesis stream to read/write to its DLQ bucket
  statement {
    effect = "Allow"
    actions = [
      "s3:AbortMultipartUpload",
      "s3:GetBucketLocation",
      "s3:GetObject",
      "s3:ListBucket",
      "s3:ListBucketMultipartUploads",
      "s3:PutObject"
    ]

    resources = [
      "${aws_s3_bucket.ses_to_newrelic_dlq.arn}",
      "${aws_s3_bucket.ses_to_newrelic_dlq.arn}/*"
    ]
  }

  # Allows the Kinesis stream to encrypt or decrypt data in its DLQ bucket for storage or redelivery
  statement {
    effect = "Allow"
    actions = [
      "kms:Decrypt",
      "kms:GenerateDataKey"
    ]

    resources = [aws_kms_key.ses_newrelic_dlq.arn]

    condition {
      test     = "StringEquals"
      variable = "kms:ViaService"
      values   = ["s3.us-east-1.amazonaws.com"]
    }

    condition {
      test     = "StringLike"
      variable = "kms:EncryptionContext:aws:s3:arn"
      values   = ["${aws_s3_bucket.ses_to_newrelic_dlq.arn}/*"]
    }
  }

  # Allows the Kinesis stream to write delivery logs to CloudWatch
  statement {
    effect    = "Allow"
    actions   = ["logs:PutLogEvents"]
    resources = ["${data.aws_cloudwatch_log_group.ses_to_newrelic.arn}:log-stream:*"]
  }
}

data "aws_cloudwatch_log_group" "ses_to_newrelic" {
  # This log group was auto-generated by AWS and is not managed in Terraform.
  name = "/aws/kinesisfirehose/massgov-pfml-ses-newrelic"
}

data "aws_iam_policy_document" "firehose_assume_role_boilerplate" {
  statement {
    effect  = "Allow"
    actions = ["sts:AssumeRole"]

    principals {
      type        = "Service"
      identifiers = ["firehose.amazonaws.com"]
    }
  }
}
