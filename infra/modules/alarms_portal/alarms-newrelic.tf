# Terraform configuration for Browser alarms. (application-layer metrics, e.g. latency, error rate, traffic rate)

# ----------------------------------------------------------------------------------------------------------------------

resource "newrelic_alert_policy" "portal_alerts" {
  name                = "PFML Portal Alerts (${upper(var.environment_name)})"
  account_id          = local.newrelic_account_id
  incident_preference = "PER_CONDITION" # a new alarm will sound for every distinct alert condition violated
}

resource "newrelic_alert_policy" "low_priority_portal_alerts" {
  name                = "PFML Low Priority Portal Alerts (${upper(var.environment_name)})"
  account_id          = local.newrelic_account_id
  incident_preference = "PER_CONDITION" # a new alarm will sound for every distinct alert condition violated
}

# This key was generated by Kevin Yeh on 10-21-2020 and should be replaced if he leaves.
# This was manually stored in SSM and is not managed through Terraform.
#
data "aws_ssm_parameter" "pagerduty_api_key" {
  name = "/admin/common/pagerduty-api-key"
}

locals {
  low_priority_channel_key  = var.low_priority_nr_portal_integration_key
  high_priority_channel_key = var.high_priority_nr_portal_integration_key

  alert_channel = {
    "test"        = local.low_priority_channel_key,
    "performance" = local.low_priority_channel_key,
    "training"    = local.low_priority_channel_key,
    "stage"       = local.low_priority_channel_key,
    "uat"         = local.low_priority_channel_key,
    "prod"        = local.high_priority_channel_key,
  }
}

resource "newrelic_alert_channel" "newrelic_portal_notifications" {
  name = "PFML Portal ${var.environment_name == "prod" ? "High" : "Low"} priority alerting channel"
  type = "pagerduty"

  config {
    service_key = local.alert_channel[var.environment_name]
  }
}

resource "newrelic_alert_policy_channel" "pfml_portal_alerts" {
  policy_id   = newrelic_alert_policy.portal_alerts.id
  channel_ids = [newrelic_alert_channel.newrelic_portal_notifications.id]
}

resource "newrelic_alert_channel" "newrelic_portal_prod_low_priority_notifications" {
  count = var.environment_name == "prod" ? 1 : 0
  name  = "PFML Portal Low priority alerting channel"
  type  = "pagerduty"

  config {
    service_key = local.low_priority_channel_key
  }
}

resource "newrelic_alert_policy_channel" "pfml_prod_low_priority_alerts" {
  count     = var.environment_name == "prod" ? 1 : 0
  policy_id = newrelic_alert_policy.low_priority_portal_alerts.id
  channel_ids = [
    newrelic_alert_channel.newrelic_portal_prod_low_priority_notifications[0].id
  ]
}

resource "newrelic_alert_condition" "portal_ajax_response_time" {
  # WARN: Average response time above 3 seconds for at least 5 minutes
  # CRIT: Average response time above 5 seconds for at least 5 minutes
  policy_id       = newrelic_alert_policy.portal_alerts.id
  name            = "Portal AJAX response time too high"
  type            = "browser_metric"
  entities        = [data.newrelic_entity.pfml-portal.application_id]
  metric          = "ajax_response_time"
  condition_scope = "application"

  term {
    priority      = "warning"
    time_function = "all" # e.g. "for at least..."
    duration      = 5     # units: minutes
    operator      = "above"
    threshold     = 3 # units: seconds
  }

  term {
    priority      = "critical"
    time_function = "all" # e.g. "for at least..."
    duration      = 5     # units: minutes
    operator      = "above"
    threshold     = 5 # units: seconds
  }
}

resource "newrelic_alert_condition" "portal_page_load_time" {
  # WARN: Average load time above 2 seconds for at least 5 minutes
  # CRIT: Average load time above 5 seconds for at least 5 minutes
  policy_id       = newrelic_alert_policy.portal_alerts.id
  name            = "Portal page load time too high"
  type            = "browser_metric"
  entities        = [data.newrelic_entity.pfml-portal.application_id]
  metric          = "total_page_load"
  condition_scope = "application"

  term {
    priority      = "warning"
    time_function = "all" # e.g. "for at least..."
    duration      = 5     # units: minutes
    operator      = "above"
    threshold     = 3 # units: seconds
  }

  term {
    priority      = "critical"
    time_function = "all" # e.g. "for at least..."
    duration      = 5     # units: minutes
    operator      = "above"
    threshold     = 5 # units: seconds
  }
}

resource "newrelic_alert_condition" "portal_page_rendering_time" {
  # WARN: Average rendering time above 2 seconds for at least 5 minutes
  # CRIT: Average rendering time above 3 seconds for at least 5 minutes
  policy_id       = newrelic_alert_policy.portal_alerts.id
  name            = "Portal page rendering time too high"
  type            = "browser_metric"
  entities        = [data.newrelic_entity.pfml-portal.application_id]
  metric          = "page_rendering"
  condition_scope = "application"

  term {
    priority      = "warning"
    time_function = "all" # e.g. "for at least..."
    duration      = 5     # units: minutes
    operator      = "above"
    threshold     = 2 # units: seconds
  }

  term {
    priority      = "critical"
    time_function = "all" # e.g. "for at least..."
    duration      = 5     # units: minutes
    operator      = "above"
    threshold     = 3 # units: seconds
  }
}

/////////////////
// NRQL Alerts //
/////////////////

module "newrelic_alert_cognito_password_reset_errors" {
  source    = "../newrelic_baseline_error_rate"
  policy_id = newrelic_alert_policy.portal_alerts.id

  name  = "High password reset error rate"
  query = "SELECT percentage(count(*), WHERE httpResponseCode >= 400) FROM AjaxRequest WHERE browserInteractionName = 'fetch: cognito forgotPasswordSubmit' AND hostname = 'cognito-idp.us-east-1.amazonaws.com' AND environment = '${var.environment_name}'"
}

module "newrelic_alert_cognito_sign_in_errors" {
  source    = "../newrelic_baseline_error_rate"
  policy_id = newrelic_alert_policy.portal_alerts.id

  name  = "High log in error rate"
  query = "SELECT percentage(count(*), WHERE httpResponseCode >= 400) FROM AjaxRequest WHERE browserInteractionName = 'fetch: cognito signIn' AND hostname = 'cognito-idp.us-east-1.amazonaws.com' AND environment = '${var.environment_name}'"
}

module "newrelic_alert_cognito_claimant_sign_up_errors" {
  source    = "../newrelic_baseline_error_rate"
  policy_id = newrelic_alert_policy.portal_alerts.id

  name  = "High claimant sign up error rate"
  query = "SELECT percentage(count(*), WHERE httpResponseCode >= 400) FROM AjaxRequest WHERE browserInteractionName = 'fetch: cognito signUp' AND groupedPageUrl NOT LIKE '%/employers/create-account' AND hostname = 'cognito-idp.us-east-1.amazonaws.com' AND environment = '${var.environment_name}'"
}

module "newrelic_alert_cognito_claimant_sign_up_verification_errors" {
  source    = "../newrelic_baseline_error_rate"
  policy_id = newrelic_alert_policy.portal_alerts.id

  name  = "High sign up verification error rate"
  query = "SELECT percentage(count(*), WHERE httpResponseCode >= 400) FROM AjaxRequest WHERE browserInteractionName = 'fetch: cognito confirmSignUp' AND groupedPageUrl NOT LIKE '%/employers/create-account' AND hostname = 'cognito-idp.us-east-1.amazonaws.com' AND environment = '${var.environment_name}'"
}

module "newrelic_alert_cognito_employer_sign_up_errors" {
  source    = "../newrelic_baseline_error_rate"
  policy_id = newrelic_alert_policy.portal_alerts.id

  name  = "High employer sign up error rate"
  query = "SELECT percentage(count(*), WHERE httpResponseCode >= 400) FROM AjaxRequest WHERE browserInteractionName = 'fetch: cognito signUp' AND groupedPageUrl LIKE '%/employers/create-account' AND hostname = 'cognito-idp.us-east-1.amazonaws.com' AND environment = '${var.environment_name}'"
}

module "newrelic_alert_application_complete_errors" {
  source    = "../newrelic_baseline_error_rate"
  policy_id = newrelic_alert_policy.portal_alerts.id

  name  = "High application completion error rate"
  query = "SELECT percentage(count(*), WHERE httpResponseCode >= 400) FROM AjaxRequest WHERE httpMethod = 'POST' AND groupedRequestUrl LIKE '%/applications/*/complete_application' AND environment = '${var.environment_name}'"
}

module "newrelic_alert_application_document_upload_errors" {
  source    = "../newrelic_baseline_error_rate"
  policy_id = newrelic_alert_policy.portal_alerts.id

  name  = "High document upload error rate"
  query = "SELECT percentage(count(*), WHERE httpResponseCode >= 400) FROM AjaxRequest WHERE httpMethod = 'POST' AND groupedRequestUrl LIKE '%/applications/*/documents' AND environment = '${var.environment_name}'"
}

module "newrelic_alert_application_submit_errors" {
  source    = "../newrelic_baseline_error_rate"
  policy_id = newrelic_alert_policy.portal_alerts.id

  name  = "High application submission error rate"
  query = "SELECT percentage(count(*), WHERE httpResponseCode >= 400) FROM AjaxRequest WHERE httpMethod = 'POST' AND groupedRequestUrl LIKE '%/applications/*/submit_application' AND environment = '${var.environment_name}'"
}

module "newrelic_alert_application_submit_payment_preference_errors" {
  source    = "../newrelic_baseline_error_rate"
  policy_id = newrelic_alert_policy.portal_alerts.id

  name  = "High payment preference submission error rate"
  query = "SELECT percentage(count(*), WHERE httpResponseCode >= 400) FROM AjaxRequest WHERE httpMethod = 'POST' AND groupedRequestUrl LIKE '%/applications/*/submit_payment_preference' AND environment = '${var.environment_name}'"
}

resource "newrelic_nrql_alert_condition" "javascripterror_surge" {
  # WARN: JavaScriptError percentage (errors/pageView) above 2% for at least 5 minutes
  # CRIT: JavaScriptError percentage (errors/pageView) above 5% for at least 5 minutes
  policy_id      = newrelic_alert_policy.portal_alerts.id
  name           = "JavaScriptErrors too high"
  type           = "static"
  value_function = "single_value"
  enabled        = true

  nrql {
    query             = "SELECT count(errorMessage) / count(pageUrl) from JavaScriptError, PageView WHERE environment = '${var.environment_name}'"
    evaluation_offset = 1
  }

  violation_time_limit = "TWENTY_FOUR_HOURS"

  warning {
    threshold_duration    = 300
    threshold             = 0.02
    operator              = "above"
    threshold_occurrences = "ALL"
  }

  critical {
    threshold_duration    = 300
    threshold             = 0.05
    operator              = "above"
    threshold_occurrences = "ALL"
  }
}

resource "newrelic_nrql_alert_condition" "unexpected_validation_violations" {
  # CRIT: ValidationError with matching issueType, above 0, for at least 5 minutes
  enabled     = true
  name        = "Unexpected validation violations"
  policy_id   = (var.environment_name == "prod") ? newrelic_alert_policy.low_priority_portal_alerts.id : newrelic_alert_policy.portal_alerts.id
  runbook_url = "https://lwd.atlassian.net/l/c/XSzdMmJ6"

  aggregation_window   = 120 # 2 minutes, should match threshold_duration
  type                 = "static"
  value_function       = "single_value"
  violation_time_limit = "TWENTY_FOUR_HOURS"

  nrql {
    # Ignoring employer_benefits[%].benefit_amount_frequency since we expect an
    # enum ValidationError for it on the Employer review page
    query             = "SELECT count(*) FROM PageAction WHERE actionName = 'ValidationError' AND environment = '${var.environment_name}' AND (issueType IN ('enum', 'type') OR issueType LIKE 'type_error%') AND issueField NOT LIKE 'employer_benefits[%].benefit_amount_frequency'"
    evaluation_offset = 3 # recommended offset from the Terraform docs for this resource
  }

  critical {
    threshold             = 0
    threshold_duration    = 120 # 2 minutes, should match aggregation_window
    operator              = "above"
    threshold_occurrences = "at_least_once"
  }
}
