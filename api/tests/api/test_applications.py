import uuid

from freezegun import freeze_time

from massgov.pfml.db.models.factories import ApplicationFactory


# The UUID used in this test was generated online. Hopefully it will never match any of
# the IDs generated by our seed data generator. If it does the test will fail.
def test_applications_get_invalid(client):
    response = client.get(
        "/v1/applications/{}".format("b26aa854-dd50-4aed-906b-c72b062f0275"),
        headers={"user_id": str(uuid.uuid4())},
    )
    assert response.status_code == 404


@freeze_time("2020-01-01")
def test_applications_get_valid(client):
    application = ApplicationFactory.create()

    response = client.get(
        "/v1/applications/{}".format(application.application_id),
        headers={"user_id": str(uuid.uuid4())},
    )

    assert response.status_code == 200
    response_body = response.get_json()
    assert response_body.get("application_id") == application.application_id
    assert response_body.get("updated_time") == "2020-01-01T00:00:00Z"


def test_applications_get_no_userid(client):
    application = ApplicationFactory.create()
    response = client.get("/v1/applications/{}".format(application.application_id))
    assert response.status_code == 400


def test_applications_get_all_for_user(client):
    applications = [ApplicationFactory.create(), ApplicationFactory.create()]

    response = client.get("/v1/applications", headers={"user_id": str(uuid.uuid4())})
    assert response.status_code == 200

    response_body = response.get_json()
    for (application, app_response) in zip(applications, response_body):
        assert application.application_id == app_response["application_id"]
        assert application.nickname == app_response["application_nickname"]


def test_applications_post_start_app(client):
    response = client.post("/v1/applications", headers={"user_id": str(uuid.uuid4())})
    response_body = response.get_json()
    application_id = response_body.get("application_id")
    assert uuid.UUID(application_id).version == 4
    assert response.status_code == 201


@freeze_time("2020-01-01")
def test_application_patch(client):
    application = ApplicationFactory.create()

    response = client.patch(
        "/v1/applications/{}".format(application.application_id),
        headers={"user_id": str(uuid.uuid4())},
        json={"last_name": "Perez"},
    )

    assert response.status_code == 200

    response = client.get(
        "/v1/applications/{}".format(application.application_id),
        headers={"user_id": str(uuid.uuid4())},
    )

    response_body = response.get_json()
    updated_last_name = response_body.get("last_name")
    assert updated_last_name == "Perez"
    assert response_body.get("updated_time") == "2020-01-01T00:00:00Z"


def test_application_patch_leave_reason(client):
    application = ApplicationFactory.create()

    response = client.patch(
        "/v1/applications/{}".format(application.application_id),
        headers={"user_id": str(uuid.uuid4())},
        json={"leave_details": {"reason": "Serious Health Condition - Employee"}},
    )
    assert response.status_code == 200

    response = client.get(
        "/v1/applications/{}".format(application.application_id),
        headers={"user_id": str(uuid.uuid4())},
    )
    response_body = response.get_json()
    updated_leave_details = response_body.get("leave_details")
    updated_leave_reason = updated_leave_details.get("reason")
    assert updated_leave_reason == "Serious Health Condition - Employee"


def test_application_patch_minimum_payload(client):
    application = ApplicationFactory.create()

    new_name = "abcd"

    response = client.patch(
        "/v1/applications/{}".format(application.application_id),
        headers={"user_id": str(uuid.uuid4())},
        json={"first_name": new_name},
    )

    assert response.status_code == 200

    response = client.get(
        "/v1/applications/{}".format(application.application_id),
        headers={"user_id": str(uuid.uuid4())},
    )

    response_body = response.get_json()
    assert response_body["first_name"] == new_name


def test_application_patch_null_values(client):
    application = ApplicationFactory.create()

    null_request_body = {
        "application_id": application.application_id,
        "application_nickname": None,
        "employee_ssn": None,
        "employer_fein": None,
        "first_name": None,
        "last_name": None,
        "leave_details": {
            "continuous_leave_periods": [
                {
                    "end_date": None,
                    "end_date_full_day": None,
                    "end_date_off_hours": None,
                    "end_date_off_minutes": None,
                    "expected_return_to_work_date": None,
                    "last_day_worked": None,
                    "start_date": None,
                    "start_date_full_day": None,
                    "start_date_off_hours": None,
                    "start_date_off_minutes": None,
                    "status": None,
                }
            ],
            "employer_notification_date": None,
            "employer_notification_method": None,
            "employer_notified": None,
            "intermittent_leave_periods": [
                {
                    "duration": None,
                    "duration_basis": None,
                    "end_date": None,
                    "frequency": None,
                    "frequency_interval": None,
                    "frequency_interval_basis": None,
                    "start_date": None,
                }
            ],
            "reason": None,
            "reason_qualifier": None,
            "reduced_schedule_leave_periods": [
                {
                    "end_date": None,
                    "friday_off_hours": None,
                    "friday_off_minutes": None,
                    "monday_off_hours": None,
                    "monday_off_minutes": None,
                    "saturday_off_hours": None,
                    "saturday_off_minutes": None,
                    "start_date": None,
                    "status": None,
                    "sunday_off_hours": None,
                    "sunday_off_minutes": None,
                    "thursday_off_hours": None,
                    "thursday_off_minutes": None,
                    "tuesday_off_hours": None,
                    "tuesday_off_minutes": None,
                    "wednesday_off_hours": None,
                    "wednesday_off_minutes": None,
                }
            ],
            "relationship_qualifier": None,
            "relationship_to_caregiver": None,
        },
        "occupation": None,
        "payment_preferences": [
            {
                "account_details": {
                    "account_name": None,
                    "account_no": None,
                    "account_type": None,
                    "routing_number": None,
                },
                "cheque_details": {"name_to_print_on_check": None},
                "description": None,
                "is_default": None,
                "payment_method": None,
            }
        ],
    }

    response = client.patch(
        "/v1/applications/{}".format(application.application_id),
        headers={"user_id": str(uuid.uuid4())},
        json=null_request_body,
    )

    assert response.status_code == 200


def test_application_post_submit_app(client, test_db_session):
    application = ApplicationFactory.create()
    assert not application.completed_time

    response = client.post(
        "/v1/applications/{}/submit_application".format(application.application_id),
        headers={"user_id": str(uuid.uuid4())},
    )
    assert response.status_code == 201

    response = client.get(
        "/v1/applications/{}".format(application.application_id),
        headers={"user_id": str(uuid.uuid4())},
    )
    assert response.status_code == 200

    test_db_session.refresh(application)
    assert application.completed_time
