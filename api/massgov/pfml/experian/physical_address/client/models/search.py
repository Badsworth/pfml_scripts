# Originally generated by datamodel-gen on 2021-03-01 from
# https://api.experianaperture.io/docs/addresssearch.json
#
# Subsequently tweaked to add the shared Confidence enum and ResponseError with
# ./formats.py.
from typing import List, Optional

from pydantic import BaseModel, Field

from .common import Confidence, ResponseError


class AddressSearchV1InputComponent(BaseModel):
    unspecified: List[str] = Field(..., description="The input component collection.")


class AddressSearchV1Request(BaseModel):
    country_iso: str = Field(..., description="The country ISO3 code of address.")
    components: AddressSearchV1InputComponent
    location: Optional[str] = Field(
        None,
        description="Physical location of the end user. Used to prioritise suggestions close to the end user.",
    )
    dataset: Optional[List[str]] = Field(None, description="The dataset for address validation.")


class AddressSearchV1MatchedResult(BaseModel):
    global_address_key: Optional[str] = Field(
        None, description="The ID of the address received as part of a validation."
    )
    text: Optional[str] = Field(
        None,
        description="The suggestion that should be presented to the user as a possible match to their input.",
    )
    matched: Optional[List[List[int]]] = Field(
        None,
        description="A collection of the characters in the suggestion that have been matched. Integrators can use this information to highlight matched text.",
    )
    format: Optional[str] = Field(None, description="The format URL of the suggested address.")
    dataset: Optional[str] = Field(None, description="The dataset of the suggested address.")


class AddressSearchV1Result(BaseModel):
    more_results_available: Optional[bool] = Field(
        None,
        description="To indicate that there are more suggestions available compare to the take that was provided.",
    )
    confidence: Optional[Confidence] = Field(
        None, description="The outcome (confidence level) of the validation."
    )
    suggestions: Optional[List[AddressSearchV1MatchedResult]] = Field(
        None,
        description="A collection of the characters in the suggestion that have been matched. Integrators can use this information to highlight matched text.",
    )


class AddressSearchV1Response(BaseModel):
    error: Optional[ResponseError] = None
    result: Optional[AddressSearchV1Result] = None


def build_simple_address_search_request(
    address_string: str, country_iso: str = "USA"
) -> AddressSearchV1Request:
    return AddressSearchV1Request(
        country_iso=country_iso,
        components=AddressSearchV1InputComponent(unspecified=[address_string]),
    )
