{
  "components": {
    "schemas": {
      "AUFloorLevelTypesRequest": {
        "description": "The type of floor level from an enumerated list as in Basement, Floor, Ground Floor and so on. Corresponds to the AUFloorLevelTypes Enum Domain (<I>domainId</I> = 186).",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AUFloorLevelTypesResponse": {
        "description": "The type of floor level from an enumerated list as in Basement, Floor, Ground Floor and so on. Corresponds to the AUFloorLevelTypes Enum Domain (<I>domainId</I> = 186).",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "AUPostalTypesRequest": {
        "description": "The postal type from an enumerated list as in PO Box, Roadside Mail Box and so on. Corresponds to the AUPostalTypes Enum Domain (<I>domainId</I> = 188).",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AUPostalTypesResponse": {
        "description": "The postal type from an enumerated list as in PO Box, Roadside Mail Box and so on. Corresponds to the AUPostalTypes Enum Domain (<I>domainId</I> = 188).",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "AUStreetSuffixesRequest": {
        "description": "The suffix for the street from an enumerated list. Corresponds to the AUStreetSuffixes Enum Domain (<I>domainId</I> = 187).",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AUStreetSuffixesResponse": {
        "description": "The suffix for the street from an enumerated list. Corresponds to the AUStreetSuffixes Enum Domain (<I>domainId</I> = 187).",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "AUTaxCodeDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RegionTaxCodeDetails"
          },
          {
            "properties": {
              "claimVaryOffset": {
                "description": "Indicates if there is a withholding variation.",
                "type": "boolean"
              },
              "combinedIncome": {
                "description": "Indicates if combinedIncome is greater than a set amount.",
                "type": "boolean"
              },
              "levyExemption": {
                "$ref": "#/components/schemas/ClaimMedicareLevyExemptionResponse"
              },
              "levyReduction": {
                "description": "Indicates if claiming medicare levy reduction..",
                "type": "boolean"
              },
              "maritalRelationshipStatus": {
                "$ref": "#/components/schemas/MaritalRelationshipStatusResponse"
              },
              "medicareLevySurcharge": {
                "$ref": "#/components/schemas/MedicareLevySurchargeResponse"
              },
              "noDependents": {
                "description": "Number of dependents claimed.",
                "format": "int32",
                "type": "integer"
              },
              "qualifyMedicareLevyExemption": {
                "description": "Indicates if qualifies for medicare levy exemption.",
                "type": "boolean"
              },
              "residentialStatus": {
                "$ref": "#/components/schemas/ResidentialStatusResponse"
              },
              "seniorsPensionersOffset": {
                "description": "Indicates if Claim or Vary Seniors Pensioners Offset.",
                "type": "boolean"
              },
              "spouse": {
                "description": "Indicates if spouse has claimed.",
                "type": "boolean"
              },
              "studyAndTrainingLoan": {
                "description": "Indicates if has a study/training loan.",
                "type": "boolean"
              },
              "taxFreeThresholdClaimed": {
                "description": "Indicates if the tax free threshold claimed.",
                "type": "boolean"
              },
              "taxOffsets": {
                "$ref": "#/components/schemas/TaxOffsetsMoneyResponse"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "Absence": {
        "description": "Absence case related to qualified request",
        "properties": {
          "caseReference": {
            "description": "Case reference related to absence",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the absence case",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AbsenceCaseEventEmployeeEmbeddable": {
        "description": "Employee associated with the Absence Case when the decision is taken.",
        "properties": {
          "firstName": {
            "description": "First name of the employee.",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the resource.",
            "type": "string"
          },
          "initials": {
            "description": "Middle initials of the employee.",
            "type": "string"
          },
          "lastName": {
            "description": "Last name of the employee.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AbsenceCaseEventNotificationCaseEmbeddable": {
        "description": "Parent case of this absence case.",
        "properties": {
          "caseReference": {
            "description": "Business identifier for this case.",
            "type": "string"
          },
          "id": {
            "description": "Resource Id of the notification case this absence case belongs.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AbsenceCaseEventResource": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "adminGroup": {
            "description": "Admin group on the case when the decision is taken.",
            "type": "string"
          },
          "employee": {
            "$ref": "#/components/schemas/AbsenceCaseEventEmployeeEmbeddable"
          },
          "eventDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "eventName": {
            "description": "Name of the event/decision taken on the Absence case.",
            "type": "string"
          },
          "id": {
            "description": "Unique id of the absence case event record.",
            "type": "string"
          },
          "notificationCase": {
            "$ref": "#/components/schemas/AbsenceCaseEventNotificationCaseEmbeddable"
          },
          "notificationReason": {
            "$ref": "#/components/schemas/NotificationReason"
          }
        },
        "type": "object"
      },
      "AbsenceCaseEventResources": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "elements": {
            "items": {
              "$ref": "#/components/schemas/AbsenceCaseEventResource"
            },
            "type": "array"
          },
          "hasMoreElements": {
            "description": "<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>",
            "type": "boolean"
          },
          "meta": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "totalSize": {
            "description": "<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "AbsenceDay": {
        "description": "List of Absence Days on the NotificationCase where the employee is approved to leave.",
        "properties": {
          "date": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "leaveApproveDetails": {
            "description": "List of hours per leave type within the Notification Case where the employee is approved to leave.",
            "items": {
              "$ref": "#/components/schemas/LeaveInfo"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "AbsenceEmploymentResource": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "adjustedHireDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "cbaValue": {
            "description": "Collective bargaining agreement code",
            "type": "string"
          },
          "employmentClassification": {
            "$ref": "#/components/schemas/EmploymentClassificationResponse"
          },
          "employmentType": {
            "$ref": "#/components/schemas/EmploymentTypeResponse"
          },
          "employmentWorkState": {
            "$ref": "#/components/schemas/EmploymentWorkStateResponse"
          },
          "hoursWorkedPerYear": {
            "description": "Number of hours an employee has worked in the past 12 months.",
            "format": "int32",
            "type": "integer"
          },
          "id": {
            "description": "Employment record internal reference.",
            "type": "string"
          },
          "keyEmployee": {
            "description": "Is the employee classified as a Key Employee.",
            "type": "boolean"
          },
          "managerName": {
            "description": "The name of the manager of the employee.",
            "type": "string"
          },
          "managerReference": {
            "description": "The customer number that uniquely identifies the manager of the employee.",
            "type": "string"
          },
          "occupationQualifiers": {
            "description": "List of occupation qualifier(s) which have been applied to this employment.",
            "items": {
              "$ref": "#/components/schemas/OccupationQualifiersEmbeddable"
            },
            "type": "array"
          },
          "withinFMLACriteria": {
            "description": "Is the employee working within Federal FMLA defined radius i.e. 50 employees within 75 miles.",
            "type": "boolean"
          },
          "workingAtHome": {
            "description": "Is the employee working at home.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "AbsenceReasonEmbeddable": {
        "description": "A list of absence reasons associated with the given leave plan.",
        "properties": {
          "qualifier1": {
            "description": "The leave request first qualifier.",
            "type": "string"
          },
          "qualifier2": {
            "description": "The leave request second qualifier.",
            "type": "string"
          },
          "reasonName": {
            "description": "The leave request reason.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AccommodationCaseResource": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "accommodations": {
            "description": "List of accommodations contained in the case.",
            "items": {
              "$ref": "#/components/schemas/AccommodationEmbeddable"
            },
            "type": "array"
          },
          "caseHandler": {
            "$ref": "#/components/schemas/CaseHandlerEmbeddable"
          },
          "caseNumber": {
            "description": "Business identifier for this Accommodation Case.",
            "type": "string"
          },
          "closureReasons": {
            "description": "List of reasons given if the case is not being accommodated.",
            "properties": {
              "_links": {
                "additionalProperties": {
                  "description": "Links to the enum domain and enum instance for the API",
                  "type": "string"
                },
                "description": "Links to the enum domain and enum instance for the API",
                "type": "object"
              },
              "domainId": {
                "description": "The <code>domain id</code> of the enum",
                "format": "int64",
                "type": "integer"
              },
              "domainName": {
                "description": "The enum domain name",
                "type": "string"
              },
              "fullId": {
                "description": "The <code>instance id</code> of the enum",
                "format": "int64",
                "type": "integer"
              },
              "instances": {
                "items": {
                  "$ref": "#/components/schemas/TaEnumInstanceSwagger"
                },
                "type": "array"
              },
              "name": {
                "description": "The enum instance name",
                "type": "string"
              }
            },
            "required": [
              "_links",
              "domainId",
              "domainName",
              "fullId",
              "name"
            ],
            "type": "object"
          },
          "decisionDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "employee": {
            "$ref": "#/components/schemas/EmployeeEmbeddable"
          },
          "id": {
            "description": "Unique identifier for the Accommodation Case.",
            "type": "string"
          },
          "limitations": {
            "description": "List of limitations the employee has that they require an accommodation in their job.",
            "properties": {
              "_links": {
                "additionalProperties": {
                  "description": "Links to the enum domain and enum instance for the API",
                  "type": "string"
                },
                "description": "Links to the enum domain and enum instance for the API",
                "type": "object"
              },
              "domainId": {
                "description": "The <code>domain id</code> of the enum",
                "format": "int64",
                "type": "integer"
              },
              "domainName": {
                "description": "The enum domain name",
                "type": "string"
              },
              "fullId": {
                "description": "The <code>instance id</code> of the enum",
                "format": "int64",
                "type": "integer"
              },
              "instances": {
                "items": {
                  "$ref": "#/components/schemas/TaEnumInstanceSwagger"
                },
                "type": "array"
              },
              "name": {
                "description": "The enum instance name",
                "type": "string"
              }
            },
            "required": [
              "_links",
              "domainId",
              "domainName",
              "fullId",
              "name"
            ],
            "type": "object"
          },
          "notificationCase": {
            "$ref": "#/components/schemas/NotificationCaseEmbeddable"
          },
          "notificationDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "phase": {
            "description": "Current phase in the Interactive Accommodation Process required by the Americans With Disabilities Act (ADA) and configured in the system, for example, 'Assessment'.",
            "type": "string"
          },
          "pregnancyRelated": {
            "$ref": "#/components/schemas/PregnancyRelatedResponse"
          },
          "stage": {
            "description": "Current stage in the Interactive Accommodation Process and configured in the system, for example, 'Evaluate Accommodation Options'.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AccommodationCategoryResponse": {
        "description": "Accommodations available are grouped in categories configured in the system, for example, 'Physical workplace modifications or workstation relocation'.(Enum Domain = 6855)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "AccommodationEmbeddable": {
        "description": "List of accommodations contained in the case.",
        "properties": {
          "acceptedDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "accommodationType": {
            "$ref": "#/components/schemas/TaEnumResponseAccommodationType"
          },
          "category": {
            "$ref": "#/components/schemas/AccommodationCategoryResponse"
          },
          "createDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "description": {
            "description": "Additional information when category is 'Other Accommodation' and type is 'Other'.",
            "type": "string"
          },
          "endDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "implementedDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "source": {
            "$ref": "#/components/schemas/AccommodationSourceResponse"
          }
        },
        "type": "object"
      },
      "AccommodationSourceResponse": {
        "description": "Has the accommodation been requested by employee or proposed by employer?. (Enum Domain = 6860)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "AccountDetailEmbeddable": {
        "description": "This is the party's bank account number where a payment is made for an EFT.",
        "properties": {
          "accountName": {
            "description": "Name of the account holder",
            "type": "string"
          },
          "accountNo": {
            "description": "The Account number of the personal account",
            "type": "string"
          },
          "accountType": {
            "$ref": "#/components/schemas/AccountTypeResponse"
          },
          "bankCode": {
            "description": "The Bank Code",
            "type": "string"
          },
          "extensions": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "routingNumber": {
            "description": "Sort code of the Bank",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AccountDetails": {
        "description": "Account details",
        "properties": {
          "accountName": {
            "description": "Name of the account holder",
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "accountNo": {
            "description": "The Account number of the personal account",
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "accountType": {
            "description": "Account type of the bank",
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "bankCode": {
            "description": "The Bank Code",
            "maxLength": 4,
            "minLength": 0,
            "type": "string"
          },
          "classExtensionInformation": {
            "description": "An array of the extensionAttribute objects which contain claim extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "routingNumber": {
            "description": "Sort code of the Bank",
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          }
        },
        "required": [
          "accountName",
          "accountNo",
          "routingNumber"
        ],
        "type": "object"
      },
      "AccountTransferInfo": {
        "description": "get bank account transfer info of an employee.",
        "properties": {
          "bankAccountNumber": {
            "description": "The bank account number of an employee",
            "type": "string"
          },
          "bankAccountType": {
            "description": "The bank account type of an employee",
            "type": "string"
          },
          "bankBranchSortCode": {
            "description": "The employee bank branch sort code",
            "type": "string"
          },
          "bankCode": {
            "description": "The bank code of an employee",
            "type": "string"
          },
          "bankInstituteName": {
            "description": "The bank institute name of an employee",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AccountTypeRequest": {
        "description": "The type of account type the party will have, e.g. saving, checking, (<I>domainId</I> = 2130)",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AccountTypeResponse": {
        "description": "The type of account type the party will have, e.g. saving, checking, (<I>domainId</I> = 2130)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "ActualAbsencePeriodResource": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "actualDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "additionalNotes": {
            "description": "Enter any additional notes about the reported actual time.",
            "type": "string"
          },
          "endDateTime": {
            "description": "ISO 8601 date time format",
            "example": "1999-12-31T23:59:59Z",
            "format": "date-time",
            "type": "string"
          },
          "episodePeriodBasis": {
            "$ref": "#/components/schemas/EpisodeDurationBasisResponse"
          },
          "episodePeriodDuration": {
            "description": "Actual time/duration taken by the employee.",
            "format": "int32",
            "type": "integer"
          },
          "episodicLeaveRequestId": {
            "description": "Id of the related absence period.",
            "type": "string"
          },
          "id": {
            "description": "Unique id of the actual time record.",
            "type": "string"
          },
          "managerAccepted": {
            "$ref": "#/components/schemas/ManagerAcceptedResponse"
          },
          "receivedVia": {
            "$ref": "#/components/schemas/ReceivedViaResponse"
          },
          "reportedBy": {
            "$ref": "#/components/schemas/ReportedByResponse"
          },
          "reportedDateTime": {
            "description": "ISO 8601 date time format",
            "example": "1999-12-31T23:59:59Z",
            "format": "date-time",
            "type": "string"
          },
          "reportingPartyName": {
            "description": "The name of party that reported the actual associated to this reporting information.",
            "type": "string"
          },
          "startDateTime": {
            "description": "ISO 8601 date time format",
            "example": "1999-12-31T23:59:59Z",
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/StatusResponse"
          },
          "timeZone": {
            "$ref": "#/components/schemas/TimeZoneResponse"
          },
          "type": {
            "$ref": "#/components/schemas/TypeResponse"
          }
        },
        "type": "object"
      },
      "ActualAbsencePeriodResources": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "elements": {
            "items": {
              "$ref": "#/components/schemas/ActualAbsencePeriodResource"
            },
            "type": "array"
          },
          "hasMoreElements": {
            "description": "<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>",
            "type": "boolean"
          },
          "meta": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "totalSize": {
            "description": "<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "AdditionalWithholdAmountMoneyRequest": {
        "description": "The additional withholding amount for tax. The amount recorded here does not affect payments within.",
        "properties": {
          "amountMinorUnits": {
            "description": "The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AdditionalWithholdAmountMoneyResponse": {
        "description": "The additional withholding amount for tax. The amount recorded here does not affect payments within.",
        "properties": {
          "amountMinorUnits": {
            "description": "The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
            "format": "int64",
            "type": "integer"
          },
          "currency": {
            "description": "The currency used in the Money amount",
            "type": "string"
          },
          "scale": {
            "description": "The scale used in the Money amount",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Address": {
        "properties": {
          "addressLine1": {
            "description": "Address Line 1",
            "maxLength": 40,
            "minLength": 0,
            "type": "string"
          },
          "addressLine2": {
            "description": "Address Line 2",
            "maxLength": 40,
            "minLength": 0,
            "type": "string"
          },
          "addressLine3": {
            "description": "Address Line 3",
            "maxLength": 40,
            "minLength": 0,
            "type": "string"
          },
          "addressLine4": {
            "description": "Address Line 4",
            "maxLength": 40,
            "minLength": 0,
            "type": "string"
          },
          "addressLine5": {
            "description": "Address Line 5",
            "maxLength": 40,
            "minLength": 0,
            "type": "string"
          },
          "addressLine6": {
            "description": "Address Line 6",
            "maxLength": 40,
            "minLength": 0,
            "type": "string"
          },
          "addressLine7": {
            "description": "Address Line 7",
            "maxLength": 40,
            "minLength": 0,
            "type": "string"
          },
          "classExtensionInformation": {
            "description": "An array of the extensionAttribute objects which contain claim extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "country": {
            "description": "Country",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "postCode": {
            "description": "International Postcode",
            "maxLength": 40,
            "minLength": 0,
            "type": "string"
          },
          "premiseNo": {
            "description": "This is the premise number",
            "maxLength": 5,
            "minLength": 0,
            "type": "string"
          }
        },
        "required": [
          "country"
        ],
        "type": "object"
      },
      "AddressEmbeddable": {
        "properties": {
          "addressLine1": {
            "description": "First line of an address.",
            "type": "string"
          },
          "addressLine2": {
            "description": "Second line of an address.",
            "type": "string"
          },
          "addressLine3": {
            "description": "Third line of an address.",
            "type": "string"
          },
          "addressLine4": {
            "description": "Fourth line of an address.",
            "type": "string"
          },
          "addressLine5": {
            "description": "Fifth line of an address.",
            "type": "string"
          },
          "addressLine6": {
            "description": "Sixth line of an address.",
            "type": "string"
          },
          "addressLine7": {
            "description": "Seventh line of an address.",
            "type": "string"
          },
          "country": {
            "$ref": "#/components/schemas/CountryResponse"
          },
          "extensions": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "extraAustralianFields": {
            "$ref": "#/components/schemas/AustralianAddressEmbeddable"
          },
          "postCode": {
            "description": "International Postcode.",
            "type": "string"
          },
          "premiseNo": {
            "description": "The premise number i.e. the street number.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AltEmploymentCatRequest": {
        "description": "Alternate employment category (<I>domainId</I> = 167)",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AltEmploymentCatResponse": {
        "description": "Alternate employment category (<I>domainId</I> = 167)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "AltGroupClientUserListSchema": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "elements": {
            "items": {
              "$ref": "#/components/schemas/GroupClientUser"
            },
            "type": "array"
          },
          "hasMoreElements": {
            "description": "<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>",
            "type": "boolean"
          },
          "meta": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "totalSize": {
            "description": "<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "AltRoleSchema": {
        "description": "Point of Contact Role (EnumDomainId=25).",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "AltStatusSchema": {
        "description": "The Users Account Status (EnumDomainId=1001).",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "AmountMoneyRequest": {
        "description": "Total earnings amount for the frequency. For Weekly and Bi-Weekly frequencies, a zero Amount should be specified if TotalAmountOverride is false.",
        "properties": {
          "amountMinorUnits": {
            "description": "The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AmountMoneyResponse": {
        "description": "Total earnings amount for the frequency. For Weekly and Bi-Weekly frequencies, a zero Amount should be specified if TotalAmountOverride is false.",
        "properties": {
          "amountMinorUnits": {
            "description": "The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
            "format": "int64",
            "type": "integer"
          },
          "currency": {
            "description": "The currency used in the Money amount",
            "type": "string"
          },
          "scale": {
            "description": "The scale used in the Money amount",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ApiBaseErrorResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/ApiError"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ApiError": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "code": {
            "type": "string"
          },
          "detail": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "meta": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "source": {
            "$ref": "#/components/schemas/ErrorSource"
          },
          "status": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApplicabilityEmbeddable": {
        "description": "Leave plan applicability criteria.",
        "properties": {
          "appliesToStates": {
            "description": "List of US states which the leave plan applies to. A US state (EnumDomainId=138).",
            "properties": {
              "_links": {
                "additionalProperties": {
                  "description": "Links to the enum domain and enum instance for the API",
                  "type": "string"
                },
                "description": "Links to the enum domain and enum instance for the API",
                "type": "object"
              },
              "domainId": {
                "description": "The <code>domain id</code> of the enum",
                "format": "int64",
                "type": "integer"
              },
              "domainName": {
                "description": "The enum domain name",
                "type": "string"
              },
              "fullId": {
                "description": "The <code>instance id</code> of the enum",
                "format": "int64",
                "type": "integer"
              },
              "name": {
                "description": "The enum instance name",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "AustralianAddressEmbeddable": {
        "properties": {
          "buildingName1": {
            "description": "The name of the building.",
            "type": "string"
          },
          "buildingName2": {
            "description": "The name of the building continued.",
            "type": "string"
          },
          "dpId": {
            "description": "Referred to as DPID this is an 8-digit Australian post address identifier which uniquely identifies each delivery point to which Australia Post delivers mail. ",
            "format": "int32",
            "type": "integer"
          },
          "extensions": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "floorLevelNumber": {
            "description": "The floorLevelNumber must not be more than {max} characters",
            "type": "string"
          },
          "floorLevelType": {
            "$ref": "#/components/schemas/AUFloorLevelTypesResponse"
          },
          "lotNumber": {
            "description": "The lot number.",
            "type": "string"
          },
          "postalNumber": {
            "description": "The postal number. ",
            "type": "string"
          },
          "postalNumberPrefix": {
            "description": "This refers to the non-numeric portion preceding the Postal Number. EXAMPLE : PO Box B20 where B is the prefix. ",
            "type": "string"
          },
          "postalNumberSuffix": {
            "description": "This refers to the non-numeric portion following the Postal Number. EXAMPLE : PO Box 20A where A is the suffix.",
            "type": "string"
          },
          "postalType": {
            "$ref": "#/components/schemas/AUPostalTypesResponse"
          },
          "premiseNoSuffix": {
            "description": "The suffix to apply to the number of the premise.",
            "type": "string"
          },
          "premiseNoTo": {
            "description": "The high number in a range for the premise. This is used when an address consists of a range of numbers as in 8-10 Lower Pembroke Street where the value 10 would be stored in this field. ",
            "format": "int32",
            "type": "integer"
          },
          "premiseNoToSuffix": {
            "description": "The suffix to apply to the number to of the premise. ",
            "type": "string"
          },
          "streetSuffix": {
            "$ref": "#/components/schemas/AUStreetSuffixesResponse"
          }
        },
        "type": "object"
      },
      "Base64EncodedFileData": {
        "properties": {
          "base64EncodedFileContents": {
            "description": "The base64 encoded file contents.",
            "type": "string"
          },
          "contentType": {
            "description": "The MIME type of the file.",
            "type": "string"
          },
          "description": {
            "description": "A description of the file.",
            "type": "string"
          },
          "fileExtension": {
            "description": "The extension of the file, without a preceding dot.",
            "type": "string"
          },
          "fileName": {
            "description": "The name of the file, without the extension.",
            "type": "string"
          },
          "fileSizeInBytes": {
            "description": "The size in bytes of the file.",
            "format": "int64",
            "type": "integer"
          },
          "managedReqId": {
            "description": "The Managed Requirement ID to be associated with the file.",
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "base64EncodedFileContents",
          "fileExtension",
          "fileName",
          "fileSizeInBytes"
        ],
        "type": "object"
      },
      "Base64EncodedFileDetails": {
        "properties": {
          "base64EncodedFileContents": {
            "description": "The base64 encoded file contents.",
            "type": "string"
          },
          "contentType": {
            "description": "The MIME type of the file.",
            "type": "string"
          },
          "description": {
            "description": "A description of the file.",
            "type": "string"
          },
          "fileExtension": {
            "description": "The extension of the file, without a preceding dot.",
            "type": "string"
          },
          "fileName": {
            "description": "The name of the file, without the extension.",
            "type": "string"
          }
        },
        "required": [
          "base64EncodedFileContents",
          "fileExtension",
          "fileName"
        ],
        "type": "object"
      },
      "BenefitSummary": {
        "description": "The summary of the disability benefit.",
        "properties": {
          "benefitCaseType": {
            "description": "The name by which the benefit type is referred.",
            "type": "string"
          },
          "benefitHandler": {
            "description": "The person that is handling the benefit.",
            "type": "string"
          },
          "benefitHandlerEmailAddress": {
            "description": "The email address of the benefit handler.",
            "type": "string"
          },
          "benefitHandlerPhoneNo": {
            "description": "The phone number of the benefit handler.",
            "type": "string"
          },
          "benefitId": {
            "description": "The case number of the benefit.",
            "type": "string"
          },
          "benefitIncurredDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "benefitRightCategory": {
            "description": "Information about the category of the benefit right.",
            "type": "string"
          },
          "creationDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "customerName": {
            "description": "The full name of the customer.",
            "type": "string"
          },
          "description": {
            "description": "Description for this case as entered by the user.",
            "type": "string"
          },
          "extensionAttributes": {
            "description": "Extra attributes from extension if any.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "policyReferences": {
            "description": "The reference(s) to the policy from within the relevant admin system.",
            "type": "string"
          },
          "stageName": {
            "description": "The current stage of benefit claim case.",
            "type": "string"
          },
          "status": {
            "description": "This is the stage in the process that the case is currently at.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "BulkCreateActualAbsencePeriodCommand": {
        "properties": {
          "elements": {
            "items": {
              "$ref": "#/components/schemas/CreateActualAbsencePeriodCommand"
            },
            "type": "array"
          }
        },
        "required": [
          "elements"
        ],
        "type": "object"
      },
      "BulkCreateCommandCreateActualAbsencePeriodCommand": {
        "properties": {
          "elements": {
            "items": {
              "$ref": "#/components/schemas/CreateActualAbsencePeriodCommand"
            },
            "type": "array"
          }
        },
        "required": [
          "elements"
        ],
        "type": "object"
      },
      "CancelLeavePeriodsDetails": {
        "properties": {
          "additionalNotes": {
            "description": "Additional notes for leave period change request.",
            "type": "string"
          },
          "changeRequestPeriods": {
            "description": "List of periods for leave period change request.",
            "items": {
              "$ref": "#/components/schemas/CancellationPeriod"
            },
            "maxItems": 20,
            "minItems": 1,
            "type": "array"
          },
          "reason": {
            "description": "Reason for the leave period change request (EnumDomainId=6870). For example, valid reasons for requesting the removal of one or more leave periods are 'Employee Requested Removal' and 'Created in Error'. Valid reasons for requesting the addition of a leave period are 'Add time for identical Absence Reason', 'Add time for different Absence Reason', 'Add time for unknown Absence Reason'",
            "type": "string"
          }
        },
        "required": [
          "changeRequestPeriods",
          "reason"
        ],
        "type": "object"
      },
      "CancellationPeriod": {
        "description": "List of periods for leave period change request.",
        "properties": {
          "endDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "startDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          }
        },
        "required": [
          "endDate",
          "startDate"
        ],
        "type": "object"
      },
      "CaseContactSummary": {
        "properties": {
          "classAttributes": {
            "description": "Optional extension properties",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "contactId": {
            "description": "The ID of the contact",
            "format": "int64",
            "type": "integer"
          },
          "customerName": {
            "description": "The party with whom contact was made.",
            "type": "string"
          },
          "customerRepresentative": {
            "description": "The customer representative.",
            "type": "string"
          },
          "date": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "description": {
            "description": "The contact description",
            "type": "string"
          },
          "direction": {
            "description": "Whether it is incoming or outgoing contact",
            "type": "string"
          },
          "durationInMinutes": {
            "description": "The duration of the contact in minutes",
            "format": "int32",
            "type": "integer"
          },
          "manner": {
            "description": "The manner of the person making the contact e.g. Interested, Uninterested etc.",
            "type": "string"
          },
          "methodOfContact": {
            "description": "The method of contact. E.g. Email, Phone etc.",
            "type": "string"
          },
          "outcome": {
            "description": "The outcome of the contact e.g. Unknown, Sale, No Sale, No Show etc.",
            "type": "string"
          },
          "reason": {
            "description": "The reason for the contact",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CaseEmbeddable": {
        "description": "Child cases of the Notification Case",
        "properties": {
          "caseHandler": {
            "$ref": "#/components/schemas/CaseHandlerEmbeddable"
          },
          "caseNumber": {
            "description": "Case number",
            "type": "string"
          },
          "caseType": {
            "description": "Case type",
            "type": "string"
          },
          "id": {
            "description": "ID used to identify Case",
            "type": "string"
          },
          "status": {
            "description": "The status of the sub-case.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CaseHandler": {
        "description": "Person who is assigned to this accommodation case.",
        "properties": {
          "emailAddress": {
            "description": "Email address of the case handler.",
            "type": "string"
          },
          "name": {
            "description": "Full name of the case handler.",
            "type": "string"
          },
          "phoneNumber": {
            "description": "Phone number of the case handler.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CaseHandlerEmbeddable": {
        "description": "The casehandler associated with the Notification",
        "properties": {
          "emailAddress": {
            "description": "Email Address",
            "type": "string"
          },
          "id": {
            "description": "ID used to uniquely identify case handler",
            "type": "string"
          },
          "name": {
            "description": "Name",
            "type": "string"
          },
          "telephoneNo": {
            "description": "Telephone",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CaseParticipantsSummary": {
        "description": "Participant Summary Details.",
        "properties": {
          "endDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "participantId": {
            "description": "Id of the participant",
            "format": "int64",
            "type": "integer"
          },
          "partyName": {
            "description": "The name of the party with the participant role on the case",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "referenceNo": {
            "description": "The reference number of the party with the participant role on the case",
            "maxLength": 40,
            "minLength": 0,
            "type": "string"
          },
          "rolename": {
            "description": "The role name assigned to the participant on the case",
            "maxLength": 10,
            "minLength": 0,
            "type": "string"
          },
          "sourceSystem": {
            "description": "The source system of the party with the participant role on the case",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "startDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CaseStatusHistory": {
        "properties": {
          "dateStatusDeparted": {
            "description": "Formatted date when benefit's underlying process moved out of a step with this phase.",
            "type": "string"
          },
          "dateStatusEntered": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "status": {
            "description": "The stage in the process that the case was at.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CertificationPeriodDetails": {
        "description": "The certification period details of the disability benefit.",
        "properties": {
          "consultationDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "duration": {
            "description": "The number of days within the certification period.",
            "format": "int64",
            "type": "integer"
          },
          "insurerReceivedDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "notes": {
            "description": "The notes about the certification period.",
            "type": "string"
          },
          "periodFromDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "periodToDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "periodType": {
            "description": "The period type of the certification period.",
            "type": "string"
          },
          "status": {
            "description": "The status of the certification period.",
            "type": "string"
          },
          "statusReason": {
            "description": " The selected reason for the status of a certification period.",
            "type": "string"
          },
          "totalPeriodDays": {
            "description": "The total days of a certification period for a specific period type.\r\nThis is calculated based on the event FINEOS.claims.benefits.calcDaysInPeriodEvent",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ChequeDetailEmbeddable": {
        "properties": {
          "nameToPrintOnCheck": {
            "description": "This is the name that displays on the payee's check. For example, the payee's name, or if there is a nominated payee, In the Estate of followed by the nominated payee's name.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChequeDetails": {
        "description": "Cheque details",
        "properties": {
          "nameToPrintOnCheck": {
            "description": "The name that should be printed on the check",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChequePaymentInfo": {
        "description": "get cheque payment info of an employee.",
        "properties": {
          "chequeNumber": {
            "description": "The cheque number of an employee",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ClaimMedicareLevyExemptionResponse": {
        "description": "Indicates if claiming for full or half medicare exemption. Sample values are 'Full', 'Half'",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "ClaimOccupation": {
        "properties": {
          "additionalEmploymentCategory": {
            "description": "The alternate employment category.",
            "type": "string"
          },
          "dateJobBegan": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "dateJobEnded": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "daysWorkedPerWeek": {
            "description": "The number of days worked per week.",
            "type": "number"
          },
          "employeeId": {
            "description": "The id of an employee in respect of its employer.",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "employer": {
            "description": "The name of the employer.",
            "type": "string"
          },
          "employmentCategory": {
            "description": "The employment category.",
            "type": "string"
          },
          "employmentLocation": {
            "description": "The employment location code.",
            "type": "string"
          },
          "employmentStatus": {
            "description": "The employment status.",
            "type": "string"
          },
          "employmentTitle": {
            "description": "The employment title.",
            "type": "string"
          },
          "endEmploymentReason": {
            "description": "The code for occupation ending.",
            "type": "string"
          },
          "endPosReason": {
            "description": "The reason for job ending.",
            "type": "string"
          },
          "extensionAttributes": {
            "description": "The extension attributes.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "hoursWorkedPerWeek": {
            "description": "The number of hours worked per week.",
            "type": "number"
          },
          "jobDesc": {
            "description": "The job description.",
            "type": "string"
          },
          "jobStrenuous": {
            "description": "The job strenuous.",
            "type": "string"
          },
          "jobTitle": {
            "description": "The job title.",
            "type": "string"
          },
          "primary": {
            "description": "Is occupation the primary one?",
            "type": "boolean"
          },
          "remarks": {
            "description": "The occupation remarks.",
            "type": "string"
          },
          "selfEmployed": {
            "description": "Is occupation considered self-employed?",
            "type": "boolean"
          },
          "workPatternBasis": {
            "description": "The work pattern basis.",
            "type": "string"
          },
          "workScheduleDescription": {
            "description": "The work schedule description.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ClaimSummary": {
        "properties": {
          "caseComplexity": {
            "description": "Case complexity on Claim",
            "type": "string"
          },
          "claimHandler": {
            "description": "The Person that is handling the claim.",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "claimHandlerEmailAddress": {
            "description": "The email address of the claim handler.",
            "maxLength": 40,
            "minLength": 0,
            "type": "string"
          },
          "claimHandlerPhoneNo": {
            "description": "The phone number of the claim handler.",
            "maxLength": 20,
            "minLength": 0,
            "type": "string"
          },
          "claimId": {
            "description": "The claim number of the claim",
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "claimType": {
            "description": "The name by which the claim type is referred.",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "classExtensionInformation": {
            "description": "An array of the extensionAttribute objects which contain extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "creationDate": {
            "description": "ISO 8601 date time format",
            "example": "1999-12-31T23:59:59Z",
            "format": "date-time",
            "type": "string"
          },
          "customerName": {
            "description": "The customer name of the claim",
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "description": {
            "description": "Description for this case as entered by the user.",
            "maxLength": 2000,
            "minLength": 0,
            "type": "string"
          },
          "effectiveDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "notificationCaseId": {
            "description": "The notification case number of the claim case if applicable.",
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "notificationDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "policyReferences": {
            "description": "The reference(s) to the policy from within the relevant admin system.",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "stageName": {
            "description": "The current stage of claim case.",
            "type": "string"
          },
          "status": {
            "description": "This is the stage in the process that the case is currently at.",
            "maxLength": 10,
            "minLength": 0,
            "type": "string"
          }
        },
        "required": [
          "claimId",
          "claimType"
        ],
        "type": "object"
      },
      "ClientDominantSideRequest": {
        "description": "A snapshot of the claimant's dominant side at the time this claim was created (<I>EnumDomainId=2294</I>). Sample values are 'Unknown', 'Right' and 'Left'.",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ClientDominantSideResponse": {
        "description": "A snapshot of the claimant's dominant side at the time this claim was created (<I>EnumDomainId=2294</I>). Sample values are 'Unknown', 'Right' and 'Left'.",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "ClosureReasonsResponse": {
        "description": "List of reasons given if the case is not being accommodated.",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "CommunicationPreferenceResource": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "contactContext": {
            "$ref": "#/components/schemas/ContactMethodResponse"
          },
          "emailAddresses": {
            "description": "List of email addresses linked to the preference context",
            "items": {
              "$ref": "#/components/schemas/EmailAddressResource"
            },
            "type": "array"
          },
          "id": {
            "description": "Id of the communication preference, matching the full ID of the contact context enum",
            "type": "string"
          },
          "phoneNumbers": {
            "description": "List of phone numbers linked to the preference context",
            "items": {
              "$ref": "#/components/schemas/PhoneNumberResource"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CommunicationPreferences": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "elements": {
            "items": {
              "$ref": "#/components/schemas/CommunicationPreferenceResource"
            },
            "type": "array"
          },
          "hasMoreElements": {
            "description": "<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>",
            "type": "boolean"
          },
          "meta": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "totalSize": {
            "description": "<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ConditionCategoryRequest": {
        "description": "A high-level indicator of the medical condition being claimed (<I>EnumDomainId=2562</I>). Possible values are 'Unknown', 'Appendectomy', 'Hysterectomy', 'Gallbladder surgery', 'Bunionectomy', 'Hernia' , 'Pregnancy', 'Broken Bone', 'Other Surgery', 'Other Condition' and 'Cancer'.",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ConditionCategoryResponse": {
        "description": "A high-level indicator of the medical condition being claimed (<I>EnumDomainId=2562</I>). Possible values are 'Unknown', 'Appendectomy', 'Hysterectomy', 'Gallbladder surgery', 'Bunionectomy', 'Hernia' , 'Pregnancy', 'Broken Bone', 'Other Surgery', 'Other Condition' and 'Cancer'.",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "ContactMethodResponse": {
        "description": "Contact context identifying the preference",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "ContractualEarnings": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "amount": {
            "$ref": "#/components/schemas/AmountMoneyResponse"
          },
          "earningsType": {
            "$ref": "#/components/schemas/EarningsTypeResponse"
          },
          "effectiveDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "endDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "extensions": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "frequency": {
            "$ref": "#/components/schemas/EarningsBasisFrequencyResponse"
          },
          "id": {
            "type": "string"
          },
          "standardHourlyRate": {
            "$ref": "#/components/schemas/StandardHourlyRateMoneyResponse"
          },
          "standardHours": {
            "description": "Number of hours in a standard working period. In use for Weekly and Bi-Weekly frequcies only, when TotalAmountOverrride is false",
            "type": "string"
          },
          "totalAmountOverride": {
            "description": "For Weekly and Bi-Weekly frequencies, determines whether earnings were specified using Amount (true) or StandardHours and StandardHourlyRate.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ContractualEarningsList": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "elements": {
            "items": {
              "$ref": "#/components/schemas/ContractualEarnings"
            },
            "type": "array"
          },
          "hasMoreElements": {
            "description": "<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>",
            "type": "boolean"
          },
          "meta": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "totalSize": {
            "description": "<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "CountryRequest": {
        "description": "Country for the address e.g. Ireland, USA (<I>domainId</I> = 21)",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CountryResponse": {
        "description": "Country for the address e.g. Ireland, USA (<I>domainId</I> = 21)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "CreateAUTaxCodeDetailsCommand": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateRegionTaxCodeDetailsCommand"
          },
          {
            "properties": {
              "claimVaryOffset": {
                "description": "Indicates if there is a withholding variation.",
                "type": "boolean"
              },
              "combinedIncome": {
                "description": "Indicates if combinedIncome is greater than a set amount.",
                "type": "boolean"
              },
              "levyExemption": {
                "$ref": "#/components/schemas/LevyExemptionRequest"
              },
              "levyReduction": {
                "description": "Indicates if claiming medicare levy reduction..",
                "type": "boolean"
              },
              "maritalRelationshipStatus": {
                "$ref": "#/components/schemas/MaritalRelationshipStatusRequest"
              },
              "medicareLevySurcharge": {
                "$ref": "#/components/schemas/MedicareLevySurchargeRequest"
              },
              "noDependents": {
                "description": "Number of dependents claimed.",
                "format": "int32",
                "type": "integer"
              },
              "qualifyMedicareLevyExemption": {
                "description": "Indicates if qualifies for medicare levy exemption.",
                "type": "boolean"
              },
              "residentialStatus": {
                "$ref": "#/components/schemas/ResidentialStatusRequest"
              },
              "seniorsPensionersOffset": {
                "description": "Indicates if Claim or Vary Seniors Pensioners Offset.",
                "type": "boolean"
              },
              "spouse": {
                "description": "Indicates if spouse has claimed.",
                "type": "boolean"
              },
              "studyAndTrainingLoan": {
                "description": "Indicates if has a study/training loan.",
                "type": "boolean"
              },
              "taxFreeThresholdClaimed": {
                "description": "Indicates if the tax free threshold claimed.",
                "type": "boolean"
              },
              "taxOffsets": {
                "$ref": "#/components/schemas/TaxOffsetsMoneyRequest"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "CreateAbsenceEmploymentCommand": {
        "properties": {
          "adjustedHireDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "cbaValue": {
            "description": "Collective bargaining agreement code",
            "type": "string"
          },
          "employmentClassification": {
            "$ref": "#/components/schemas/EmploymentClassificationRequest"
          },
          "employmentType": {
            "$ref": "#/components/schemas/EmploymentTypeRequest"
          },
          "employmentWorkState": {
            "$ref": "#/components/schemas/EmploymentWorkStateRequest"
          },
          "hoursWorkedPerYear": {
            "description": "Number of hours an employee has worked in the past 12 months.",
            "format": "int32",
            "type": "integer"
          },
          "keyEmployee": {
            "description": "Is the employee classified as a Key Employee.",
            "type": "boolean"
          },
          "managerReference": {
            "description": "The customer number that uniquely identifies the manager of the employee.",
            "type": "string"
          },
          "withinFMLACriteria": {
            "description": "Is the employee working within Federal FMLA defined radius i.e. 50 employees within 75 miles.",
            "type": "boolean"
          },
          "workingAtHome": {
            "description": "Is the employee working at home.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "CreateAbsencePeriodTypeRequest": {
        "description": "Type of the actual time taken by the employee on the episodic leave request. It is an optional attribute, if not provided then the default Time Off will be populated. Absence Period Type Enum Domain (<I>domainId</I> = 6811).",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CreateAccountDetailCommand": {
        "description": "Account Detail Request",
        "properties": {
          "accountName": {
            "description": "Name of the account holder",
            "maxLength": 256,
            "type": "string"
          },
          "accountNo": {
            "description": "The Account number of the personal account",
            "maxLength": 256,
            "type": "string"
          },
          "accountType": {
            "$ref": "#/components/schemas/AccountTypeRequest"
          },
          "bankCode": {
            "description": "The Bank Code",
            "maxLength": 4,
            "type": "string"
          },
          "extensions": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "routingNumber": {
            "description": "Sort code of the Bank",
            "maxLength": 256,
            "type": "string"
          }
        },
        "required": [
          "accountName",
          "accountNo",
          "routingNumber"
        ],
        "type": "object"
      },
      "CreateActualAbsencePeriodCommand": {
        "properties": {
          "actualDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "additionalNotes": {
            "description": "Enter any additional notes about the reported actual time.",
            "maxLength": 250,
            "minLength": 0,
            "type": "string"
          },
          "endDateTime": {
            "description": "ISO 8601 date time format",
            "example": "1999-12-31T23:59:59Z",
            "format": "date-time",
            "type": "string"
          },
          "episodePeriodBasis": {
            "$ref": "#/components/schemas/EpisodePeriodDurationBasisRequest"
          },
          "episodePeriodDuration": {
            "description": "Actual time/duration taken by the employee.",
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          },
          "reportedDateTime": {
            "description": "ISO 8601 date time format",
            "example": "1999-12-31T23:59:59Z",
            "format": "date-time",
            "type": "string"
          },
          "startDateTime": {
            "description": "ISO 8601 date time format",
            "example": "1999-12-31T23:59:59Z",
            "format": "date-time",
            "type": "string"
          },
          "timeZone": {
            "$ref": "#/components/schemas/TimeZoneRequest"
          },
          "type": {
            "$ref": "#/components/schemas/CreateAbsencePeriodTypeRequest"
          }
        },
        "required": [
          "actualDate",
          "episodePeriodBasis",
          "episodePeriodDuration"
        ],
        "type": "object"
      },
      "CreateAddressCommand": {
        "description": "Address Command",
        "properties": {
          "addressLine1": {
            "description": "First line of an address.",
            "maxLength": 40,
            "type": "string"
          },
          "addressLine2": {
            "description": "Second line of an address.",
            "maxLength": 40,
            "type": "string"
          },
          "addressLine3": {
            "description": "Third line of an address.",
            "maxLength": 40,
            "type": "string"
          },
          "addressLine4": {
            "description": "Fourth line of an address.",
            "maxLength": 40,
            "type": "string"
          },
          "addressLine5": {
            "description": "Fifth line of an address.",
            "maxLength": 40,
            "type": "string"
          },
          "addressLine6": {
            "description": "Sixth line of an address.",
            "maxLength": 40,
            "type": "string"
          },
          "addressLine7": {
            "description": "Seventh line of an address.",
            "maxLength": 40,
            "type": "string"
          },
          "country": {
            "$ref": "#/components/schemas/CountryRequest"
          },
          "extensions": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "extraAustralianFields": {
            "$ref": "#/components/schemas/CreateAustralianAddressCommand"
          },
          "postCode": {
            "description": "International Postcode.",
            "maxLength": 40,
            "type": "string"
          },
          "premiseNo": {
            "description": "The premise number i.e. the street number.",
            "maxLength": 50,
            "type": "string"
          }
        },
        "required": [
          "country"
        ],
        "type": "object"
      },
      "CreateAustralianAddressCommand": {
        "properties": {
          "buildingName1": {
            "description": "The name of the building.",
            "maxLength": 30,
            "type": "string"
          },
          "buildingName2": {
            "description": "The name of the building continued.",
            "maxLength": 30,
            "type": "string"
          },
          "dpId": {
            "description": "Referred to as DPID this is an 8-digit Australian post address identifier which uniquely identifies each delivery point to which Australia Post delivers mail. ",
            "format": "int32",
            "type": "integer"
          },
          "extensions": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "floorLevelNumber": {
            "description": "The floorLevelNumber must not be more than {max} characters",
            "maxLength": 2,
            "type": "string"
          },
          "floorLevelType": {
            "$ref": "#/components/schemas/AUFloorLevelTypesRequest"
          },
          "lotNumber": {
            "description": "The lot number.",
            "maxLength": 6,
            "type": "string"
          },
          "postalNumber": {
            "description": "The postal number. ",
            "maxLength": 6,
            "type": "string"
          },
          "postalNumberPrefix": {
            "description": "This refers to the non-numeric portion preceding the Postal Number. EXAMPLE : PO Box B20 where B is the prefix. ",
            "maxLength": 3,
            "type": "string"
          },
          "postalNumberSuffix": {
            "description": "This refers to the non-numeric portion following the Postal Number. EXAMPLE : PO Box 20A where A is the suffix.",
            "maxLength": 3,
            "type": "string"
          },
          "postalType": {
            "$ref": "#/components/schemas/AUPostalTypesRequest"
          },
          "premiseNoSuffix": {
            "description": "The suffix to apply to the number of the premise.",
            "maxLength": 1,
            "type": "string"
          },
          "premiseNoTo": {
            "description": "The high number in a range for the premise. This is used when an address consists of a range of numbers as in 8-10 Lower Pembroke Street where the value 10 would be stored in this field. ",
            "format": "int32",
            "type": "integer"
          },
          "premiseNoToSuffix": {
            "description": "The suffix to apply to the number to of the premise. ",
            "maxLength": 1,
            "type": "string"
          },
          "streetSuffix": {
            "$ref": "#/components/schemas/AUStreetSuffixesRequest"
          }
        },
        "required": [
          "floorLevelType",
          "postalType",
          "streetSuffix"
        ],
        "type": "object"
      },
      "CreateChequeDetailCommand": {
        "description": "Cheque Detail",
        "properties": {
          "nameToPrintOnCheck": {
            "description": "This is the name that displays on the payee's check. For example, the payee's name, or if there is a nominated payee, In the Estate of followed by the nominated payee's name.",
            "maxLength": 100,
            "type": "string"
          }
        },
        "type": "object"
      },
      "CreateContractualEarningsCommand": {
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/AmountMoneyRequest"
          },
          "earningsType": {
            "$ref": "#/components/schemas/EarningsTypeRequest"
          },
          "effectiveDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "endDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "extensions": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "frequency": {
            "$ref": "#/components/schemas/EarningsBasisFrequencyRequest"
          },
          "standardHourlyRate": {
            "$ref": "#/components/schemas/StandardHourlyRateMoneyRequest"
          },
          "standardHours": {
            "description": "Number of hours in a standard working period. In use for Weekly and Bi-Weekly frequcies only, when TotalAmountOverrride is false",
            "type": "string"
          },
          "totalAmountOverride": {
            "description": "For Weekly and Bi-Weekly frequencies, determines whether earnings were specified using Amount (true) or StandardHours and StandardHourlyRate.",
            "type": "boolean"
          }
        },
        "required": [
          "earningsType",
          "totalAmountOverride"
        ],
        "type": "object"
      },
      "CreateEmailAddressCommand": {
        "properties": {
          "emailAddress": {
            "pattern": "^[\\w!#$%&'*+/=?`{|}~^-]+(?:\\.[\\w!#$%&'*+/=?`{|}~^-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,6}$",
            "type": "string"
          },
          "extensions": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          }
        },
        "required": [
          "emailAddress"
        ],
        "type": "object"
      },
      "CreateNZTaxCodeDetailsCommand": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateRegionTaxCodeDetailsCommand"
          },
          {
            "properties": {
              "extraPayTaxRate": {
                "$ref": "#/components/schemas/ExtraPayTaxRateRequest"
              },
              "irTaxCodeChange": {
                "description": "The tax office may direct the insurer to use a different tax code than the client declared one. This field indicates where the tax office has ordered a tax code change.",
                "type": "boolean"
              },
              "isGSTRegistered": {
                "description": "Denotes if a payee is liable for Goods and Services Tax (GST)",
                "type": "boolean"
              },
              "kiwiSaverStatus": {
                "$ref": "#/components/schemas/KiwiSaverStatusRequest"
              },
              "studLoanThresholdApplies": {
                "description": "Denotes if a Student Loan Repayment Threshold Applies",
                "type": "boolean"
              },
              "taxCertNumber": {
                "description": "When a payee (client usually) has an individual tax agreement with IRD, i.e. to use a non-standard tax rate, this is the reference number of the tax certificate issued by IRD.",
                "type": "string"
              },
              "taxCodeRateNonStdStudLoan": {
                "description": "Indicates what rate to use for student loan for a non-standard tax code.",
                "type": "string"
              },
              "withholdingTaxStatus": {
                "$ref": "#/components/schemas/WithholdingTaxStatusRequest"
              },
              "zeroStudLoanTaxCodeRate": {
                "description": "Indicates if a rate of zero is entered for the TaxCodeRateNonStdStudLoan field that this was intentional.",
                "type": "boolean"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "CreatePaymentPreferenceCommand": {
        "properties": {
          "accountDetail": {
            "$ref": "#/components/schemas/CreateAccountDetailCommand"
          },
          "address": {
            "$ref": "#/components/schemas/CreateAddressCommand"
          },
          "chequeDetail": {
            "$ref": "#/components/schemas/CreateChequeDetailCommand"
          },
          "description": {
            "description": "Payment preference description.",
            "maxLength": 150,
            "type": "string"
          },
          "effectiveFromDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "effectiveToDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "extensions": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "isDefault": {
            "type": "boolean"
          },
          "overridePostalAddress": {
            "description": "This indicator will be used to override the address or use the customer current address. If true then override the address, else use the customer default address.",
            "type": "boolean"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/PaymentMethodRequest"
          }
        },
        "required": [
          "paymentMethod"
        ],
        "type": "object"
      },
      "CreatePhoneNumberCommand": {
        "properties": {
          "areaCode": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string"
          },
          "contactMethod": {
            "$ref": "#/components/schemas/EnumCommand"
          },
          "exDirectory": {
            "type": "boolean"
          },
          "extension": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string"
          },
          "extensions": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "intCode": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string"
          },
          "telephoneNo": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string"
          }
        },
        "required": [
          "contactMethod"
        ],
        "type": "object"
      },
      "CreateRegionTaxCodeDetailsCommand": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/CreateAUTaxCodeDetailsCommand"
          },
          {
            "$ref": "#/components/schemas/CreateNZTaxCodeDetailsCommand"
          }
        ],
        "type": "object"
      },
      "CreateTaxCodeRecordCommand": {
        "properties": {
          "additionalWithholdAmount": {
            "$ref": "#/components/schemas/AdditionalWithholdAmountMoneyRequest"
          },
          "dependentDeductions": {
            "$ref": "#/components/schemas/DependentDeductionsMoneyRequest"
          },
          "effectiveDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "endDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "extensions": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "filingMaritalStatus": {
            "$ref": "#/components/schemas/FilingMaritalStatusRequest"
          },
          "nonStdDeductions": {
            "$ref": "#/components/schemas/NonStdDeductionsMoneyRequest"
          },
          "numberExemptions": {
            "description": "The tax exemptions e.g. number of exemptions accumulated.",
            "format": "int64",
            "type": "integer"
          },
          "otherIncome": {
            "$ref": "#/components/schemas/OtherIncomeMoneyRequest"
          },
          "percentageRate": {
            "description": "A percentage rate for tax record. The percentageRate must be of precision 10,2.",
            "type": "string"
          },
          "regionTaxCodeDetails": {
            "$ref": "#/components/schemas/CreateRegionTaxCodeDetailsCommand"
          },
          "taxCode": {
            "$ref": "#/components/schemas/TaxCodeRequest"
          },
          "taxType": {
            "$ref": "#/components/schemas/TaxTypeRequest"
          },
          "version": {
            "$ref": "#/components/schemas/VersionRequest"
          }
        },
        "required": [
          "taxCode",
          "taxType",
          "version"
        ],
        "type": "object"
      },
      "CreateWebMessageCommand": {
        "properties": {
          "narrative": {
            "description": "Narrative for WebMessage",
            "type": "string"
          },
          "subject": {
            "description": "Subject for WebMessage",
            "type": "string"
          }
        },
        "required": [
          "narrative",
          "subject"
        ],
        "type": "object"
      },
      "CreateWeekBasedWorkPatternCommand": {
        "properties": {
          "patternStartDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "patternStatus": {
            "$ref": "#/components/schemas/PatternStatusRequest"
          },
          "workPatternDays": {
            "description": "List of days which make up the pattern. There can be 7, 14, 21 or 28 of these.",
            "items": {
              "$ref": "#/components/schemas/CreateWorkPatternDayCommand"
            },
            "type": "array"
          },
          "workPatternType": {
            "$ref": "#/components/schemas/WorkPatternTypeRequest"
          },
          "workWeekStarts": {
            "$ref": "#/components/schemas/WorkWeekStartsRequest"
          }
        },
        "required": [
          "workPatternDays",
          "workPatternType"
        ],
        "type": "object"
      },
      "CreateWorkPatternDayCommand": {
        "description": "List of days which make up the pattern. There can be 7, 14, 21 or 28 of these.",
        "properties": {
          "dayOfWeek": {
            "$ref": "#/components/schemas/DayOfWeekRequest"
          },
          "hours": {
            "description": "The number of whole working hours on this day in the work pattern (0-24)",
            "format": "int32",
            "minimum": 0,
            "type": "integer"
          },
          "minutes": {
            "description": "The number of minutes on this day in the work pattern (0-59)",
            "format": "int32",
            "minimum": 0,
            "type": "integer"
          },
          "weekNumber": {
            "description": "The number of the week in the pattern within which this day occurs (1, 2, 3 or 4)",
            "format": "int32",
            "minimum": 0,
            "type": "integer"
          }
        },
        "required": [
          "dayOfWeek",
          "hours",
          "minutes",
          "weekNumber"
        ],
        "type": "object"
      },
      "CurrentPhaseResponse": {
        "description": "The status of the payment preference (EnumDomainId = 255).",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "Customer": {
        "description": "Customer details of the claim.",
        "properties": {
          "classExtensionInformation": {
            "description": "An array of the extensionAttribute objects which contain customer (OCPerson) extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "customerAddress": {
            "$ref": "#/components/schemas/CustomerAddress"
          },
          "dateOfBirth": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "firstName": {
            "description": "Person's first name.",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "gender": {
            "description": "The person's gender.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "idNumber": {
            "description": "ID number of the claimant.",
            "maxLength": 10,
            "minLength": 0,
            "type": "string"
          },
          "identificationNumberType": {
            "description": "The type of identification number the party will have.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "initals": {
            "type": "string",
            "writeOnly": true
          },
          "initials": {
            "description": "Person's middle initials.",
            "maxLength": 10,
            "minLength": 0,
            "type": "string"
          },
          "lastName": {
            "description": "Person's last name.",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "maritalStatus": {
            "description": "Person's marital status - single / married / etc.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "nationality": {
            "description": "Person's nationality.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "needsInterpretor": {
            "description": "Indicates if the customer needs an interpreter.",
            "type": "boolean"
          },
          "partyType": {
            "type": "string"
          },
          "placeOfBirth": {
            "description": "Place of birth.",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "secondName": {
            "description": "Person's second name.",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "securedClient": {
            "description": "Secured client flag.",
            "type": "boolean"
          },
          "staff": {
            "description": "Staff flag.",
            "type": "boolean"
          },
          "title": {
            "description": "Person's chosen title e.g. Mr / Mrs etc.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          }
        },
        "required": [
          "dateOfBirth",
          "firstName",
          "lastName"
        ],
        "type": "object"
      },
      "CustomerAddress": {
        "description": "The person's address.",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "australianAddress": {
            "$ref": "#/components/schemas/ExtendedAddress"
          }
        },
        "required": [
          "address"
        ],
        "type": "object"
      },
      "CustomerEmbeddable": {
        "description": "Customer Associated with WebMessage",
        "properties": {
          "firstName": {
            "description": "The First Name of the Customer",
            "type": "string"
          },
          "id": {
            "description": "Resource Id of the case for which we want to retrieve the web messages.",
            "type": "string"
          },
          "lastName": {
            "description": "The Last Name of the Customer",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CustomerInfo": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "address": {
            "$ref": "#/components/schemas/AddressEmbeddable"
          },
          "customerNo": {
            "description": "Customer number",
            "type": "string"
          },
          "dateOfBirth": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "dateOfDeath": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "extensions": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "firstName": {
            "description": "Person's first name",
            "type": "string"
          },
          "gender": {
            "$ref": "#/components/schemas/GenderResponse"
          },
          "id": {
            "type": "string"
          },
          "idNumber": {
            "description": "ID number of the claimant. The ID number could be something like social security number, or tax identificaiton number. They ID type is indicated by the value of the <code>identificationNumberType</code> field.",
            "type": "string"
          },
          "identificationNumberType": {
            "$ref": "#/components/schemas/IdentificationNumberTypeResponse"
          },
          "initials": {
            "description": "Person's middle initials",
            "type": "string"
          },
          "isDeceased": {
            "description": "The person is deceased flag",
            "type": "boolean"
          },
          "lastName": {
            "description": "Person's last name",
            "type": "string"
          },
          "maritalStatus": {
            "$ref": "#/components/schemas/MaritalStatusResponse"
          },
          "nationality": {
            "$ref": "#/components/schemas/NationalityResponse"
          },
          "needsInterpreter": {
            "description": "Indicates if the customer needs an interpreter",
            "type": "boolean"
          },
          "partyType": {
            "$ref": "#/components/schemas/PartyTypeResponse"
          },
          "placeOfBirth": {
            "description": "Place of Birth",
            "type": "string"
          },
          "secondName": {
            "description": "Person's second name",
            "type": "string"
          },
          "securedClient": {
            "description": "Secured client flag",
            "type": "boolean"
          },
          "staff": {
            "description": "Staff flag",
            "type": "boolean"
          },
          "title": {
            "$ref": "#/components/schemas/TitleResponse"
          }
        },
        "type": "object"
      },
      "CustomerOccupation": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "altEmploymentCat": {
            "$ref": "#/components/schemas/AltEmploymentCatResponse"
          },
          "daysWorkedPerWeek": {
            "description": "The number of days worked per week, which can be specified with partial days",
            "type": "string"
          },
          "empLocationCode": {
            "$ref": "#/components/schemas/EmpLocationCodeResponse"
          },
          "employeeIdentifier": {
            "description": "Reference identifier of an employee in respect of its employer",
            "type": "string"
          },
          "employmentCat": {
            "$ref": "#/components/schemas/EmploymentCatResponse"
          },
          "employmentStatus": {
            "$ref": "#/components/schemas/EmploymentStatusResponse"
          },
          "employmentTitle": {
            "$ref": "#/components/schemas/EmploymentTitleResponse"
          },
          "endPosCode": {
            "$ref": "#/components/schemas/EndPosCodeResponse"
          },
          "endPosReason": {
            "description": "he reason for job ending",
            "type": "string"
          },
          "extensions": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "hrsWorkedPerWeek": {
            "description": "The number of hours worked per week, which can be specified using partial hours",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "jobDesc": {
            "description": "Job description",
            "type": "string"
          },
          "jobEndDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "jobStartDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "jobStrenuous": {
            "$ref": "#/components/schemas/JobStrenuousResponse"
          },
          "jobTitle": {
            "description": "Job title",
            "type": "string"
          },
          "occCodeName": {
            "description": "The name(s) associated with the specific Occupation Industry Classification Code id",
            "type": "string"
          },
          "occCodeReference": {
            "description": "Occupation Industry Classification Code id",
            "type": "string"
          },
          "orgUnitName": {
            "description": "The name of the organisation unit within the employer organisation structure - reference only field",
            "type": "string"
          },
          "overrideDaysWorkedPerWeek": {
            "description": "Is override days worked per week true or false?",
            "type": "boolean"
          },
          "remarks": {
            "description": "Remarks about the Occupation",
            "type": "string"
          },
          "timeZone": {
            "$ref": "#/components/schemas/TimeZoneResponse"
          },
          "workPatternBasis": {
            "description": "Indicates the type of work pattern in use - reference only field",
            "type": "string"
          },
          "workSchDesc": {
            "description": "Work schedule description",
            "type": "string"
          },
          "worksiteName": {
            "description": "The name of the employer location which the occupation is related to - reference only field",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CustomerOccupationWeekBasedWorkPattern": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "patternStartDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "patternStatus": {
            "$ref": "#/components/schemas/PatternStatusResponse"
          },
          "workPatternDays": {
            "description": "List of days which make up the pattern. There can be 7, 14, 21 or 28 of these.",
            "items": {
              "$ref": "#/components/schemas/WorkPatternDayResponse"
            },
            "type": "array"
          },
          "workPatternType": {
            "$ref": "#/components/schemas/WeekBasedWorkPatternTypeResponse"
          },
          "workWeekStarts": {
            "$ref": "#/components/schemas/WorkWeekStartsResponse"
          }
        },
        "type": "object"
      },
      "CustomerOccupations": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "elements": {
            "items": {
              "$ref": "#/components/schemas/CustomerOccupation"
            },
            "type": "array"
          },
          "hasMoreElements": {
            "description": "<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>",
            "type": "boolean"
          },
          "meta": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "totalSize": {
            "description": "<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "CustomerResource": {
        "description": "The customer the notification is associated with",
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "customerNo": {
            "description": "Customer number",
            "type": "string"
          },
          "dateOfBirth": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "employeeID": {
            "description": "The Customer's employee id. This field will be populated if the Customer represents an Employee i.e. a person with one current occupation where the Group Client is listed as the Employer.",
            "type": "string"
          },
          "firstName": {
            "description": "The First Name of the Customer",
            "type": "string"
          },
          "id": {
            "description": "An id that uniquely identifies the customer record.",
            "type": "string"
          },
          "idNumber": {
            "description": "The Customer's id number, could be SSN or national security number",
            "type": "string"
          },
          "jobTitle": {
            "description": "The Customer's job title. This field will be populated if the Customer represents an Employee i.e. a person with one current occupation where the Group Client is listed as the Employer.",
            "type": "string"
          },
          "lastName": {
            "description": "The Last Name of the Customer",
            "type": "string"
          },
          "organisationUnit": {
            "description": "The Customer's organisation unit. This field will be populated if the Customer represents an Employee i.e. a person with one current occupation where the Group Client is listed as the Employer.",
            "type": "string"
          },
          "workSite": {
            "description": "The Customer's worksite. This field will be populated if the Customer represents an Employee i.e. a person with one current occupation where the Group Client is listed as the Employer.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CustomerResources": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "elements": {
            "items": {
              "$ref": "#/components/schemas/CustomerResource"
            },
            "type": "array"
          },
          "hasMoreElements": {
            "description": "<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>",
            "type": "boolean"
          },
          "meta": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "totalSize": {
            "description": "<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "DayOfWeekRequest": {
        "description": "Day of the week (ENUM DomainId=169)",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Decision": {
        "description": "List of Period Decisions for the given absence or employee",
        "properties": {
          "absence": {
            "$ref": "#/components/schemas/Absence"
          },
          "employee": {
            "$ref": "#/components/schemas/Employee"
          },
          "period": {
            "$ref": "#/components/schemas/Period"
          }
        },
        "type": "object"
      },
      "DeliveryTypeRequest": {
        "description": "Indicates the type of delivery following pregnancy (<I>EnumDomainId=2478</I>). Sample values are 'Unknown', 'C-Section' and 'Multiple Births'.",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeliveryTypeResponse": {
        "description": "Indicates the type of delivery following pregnancy (<I>EnumDomainId=2478</I>). Sample values are 'Unknown', 'C-Section' and 'Multiple Births'.",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "DependentDeductionsMoneyRequest": {
        "description": "Specifies the amount for dependent deductions.",
        "properties": {
          "amountMinorUnits": {
            "description": "The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DependentDeductionsMoneyResponse": {
        "description": "Specifies the amount for dependent deductions.",
        "properties": {
          "amountMinorUnits": {
            "description": "The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
            "format": "int64",
            "type": "integer"
          },
          "currency": {
            "description": "The currency used in the Money amount",
            "type": "string"
          },
          "scale": {
            "description": "The scale used in the Money amount",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "DiagnosisDetails": {
        "properties": {
          "causeGrouping": {
            "description": "The name of the medical code group in which this medical code is contained.",
            "maxLength": 500,
            "minLength": 0,
            "type": "string"
          },
          "description": {
            "description": "A description of the medical code.",
            "maxLength": 500,
            "minLength": 0,
            "type": "string"
          },
          "diagnosisDetailsId": {
            "description": "Business Entity OID",
            "example": "PE-00012-0000001234",
            "format": "string",
            "maxLength": 10,
            "minLength": 0,
            "type": "string"
          },
          "firstPrimaryCode": {
            "description": "Indicates whether or not this is the first medical code identified with the primary level indicator.",
            "type": "boolean"
          },
          "groupType": {
            "description": "Specifies the type of the medical code group.",
            "type": "string"
          },
          "levelIndicator": {
            "description": "The injury code level e.g. primary or secondary assigned to the injury in the context of the claim.",
            "type": "string"
          },
          "medicalCode": {
            "description": "The code ID that specifies a particular diagnosis.",
            "maxLength": 20,
            "minLength": 0,
            "type": "string"
          }
        },
        "type": "object"
      },
      "DisabilityBenefit": {
        "description": "The details of the disability benefit.",
        "properties": {
          "accidentBasisOfMaxBenefitPeriod": {
            "description": "Basis for the maximum period for an accident.",
            "type": "string"
          },
          "accidentEliminationPeriod": {
            "description": "Elimination Period units for accident.",
            "format": "int64",
            "type": "integer"
          },
          "accidentMaxBenefitPeriod": {
            "description": "Number of units in the maximum period for an accident. The maximum length of the period to be paid if the customer remains disabled.",
            "format": "int64",
            "type": "integer"
          },
          "administrationType": {
            "description": "Specify the AdministrationType for the Funding Arrangement.",
            "type": "string"
          },
          "adviceToPayOverride": {
            "description": "The advice provided by the insurer with regard to an individual benefit can be overridden by the employer, either regarding the decision (to pay or not to pay) or the calculated amount.",
            "type": "string"
          },
          "amountType": {
            "description": "Indicates the basis upon which the benefit is calculated, examples might be fixed amount basis, salary percentage basis or tiered basis.",
            "type": "string"
          },
          "approvedThroughDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "basisOfAccidentEliminationPeriod": {
            "description": "Basis for elimination period for accident.",
            "type": "string"
          },
          "basisOfEliminationPeriod": {
            "description": "Basis for elimination period.",
            "type": "string"
          },
          "basisOfLateEnrollmentPeriod": {
            "description": "Basis of the period after enrolment date when customer has to wait for coverage to become eligible (i.e. day, week month or year).",
            "type": "string"
          },
          "basisOfMaxBenefitPeriod": {
            "description": "Basis of the maximum benefit period. The maximum length of the period to be paid if the claimant remains disabled.",
            "type": "string"
          },
          "basisOfMinBenefitPeriod": {
            "description": "Basis of the minimum benefit period. The minimum length of the period to be paid if the claimant remains disabled.",
            "type": "string"
          },
          "basisOfMinimumQualifyPeriod": {
            "description": "Basis of the period of time policy has to be in force before the minimum benefit provision can be applied (i.e. day, week month or year).",
            "type": "string"
          },
          "basisOfPolicyWaitingPeriod": {
            "description": "Basis of the period of time that the policy must be in force before the insured qualifies for coverage (i.e. day, week month or year).",
            "type": "string"
          },
          "benefitEndDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "benefitIncurredDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "benefitStartDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "benefitType": {
            "description": "Type of a benefit right such as Disability Income - STD, Disability Income LTD, Accelerated Death Benefit or Accidental Death Benefit.",
            "type": "string"
          },
          "brokerAuthorisationFlag": {
            "description": "Flag that indicates if the broker is to be included in the correspondence.",
            "type": "boolean"
          },
          "earliestDateForClaimPayment": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "eliminationPeriod": {
            "description": "The number of Elimination Days.",
            "format": "int64",
            "type": "integer"
          },
          "employeeContributionPercentage": {
            "description": "Percentage representing the Employee Contribution Percentage.",
            "type": "number"
          },
          "employeeContributionStatus": {
            "description": "Field which indicates whether a policy is contributory or non-contributory.",
            "type": "string"
          },
          "employeePremiumTaxation": {
            "description": "The employee portion of the contribution was made pre or post tax.",
            "type": "string"
          },
          "employerContributionPercentage": {
            "description": "Indicates the percent of the payment that is taxable. Typically used as the Employer contribution.",
            "type": "number"
          },
          "employerPremiumTaxation": {
            "description": "The employer portion of the contribution was made pre tax or gross up.",
            "type": "string"
          },
          "expectedResolutionDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "extensionAttributes": {
            "description": "The array will contain extension attributes from Benefit and Benefit Right objects.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "frequencyAmount": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          },
          "hospitalBasisOfEliminationPeriod": {
            "description": "Basis for elimination period for hospitalisation.",
            "type": "string"
          },
          "hospitalBasisOfMaxBenefitPeriod": {
            "description": "Basis of the maximum period for hospitalization.",
            "type": "string"
          },
          "hospitalEliminationPeriod": {
            "description": "Elimination Period for hospitalisation.",
            "format": "int64",
            "type": "integer"
          },
          "hospitalMaxBenefitPeriod": {
            "description": "Number of units in the maximum period for hospitalization.",
            "format": "int64",
            "type": "integer"
          },
          "hospitalizationClauseApplies": {
            "description": "Indicator which determines whether the Hospitalization clause applies.",
            "type": "boolean"
          },
          "initialNotificationDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "isReimbursement": {
            "description": "Indicates if the benefit is paid as a reimbursement or not.",
            "type": "boolean"
          },
          "isUnderwritten": {
            "description": "Indicates whether or not the member has been underwritten in order to have additional cover beyond what the group membership offers.",
            "type": "boolean"
          },
          "lateEnrollmentPeriod": {
            "description": "Period after enrolment date when customer has to wait for coverage to become eligible.",
            "format": "int64",
            "type": "integer"
          },
          "latestDateForClaimPayment": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "maxBenefitPeriod": {
            "description": "Number of units in the maximum benefit period. The maximum length of the period to be paid if the claimant remains disabled",
            "format": "int64",
            "type": "integer"
          },
          "minBenefitPeriod": {
            "description": "Number of units in the minimum benefit period. The minimum length of the period to be paid if the claimant remains disabled.",
            "format": "int64",
            "type": "integer"
          },
          "minimumQualifyPeriod": {
            "description": "Period of time policy has to be in force before the minimum benefit provision can be applied.",
            "format": "int64",
            "type": "integer"
          },
          "notificationReceivedDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "overrideClaimIncurredDate": {
            "description": "Indicator which specifies that the benefit level incurred date should be used rather than the claim level incurred date.",
            "type": "boolean"
          },
          "percentTaxable": {
            "description": "The percent of the payment that is taxable.",
            "type": "number"
          },
          "percentageNonTaxable": {
            "description": "The Employee Contribution Percentage",
            "type": "number"
          },
          "periodType": {
            "description": "The type of Benefit Period used to derive the Approved Through Date. Indicates whether the approval is for a fully certified or partially certified period.",
            "type": "string"
          },
          "policyWaitingPeriod": {
            "description": "Period of time that the policy must be in force before the insured qualifies for coverage.",
            "format": "int64",
            "type": "integer"
          },
          "serviceLevel": {
            "description": "Specify the ServiceLevel for the Funding Arrangement when AdministrationType is \"ASO - Advice To Pay\"",
            "type": "string"
          },
          "sourceOfRequest": {
            "description": "The type of source that is requesting the benefit, such as claimant, guardian, or medical officer.",
            "type": "string"
          },
          "startDateOfBenefitForClaim": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DisabilityClaim": {
        "properties": {
          "accidentDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "actualPartialReturnToWorkDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "actualReturnToWorkDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "claimAdditionalInfo": {
            "description": "Additional incident details relevant to the claim.",
            "maxLength": 4000,
            "minLength": 0,
            "type": "string"
          },
          "claimIncurredDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "claimType": {
            "description": "This field can be used to capture the type of claim. This is a descriptive attribute which can be changed over the life of the claim",
            "maxLength": 10,
            "minLength": 0,
            "type": "string"
          },
          "classExtensionInformation": {
            "description": "An array of the extensionAttribute objects which contain claim extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "dateSymptomsFirstAppeared": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "disabilityDateFromCustomer": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "dismembermentOrLoss": {
            "description": "Dismemberment/Loss injuries sustained by the customer.",
            "maxLength": 10,
            "minLength": 0,
            "type": "string"
          },
          "employerDateLastWorked": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "eventType": {
            "description": "The type of event which occurred which led to the disability claim e.g. Accident or Sickness.",
            "maxLength": 10,
            "minLength": 0,
            "type": "string"
          },
          "expectedReturnToWorkDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "firstDayMissedWork": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "hoursWorked": {
            "description": "Number of hours worked",
            "format": "float",
            "maximum": 13,
            "minimum": 0,
            "type": "number"
          },
          "insuredSpouseWorking": {
            "description": "Indicates if the spouse of the insured is currently working.",
            "type": "boolean"
          },
          "notificationDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "numberOfDependents": {
            "description": "The number of dependents for the Customer relevant to this Claim",
            "format": "int64",
            "maximum": 10,
            "minimum": 0,
            "type": "integer"
          },
          "partialReturnToWorkDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "providerPartialReturnToWorkDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "providerReturnToWorkDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "reasonForClaimEffectiveDateChange": {
            "description": "Allows a reason to be recorded for a change to the claim's effective date.",
            "maxLength": 10,
            "minLength": 0,
            "type": "string"
          },
          "releasedPartialReturnToWorkDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "releasedReturnToWorkDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "returnToWorkIntention": {
            "description": "Indicates the employees return to work plans.",
            "type": "string"
          },
          "returnToWorkPartTimeDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "returnToWorkTargetDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "salaryCountNumDays": {
            "description": "Salary Continuance Number of Days - Number of days beyond the disability date insured received full pay",
            "format": "int32",
            "maximum": 5,
            "minimum": 0,
            "type": "integer"
          },
          "source": {
            "description": "Describes how the claim was initiated, i.e. on-line, phone call, paper application form, customer portal.",
            "maxLength": 10,
            "minLength": 0,
            "type": "string"
          },
          "workHistory": {
            "description": "This lists the work history of the insured including occupational, job duty as well as when the insured was employed at these jobs.  Used for any/all and LCDD decisions as well as assisting with job  placement strategy development of the vocational consultant.",
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "workRelated": {
            "description": "Indicates whether the event was work related or not.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "DivisionClassLinkEmbeddable": {
        "description": "The list of class and division ids that are linked to the claimant member details for the group policy (sorted by division name and class name).",
        "properties": {
          "classId": {
            "description": "The ID of the selected Class",
            "type": "string"
          },
          "divisionId": {
            "description": "The ID of the selected Division",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EForm": {
        "properties": {
          "eformAttributes": {
            "description": "An array of EForm attributes.",
            "items": {
              "$ref": "#/components/schemas/EFormAttribute"
            },
            "type": "array"
          },
          "eformId": {
            "description": "Unique automatically generated Id of an EForm document.",
            "format": "int64",
            "type": "integer"
          },
          "eformType": {
            "description": "Name of the EForm document type",
            "maxLength": 200,
            "minLength": 0,
            "type": "string"
          }
        },
        "required": [
          "eformId"
        ],
        "type": "object"
      },
      "EFormAttribute": {
        "description": "An array of EForm attributes.",
        "properties": {
          "booleanValue": {
            "description": "Boolean value of an EForm attribute, which must be populated if the type attribute is set to boolean.",
            "type": "boolean"
          },
          "dateValue": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "decimalValue": {
            "description": "Decimal value of an EForm attribute, which must be populated if the type attribute is set to decimal.",
            "type": "number"
          },
          "enumValue": {
            "$ref": "#/components/schemas/ModelEnum"
          },
          "integerValue": {
            "description": "Integer value of an EForm attribute, which must be populated if the type attribute is set to integer.",
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "description": "The name of an EForm attibute.",
            "type": "string"
          },
          "stringValue": {
            "description": "String value of an EForm attribute, which must be populated if the type attribute is set to string.",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "EFormSummary": {
        "properties": {
          "effectiveDateFrom": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "effectiveDateTo": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "eformId": {
            "description": "Unique automatically generated Id of an EForm document.",
            "format": "int64",
            "type": "integer"
          },
          "eformType": {
            "description": "The short business description of the document type.",
            "maxLength": 200,
            "minLength": 0,
            "type": "string"
          },
          "eformTypeId": {
            "description": "Business Entity OID",
            "example": "PE-00012-0000001234",
            "format": "string",
            "type": "string"
          }
        },
        "required": [
          "eformId",
          "eformType"
        ],
        "type": "object"
      },
      "EarningsBasisFrequencyRequest": {
        "description": "Frequency for Earnings Basis (<I>domainId</I> = 235)",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EarningsBasisFrequencyResponse": {
        "description": "Frequency for Earnings Basis (<I>domainId</I> = 235)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "EarningsResponse": {
        "properties": {
          "classExtensionInformation": {
            "description": "An array of the extensionAttribute objects which contain Earnings extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "earningsBasis": {
            "description": "The earnings frequency.",
            "type": "string"
          },
          "earningsId": {
            "description": "The unique identifier for the earnings record.",
            "format": "int64",
            "maximum": 32,
            "minimum": 0,
            "type": "integer"
          },
          "earningsType": {
            "description": "The type of earnings record, it could refer to pre-disability, partial or salary.",
            "type": "string"
          },
          "effectiveDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "endDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "monthlyBasisEarningAmountsResponse": {
            "$ref": "#/components/schemas/MonthlyBasisEarningAmountsResponse"
          },
          "notes": {
            "description": "Notes relating to the earnings period.",
            "maxLength": 200,
            "minLength": 0,
            "type": "string"
          },
          "periodInWeeks": {
            "description": "Period in weeks between Effective Date and End Date of Earnings record.",
            "format": "int32",
            "type": "integer"
          },
          "salaryAmountBasis": {
            "description": "Basis for salary amount being used.",
            "type": "string"
          },
          "weeklyBasisEarningAmountsResponse": {
            "$ref": "#/components/schemas/WeeklyBasisEarningAmountsResponse"
          }
        },
        "required": [
          "earningsBasis",
          "earningsId",
          "earningsType",
          "periodInWeeks"
        ],
        "type": "object"
      },
      "EarningsTypeRequest": {
        "description": "Earnings record type (<I>domainId</I> = 223)",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EarningsTypeResponse": {
        "description": "Earnings record type (<I>domainId</I> = 223)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "EditAUTaxCodeDetailsCommand": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EditRegionTaxCodeDetailsCommand"
          },
          {
            "properties": {
              "claimVaryOffset": {
                "description": "Indicates if there is a withholding variation.",
                "type": "boolean"
              },
              "combinedIncome": {
                "description": "Indicates if combinedIncome is greater than a set amount.",
                "type": "boolean"
              },
              "levyExemption": {
                "$ref": "#/components/schemas/EditLevyExemptionRequest"
              },
              "levyReduction": {
                "description": "Indicates if claiming medicare levy reduction..",
                "type": "boolean"
              },
              "maritalRelationshipStatus": {
                "$ref": "#/components/schemas/EditMaritalRelationshipStatusRequest"
              },
              "medicareLevySurcharge": {
                "$ref": "#/components/schemas/EditMedicareLevySurchargeRequest"
              },
              "noDependents": {
                "description": "Number of dependents claimed.",
                "format": "int32",
                "type": "integer"
              },
              "qualifyMedicareLevyExemption": {
                "description": "Indicates if qualifies for medicare levy exemption.",
                "type": "boolean"
              },
              "residentialStatus": {
                "$ref": "#/components/schemas/EditResidentialStatusRequest"
              },
              "seniorsPensionersOffset": {
                "description": "Indicates if Claim or Vary Seniors Pensioners Offset.",
                "type": "boolean"
              },
              "spouse": {
                "description": "Indicates if spouse has claimed.",
                "type": "boolean"
              },
              "studyAndTrainingLoan": {
                "description": "Indicates if has a study/training loan.",
                "type": "boolean"
              },
              "taxFreeThresholdClaimed": {
                "description": "Indicates if the tax free threshold claimed.",
                "type": "boolean"
              },
              "taxOffsets": {
                "$ref": "#/components/schemas/EditTaxOffsetsMoneyRequest"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "EditAbsenceEmploymentCommand": {
        "properties": {
          "adjustedHireDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "cbaValue": {
            "description": "Collective bargaining agreement code",
            "type": "string"
          },
          "employmentClassification": {
            "$ref": "#/components/schemas/EditEmploymentClassificationRequest"
          },
          "employmentType": {
            "$ref": "#/components/schemas/EditEmploymentTypeRequest"
          },
          "employmentWorkState": {
            "$ref": "#/components/schemas/EditEmploymentWorkStateRequest"
          },
          "hoursWorkedPerYear": {
            "description": "Number of hours an employee has worked in the past 12 months.",
            "format": "int32",
            "type": "integer"
          },
          "keyEmployee": {
            "description": "Is the employee classified as a Key Employee.",
            "type": "boolean"
          },
          "managerReference": {
            "description": "The customer number that uniquely identifies the manager of the employee.",
            "type": "string"
          },
          "withinFMLACriteria": {
            "description": "Is the employee working within Federal FMLA defined radius i.e. 50 employees within 75 miles.",
            "type": "boolean"
          },
          "workingAtHome": {
            "description": "Is the employee working at home.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "EditAccountDetailCommand": {
        "description": "This is the party's bank account number where a payment is made for an EFT.",
        "properties": {
          "accountName": {
            "description": "Name of the account holder",
            "type": "string"
          },
          "accountNo": {
            "description": "The Account number of the personal account",
            "type": "string"
          },
          "accountType": {
            "$ref": "#/components/schemas/AccountTypeRequest"
          },
          "bankCode": {
            "description": "The Bank Code",
            "type": "string"
          },
          "routingNumber": {
            "description": "Sort code of the Bank",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EditAdditionalWithholdAmountMoneyRequest": {
        "description": "The additional withholding amount for tax. The amount recorded here does not affect payments within.",
        "properties": {
          "amountMinorUnits": {
            "description": "The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EditAddressCommand": {
        "properties": {
          "addressLine1": {
            "description": "First line of an address.",
            "type": "string"
          },
          "addressLine2": {
            "description": "Second line of an address.",
            "type": "string"
          },
          "addressLine3": {
            "description": "Third line of an address.",
            "type": "string"
          },
          "addressLine4": {
            "description": "Fourth line of an address.",
            "type": "string"
          },
          "addressLine5": {
            "description": "Fifth line of an address.",
            "type": "string"
          },
          "addressLine6": {
            "description": "Sixth line of an address.",
            "type": "string"
          },
          "addressLine7": {
            "description": "Seventh line of an address.",
            "type": "string"
          },
          "country": {
            "$ref": "#/components/schemas/CountryRequest"
          },
          "extensions": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "extraAustralianFields": {
            "$ref": "#/components/schemas/EditAustralianAddressCommand"
          },
          "postCode": {
            "description": "International Postcode.",
            "type": "string"
          },
          "premiseNo": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "EditAustralianAddressCommand": {
        "properties": {
          "buildingName1": {
            "description": "The name of the building.",
            "type": "string"
          },
          "buildingName2": {
            "description": "The name of the building continued.",
            "type": "string"
          },
          "dpId": {
            "description": "Referred to as DPID this is an 8-digit Australian post address identifier which uniquely identifies each delivery point to which Australia Post delivers mail. ",
            "format": "int32",
            "type": "integer"
          },
          "extensions": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "floorLevelNumber": {
            "description": "The floorLevelNumber must not be more than {max} characters",
            "type": "string"
          },
          "floorLevelType": {
            "$ref": "#/components/schemas/AUFloorLevelTypesRequest"
          },
          "lotNumber": {
            "description": "The lot number.",
            "type": "string"
          },
          "postalNumber": {
            "description": "The postal number. ",
            "type": "string"
          },
          "postalNumberPrefix": {
            "description": "This refers to the non-numeric portion preceding the Postal Number. EXAMPLE : PO Box B20 where B is the prefix. ",
            "type": "string"
          },
          "postalNumberSuffix": {
            "description": "This refers to the non-numeric portion following the Postal Number. EXAMPLE : PO Box 20A where A is the suffix.",
            "type": "string"
          },
          "postalType": {
            "$ref": "#/components/schemas/AUPostalTypesRequest"
          },
          "premiseNoSuffix": {
            "description": "The suffix to apply to the number of the premise.",
            "type": "string"
          },
          "premiseNoTo": {
            "description": "The high number in a range for the premise. This is used when an address consists of a range of numbers as in 8-10 Lower Pembroke Street where the value 10 would be stored in this field. ",
            "format": "int32",
            "type": "integer"
          },
          "premiseNoToSuffix": {
            "description": "The suffix to apply to the number to of the premise. ",
            "type": "string"
          },
          "streetSuffix": {
            "$ref": "#/components/schemas/AUStreetSuffixesRequest"
          }
        },
        "type": "object"
      },
      "EditChequeDetailCommand": {
        "properties": {
          "nameToPrintOnCheck": {
            "description": "This is the name that displays on the payee's check. For example, the payee's name, or if there is a nominated payee, In the Estate of followed by the nominated payee's name.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EditContractualEarningsCommand": {
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/AmountMoneyRequest"
          },
          "earningsType": {
            "$ref": "#/components/schemas/EarningsTypeRequest"
          },
          "effectiveDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "endDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "extensions": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "frequency": {
            "$ref": "#/components/schemas/EarningsBasisFrequencyRequest"
          },
          "standardHourlyRate": {
            "$ref": "#/components/schemas/StandardHourlyRateMoneyRequest"
          },
          "standardHours": {
            "description": "Number of hours in a standard working period. In use for Weekly and Bi-Weekly frequcies only, when TotalAmountOverrride is false",
            "type": "string"
          },
          "totalAmountOverride": {
            "description": "For Weekly and Bi-Weekly frequencies, determines whether earnings were specified using Amount (true) or StandardHours and StandardHourlyRate.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "EditCustomerInfoCommand": {
        "properties": {
          "address": {
            "$ref": "#/components/schemas/EditAddressCommand"
          },
          "dateOfBirth": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "extensions": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "firstName": {
            "description": "Person's first name",
            "type": "string"
          },
          "gender": {
            "$ref": "#/components/schemas/GenderRequest"
          },
          "idNumber": {
            "description": "ID number of the claimant. The ID number could be something like social security number, or tax identificaiton number. They ID type is indicated by the value of the <code>identificationNumberType</code> field.",
            "type": "string"
          },
          "identificationNumberType": {
            "$ref": "#/components/schemas/IdentificationNumberTypeRequest"
          },
          "initials": {
            "description": "Person's middle initials",
            "type": "string"
          },
          "lastName": {
            "description": "Person's last name",
            "type": "string"
          },
          "maritalStatus": {
            "$ref": "#/components/schemas/MaritalStatusRequest"
          },
          "nationality": {
            "$ref": "#/components/schemas/NationalityRequest"
          },
          "needsInterpreter": {
            "description": "Indicates if the customer needs an interpreter",
            "type": "boolean"
          },
          "partyType": {
            "$ref": "#/components/schemas/PartyTypeRequest"
          },
          "placeOfBirth": {
            "description": "Place of Birth",
            "type": "string"
          },
          "secondName": {
            "description": "Person's second name",
            "type": "string"
          },
          "securedClient": {
            "description": "Secured client flag",
            "type": "boolean"
          },
          "staff": {
            "description": "Staff flag",
            "type": "boolean"
          },
          "title": {
            "$ref": "#/components/schemas/TitleRequest"
          }
        },
        "type": "object"
      },
      "EditCustomerOccupationCommand": {
        "properties": {
          "altEmploymentCat": {
            "$ref": "#/components/schemas/AltEmploymentCatRequest"
          },
          "daysWorkedPerWeek": {
            "description": "The number of days worked per week, which can be specified with partial days",
            "type": "string"
          },
          "empLocationCode": {
            "$ref": "#/components/schemas/EmpLocationCodeRequest"
          },
          "employeeIdentifier": {
            "description": "Reference identifier of an employee in respect of its employer",
            "type": "string"
          },
          "employmentCat": {
            "$ref": "#/components/schemas/EmploymentCatRequest"
          },
          "employmentStatus": {
            "$ref": "#/components/schemas/EmploymentStatusRequest"
          },
          "employmentTitle": {
            "$ref": "#/components/schemas/EmploymentTitleRequest"
          },
          "endPosCode": {
            "$ref": "#/components/schemas/EndPosCodeRequest"
          },
          "endPosReason": {
            "description": "he reason for job ending",
            "type": "string"
          },
          "extensions": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "hrsWorkedPerWeek": {
            "description": "The number of hours worked per week, which can be specified using partial hours",
            "type": "string"
          },
          "jobDesc": {
            "description": "Job description",
            "type": "string"
          },
          "jobEndDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "jobStartDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "jobStrenuous": {
            "$ref": "#/components/schemas/JobStrenuousRequest"
          },
          "jobTitle": {
            "description": "Job title",
            "type": "string"
          },
          "occCodeName": {
            "description": "The name(s) associated with the specific Occupation Industry Classification Code id",
            "type": "string"
          },
          "occCodeReference": {
            "description": "Occupation Industry Classification Code id",
            "type": "string"
          },
          "overrideDaysWorkedPerWeek": {
            "description": "Is override days worked per week true or false?",
            "type": "boolean"
          },
          "remarks": {
            "description": "Remarks about the Occupation",
            "type": "string"
          },
          "timeZone": {
            "$ref": "#/components/schemas/TimeZoneRequest"
          },
          "workSchDesc": {
            "description": "Work schedule description",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EditDependentDeductionsMoneyRequest": {
        "description": "Specifies the amount for dependent deductions.",
        "properties": {
          "amountMinorUnits": {
            "description": "The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EditEmailAddressCommand": {
        "properties": {
          "emailAddress": {
            "type": "string"
          },
          "extensions": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          }
        },
        "required": [
          "emailAddress"
        ],
        "type": "object"
      },
      "EditEmploymentClassificationRequest": {
        "description": "Category of employment(<I>domainId</I>=6770)",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EditEmploymentTypeRequest": {
        "description": "Type of employment (<I>domainId</I>=6772)",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EditEmploymentWorkStateRequest": {
        "description": "State for the employment (<I>domainId</I>=138)",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EditExtraPayTaxRateRequest": {
        "description": "Extra pay tax calcs are used when paying backdated periods in previous tax years. This field indicates what rate to use.",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EditFilingMaritalStatusRequest": {
        "description": "The marital status filed for tax purposes (EnumDomainId=2201). Sample value is 'Unknown'",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EditGroupClientUserCommand": {
        "properties": {
          "enabled": {
            "description": "An indicator used to determine if this Group Client User is enabled or not. True = enabled / false = disabled.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "EditGroupPolicyMemberDetailCommand": {
        "properties": {
          "divisionClassLinks": {
            "description": "The list of class and division ids that are linked to the claimant member details for the group policy (sorted by division name and class name).",
            "items": {
              "$ref": "#/components/schemas/WriteDivisionClassLinkCommand"
            },
            "type": "array"
          },
          "memberNumber": {
            "description": "The Claimant's member number for the group policy",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EditKiwiSaverStatusRequest": {
        "description": "Indicates what rate to use when calculating Kiwisaver deductions.",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EditLevyExemptionRequest": {
        "description": "Indicates if claiming for full or half medicare exemption. Sample values are 'Full', 'Half'",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EditMaritalRelationshipStatusRequest": {
        "description": "Status of Marital Relationship. Sample values are 'Single', 'Illness', 'Separated Couple','Couple'",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EditMedicalDetailsCommand": {
        "properties": {
          "causeOfInjuryCode": {
            "description": "The code ID that specifies the cause of injury. This represents a specific medical code that identifies a particular injury, and is associated with the corresponding claim (using a Code Value Link entity). This must be contained within inverted commas, otherwise the value will be coerced. For example, medical code 10-1 would be coerced into medical code 9.",
            "type": "string"
          },
          "clientDominantSide": {
            "$ref": "#/components/schemas/ClientDominantSideRequest"
          },
          "condition": {
            "description": "A description of the medical condition of the injured party. Cannot be more than 150 characters.",
            "type": "string"
          },
          "conditionCategory": {
            "$ref": "#/components/schemas/ConditionCategoryRequest"
          },
          "extensions": {
            "additionalProperties": {
              "description": "An object of the extension attributes that contains MedicalDetails (OLClaimMedicalDetails) extension information.",
              "type": "object"
            },
            "description": "An object of the extension attributes that contains MedicalDetails (OLClaimMedicalDetails) extension information.",
            "type": "object"
          },
          "firstDoctorVisitDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "lastReceivedDateMedicalInfoDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "lastRequestedDateMedicalInfoDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "lifeExpectancy": {
            "$ref": "#/components/schemas/LifeExpectancyRequest"
          },
          "medicalAuthorisationReceivedDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "pregnancyIndicator": {
            "description": "Indicates whether a person is pregnant or not.",
            "type": "boolean"
          },
          "symptomsFirstAppearedDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "treatmentPlan": {
            "description": "A description of the treatment plan for the injured party. Cannot be more than 256 characters.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EditMedicareLevySurchargeRequest": {
        "description": "Percentage of Medicare Levy surcharge. Sample values are '1%', '1.25%', '1.5%'",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EditNZTaxCodeDetailsCommand": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EditRegionTaxCodeDetailsCommand"
          },
          {
            "properties": {
              "extraPayTaxRate": {
                "$ref": "#/components/schemas/EditExtraPayTaxRateRequest"
              },
              "irTaxCodeChange": {
                "description": "The tax office may direct the insurer to use a different tax code than the client declared one. This field indicates where the tax office has ordered a tax code change.",
                "type": "boolean"
              },
              "isGSTRegistered": {
                "description": "Denotes if a payee is liable for Goods and Services Tax (GST)",
                "type": "boolean"
              },
              "kiwiSaverStatus": {
                "$ref": "#/components/schemas/EditKiwiSaverStatusRequest"
              },
              "studLoanThresholdApplies": {
                "description": "Denotes if a Student Loan Repayment Threshold Applies",
                "type": "boolean"
              },
              "taxCertNumber": {
                "description": "When a payee (client usually) has an individual tax agreement with IRD, i.e. to use a non-standard tax rate, this is the reference number of the tax certificate issued by IRD.",
                "type": "string"
              },
              "taxCodeRateNonStdStudLoan": {
                "description": "Indicates what rate to use for student loan for a non-standard tax code.",
                "type": "string"
              },
              "withholdingTaxStatus": {
                "$ref": "#/components/schemas/EditWithholdingTaxStatusRequest"
              },
              "zeroStudLoanTaxCodeRate": {
                "description": "Indicates if a rate of zero is entered for the TaxCodeRateNonStdStudLoan field that this was intentional.",
                "type": "boolean"
              }
            },
            "type": "object"
          }
        ],
        "required": [
          "extraPayTaxRate",
          "kiwiSaverStatus",
          "withholdingTaxStatus"
        ],
        "type": "object"
      },
      "EditNonStdDeductionsMoneyRequest": {
        "description": "Specifies the amount for non standard deductions.",
        "properties": {
          "amountMinorUnits": {
            "description": "The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EditOtherIncomeMoneyRequest": {
        "description": "Specifies the amount for other income.",
        "properties": {
          "amountMinorUnits": {
            "description": "The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EditPaymentPreferenceAddressCommand": {
        "description": "Payment preference is valid to date.",
        "properties": {
          "addressLine1": {
            "description": "First line of an address.",
            "type": "string"
          },
          "addressLine2": {
            "description": "Second line of an address.",
            "type": "string"
          },
          "addressLine3": {
            "description": "Third line of an address.",
            "type": "string"
          },
          "addressLine4": {
            "description": "Fourth line of an address.",
            "type": "string"
          },
          "addressLine5": {
            "description": "Fifth line of an address.",
            "type": "string"
          },
          "addressLine6": {
            "description": "Sixth line of an address.",
            "type": "string"
          },
          "addressLine7": {
            "description": "Seventh line of an address.",
            "type": "string"
          },
          "country": {
            "$ref": "#/components/schemas/CountryRequest"
          },
          "extensions": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "extraAustralianFields": {
            "$ref": "#/components/schemas/EditPaymentPreferenceAustralianAddressCommand"
          },
          "postCode": {
            "description": "International Postcode.",
            "type": "string"
          },
          "premiseNo": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "EditPaymentPreferenceAustralianAddressCommand": {
        "properties": {
          "buildingName1": {
            "description": "The name of the building.",
            "type": "string"
          },
          "buildingName2": {
            "description": "The name of the building continued.",
            "type": "string"
          },
          "dpId": {
            "description": "Referred to as DPID this is an 8-digit Australian post address identifier which uniquely identifies each delivery point to which Australia Post delivers mail. ",
            "format": "int32",
            "type": "integer"
          },
          "extensions": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "floorLevelNumber": {
            "description": "The floorLevelNumber must not be more than {max} characters",
            "type": "string"
          },
          "floorLevelType": {
            "$ref": "#/components/schemas/AUFloorLevelTypesRequest"
          },
          "lotNumber": {
            "description": "The lot number.",
            "type": "string"
          },
          "postalNumber": {
            "description": "The postal number. ",
            "type": "string"
          },
          "postalNumberPrefix": {
            "description": "This refers to the non-numeric portion preceding the Postal Number. EXAMPLE : PO Box B20 where B is the prefix. ",
            "type": "string"
          },
          "postalNumberSuffix": {
            "description": "This refers to the non-numeric portion following the Postal Number. EXAMPLE : PO Box 20A where A is the suffix.",
            "type": "string"
          },
          "postalType": {
            "$ref": "#/components/schemas/AUPostalTypesRequest"
          },
          "premiseNoSuffix": {
            "description": "The suffix to apply to the number of the premise.",
            "type": "string"
          },
          "premiseNoTo": {
            "description": "The high number in a range for the premise. This is used when an address consists of a range of numbers as in 8-10 Lower Pembroke Street where the value 10 would be stored in this field. ",
            "format": "int32",
            "type": "integer"
          },
          "premiseNoToSuffix": {
            "description": "The suffix to apply to the number to of the premise. ",
            "type": "string"
          },
          "streetSuffix": {
            "$ref": "#/components/schemas/AUStreetSuffixesRequest"
          }
        },
        "type": "object"
      },
      "EditPaymentPreferenceCommand": {
        "properties": {
          "accountDetail": {
            "$ref": "#/components/schemas/EditAccountDetailCommand"
          },
          "address": {
            "$ref": "#/components/schemas/EditPaymentPreferenceAddressCommand"
          },
          "chequeDetail": {
            "$ref": "#/components/schemas/EditChequeDetailCommand"
          },
          "default": {
            "description": "Default payment preference indicator.",
            "type": "boolean"
          },
          "description": {
            "description": "Payment preference description.",
            "type": "string"
          },
          "effectiveFromDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "effectiveToDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "isDefault": {
            "type": "boolean",
            "writeOnly": true
          },
          "overridePostalAddress": {
            "description": "This indicator will be used to override the address or use the customer current address. If true then override the address, else use the customer default address.",
            "type": "boolean"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/PaymentMethodRequest"
          }
        },
        "type": "object"
      },
      "EditPhoneNumberCommand": {
        "properties": {
          "areaCode": {
            "type": "string"
          },
          "contactMethod": {
            "$ref": "#/components/schemas/EnumCommand"
          },
          "exDirectory": {
            "type": "boolean"
          },
          "extension": {
            "type": "string"
          },
          "extensions": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "intCode": {
            "type": "string"
          },
          "telephoneNo": {
            "type": "string"
          }
        },
        "required": [
          "areaCode",
          "exDirectory",
          "extension",
          "intCode",
          "telephoneNo"
        ],
        "type": "object"
      },
      "EditPregnancyDetailsCommand": {
        "properties": {
          "actualDeliveryDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "deliveryType": {
            "$ref": "#/components/schemas/DeliveryTypeRequest"
          },
          "expectedDeliveryDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "pregnancyComplications": {
            "description": "Indicates whether or not pregnancy complications occurred.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "EditRegionTaxCodeDetailsCommand": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/EditAUTaxCodeDetailsCommand"
          },
          {
            "$ref": "#/components/schemas/EditNZTaxCodeDetailsCommand"
          }
        ],
        "type": "object"
      },
      "EditResidentialStatusRequest": {
        "description": "Indicates residential status. Sample values are 'Resident', 'Non Resident', 'Working Holiday'",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EditTaxCodeRecordCommand": {
        "properties": {
          "additionalWithholdAmount": {
            "$ref": "#/components/schemas/EditAdditionalWithholdAmountMoneyRequest"
          },
          "dependentDeductions": {
            "$ref": "#/components/schemas/EditDependentDeductionsMoneyRequest"
          },
          "effectiveDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "endDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "extensions": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "filingMaritalStatus": {
            "$ref": "#/components/schemas/EditFilingMaritalStatusRequest"
          },
          "nonStdDeductions": {
            "$ref": "#/components/schemas/EditNonStdDeductionsMoneyRequest"
          },
          "numberExemptions": {
            "description": "The tax exemptions e.g. number of exemptions accumulated.",
            "format": "int64",
            "type": "integer"
          },
          "otherIncome": {
            "$ref": "#/components/schemas/EditOtherIncomeMoneyRequest"
          },
          "percentageRate": {
            "description": "A percentage rate for tax record. The percentageRate must be of precision 10,2.",
            "type": "string"
          },
          "regionTaxCodeDetails": {
            "$ref": "#/components/schemas/EditRegionTaxCodeDetailsCommand"
          },
          "taxCode": {
            "$ref": "#/components/schemas/EditTaxCodeRequest"
          },
          "taxType": {
            "$ref": "#/components/schemas/EditTaxTypeRequest"
          },
          "version": {
            "$ref": "#/components/schemas/EditVersionRequest"
          }
        },
        "type": "object"
      },
      "EditTaxCodeRequest": {
        "description": "Specifies a code for a subcategory of tax type (EnumDomainId=2232). Sample values are 'Unknown', 'Maximum Age Limit', 'Maximum Benefit Expiry Age'",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EditTaxOffsetsMoneyRequest": {
        "description": "Specifies the Tax Offsets amount.",
        "properties": {
          "amountMinorUnits": {
            "description": "The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EditTaxTypeRequest": {
        "description": "Specifies the type of tax, e.g. 'Federal Income Tax', 'State Income Tax' (EnumDomainId=2321). Sample values are 'Unknown', 'TaxTypeA', 'TaxTypeB'.",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EditVersionRequest": {
        "description": "Specifies the version for this tax record. Sample values are 'Pre 2020', '2020'",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EditWebMessageCommand": {
        "properties": {
          "readByGroupClient": {
            "description": "Flag to mark first time open details for webMessage",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "EditWeekBasedWorkPatternCommand": {
        "properties": {
          "patternStartDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "patternStatus": {
            "$ref": "#/components/schemas/PatternStatusRequest"
          },
          "workPatternDays": {
            "description": "List of days which make up the pattern. There can be 7, 14, 21 or 28 of these.",
            "items": {
              "$ref": "#/components/schemas/EditWorkPatternDayCommand"
            },
            "type": "array"
          },
          "workPatternType": {
            "$ref": "#/components/schemas/WorkPatternTypeRequest"
          },
          "workWeekStarts": {
            "$ref": "#/components/schemas/WorkWeekStartsRequest"
          }
        },
        "required": [
          "workPatternDays",
          "workPatternType"
        ],
        "type": "object"
      },
      "EditWithholdingTaxStatusRequest": {
        "description": "For payments to caregivers, that are not subject to PAYE, does withholding tax apply.",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EditWorkPatternDayCommand": {
        "description": "List of days which make up the pattern. There can be 7, 14, 21 or 28 of these.",
        "properties": {
          "dayOfWeek": {
            "$ref": "#/components/schemas/DayOfWeekRequest"
          },
          "hours": {
            "description": "The number of whole working hours on this day in the work pattern (0-24)",
            "format": "int32",
            "minimum": 0,
            "type": "integer"
          },
          "minutes": {
            "description": "The number of minutes on this day in the work pattern (0-59)",
            "format": "int32",
            "minimum": 0,
            "type": "integer"
          },
          "weekNumber": {
            "description": "The number of the week in the pattern within which this day occurs (1, 2, 3 or 4)",
            "format": "int32",
            "minimum": 0,
            "type": "integer"
          }
        },
        "required": [
          "dayOfWeek",
          "hours",
          "minutes",
          "weekNumber"
        ],
        "type": "object"
      },
      "EligibilityEmbeddable": {
        "description": "Leave plan eligibility criteria.",
        "properties": {
          "lengthOfService": {
            "description": "Length of service.",
            "type": "string"
          },
          "minimumWorkHours": {
            "description": "Minimum work hours.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EmailAddress": {
        "description": "Return list of email addresses",
        "properties": {
          "classExtensionInformation": {
            "description": "An array of the extensionAttribute objects which contain email Address extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "emailAddress": {
            "description": "Customers email address.",
            "maxLength": 120,
            "minLength": 0,
            "type": "string"
          },
          "id": {
            "description": "The id of the contact method (e.g. phone / mobile / emailAddress) ",
            "format": "int64",
            "maximum": 10,
            "minimum": 0,
            "type": "integer"
          },
          "preferred": {
            "type": "boolean"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "EmailAddressResource": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "emailAddress": {
            "description": "The email address",
            "type": "string"
          },
          "extensions": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "id": {
            "description": "The id of the resource",
            "type": "string"
          },
          "meta": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "Emails": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "elements": {
            "items": {
              "$ref": "#/components/schemas/EmailAddressResource"
            },
            "type": "array"
          },
          "hasMoreElements": {
            "description": "<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>",
            "type": "boolean"
          },
          "meta": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "totalSize": {
            "description": "<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "EmpLocationCodeRequest": {
        "description": "Employment location code indicating Place of Work (<I>domainId</I> = 166)",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EmpLocationCodeResponse": {
        "description": "Employment location code indicating Place of Work (<I>domainId</I> = 166)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "Employee": {
        "description": "Employee for which leave request is submitted",
        "properties": {
          "id": {
            "description": "Unique identifier for the employee",
            "type": "string"
          },
          "name": {
            "description": "Name of the employee",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EmployeeEmbeddable": {
        "description": "Employee who requested accommodations for the job.",
        "properties": {
          "id": {
            "description": "Unique identifier for the employee.",
            "type": "string"
          },
          "name": {
            "description": "Full name of the employee.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EmployeeLeaveBalance": {
        "properties": {
          "approvedTime": {
            "description": "Employee total approved leave as per the leave plan calculation for the given period.",
            "type": "number"
          },
          "availabilityPeriodEndDate": {
            "description": "ISO 8601 date time format",
            "example": "1999-12-31T23:59:59Z",
            "format": "date-time",
            "type": "string"
          },
          "availabilityPeriodStartDate": {
            "description": "ISO 8601 date time format",
            "example": "1999-12-31T23:59:59Z",
            "format": "date-time",
            "type": "string"
          },
          "availableBalance": {
            "description": "Employee total approximate available leave balance as per the leave plan calculation for the given period.",
            "type": "number"
          },
          "notificationMessage": {
            "description": "The additional information to the employer about the balance being presented and can explain some reasons to be cautious of the value presented here.The following information message returns as per the leave plan type.<UL><LI><B>Standard leave plan:</B> The approximate balance provides an indication of your balance under this leave plan and is for general information purposes only. This balance considers your leave requests within the highlighted months. We recommend that you submit a leave request for an accurate assessment of available time under each leave plan.</LI><LI><B>Shared leave plan:</B>The approximate balance estimates time left under this leave plan. Other leave requests and leave plan entitlements may affect this plan's balance. We recommend that you submit a leave request for an accurate evaluation of available time.</LI><LI><B>Tracking plans:</B>This leave plan tracks time shared between other leave plans and the approved and pending time is totaled from those plans. The approximate balance is a guide only.</LI><LI><B>Leave plan with versions:</B>The approximate balance is an estimate as this leave plan has different versions that may alter the plan's entitlements. These calculations are based on the version that is effective in the selected month. We recommend that you submit a leave request for an accurate evaluation of available time.</LI><LI><B>Leave plans with reasonable timebank:</B> The approximate balance is not available as this leave plan allows for a reasonable amount of time to be taken rather than a set entitlement. The amount of time available is at the employer's discretion.</LI><LI><B>Leave plans that are no longer serviced by a carrier:</B> The approximate balance is not available because this leave plan is no longer serviced by the employer.</LI></UL>",
            "type": "string"
          },
          "pendingTime": {
            "description": "Employee total pending leave as per the leave plan calculation for the given period.",
            "type": "number"
          },
          "timeBasis": {
            "description": "The basis used to record time unit of approved, pending and entitlement. It may be Minutes, Hours, Days, Weeks, Years or Months. This maps to enum TimeUnits(domain id 6757).",
            "maxLength": 10,
            "minLength": 0,
            "type": "string"
          },
          "timeEntitlement": {
            "description": "The time that is available to an employee who has met the eligibility requirements as per the leave plan calculation period.",
            "type": "number"
          },
          "timeWithinPeriod": {
            "description": "The time frame within which the employee must avail of the entitled leave. For example, an employee may be entitled to 6 weeks leave within 12 months period.",
            "format": "int64",
            "maximum": 9999,
            "type": "integer"
          },
          "timeWithinPeriodBasis": {
            "description": "The basis used to record time unit of time within a period. It may be Minutes, Hours, Days, Weeks or Months. This maps to enum LengthBasis(domain id 6758).",
            "maxLength": 10,
            "minLength": 0,
            "type": "string"
          }
        },
        "type": "object"
      },
      "EmployeeOnLeave": {
        "properties": {
          "firstName": {
            "description": "The First Name of the employee",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the employee",
            "type": "string"
          },
          "lastName": {
            "description": "The Last Name of the employee",
            "type": "string"
          },
          "notificationCases": {
            "description": "List of Notification Cases for the given employee within the date range",
            "items": {
              "$ref": "#/components/schemas/NotificationCaseForEmployee"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "EmployeesOnApprovedLeaveRpcResponse": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "elements": {
            "items": {
              "$ref": "#/components/schemas/EmployeeOnLeave"
            },
            "type": "array"
          },
          "endDate": {
            "description": "The End Date to which we want to retrieve the Employees. Only employees with approved days on or after this date will be returned in the response. ISO 8601 date format",
            "format": "date",
            "type": "string"
          },
          "meta": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "startDate": {
            "description": "The Start Date from which we want to retrieve the employees. Only employees with approved days on or after this date will be returned in the response. ISO 8601 date format.",
            "format": "date",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EmploymentCatRequest": {
        "description": "Employment category (<I>domainId</I> = 145)",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EmploymentCatResponse": {
        "description": "Employment category (<I>domainId</I> = 145)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "EmploymentClassificationRequest": {
        "description": "Category of employment(<I>domainId</I>=6770)",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EmploymentClassificationResponse": {
        "description": "Category of employment(<I>domainId</I>=6770)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "EmploymentStatusRequest": {
        "description": "Employment status (<I>domainId</I> = 175)",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EmploymentStatusResponse": {
        "description": "Employment status (<I>domainId</I> = 175)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "EmploymentTitleRequest": {
        "description": "Employment title (<I>domainId</I> = 177)",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EmploymentTitleResponse": {
        "description": "Employment title (<I>domainId</I> = 177)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "EmploymentTypeRequest": {
        "description": "Type of employment (<I>domainId</I>=6772)",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EmploymentTypeResponse": {
        "description": "Type of employment (<I>domainId</I>=6772)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "EmploymentWorkStateRequest": {
        "description": "State for the employment (<I>domainId</I>=138)",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EmploymentWorkStateResponse": {
        "description": "State for the employment (<I>domainId</I>=138)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "EndPosCodeRequest": {
        "description": "Employment termination reason (<I>domainId</I> = 162)",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EndPosCodeResponse": {
        "description": "Employment termination reason (<I>domainId</I> = 162)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "EndpointPermissionResource": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "A map of links the user has permission to",
              "format": "url",
              "type": "string"
            },
            "description": "A map of links the user has permission to",
            "type": "object"
          },
          "enabled": {
            "description": "If the endpoint is enabled or not for that user",
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "description": "Name of the endpoint",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EndpointPermissionResources": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "elements": {
            "items": {
              "$ref": "#/components/schemas/EndpointPermissionResource"
            },
            "type": "array"
          },
          "hasMoreElements": {
            "description": "<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>",
            "type": "boolean"
          },
          "meta": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "totalSize": {
            "description": "<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "EnumCommand": {
        "properties": {
          "fullId": {
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "EnumDomain": {
        "description": "Enum Domain from TA",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to related objects (in this case: self and instances)",
              "example": "{'self': '','instances': ''}",
              "format": "url",
              "type": "string"
            },
            "description": "Links to related objects (in this case: self and instances)",
            "example": "{'self': '','instances': ''}",
            "type": "object"
          },
          "alphaSort": {
            "description": "When value is equal to 'true' it indicating that domain instances when presented to user should be sorted alphabetically, 'false' otherwise. This parameter does not influence sort order of instances when returned by this API",
            "type": "boolean"
          },
          "defaultSort": {
            "description": "When value is equal to 'true' it indicating that default instance should be shown (to user) first in an alphabetically sorted view, 'false' othrwise. This parameter does not influence sort order of instances when returned by this API",
            "type": "boolean"
          },
          "description": {
            "description": "Description of this domain",
            "type": "string"
          },
          "editable": {
            "description": "Flag whether this domain is allowed to be edited. Domain can be edited from back office system only - No edit domain endpoint exists.",
            "type": "boolean"
          },
          "id": {
            "description": "Enum domain ID (unique in the system)",
            "type": "string"
          },
          "instances": {
            "description": "List of the instances that belongs to this domain ",
            "items": {
              "$ref": "#/components/schemas/EnumInstanceSummary"
            },
            "type": "array"
          },
          "name": {
            "description": "Enum domain name",
            "type": "string"
          },
          "subsets": {
            "description": "List of subsets that belongs to this domain",
            "items": {
              "$ref": "#/components/schemas/EnumSubset"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "EnumDomains": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "elements": {
            "items": {
              "$ref": "#/components/schemas/EnumDomain"
            },
            "type": "array"
          },
          "hasMoreElements": {
            "description": "<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>",
            "type": "boolean"
          },
          "meta": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "totalSize": {
            "description": "<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "EnumInstance": {
        "description": "This model class expose EnumInstance from TA",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to related objects (in this case: SELF and DOMAIN)",
              "example": "{'self': '','domain': ''}",
              "format": "url",
              "type": "string"
            },
            "description": "Links to related objects (in this case: SELF and DOMAIN)",
            "example": "{'self': '','domain': ''}",
            "type": "object"
          },
          "dOrder": {
            "description": "Denotes the order the Enum resides within all Enum Instances within Domain",
            "format": "int64",
            "type": "integer"
          },
          "domainId": {
            "description": "Enum Domain ID, corresponds to <code>domainId</code>",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "Name of domain to which this instance belongs to",
            "type": "string"
          },
          "endDate": {
            "description": "Date at which the Enum will become inactive (since that date, enum should be considered inactive)",
            "format": "date",
            "type": "string"
          },
          "fullId": {
            "description": "Enum instance fullId, corresponds to <code>TaEnum.fullId</code>",
            "format": "int64",
            "type": "integer"
          },
          "id": {
            "description": "Enum instance ID (unique in the domain)",
            "type": "string"
          },
          "name": {
            "description": "Enum instance name",
            "type": "string"
          },
          "retired": {
            "description": "If <code>true</code> retired Instances only are returned,if <code>false</code>(or not specified) non-retired instances only are returned",
            "type": "boolean"
          },
          "startDate": {
            "description": "Date at which the Enum was activated",
            "format": "date",
            "type": "string"
          },
          "subsets": {
            "description": "List of subsets to which this instance belongs to",
            "items": {
              "$ref": "#/components/schemas/EnumSubsetSummary"
            },
            "type": "array",
            "uniqueItems": true
          }
        },
        "type": "object"
      },
      "EnumInstanceSummary": {
        "description": "This model class expose EnumInstance Summary",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to related objects (in this case: enumInstance)",
              "example": "{'enumInstance': ''}",
              "format": "url",
              "type": "string"
            },
            "description": "Links to related objects (in this case: enumInstance)",
            "example": "{'enumInstance': ''}",
            "type": "object"
          },
          "id": {
            "description": "Enum instance ID",
            "type": "string"
          },
          "name": {
            "description": "Enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EnumInstances": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "elements": {
            "items": {
              "$ref": "#/components/schemas/EnumInstance"
            },
            "type": "array"
          },
          "hasMoreElements": {
            "description": "<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>",
            "type": "boolean"
          },
          "meta": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "totalSize": {
            "description": "<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "EnumSubset": {
        "description": "This model class expose EnumSubset detailed information, this means that except name also list of EnumInstanceSummary objects get exposed.",
        "properties": {
          "instances": {
            "description": "List of the instances that belongs to this Subset ",
            "items": {
              "$ref": "#/components/schemas/EnumInstanceSummary"
            },
            "type": "array"
          },
          "name": {
            "description": "Enum subset name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EnumSubsetInfo": {
        "properties": {
          "description": {
            "type": "string"
          },
          "editable": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "EnumSubsetSummary": {
        "description": "This model class expose EnumSubset summary information.",
        "properties": {
          "name": {
            "description": "Enum subset name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EpisodeDurationBasisResponse": {
        "description": "Time unit for episodic period duration for E.g. Days, Hours, Minutes. This maps to enum TimeUnits(domain id 6757)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "EpisodePeriodDurationBasisRequest": {
        "description": "Episodic Time Unit basis (<I>domainId</I> = 6757).",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ErrorModel": {
        "properties": {
          "correlationId": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "errorDetail": {
            "type": "string"
          },
          "stacktrace": {
            "type": "string"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "ErrorSource": {
        "properties": {
          "parameter": {
            "type": "string"
          },
          "pointer": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ExtendedAddress": {
        "properties": {
          "buildingName1": {
            "description": "The name of the building.",
            "maxLength": 30,
            "minLength": 0,
            "type": "string"
          },
          "buildingName2": {
            "description": "The name of the building continued.",
            "maxLength": 30,
            "minLength": 0,
            "type": "string"
          },
          "classExtensionInformation": {
            "description": "An array of the extensionAttribute objects which contain claim extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "dpid": {
            "description": "DPID - 8 digit Australian post address identifier.",
            "maximum": 8,
            "minimum": 0,
            "type": "number"
          },
          "floorLevelNumber": {
            "description": "The number of floor level.",
            "maxLength": 2,
            "minLength": 0,
            "type": "string"
          },
          "floorLevelType": {
            "description": "Type of floor level description.",
            "maxLength": 10,
            "minLength": 0,
            "type": "string"
          },
          "lotNumber": {
            "description": "The lot number.",
            "maxLength": 6,
            "minLength": 0,
            "type": "string"
          },
          "postalNumber": {
            "description": "The postal number.",
            "maxLength": 11,
            "minLength": 0,
            "type": "string"
          },
          "postalNumberPrefix": {
            "description": "This refers to the non-numeric portion preceding the Postal Number.",
            "maxLength": 3,
            "minLength": 0,
            "type": "string"
          },
          "postalNumberSuffix": {
            "description": "This refers to the non-numeric portion following the Postal Number.",
            "maxLength": 3,
            "minLength": 0,
            "type": "string"
          },
          "postalType": {
            "description": "The postal type - PO Box, Roadside Mail Box etc.",
            "maxLength": 10,
            "minLength": 0,
            "type": "string"
          },
          "premiseNoSuffix": {
            "description": "The suffix to apply to the number of the premise.",
            "maxLength": 1,
            "minLength": 0,
            "type": "string"
          },
          "premiseNoTo": {
            "description": "The high number in a range for the premise.",
            "maximum": 5,
            "minimum": 0,
            "type": "number"
          },
          "premiseNoToSuffix": {
            "description": "The suffix to apply to the number to of the premise.",
            "maxLength": 1,
            "minLength": 0,
            "type": "string"
          },
          "streetSuffix": {
            "description": "The suffix for the street.",
            "maxLength": 10,
            "minLength": 0,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ExtensionAttribute": {
        "description": "An array of the extensionAttribute objects which contain extension information.",
        "properties": {
          "booleanValue": {
            "description": "Value of the class extension attribute of a boolean type.",
            "type": "boolean"
          },
          "dateOnlyValue": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "decimalValue": {
            "description": "Value of the class extension attribute of a Decimal type.",
            "type": "number"
          },
          "enumValue": {
            "$ref": "#/components/schemas/ModelEnum"
          },
          "integerValue": {
            "description": "Value of the class extension attribute of a string type.",
            "format": "int32",
            "type": "integer"
          },
          "moneyValue": {
            "description": "Value of the class extension attribute of a Money type.",
            "type": "string"
          },
          "name": {
            "description": "The name of the attribute which extends standard claim set of attributes.",
            "type": "string"
          },
          "stringValue": {
            "description": "Value of the class extension attribute of a string type.",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "ExtraPayTaxRateRequest": {
        "description": "Extra pay tax calcs are used when paying backdated periods in previous tax years. This field indicates what rate to use.",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ExtraPayTaxRateResponse": {
        "description": "Extra pay tax calcs are used when paying backdated periods in previous tax years. This field indicates what rate to use.",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "FilingMaritalStatusRequest": {
        "description": "The marital status filed for tax purposes (EnumDomainId=2201). Sample value is 'Unknown'",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "FilingMaritalStatusResponse": {
        "description": "The marital status filed for tax purposes (EnumDomainId=2201). Sample value is 'Unknown'",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "GenderRequest": {
        "description": "The customer's gender  e.g. Male (<I>domainId</I> = 1)",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GenderResponse": {
        "description": "The customer's gender  e.g. Male (<I>domainId</I> = 1)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "GroupClientAccommodationCase": {
        "properties": {
          "accommodations": {
            "description": "List of accommodations contained in the case.",
            "items": {
              "$ref": "#/components/schemas/GroupClientAccommodationDetail"
            },
            "type": "array"
          },
          "caseHandler": {
            "$ref": "#/components/schemas/CaseHandler"
          },
          "caseReference": {
            "description": "Business identifier for this case.",
            "type": "string"
          },
          "closureReasons": {
            "description": "List of reasons given if the case is not being accommodated.",
            "items": {
              "description": "List of reasons given if the case is not being accommodated.",
              "type": "string"
            },
            "type": "array"
          },
          "decisionDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "employee": {
            "$ref": "#/components/schemas/Employee"
          },
          "id": {
            "description": "Unique identifier for the resource.",
            "type": "string"
          },
          "limitations": {
            "description": "List of limitations the employee has that they require an accommodation in their job.",
            "items": {
              "description": "List of limitations the employee has that they require an accommodation in their job.",
              "type": "string"
            },
            "type": "array"
          },
          "notificationCase": {
            "$ref": "#/components/schemas/NotificationCase"
          },
          "notificationDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "phase": {
            "description": "Current phase in the Interactive Accommodation Process required by the Americans With Disabilities Act (ADA) and configured in the system, for example, 'Assessment'.",
            "type": "string"
          },
          "pregnancyRelated": {
            "description": "Identifies whether the accommodation being requested is related to an employee's pregnancy.",
            "type": "string"
          },
          "stage": {
            "description": "Current stage in the Interactive Accommodation Process and configured in the system, for example, 'Evaluate Accommodation Options'.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GroupClientAccommodationDetail": {
        "description": "List of accommodations contained in the case.",
        "properties": {
          "acceptedDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "accommodationCategory": {
            "description": "The Category that identifies this association.",
            "type": "string"
          },
          "accommodationDescription": {
            "description": "The description of this accommodation.",
            "type": "string"
          },
          "accommodationType": {
            "description": "The Type that identifies this accommodation",
            "type": "string"
          },
          "createDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "endDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "implementedDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "source": {
            "description": "Has the accommodation been resquested by employee or proposed by employer?",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GroupClientDocument": {
        "properties": {
          "caseId": {
            "type": "string"
          },
          "createdBy": {
            "description": "The User name who created a document.",
            "maxLength": 60,
            "minLength": 0,
            "type": "string"
          },
          "dateCreated": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "description": {
            "description": "User solicitied description of this document.",
            "maxLength": 4000,
            "minLength": 0,
            "type": "string"
          },
          "documentId": {
            "description": "The document Id",
            "format": "int64",
            "type": "integer"
          },
          "effectiveFrom": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "effectiveTo": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "extensionAttributes": {
            "description": "An array of the extensionAttribute objects which contain document (OCDocumentBase) extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "fileExtension": {
            "description": "The file extension of the document. e.g. .doc for MS Word.",
            "maxLength": 20,
            "minLength": 0,
            "type": "string"
          },
          "fileName": {
            "description": "An external reference to the document. This can be a docid or a path and filename.",
            "maxLength": 400,
            "minLength": 0,
            "type": "string"
          },
          "isRead": {
            "type": "boolean"
          },
          "name": {
            "description": "The short business description of the document type",
            "maxLength": 200,
            "minLength": 0,
            "type": "string"
          },
          "originalFilename": {
            "description": "The original attachment filename.",
            "maxLength": 300,
            "minLength": 0,
            "type": "string"
          },
          "privacyTag": {
            "description": "The privacyTag secure action of the document.",
            "type": "string"
          },
          "readForMyOrganisation": {
            "description": "The read status of the document by other group client from same Organisation.",
            "type": "boolean"
          },
          "receivedDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "rootCaseId": {
            "type": "string"
          },
          "status": {
            "description": "The status of the document.",
            "type": "string"
          },
          "title": {
            "description": "The title of the document.",
            "maxLength": 2000,
            "minLength": 0,
            "type": "string"
          },
          "type": {
            "description": "The form of the document e.g. image, email, document",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          }
        },
        "required": [
          "documentId",
          "name",
          "type"
        ],
        "type": "object"
      },
      "GroupClientUser": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "enabled": {
            "description": "An indicator used to determine if this Group Client User is enabled or not. True = enabled / false = disabled.",
            "type": "boolean"
          },
          "id": {
            "description": "The unique Id used to identify the Group Client User.",
            "type": "string"
          },
          "nameOfUser": {
            "description": "The Group Client Users name.",
            "type": "string"
          },
          "role": {
            "$ref": "#/components/schemas/AltRoleSchema"
          },
          "status": {
            "$ref": "#/components/schemas/AltStatusSchema"
          },
          "userReferenceIdentifier": {
            "description": "This is an additional reference id which can be used to identify a Group Client User.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GroupPolicyClassEmbeddable": {
        "description": "The ids and names of the classes that are available on the group policy (sorted by name).",
        "properties": {
          "id": {
            "description": "ID used to identify the group policy class",
            "type": "string"
          },
          "name": {
            "description": "The name of the selected group policy class",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GroupPolicyDivisionEmbeddable": {
        "description": "The ids and names of the divisions that are available on the group policy (sorted by name).",
        "properties": {
          "id": {
            "description": "ID used to identify the group policy division",
            "type": "string"
          },
          "name": {
            "description": "The name of the selected group policy division",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GroupPolicyMemberDetail": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "availablePolicyClasses": {
            "description": "The ids and names of the classes that are available on the group policy (sorted by name).",
            "items": {
              "$ref": "#/components/schemas/GroupPolicyClassEmbeddable"
            },
            "type": "array"
          },
          "availablePolicyDivisions": {
            "description": "The ids and names of the divisions that are available on the group policy (sorted by name).",
            "items": {
              "$ref": "#/components/schemas/GroupPolicyDivisionEmbeddable"
            },
            "type": "array"
          },
          "divisionClassLinks": {
            "description": "The list of class and division ids that are linked to the claimant member details for the group policy (sorted by division name and class name).",
            "items": {
              "$ref": "#/components/schemas/DivisionClassLinkEmbeddable"
            },
            "type": "array"
          },
          "id": {
            "description": "The claim member details ID.",
            "type": "string"
          },
          "memberNumber": {
            "description": "The Claimant's member number for the group policy",
            "type": "string"
          },
          "policyReference": {
            "description": "The policy reference",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GroupPolicyMemberDetails": {
        "description": "The list of group policies linked to the claim (sorted by policy reference and member number) ",
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "elements": {
            "items": {
              "$ref": "#/components/schemas/GroupPolicyMemberDetail"
            },
            "type": "array"
          },
          "hasMoreElements": {
            "description": "<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>",
            "type": "boolean"
          },
          "meta": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "totalSize": {
            "description": "<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "HospitalisationDetails": {
        "properties": {
          "description": {
            "description": "The description of hospitalisation detail.",
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "endDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "endDateConfirmed": {
            "description": "The end date confirmation for the hospitalisation period.",
            "type": "boolean"
          },
          "extensionAttributes": {
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "hospitalReason": {
            "description": "The hospitalisation reason for the claim period.",
            "type": "string"
          },
          "startDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          }
        },
        "required": [
          "startDate"
        ],
        "type": "object"
      },
      "HospitalisationDetailsResponse": {
        "properties": {
          "description": {
            "description": "The description of hospitalisation detail.",
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "endDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "endDateConfirmed": {
            "description": "The end date confirmation for the hospitalisation period.",
            "type": "boolean"
          },
          "extensionAttributes": {
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "facility": {
            "description": "The facilitator(hospital) name.",
            "type": "string"
          },
          "hospitalReason": {
            "description": "The hospitalisation reason for the claim period.",
            "type": "string"
          },
          "hospitalisationDetailId": {
            "description": "Business Entity OID",
            "example": "PE-00012-0000001234",
            "format": "string",
            "type": "string"
          },
          "startDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          }
        },
        "required": [
          "hospitalisationDetailId",
          "startDate"
        ],
        "type": "object"
      },
      "IdentificationNumberTypeRequest": {
        "description": "The type of identification number the party will have, e.g. social security, tax idendification, (<I>domainId</I> = 273)",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "IdentificationNumberTypeResponse": {
        "description": "The type of identification number the party will have, e.g. social security, tax idendification, (<I>domainId</I> = 273)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "IncomeSource": {
        "properties": {
          "amount": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          },
          "endDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "extensionAttributes": {
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "frequency": {
            "description": "Frequency of the income.",
            "type": "string"
          },
          "incomeName": {
            "description": "Income source name.",
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "incomeType": {
            "description": "Type of the income source.",
            "type": "string"
          },
          "receivedFrom": {
            "description": "Identify from where the other income source was received.",
            "type": "string"
          },
          "startDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          }
        },
        "required": [
          "incomeName",
          "incomeType"
        ],
        "type": "object"
      },
      "IncomeSourceResponse": {
        "properties": {
          "amount": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          },
          "endDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "extensionAttributes": {
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "frequency": {
            "description": "Frequency of the income.",
            "type": "string"
          },
          "incomeName": {
            "description": "Income source name.",
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "incomeSourceId": {
            "description": "Business Entity OID",
            "example": "PE-00012-0000001234",
            "format": "string",
            "type": "string"
          },
          "incomeType": {
            "description": "Type of the income source.",
            "type": "string"
          },
          "receivedFrom": {
            "description": "Identify from where the other income source was received.",
            "type": "string"
          },
          "startDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          }
        },
        "required": [
          "incomeName",
          "incomeType"
        ],
        "type": "object"
      },
      "JobStrenuousRequest": {
        "description": "Job strength category (<I>domainId</I> = 160)",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "JobStrenuousResponse": {
        "description": "Job strength category (<I>domainId</I> = 160)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "KiwiSaverStatusRequest": {
        "description": "Indicates what rate to use when calculating Kiwisaver deductions.",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "KiwiSaverStatusResponse": {
        "description": "Indicates what rate to use when calculating Kiwisaver deductions.",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "LeaveInfo": {
        "description": "List of hours per leave type within the Notification Case where the employee is approved to leave.",
        "properties": {
          "leaveType": {
            "$ref": "#/components/schemas/LeaveTypeResponse"
          },
          "timeApproved": {
            "description": "The amount of time approved in this period, in the specified time entitlement basis e.g. number of Weeks, Days.",
            "type": "string"
          },
          "timeApprovedBasis": {
            "$ref": "#/components/schemas/TimeApprovedBasisResponse"
          }
        },
        "type": "object"
      },
      "LeavePlan": {
        "description": "The leave plan associated with the request",
        "properties": {
          "adjudicationStatus": {
            "description": "Adjudication status of leave plan",
            "type": "string"
          },
          "applicabilityStatus": {
            "description": "Applicability status of leave plan",
            "type": "string"
          },
          "availabilityStatus": {
            "description": "Result of the evaluation of plan availability within a leave request",
            "type": "string"
          },
          "calculationPeriodMethod": {
            "description": "Calculation period method of leave plan period.",
            "type": "string"
          },
          "category": {
            "description": "Leave plan category",
            "type": "string"
          },
          "eligibilityStatus": {
            "description": "Eligibility status of leave plan",
            "type": "string"
          },
          "evidenceStatus": {
            "description": "Evidence status made on this Selected Leave Plan",
            "type": "string"
          },
          "fixedYearStartDay": {
            "description": "Start day for the specified fixed year",
            "format": "int64",
            "type": "integer"
          },
          "fixedYearStartMonth": {
            "description": "Fixed year start month",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier for the leave plan",
            "type": "string"
          },
          "leavePlanType": {
            "$ref": "#/components/schemas/LeavePlanType"
          },
          "name": {
            "description": "Leave plan long name",
            "type": "string"
          },
          "paidLeaveCaseId": {
            "description": "Paid leave case id",
            "type": "string"
          },
          "shortName": {
            "description": "Leave plan short name",
            "type": "string"
          },
          "timeBankMethod": {
            "description": "The time bank method either from the Service Agreement or from the Leave Plan Availability",
            "type": "string"
          },
          "timeEntitlement": {
            "description": "Number of time units for the time entitlement",
            "type": "number"
          },
          "timeEntitlementBasis": {
            "description": "Units of time used in leave plan availability",
            "type": "string"
          },
          "timeWithinPeriod": {
            "description": "Number of time units for the period duration e.g. Weeks, Days",
            "format": "int64",
            "type": "integer"
          },
          "timeWithinPeriodBasis": {
            "description": "Units of time used in calculating the time with in period ",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LeavePlanCategoryDtlResponse": {
        "description": "The category of the leave plan. (EnumDomainId=6751)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "LeavePlanCategoryResponse": {
        "description": "The category of the leave plan. (EnumDomainId=6751)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "LeavePlanGroupDtlResponse": {
        "description": "The group of the leave plan. A leave plan is assigned to a group based on who created it e.g. Federal, State, etc. (EnumDomainId=6750)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "LeavePlanGroupResponse": {
        "description": "The group of the leave plan. A leave plan is assigned to a group based on who created it e.g. Federal, State, etc. (EnumDomainId=6750)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "LeavePlanJobProtectionResponse": {
        "description": "Defines whether a leave plan offers job protection (EnumDomainId=6752)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "LeavePlanType": {
        "properties": {
          "fullId": {
            "format": "int64",
            "type": "integer"
          },
          "leavePlanName": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "LeavePlanTypeDtlResponse": {
        "description": "Type of leave a plan is designed to support. (EnumDomainId=6754)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "LeavePlanTypeResponse": {
        "description": "Type of leave a plan is designed to support. (EnumDomainId=6754)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "LeaveRequest": {
        "description": "Leave request",
        "properties": {
          "approvalReason": {
            "description": "Reason for approval of a request",
            "type": "string"
          },
          "decisionStatus": {
            "description": "Leave request decision status",
            "type": "string"
          },
          "denialReason": {
            "description": "Reason for denial of a request",
            "type": "string"
          },
          "id": {
            "description": "Business Entity OID",
            "example": "PE-00012-0000001234",
            "format": "string",
            "type": "string"
          },
          "qualifier1": {
            "description": "The leave request first qualifier",
            "type": "string"
          },
          "qualifier2": {
            "description": "The leave request second qualifier",
            "type": "string"
          },
          "reasonName": {
            "description": "The leave request reason",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LeaveTypeResponse": {
        "description": "Type of the leave for this absence period (Enum Domain = 6811)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "LevyExemptionRequest": {
        "description": "Indicates if claiming for full or half medicare exemption. Sample values are 'Full', 'Half'",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LifeExpectancyRequest": {
        "description": "Projected life expectancy for the injured party based on the current medical information (<I>EnumDomainId=2481</I>). Sample values are 'Unknown', 'Less than 6 months' and '6-12 months'.",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LifeExpectancyResponse": {
        "description": "Projected life expectancy for the injured party based on the current medical information (<I>EnumDomainId=2481</I>). Sample values are 'Unknown', 'Less than 6 months' and '6-12 months'.",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "LimitationsDescriptionResponse": {
        "description": "List of limitations the employee has that they require an accommodation in their job.",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "LinkCommand": {
        "properties": {
          "id": {
            "type": "string"
          },
          "relName": {
            "type": "string"
          },
          "resource": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "relName",
          "resource"
        ],
        "type": "object"
      },
      "LumpSumBenefit": {
        "description": "A JSON representation of details of a lump sum benefit.",
        "properties": {
          "amountType": {
            "description": "Indicates the basis upon which the benefit is calculated, examples might be fixed amount basis, salary percentage basis or tiered basis.",
            "type": "string"
          },
          "basisOfPolicyWaitingPeriod": {
            "description": "Basis of the period of time that the policy must be in force before the insured qualifies for coverage (i.e. day, week month or year).",
            "type": "string"
          },
          "benefitExpiryDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "benefitIncurredDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "benefitType": {
            "description": "Type of a benefit right such as Disability Income - STD, Disability Income LTD, Accelerated Death Benefit or Accidental Death Benefit.",
            "type": "string"
          },
          "brokerAuthorisationFlag": {
            "description": "Flag that indicates if the broker is to be included in the correspondence.",
            "type": "boolean"
          },
          "effectiveDateForCoverage": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "extensionAttributes": {
            "description": "Extra attributes from extension if any.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "flatAmount": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          },
          "initialNotificationDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "isUnderwritten": {
            "description": "Indicates whether or not the member has been underwritten in order to have additional cover beyond what the group membership offers.",
            "type": "boolean"
          },
          "maximumBenefitExpiryAge": {
            "description": "Maximum Age to be eligible to receive benefit.",
            "format": "int64",
            "type": "integer"
          },
          "notificationReceivedDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "overrideClaimIncurredDate": {
            "description": "Indicator which specifies that the benefit level incurred date should be used rather than the claim level incurred date.",
            "type": "boolean"
          },
          "policyWaitingPeriod": {
            "description": "Period of time that the policy must be in force before the insured qualifies for coverage.",
            "format": "int64",
            "type": "integer"
          },
          "sourceOfRequest": {
            "description": "The type of source that is requesting the benefit, such as claimant, guardian, or medical officer.",
            "type": "string"
          },
          "startDateOfBenefitForClaim": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "sumInsuredAtIncurredDate": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ManagedRequirementDetails": {
        "properties": {
          "category": {
            "description": "The category name of the managed requirement.",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "classExtensionInformation": {
            "description": "An array of the extensionAttribute objects which contain managed requirement (OCManagedRequirement) extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "creationDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "creator": {
            "description": "the creator for this managed requirement.",
            "type": "string"
          },
          "dateCompleted": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "dateLastFollowedUp": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "dateRequested": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "dateSuppressed": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "description": {
            "description": "A text description of the outstanding requirement or information.",
            "maxLength": 250,
            "minLength": 0,
            "type": "string"
          },
          "documentReceived": {
            "description": "Indicates that a document has been received for this managed requirement. Returns true if the managed requirement is linked to a document that this user can access,otherwise returns false.",
            "type": "boolean"
          },
          "followUpDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "managedReqId": {
            "description": "the identifier for this managed requirement.",
            "format": "int64",
            "type": "integer"
          },
          "notProceedingWithDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "sourceOfInfoPartyName": {
            "description": "The source of info party name of the managed requirement.",
            "type": "string"
          },
          "status": {
            "description": "The current status of this Managed Requirement. ",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "subjectPartyName": {
            "description": "The subject party name of the managed requirement.",
            "type": "string"
          },
          "type": {
            "description": "The name of the type of the managed requirement.",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          }
        },
        "required": [
          "category",
          "creationDate",
          "creator",
          "dateSuppressed",
          "documentReceived",
          "managedReqId",
          "sourceOfInfoPartyName",
          "subjectPartyName",
          "type"
        ],
        "type": "object"
      },
      "ManagerAcceptedResponse": {
        "description": "The manager has accepted the associated actual absence periods or not for e.g YesNoUnknown Yes, YesNoUnknown No. This maps to enum YesNoUnknown(domain id 2500)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "MaritalRelationshipStatusRequest": {
        "description": "Status of Marital Relationship. Sample values are 'Single', 'Illness', 'Separated Couple','Couple'",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "MaritalRelationshipStatusResponse": {
        "description": "Status of Marital Relationship. Sample values are 'Single', 'Illness', 'Separated Couple','Couple'",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "MaritalStatusRequest": {
        "description": "Marital Status e.g. Single, Married etc. (<I>domainId</I> = 2)",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "MaritalStatusResponse": {
        "description": "Marital Status e.g. Single, Married etc. (<I>domainId</I> = 2)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "MedicalDetailsResource": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "causeOfInjuryCode": {
            "description": "The code ID that specifies the cause of injury. This represents a specific medical code that identifies a particular injury, and is associated with the corresponding claim (using a Code Value Link entity). This must be contained within inverted commas, otherwise the value will be coerced. For example, medical code 10-1 would be coerced into medical code 9.",
            "type": "string"
          },
          "clientDominantSide": {
            "$ref": "#/components/schemas/ClientDominantSideResponse"
          },
          "condition": {
            "description": "A description of the medical condition of the injured party. Cannot be more than 150 characters.",
            "type": "string"
          },
          "conditionCategory": {
            "$ref": "#/components/schemas/ConditionCategoryResponse"
          },
          "description": {
            "description": "Description of the cause of injury code.",
            "type": "string"
          },
          "extensions": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "firstDoctorVisitDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "id": {
            "description": "Claim identifier",
            "type": "string"
          },
          "lastReceivedDateMedicalInfoDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "lastRequestedDateMedicalInfoDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "lifeExpectancy": {
            "$ref": "#/components/schemas/LifeExpectancyResponse"
          },
          "medicalAuthorisationReceivedDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "pregnancyIndicator": {
            "description": "Indicates whether a person is pregnant or not.",
            "type": "boolean"
          },
          "symptomsFirstAppearedDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "treatmentPlan": {
            "description": "A description of the treatment plan for the injured party. Cannot be more than 256 characters.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "MedicareLevySurchargeRequest": {
        "description": "Percentage of Medicare Levy surcharge. Sample values are '1%', '1.25%', '1.5%'",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "MedicareLevySurchargeResponse": {
        "description": "Percentage of Medicare Levy surcharge. Sample values are '1%', '1.25%', '1.5%'",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "ModelEnum": {
        "properties": {
          "domainName": {
            "description": "Domain name.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "instanceValue": {
            "description": "Enum instance name.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          }
        },
        "required": [
          "domainName",
          "instanceValue"
        ],
        "type": "object"
      },
      "MonthlyBasisEarningAmountsRequest": {
        "description": "Monthly Basis Earning Amounts Request Details.",
        "properties": {
          "bonuses": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          },
          "commissions": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          },
          "earningsAmount": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          },
          "pensionContribution": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          },
          "shiftPay": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          }
        },
        "required": [
          "earningsAmount"
        ],
        "type": "object"
      },
      "MonthlyBasisEarningAmountsResponse": {
        "description": "Monthly Basis Earning Amounts Response Details.",
        "properties": {
          "bonuses": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          },
          "commissions": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          },
          "earningsAmount": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          },
          "earningsAmountAsWeekly": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          },
          "pensionContribution": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          },
          "shiftPay": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          },
          "totalEarnings": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          }
        },
        "required": [
          "earningsAmount"
        ],
        "type": "object"
      },
      "MonthlyEarningsRequest": {
        "properties": {
          "classExtensionInformation": {
            "description": "An array of the extensionAttribute objects which contain Earnings extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "earningsBasis": {
            "description": "The earnings frequency.",
            "type": "string"
          },
          "effectiveDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "endDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "monthlyBasisEarningAmountsRequest": {
            "$ref": "#/components/schemas/MonthlyBasisEarningAmountsRequest"
          },
          "notes": {
            "description": "Notes relating to the earnings period.",
            "maxLength": 200,
            "minLength": 0,
            "type": "string"
          },
          "salaryAmountBasis": {
            "description": "Basis for salary amount being used.",
            "type": "string"
          }
        },
        "required": [
          "earningsBasis"
        ],
        "type": "object"
      },
      "NZTaxCodeDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RegionTaxCodeDetails"
          },
          {
            "properties": {
              "extraPayTaxRate": {
                "$ref": "#/components/schemas/ExtraPayTaxRateResponse"
              },
              "irTaxCodeChange": {
                "description": "The tax office may direct the insurer to use a different tax code than the client declared one. This field indicates where the tax office has ordered a tax code change.",
                "type": "boolean"
              },
              "isGSTRegistered": {
                "description": "Denotes if a payee is liable for Goods and Services Tax (GST)",
                "type": "boolean"
              },
              "kiwiSaverStatus": {
                "$ref": "#/components/schemas/KiwiSaverStatusResponse"
              },
              "studLoanThresholdApplies": {
                "description": "Denotes if a Student Loan Repayment Threshold Applies",
                "type": "boolean"
              },
              "taxCertNumber": {
                "description": "When a payee (client usually) has an individual tax agreement with IRD, i.e. to use a non-standard tax rate, this is the reference number of the tax certificate issued by IRD.",
                "type": "string"
              },
              "taxCodeRateNonStdStudLoan": {
                "description": "Indicates what rate to use for student loan for a non-standard tax code.",
                "type": "string"
              },
              "withholdingTaxStatus": {
                "$ref": "#/components/schemas/WithholdingTaxStatusResponse"
              },
              "zeroStudLoanTaxCodeRate": {
                "description": "Indicates if a rate of zero is entered for the TaxCodeRateNonStdStudLoan field that this was intentional.",
                "type": "boolean"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "NationalityRequest": {
        "description": "Person's nationaity (<I>domainId</I> = 95)",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "NationalityResponse": {
        "description": "Person's nationaity (<I>domainId</I> = 95)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "NewDiagnosisDetails": {
        "properties": {
          "levelIndicator": {
            "description": "The injury code level e.g. primary or secondary assigned to the injury in the context of the claim.",
            "type": "string"
          },
          "medicalCode": {
            "description": "The code ID that specifies a particular diagnosis.",
            "maxLength": 20,
            "minLength": 0,
            "type": "string"
          }
        },
        "type": "object"
      },
      "NewPaymentPreference": {
        "properties": {
          "accountDetails": {
            "$ref": "#/components/schemas/AccountDetails"
          },
          "chequeDetails": {
            "$ref": "#/components/schemas/ChequeDetails"
          },
          "classExtensionInformation": {
            "description": "An array of the extensionAttribute objects which contain claim extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "customerAddress": {
            "$ref": "#/components/schemas/CustomerAddress"
          },
          "description": {
            "description": "Description of the Payment Preference",
            "type": "string"
          },
          "effectiveFrom": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "effectiveTo": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "isDefault": {
            "type": "boolean"
          },
          "overridePostalAddress": {
            "description": "Indicates that an override address applies for the payment preference. (i.e. sets the paymentAddressType to override. When false the correspondence address for the payee (or nominated payee) applies.",
            "type": "boolean"
          },
          "paymentMethod": {
            "description": "The name of the payment method. This is used to determine whether chequeDetails or accountDetails is displayed",
            "type": "string"
          }
        },
        "required": [
          "paymentMethod"
        ],
        "type": "object"
      },
      "NonStdDeductionsMoneyRequest": {
        "description": "Specifies the amount for non standard deductions.",
        "properties": {
          "amountMinorUnits": {
            "description": "The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
            "type": "string"
          }
        },
        "type": "object"
      },
      "NonStdDeductionsMoneyResponse": {
        "description": "Specifies the amount for non standard deductions.",
        "properties": {
          "amountMinorUnits": {
            "description": "The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
            "format": "int64",
            "type": "integer"
          },
          "currency": {
            "description": "The currency used in the Money amount",
            "type": "string"
          },
          "scale": {
            "description": "The scale used in the Money amount",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "NotifedByResponse": {
        "description": "Identifies who started this notification",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "Notification": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "adminGroup": {
            "description": "Administrative group of the notification case.",
            "type": "string"
          },
          "caseHandler": {
            "$ref": "#/components/schemas/CaseHandlerEmbeddable"
          },
          "caseNumber": {
            "description": "The Notification's case number",
            "type": "string"
          },
          "createdDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "customer": {
            "$ref": "#/components/schemas/CustomerResource"
          },
          "expectedRTWDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "id": {
            "description": "An id to uniquely identify the Notification",
            "type": "string"
          },
          "notificationDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "notificationReason": {
            "$ref": "#/components/schemas/NotificationReasonResponse"
          },
          "notifiedBy": {
            "$ref": "#/components/schemas/NotifedByResponse"
          },
          "status": {
            "description": "The status of the Notification",
            "type": "string"
          },
          "subCases": {
            "description": "Child cases of the Notification Case",
            "items": {
              "$ref": "#/components/schemas/CaseEmbeddable"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "NotificationCase": {
        "description": "Parent case of this accommodation case.",
        "properties": {
          "caseReference": {
            "description": "Business identifier for this case.",
            "type": "string"
          },
          "id": {
            "description": "Resource Id of the notification case this accommodation case belongs to if one exists.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "NotificationCaseDetail": {
        "properties": {
          "linkshdr": {
            "items": {
              "properties": {
                "params": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object"
                },
                "rel": {
                  "type": "string"
                },
                "rels": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "title": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "uri": {
                  "format": "uri",
                  "type": "string"
                },
                "uriBuilder": {
                  "type": "object"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "notificationSummaries": {
            "items": {
              "$ref": "#/components/schemas/NotificationCaseSummaryForClaims"
            },
            "type": "array"
          },
          "totalNumberOfRecords": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "NotificationCaseEmbeddable": {
        "description": "Parent case of this accommodation case.",
        "properties": {
          "caseNumber": {
            "description": "Business identifier for this case.",
            "type": "string"
          },
          "id": {
            "description": "Resource Id of the notification case this accommodation case belongs to if one exists.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "NotificationCaseForEmployee": {
        "description": "List of Notification Cases for the given employee within the date range",
        "properties": {
          "absenceDays": {
            "description": "List of Absence Days on the NotificationCase where the employee is approved to leave.",
            "items": {
              "$ref": "#/components/schemas/AbsenceDay"
            },
            "type": "array"
          },
          "adminGroup": {
            "description": "Administrative group of the notification case",
            "type": "string"
          },
          "caseNumber": {
            "description": "The Notification's case number",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the notification case",
            "type": "string"
          },
          "notificationReason": {
            "$ref": "#/components/schemas/NotificationReasonsResponse"
          }
        },
        "type": "object"
      },
      "NotificationCaseSummaryForClaims": {
        "properties": {
          "accidentDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "actualDeliveryDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "actualPartialReturnToWorkDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "actualReturnToWorkDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "claims": {
            "description": "The child cases under this notification case.",
            "items": {
              "$ref": "#/components/schemas/NotificationClaimSummary"
            },
            "type": "array"
          },
          "createdDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "dateFirstMissingWork": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "expectedDeliveryDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "expectedRTWDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "multipleConflictingAccidentDates": {
            "description": "Multiple conflicting accident dates found.If true,accidentDate attribute will be empty.",
            "type": "boolean"
          },
          "notificationCaseId": {
            "description": "The case number for the notification case.",
            "type": "string"
          },
          "notificationDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "notificationReason": {
            "description": "Notification reason selected during notification case intake.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "partialReturnToWorkDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "releasedPartialReturnToWorkDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "releasedReturnToWorkDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "returnToWorkIntention": {
            "description": "Indicates the employees return to work plans once they have finished their leave.",
            "type": "string"
          },
          "status": {
            "description": "The notification case status his is the current phase of the notification case managing process.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "NotificationClaimSummary": {
        "description": "The child cases under this notification case.",
        "properties": {
          "caseComplexity": {
            "description": "Case complexity on Claim",
            "type": "string"
          },
          "claimHandler": {
            "description": "The Person that is handling the claim.",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "claimHandlerEmailAddress": {
            "description": "The email address of the claim handler.",
            "maxLength": 40,
            "minLength": 0,
            "type": "string"
          },
          "claimHandlerPhoneNo": {
            "description": "The phone number of the claim handler.",
            "maxLength": 20,
            "minLength": 0,
            "type": "string"
          },
          "claimId": {
            "description": "The claim number of the claim",
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "claimType": {
            "description": "The name by which the claim type is referred.",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "classExtensionInformation": {
            "description": "An array of the extensionAttribute objects which contain extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "creationDate": {
            "description": "ISO 8601 date time format",
            "example": "1999-12-31T23:59:59Z",
            "format": "date-time",
            "type": "string"
          },
          "customerName": {
            "description": "The customer name of the claim",
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "description": {
            "description": "Description for this case as entered by the user.",
            "maxLength": 2000,
            "minLength": 0,
            "type": "string"
          },
          "effectiveDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "notificationDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "policyReferences": {
            "description": "The reference(s) to the policy from within the relevant admin system.",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "stageName": {
            "description": "The current stage of claim case.",
            "type": "string"
          },
          "status": {
            "description": "This is the stage in the process that the case is currently at.",
            "maxLength": 10,
            "minLength": 0,
            "type": "string"
          }
        },
        "required": [
          "claimId",
          "claimType"
        ],
        "type": "object"
      },
      "NotificationDetails": {
        "properties": {
          "customerId": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "lastWorkingDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "notificationReason": {
            "type": "string"
          },
          "notifierFirstName": {
            "type": "string"
          },
          "notifierLastName": {
            "type": "string"
          },
          "notifierPhone": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "NotificationReason": {
        "type": "object"
      },
      "NotificationReasonResponse": {
        "description": "The reason for the Notification (<I>domainId</I> = 290)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "NotificationReasonsResponse": {
        "description": "Decision reason associated with the period (Enum Domain = 6840)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "Notifications": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "elements": {
            "items": {
              "$ref": "#/components/schemas/Notification"
            },
            "type": "array"
          },
          "hasMoreElements": {
            "description": "<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>",
            "type": "boolean"
          },
          "meta": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "totalSize": {
            "description": "<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "OccupationQualifiersEmbeddable": {
        "description": "List of occupation qualifier(s) which have been applied to this employment.",
        "properties": {
          "id": {
            "description": "Occupation qualifier internal reference.",
            "type": "string"
          },
          "qualifierDescription": {
            "description": "Occupation qualifier description.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "OtherIncomeMoneyRequest": {
        "description": "Specifies the amount for other income.",
        "properties": {
          "amountMinorUnits": {
            "description": "The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
            "type": "string"
          }
        },
        "type": "object"
      },
      "OtherIncomeMoneyResponse": {
        "description": "Specifies the amount for other income.",
        "properties": {
          "amountMinorUnits": {
            "description": "The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
            "format": "int64",
            "type": "integer"
          },
          "currency": {
            "description": "The currency used in the Money amount",
            "type": "string"
          },
          "scale": {
            "description": "The scale used in the Money amount",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "OutstandingInformationData": {
        "properties": {
          "documentId": {
            "description": "Document id to link to outstanding requirement. ",
            "type": "string"
          },
          "informationType": {
            "description": "The type of the outstanding item",
            "type": "string"
          }
        },
        "required": [
          "informationType"
        ],
        "type": "object"
      },
      "OutstandingInformationItem": {
        "properties": {
          "infoReceived": {
            "description": "Indicates whether any information has been received for the outstanding information item.<BR>For instance, a document could be uploaded and linked to an outstanding requirement, in which case the value will be TRUE, however the outstanding requirement will remain OPEN until a back office user validates that the uploaded document is actually what was required.<BR>This flag will always be FALSE for a evidence result which is either pending or received but not satisfied; it will be TRUE for a received evidence result which is received and satisfied.<BR>If the element represents a combination of outstanding requirements and evidence results, the flag will be FALSE if at least one of these elements returns FALSE.",
            "type": "boolean"
          },
          "informationType": {
            "description": "The type of information item required.The type is intended to be a user-friendly value, that can be exposed on the portal and will mean something to the portal user.",
            "maxLength": 350,
            "minLength": 0,
            "type": "string"
          },
          "sourcePartyId": {
            "description": "Id of the party that is expected to provide the outstanding item.",
            "type": "string"
          },
          "sourcePartyName": {
            "description": "Name of the party that is expected to provide the outstanding item.",
            "type": "string"
          },
          "uploadCaseNumber": {
            "description": "If the outstanding item is required by multiple cases, the upload Case Number is the id of the lowest case in the hierarchy which is the common parent of all such cases; If the outstanding item is required by one case only, the upload Case Number is the id of that case.Given a caseId, different outstanding items can a have different upload Case Number depending on which case(s) requires which outstanding items.",
            "maxLength": 254,
            "minLength": 0,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Participant": {
        "properties": {
          "correspondenceAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "extendedAddress": {
            "$ref": "#/components/schemas/ExtendedAddress"
          },
          "participantSummary": {
            "$ref": "#/components/schemas/CaseParticipantsSummary"
          },
          "personDetails": {
            "$ref": "#/components/schemas/PersonDetails"
          }
        },
        "required": [
          "participantSummary"
        ],
        "type": "object"
      },
      "ParticipantContactDetails": {
        "properties": {
          "emailAddresses": {
            "description": "Return list of email addresses",
            "items": {
              "$ref": "#/components/schemas/EmailAddress"
            },
            "type": "array"
          },
          "phoneNumbers": {
            "description": "Return list of phone numbers",
            "items": {
              "$ref": "#/components/schemas/PhoneNumber"
            },
            "type": "array"
          },
          "preferredContactMethod": {
            "description": "Return the preferred contact method i.e. either the id of the preferred phone number or id of the preferred email address",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "PartyTypeRequest": {
        "description": "The party type (<I>domainId</I> = 102)",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PartyTypeResponse": {
        "description": "The party type (<I>domainId</I> = 102)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "PatternStatusRequest": {
        "description": "Indicates whether the pattern is estimated by the Employee or confirmed by the Employer (ENUM DomainId=278)",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PatternStatusResponse": {
        "description": "Indicates whether the pattern is estimated by the Employee or confirmed by the Employer (ENUM DomainId=278)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "Payment": {
        "properties": {
          "accountTransferInfo": {
            "$ref": "#/components/schemas/AccountTransferInfo"
          },
          "benefitCaseNumber": {
            "description": "The Benefit Case Number.",
            "type": "string"
          },
          "benefitCaseTypeName": {
            "type": "string"
          },
          "benefitRightTypeName": {
            "type": "string"
          },
          "chequePaymentInfo": {
            "$ref": "#/components/schemas/ChequePaymentInfo"
          },
          "classExtensionInformation": {
            "description": "An array of the extensionAttribute objects which contain payments (OLPaymentEventInterface) extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "dateInterfaceRecordCreated": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "effectiveDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "nominatedPayeeName": {
            "description": "The party the payee nominated to receive payment",
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "payeeName": {
            "description": "The party to whom the payment was made",
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "paymentAddress": {
            "description": "The address the payment was sent to",
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "paymentAmount": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          },
          "paymentDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "paymentId": {
            "description": "Business Entity OID",
            "example": "PE-00012-0000001234",
            "format": "string",
            "type": "string"
          },
          "paymentMethod": {
            "description": "The method used to transfer the payment e.g. EFT, Hand Typed Check etc.",
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "paymentType": {
            "description": "The payment type e.g. recurring, adhoc etc",
            "maxLength": 250,
            "minLength": 0,
            "type": "string"
          },
          "periodEndDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "periodStartDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "rootCaseNumber": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PaymentLine": {
        "properties": {
          "amount": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "maxLength": 28,
            "minLength": 0,
            "type": "string"
          },
          "endDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "integrationType": {
            "description": "For adjustment PaymentLine this records the IntegrationType which may have been recorded for the adjustment",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "lineType": {
            "description": "The name of the payment adjustment e.g. Gross Benefit, Income Tax, Seat Belt etc.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "paymentLinesDetail": {
            "description": "The Payment Lines Details belongs to each payment.",
            "items": {
              "$ref": "#/components/schemas/PaymentLineDetails"
            },
            "type": "array"
          },
          "reference": {
            "description": "For adjustment PaymentLine this records the Reference which may have been recorded for the adjustment",
            "maxLength": 250,
            "minLength": 0,
            "type": "string"
          },
          "startDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PaymentLineDetails": {
        "description": "The Payment Lines Details belongs to each payment.",
        "properties": {
          "adjustmentCalcDetailClassExtension": {
            "description": "An array of the extensionAttribute objects which contain OLAdjustmentCalcDetail extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "adjustmentId": {
            "description": "Business Entity OID",
            "example": "PE-00012-0000001234",
            "format": "string",
            "type": "string"
          },
          "adjustmentTypeId": {
            "description": "Business Entity OID",
            "example": "PE-00012-0000001234",
            "format": "string",
            "type": "string"
          },
          "amount": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "maxLength": 28,
            "minLength": 0,
            "type": "string"
          },
          "calcDetails": {
            "description": "The Calculation Details that explain how each adjustment is calculated. ",
            "items": {
              "description": "The Calculation Details that explain how each adjustment is calculated. ",
              "type": "string"
            },
            "type": "array"
          },
          "endDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "fixedAmountIncreaseInstructionClassExtension": {
            "description": "An array of the extensionAttribute objects which contain OLFixedAmountIncreaseInstruction extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "payee": {
            "description": "The name of the Payee which the payment adjustment belongs.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "startDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PaymentMethodRequest": {
        "description": "Method of payment for the party, such as check or Electronic Funds Transfer (EFT) (EnumDomainId = 2069).",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PaymentMethodResponse": {
        "description": "Method of payment for the party, such as check or Electronic Funds Transfer (EFT) (EnumDomainId = 2069).",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "PaymentPreferenceAddressEmbeddable": {
        "description": "Payment preference is valid to date.",
        "properties": {
          "addressLine1": {
            "description": "First line of an address.",
            "type": "string"
          },
          "addressLine2": {
            "description": "Second line of an address.",
            "type": "string"
          },
          "addressLine3": {
            "description": "Third line of an address.",
            "type": "string"
          },
          "addressLine4": {
            "description": "Fourth line of an address.",
            "type": "string"
          },
          "addressLine5": {
            "description": "Fifth line of an address.",
            "type": "string"
          },
          "addressLine6": {
            "description": "Sixth line of an address.",
            "type": "string"
          },
          "addressLine7": {
            "description": "Seventh line of an address.",
            "type": "string"
          },
          "country": {
            "$ref": "#/components/schemas/CountryResponse"
          },
          "extensions": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "extraAustralianFields": {
            "$ref": "#/components/schemas/PaymentPreferenceAustralianAddressEmbeddable"
          },
          "postCode": {
            "description": "International Postcode.",
            "type": "string"
          },
          "premiseNo": {
            "description": "The premise number i.e. the street number.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PaymentPreferenceAustralianAddressEmbeddable": {
        "properties": {
          "buildingName1": {
            "description": "The name of the building.",
            "type": "string"
          },
          "buildingName2": {
            "description": "The name of the building continued.",
            "type": "string"
          },
          "dpId": {
            "description": "Referred to as DPID this is an 8-digit Australian post address identifier which uniquely identifies each delivery point to which Australia Post delivers mail. ",
            "format": "int32",
            "type": "integer"
          },
          "extensions": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "floorLevelNumber": {
            "description": "The floorLevelNumber must not be more than {max} characters",
            "type": "string"
          },
          "floorLevelType": {
            "$ref": "#/components/schemas/AUFloorLevelTypesResponse"
          },
          "lotNumber": {
            "description": "The lot number.",
            "type": "string"
          },
          "postalNumber": {
            "description": "The postal number. ",
            "type": "string"
          },
          "postalNumberPrefix": {
            "description": "This refers to the non-numeric portion preceding the Postal Number. EXAMPLE : PO Box B20 where B is the prefix. ",
            "type": "string"
          },
          "postalNumberSuffix": {
            "description": "This refers to the non-numeric portion following the Postal Number. EXAMPLE : PO Box 20A where A is the suffix.",
            "type": "string"
          },
          "postalType": {
            "$ref": "#/components/schemas/AUPostalTypesResponse"
          },
          "premiseNoSuffix": {
            "description": "The suffix to apply to the number of the premise.",
            "type": "string"
          },
          "premiseNoTo": {
            "description": "The high number in a range for the premise. This is used when an address consists of a range of numbers as in 8-10 Lower Pembroke Street where the value 10 would be stored in this field. ",
            "format": "int32",
            "type": "integer"
          },
          "premiseNoToSuffix": {
            "description": "The suffix to apply to the number to of the premise. ",
            "type": "string"
          },
          "streetSuffix": {
            "$ref": "#/components/schemas/AUStreetSuffixesResponse"
          }
        },
        "type": "object"
      },
      "PaymentPreferenceResource": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "accountDetail": {
            "$ref": "#/components/schemas/AccountDetailEmbeddable"
          },
          "address": {
            "$ref": "#/components/schemas/PaymentPreferenceAddressEmbeddable"
          },
          "chequeDetail": {
            "$ref": "#/components/schemas/ChequeDetailEmbeddable"
          },
          "default": {
            "type": "boolean"
          },
          "description": {
            "description": "Payment preference description.",
            "type": "string"
          },
          "effectiveFromDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "effectiveToDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "extensions": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "id": {
            "type": "string"
          },
          "nominatedPayee": {
            "description": "Name of the nominated payee.",
            "type": "string"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/PaymentMethodResponse"
          },
          "stageName": {
            "description": "The current stage of the payment preference.",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/CurrentPhaseResponse"
          }
        },
        "type": "object"
      },
      "PaymentPreferenceResources": {
        "description": "List of PaymentPreferenceResource",
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "elements": {
            "items": {
              "$ref": "#/components/schemas/PaymentPreferenceResource"
            },
            "type": "array"
          },
          "hasMoreElements": {
            "description": "<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>",
            "type": "boolean"
          },
          "meta": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "totalSize": {
            "description": "<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "PaymentPreferenceResponse": {
        "properties": {
          "accountDetails": {
            "$ref": "#/components/schemas/AccountDetails"
          },
          "chequeDetails": {
            "$ref": "#/components/schemas/ChequeDetails"
          },
          "classExtensionInformation": {
            "description": "An array of the extensionAttribute objects which contain claim extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "customerAddress": {
            "$ref": "#/components/schemas/CustomerAddress"
          },
          "description": {
            "description": "Description of the Payment Preference",
            "type": "string"
          },
          "effectiveFrom": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "effectiveTo": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "isDefault": {
            "type": "boolean"
          },
          "nominatedPayee": {
            "description": "The nominated payee for the payment preference",
            "maxLength": 250,
            "minLength": 0,
            "type": "string"
          },
          "paymentMethod": {
            "description": "The name of the payment method. This is used to determine whether chequeDetails or accountDetails is displayed",
            "type": "string"
          },
          "paymentPreferenceId": {
            "description": "The unique identifier for payment preference",
            "maxLength": 32,
            "minLength": 0,
            "type": "string"
          },
          "stageName": {
            "description": "The current stage of the payment preference",
            "type": "string"
          },
          "status": {
            "description": "The status of the payment preference",
            "type": "string"
          }
        },
        "required": [
          "paymentMethod",
          "paymentPreferenceId"
        ],
        "type": "object"
      },
      "Period": {
        "description": "Leave period",
        "properties": {
          "balanceDeduction": {
            "description": "The amount of time deducted from the time bank in the specified time entitlement basis e.g. number of Weeks, Days etc.",
            "type": "number"
          },
          "endDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "leavePlan": {
            "$ref": "#/components/schemas/LeavePlan"
          },
          "leaveRequest": {
            "$ref": "#/components/schemas/LeaveRequest"
          },
          "parentPeriodReference": {
            "description": "Reference number for the parent period",
            "type": "string"
          },
          "periodReference": {
            "description": "Business Entity OID",
            "example": "PE-00012-0000001234",
            "format": "string",
            "type": "string"
          },
          "relatedToEpisodic": {
            "description": "True if this period represents a reported actual for an episodic requested period, false otherwise",
            "type": "boolean"
          },
          "requestedEpisodicLeaveDetails": {
            "$ref": "#/components/schemas/RequestedEpisodicLeaveDetails"
          },
          "startDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "status": {
            "description": "Status of the leave request",
            "type": "string"
          },
          "timeDecisionReason": {
            "description": "Decision reason associated with the period",
            "type": "string"
          },
          "timeDecisionStatus": {
            "description": "Decision status associated with the period",
            "type": "string"
          },
          "timeDeducted": {
            "description": "The amount of time deducted in this period, in the specified time deducted basis e.g. number of Hours, Days",
            "type": "string"
          },
          "timeDeductedBasis": {
            "description": "The time deducted basis in this period e.g. Hours, Days",
            "type": "string"
          },
          "timeRequested": {
            "description": "The amount of time requested in this period, in the specified time entitlement basis e.g. number of Weeks, Days",
            "type": "string"
          },
          "type": {
            "description": "Type of the absence period",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PeriodDecisions": {
        "properties": {
          "decisions": {
            "description": "List of Period Decisions for the given absence or employee",
            "items": {
              "$ref": "#/components/schemas/Decision"
            },
            "type": "array"
          },
          "endDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "startDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PermissionGroupResource": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "A map of links the user has permission to",
              "format": "url",
              "type": "string"
            },
            "description": "A map of links the user has permission to",
            "type": "object"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "description": "Name of the endpoint",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PermissionGroupResources": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "elements": {
            "items": {
              "$ref": "#/components/schemas/PermissionGroupResource"
            },
            "type": "array"
          },
          "hasMoreElements": {
            "description": "<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>",
            "type": "boolean"
          },
          "meta": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "totalSize": {
            "description": "<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "PersonDetails": {
        "description": "Person Details.",
        "properties": {
          "classExtensionInformation": {
            "description": "An array of the extensionAttribute objects which contain customer (OCPerson) extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "dateOfBirth": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "gender": {
            "description": "The person's gender.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "maritalStatus": {
            "description": "Person's marital status - single / married / etc.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "nationality": {
            "description": "Person's nationality.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "needsInterpretor": {
            "description": "Indicates if the customer needs an interpreter.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PhoneNumber": {
        "description": "Return list of phone numbers",
        "properties": {
          "areaCode": {
            "description": "area code value",
            "maxLength": 20,
            "minLength": 0,
            "type": "string"
          },
          "classExtensionInformation": {
            "description": "An array of the extensionAttribute objects which contain phone number (OCPhone) extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "id": {
            "description": "The id of the contact method (e.g. phone / mobile / emailAddress) ",
            "format": "int64",
            "maximum": 10,
            "minimum": 0,
            "type": "integer"
          },
          "intCode": {
            "description": "international code value",
            "maxLength": 10,
            "minLength": 0,
            "type": "string"
          },
          "phoneNumberType": {
            "description": "The type of phone number (e.g. landline / mobile)",
            "maxLength": 10,
            "minLength": 0,
            "type": "string"
          },
          "preferred": {
            "type": "boolean"
          },
          "telephoneNo": {
            "description": "telephone No. value",
            "maxLength": 10,
            "minLength": 0,
            "type": "string"
          }
        },
        "required": [
          "id",
          "phoneNumberType"
        ],
        "type": "object"
      },
      "PhoneNumberContactMethodResponse": {
        "description": "A choice in contact medium from an enumerated list",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "PhoneNumberResource": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "areaCode": {
            "description": "Regional area code",
            "type": "string"
          },
          "contactMethod": {
            "$ref": "#/components/schemas/PhoneNumberContactMethodResponse"
          },
          "exDirectory": {
            "description": "True if the number is ex-directory",
            "type": "boolean"
          },
          "extension": {
            "description": "Optional extension number for networks",
            "type": "string"
          },
          "extensions": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "id": {
            "description": "The id of the resource",
            "type": "string"
          },
          "intCode": {
            "description": "International area code",
            "type": "string"
          },
          "telephoneNo": {
            "description": "Local telephone number",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PhoneNumbers": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "elements": {
            "items": {
              "$ref": "#/components/schemas/PhoneNumberResource"
            },
            "type": "array"
          },
          "hasMoreElements": {
            "description": "<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>",
            "type": "boolean"
          },
          "meta": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "totalSize": {
            "description": "<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Policy": {
        "description": "Object with information about policies that will be added to the claim.",
        "properties": {
          "referenceNo": {
            "description": "Unique alphanumeric policy reference from the relevant policy admin system.",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          }
        },
        "required": [
          "referenceNo"
        ],
        "type": "object"
      },
      "PregnancyDetails": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "actualDeliveryDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "deliveryType": {
            "$ref": "#/components/schemas/DeliveryTypeResponse"
          },
          "expectedDeliveryDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "id": {
            "description": "Claim Medical Details identifier",
            "type": "string"
          },
          "meta": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "pregnancyComplications": {
            "description": "Indicates whether or not pregnancy complications occurred.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PregnancyRelatedResponse": {
        "description": "Identifies whether the accommodation being requested is related to an employee's pregnancy or not. (Enum Domain = 2500)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "QuerySortInfo": {
        "properties": {
          "sortOrderItemsList": {
            "items": {
              "$ref": "#/components/schemas/SortOrderItem"
            },
            "type": "array"
          },
          "sortStatementsText": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ReadDisabilityBenefitResult": {
        "properties": {
          "benefitSummary": {
            "$ref": "#/components/schemas/BenefitSummary"
          },
          "certificationPeriods": {
            "description": "The certification period details of the disability benefit.",
            "items": {
              "$ref": "#/components/schemas/CertificationPeriodDetails"
            },
            "type": "array"
          },
          "disabilityBenefit": {
            "$ref": "#/components/schemas/DisabilityBenefit"
          }
        },
        "type": "object"
      },
      "ReadDisabilityResult": {
        "properties": {
          "claimReopened": {
            "description": "This value is used to inform the group client if the claim is reopened.",
            "type": "boolean"
          },
          "claimSummary": {
            "$ref": "#/components/schemas/ClaimSummary"
          },
          "customerDateOfBirth": {
            "description": "ISO 8601 date time format",
            "example": "1999-12-31T23:59:59Z",
            "format": "date-time",
            "type": "string"
          },
          "disabilityClaim": {
            "$ref": "#/components/schemas/DisabilityClaim"
          }
        },
        "type": "object"
      },
      "ReadLumpSumBenefitResult": {
        "properties": {
          "benefitSummary": {
            "$ref": "#/components/schemas/BenefitSummary"
          },
          "lumpSumBenefit": {
            "$ref": "#/components/schemas/LumpSumBenefit"
          }
        },
        "type": "object"
      },
      "ReadOccupation": {
        "properties": {
          "additionalEmploymentCategory": {
            "description": "The alternate employment category.",
            "type": "string"
          },
          "codeId": {
            "description": "The occupation Code ID.",
            "type": "string"
          },
          "codeName": {
            "description": "The name associated with the specific occupation Code ID.",
            "type": "string"
          },
          "dateJobBegan": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "dateJobEnded": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "daysWorkedPerWeek": {
            "description": "The number of days worked per week.",
            "type": "number"
          },
          "employeeId": {
            "description": "The id of an employee in respect of its employer.",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "employer": {
            "description": "The name of the employer.",
            "type": "string"
          },
          "employmentCategory": {
            "description": "The employment category.",
            "type": "string"
          },
          "employmentLocation": {
            "description": "The employment location code.",
            "type": "string"
          },
          "employmentStatus": {
            "description": "The employment status.",
            "type": "string"
          },
          "employmentTitle": {
            "description": "The employment title.",
            "type": "string"
          },
          "endEmploymentReason": {
            "description": "The code for occupation ending.",
            "type": "string"
          },
          "endPosReason": {
            "description": "The reason for job ending.",
            "type": "string"
          },
          "extensionAttributes": {
            "description": "The extension attributes.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "hoursWorkedPerWeek": {
            "description": "The number of hours worked per week.",
            "type": "number"
          },
          "jobDesc": {
            "description": "The job description.",
            "type": "string"
          },
          "jobStrenuous": {
            "description": "The job strenuous.",
            "type": "string"
          },
          "jobTitle": {
            "description": "The job title.",
            "type": "string"
          },
          "occupationId": {
            "description": "The occupation ID.",
            "format": "int64",
            "type": "integer"
          },
          "overrideDaysWorkedPerWeek": {
            "description": "Is override days worked per week true or false?",
            "type": "boolean"
          },
          "primary": {
            "description": "Is occupation the primary one?",
            "type": "boolean"
          },
          "remarks": {
            "description": "The occupation remarks.",
            "type": "string"
          },
          "selfEmployed": {
            "description": "Is occupation considered self-employed?",
            "type": "boolean"
          },
          "workPatternBasis": {
            "description": "The work pattern basis.",
            "type": "string"
          },
          "workScheduleDescription": {
            "description": "The work schedule description.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ReceivedViaResponse": {
        "description": "The method used to receive the reported actual associated to this reporting information for e.g Phone, Email, Fax, SMS, Paper, Mail Post. This maps to enum AbsenceMethodOfContact(domain id 33)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "RegionTaxCodeDetails": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/AUTaxCodeDetails"
          },
          {
            "$ref": "#/components/schemas/NZTaxCodeDetails"
          }
        ],
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ReportedByResponse": {
        "description": "The contact role that reported the actual absence period for e.g Employee, Employee Manager, Employer Representative. This maps to enum ContactRole(domain id 6842)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "RequestedEpisodicLeaveDetails": {
        "description": "The specified duration and frequency details for a period of time, typically associated with re-occurring unforeseeable absences for e.g. Requested Leave: Episodic / leave as needed (4 hours twice per day) due to Bereavement from Thursday, October 1st 2020 through Thursday, October 15th 2020.",
        "properties": {
          "duration": {
            "description": "The duration of each period of absence, for example, 3 (Hours).",
            "format": "int64",
            "type": "integer"
          },
          "durationBasis": {
            "description": "The unit of the duration of the period of absence, for example, Minutes, Hours, Days. This maps to a sub-set of the Enum TimeUnits (domain id 6757).",
            "type": "string"
          },
          "frequency": {
            "description": "How often individual periods of absence are taken, for example, 2 (times)",
            "format": "int64",
            "type": "integer"
          },
          "frequencyInterval": {
            "description": "The interval of time between the individual periods of absence, for example, 1 (Weeks).",
            "format": "int64",
            "type": "integer"
          },
          "frequencyIntervalBasis": {
            "description": "The unit of the interval between the periods of absence, for example, Minutes, Hours, Days. This maps to a sub-set of the Enum TimeUnits (domain id 6757)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ResidentialStatusRequest": {
        "description": "Indicates residential status. Sample values are 'Resident', 'Non Resident', 'Working Holiday'",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ResidentialStatusResponse": {
        "description": "Indicates residential status. Sample values are 'Resident', 'Non Resident', 'Working Holiday'",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "RestrictionsLimitations": {
        "properties": {
          "restrictionEffectiveDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "restrictions": {
            "description": "Specifies the disabilities/restrictions experienced by the injured party as a result of the claim.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ServiceAgreementLeavePlan": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "absenceReasons": {
            "description": "A list of absence reasons associated with the given leave plan.",
            "items": {
              "$ref": "#/components/schemas/AbsenceReasonEmbeddable"
            },
            "type": "array"
          },
          "alias": {
            "description": "An alias name to alternatively identify the leave plan.",
            "type": "string"
          },
          "applicability": {
            "$ref": "#/components/schemas/ApplicabilityEmbeddable"
          },
          "category": {
            "$ref": "#/components/schemas/LeavePlanCategoryDtlResponse"
          },
          "description": {
            "description": "The description of the leave plan.",
            "type": "string"
          },
          "effectiveFromDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "effectiveToDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "eligibility": {
            "$ref": "#/components/schemas/EligibilityEmbeddable"
          },
          "entitlement": {
            "description": "The entitlement time.",
            "type": "string"
          },
          "entitlementCalculation": {
            "description": "This describes how the entitlement has been calculated. It could be a number followed by a unit of measure or a descriptive text like \"Time available as accrued\" or hold some more complex description.",
            "type": "string"
          },
          "group": {
            "$ref": "#/components/schemas/LeavePlanGroupDtlResponse"
          },
          "id": {
            "description": "UUID of the leave plan on the active service agreement",
            "type": "string"
          },
          "informationLink": {
            "description": "A link to a URL containing relevant online documentation for the leave plan.",
            "type": "string"
          },
          "jobProtection": {
            "$ref": "#/components/schemas/LeavePlanJobProtectionResponse"
          },
          "longName": {
            "description": "The long name of the leave plan.",
            "type": "string"
          },
          "otherDetails": {
            "description": "This is populated by invoking the existing event related to leave plan detail, which returns a comma separated list of string.",
            "items": {
              "description": "This is populated by invoking the existing event related to leave plan detail, which returns a comma separated list of string.",
              "type": "string"
            },
            "type": "array"
          },
          "type": {
            "$ref": "#/components/schemas/LeavePlanTypeDtlResponse"
          }
        },
        "type": "object"
      },
      "ServiceAgreementLeavePlanSummaries": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "elements": {
            "items": {
              "$ref": "#/components/schemas/ServiceAgreementLeavePlanSummary"
            },
            "type": "array"
          },
          "hasMoreElements": {
            "description": "<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>",
            "type": "boolean"
          },
          "meta": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "totalSize": {
            "description": "<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ServiceAgreementLeavePlanSummary": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "alias": {
            "description": "An alias name to alternatively identify the leave plan.",
            "type": "string"
          },
          "category": {
            "$ref": "#/components/schemas/LeavePlanCategoryResponse"
          },
          "description": {
            "description": "The description of the leave plan.",
            "type": "string"
          },
          "effectiveFromDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "effectiveToDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "group": {
            "$ref": "#/components/schemas/LeavePlanGroupResponse"
          },
          "id": {
            "description": "UUID of the leave plan on the active service acreement",
            "type": "string"
          },
          "informationLink": {
            "description": "A link to a URL containing relevant online documentation for the leave plan.",
            "type": "string"
          },
          "longName": {
            "description": "The long name of the leave plan.",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/LeavePlanTypeResponse"
          }
        },
        "type": "object"
      },
      "SocialSecurityBenefitResponse": {
        "properties": {
          "authorityConsentDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "awardInformationReceivedDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "benefitAmount": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          },
          "claimStatus": {
            "description": "The status of the insureds application with the Social Security Administration.",
            "type": "string"
          },
          "disabilityBenefitsEligibleDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "earlyRetirementBenefitsEligibleDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "insuranceEndDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "reimbursementAgreementReceived": {
            "description": "Indicates that the reimbursement Agreement has been received.",
            "type": "boolean"
          },
          "reimbursementAgreementSignedDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "socialSecurityBenefitId": {
            "description": "The unique identification number(oid).",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SocialSecurityDecisionResponse": {
        "properties": {
          "applicationDate": {
            "description": "ISO 8601 date time format",
            "example": "1999-12-31T23:59:59Z",
            "format": "date-time",
            "type": "string"
          },
          "approvalType": {
            "description": "The level of decision made for the social security decision",
            "type": "string"
          },
          "decision": {
            "description": "This is the actual decision made for the social security decision",
            "type": "string"
          },
          "decisionDate": {
            "description": "ISO 8601 date time format",
            "example": "1999-12-31T23:59:59Z",
            "format": "date-time",
            "type": "string"
          },
          "socialSecurityDecisionId": {
            "description": "The unique identifier for the social security",
            "maxLength": 32,
            "minLength": 0,
            "type": "string"
          }
        },
        "required": [
          "socialSecurityDecisionId"
        ],
        "type": "object"
      },
      "SortOrderItem": {
        "properties": {
          "columnName": {
            "type": "string"
          },
          "direction": {
            "enum": [
              "ASC",
              "DESC"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "StandardHourlyRateMoneyRequest": {
        "description": "Hourly rate for standard working period. In use for Weekly and Bi-Weekly frequencies only, when TotalAmountOverrride is false.",
        "properties": {
          "amountMinorUnits": {
            "description": "The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
            "type": "string"
          }
        },
        "type": "object"
      },
      "StandardHourlyRateMoneyResponse": {
        "description": "Hourly rate for standard working period. In use for Weekly and Bi-Weekly frequencies only, when TotalAmountOverrride is false.",
        "properties": {
          "amountMinorUnits": {
            "description": "The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
            "format": "int64",
            "type": "integer"
          },
          "currency": {
            "description": "The currency used in the Money amount",
            "type": "string"
          },
          "scale": {
            "description": "The scale used in the Money amount",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "StartClaimDetails": {
        "properties": {
          "claimIncurredDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "customer": {
            "$ref": "#/components/schemas/Customer"
          },
          "customerNumber": {
            "description": "The customer number to find an existing party or customer of the claim.",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "description": {
            "description": "Description for this case as entered by the user.",
            "maxLength": 2000,
            "minLength": 0,
            "type": "string"
          },
          "notificationCaseId": {
            "description": "The notification case number of the claim case if applicable.",
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "notificationReason": {
            "description": "Notification reason selected during notification case intake.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "policies": {
            "description": "An array of the policy objects with information about policies that will be added to the claim.",
            "items": {
              "$ref": "#/components/schemas/Policy"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "StartClaimSummary": {
        "properties": {
          "caseComplexity": {
            "description": "Case complexity on Claim",
            "type": "string"
          },
          "claimHandler": {
            "description": "The Person that is handling the claim.",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "claimHandlerEmailAddress": {
            "description": "The email address of the claim handler.",
            "maxLength": 40,
            "minLength": 0,
            "type": "string"
          },
          "claimHandlerPhoneNo": {
            "description": "The phone number of the claim handler.",
            "maxLength": 20,
            "minLength": 0,
            "type": "string"
          },
          "claimId": {
            "description": "The claim number of the claim",
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "claimType": {
            "description": "The name by which the claim type is referred.",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "classExtensionInformation": {
            "description": "An array of the extensionAttribute objects which contain extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "creationDate": {
            "description": "ISO 8601 date time format",
            "example": "1999-12-31T23:59:59Z",
            "format": "date-time",
            "type": "string"
          },
          "customerName": {
            "description": "The customer name of the claim",
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "description": {
            "description": "Description for this case as entered by the user.",
            "maxLength": 2000,
            "minLength": 0,
            "type": "string"
          },
          "effectiveDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "expectedReturnToWorkDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "notificationCaseId": {
            "description": "The notification case number of the claim case if applicable.",
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "notificationDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "policyReferences": {
            "description": "The reference(s) to the policy from within the relevant admin system.",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "stageName": {
            "description": "The current stage of claim case.",
            "type": "string"
          },
          "status": {
            "description": "This is the stage in the process that the case is currently at.",
            "maxLength": 10,
            "minLength": 0,
            "type": "string"
          }
        },
        "required": [
          "claimId",
          "claimType"
        ],
        "type": "object"
      },
      "StateResponse": {
        "description": "List of US states which the leave plan applies to. A US state (EnumDomainId=138).",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "StatusResponse": {
        "description": "The status for this absence period for e.g. Pending, In Review, Denied, Approved, Certified. This maps to enum DecisionStatus(domain id 6821)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "TaEnum": {
        "properties": {
          "active": {
            "type": "boolean"
          },
          "alphaSort": {
            "type": "boolean"
          },
          "defaultFirst": {
            "type": "boolean"
          },
          "domainDescription": {
            "type": "string"
          },
          "domainId": {
            "format": "int32",
            "type": "integer"
          },
          "domainName": {
            "type": "string"
          },
          "dorder": {
            "format": "int32",
            "type": "integer"
          },
          "editable": {
            "type": "boolean"
          },
          "endDate": {
            "description": "ISO 8601 date time format",
            "example": "1999-12-31T23:59:59Z",
            "format": "date-time",
            "type": "string"
          },
          "fullId": {
            "format": "int64",
            "type": "integer"
          },
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "nameAttribute": {
            "type": "string"
          },
          "retired": {
            "type": "boolean"
          },
          "startDate": {
            "description": "ISO 8601 date time format",
            "example": "1999-12-31T23:59:59Z",
            "format": "date-time",
            "type": "string"
          },
          "subsetInfo": {
            "items": {
              "$ref": "#/components/schemas/EnumSubsetInfo"
            },
            "type": "array"
          },
          "subsets": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "typedInstances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumTaEnumType"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TaEnumAccommodationType": {
        "properties": {
          "active": {
            "type": "boolean"
          },
          "alphaSort": {
            "type": "boolean"
          },
          "defaultFirst": {
            "type": "boolean"
          },
          "domainDescription": {
            "type": "string"
          },
          "domainId": {
            "format": "int32",
            "type": "integer"
          },
          "domainName": {
            "type": "string"
          },
          "dorder": {
            "format": "int32",
            "type": "integer"
          },
          "editable": {
            "type": "boolean"
          },
          "endDate": {
            "description": "ISO 8601 date time format",
            "example": "1999-12-31T23:59:59Z",
            "format": "date-time",
            "type": "string"
          },
          "fullId": {
            "format": "int64",
            "type": "integer"
          },
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnum"
            },
            "type": "array"
          },
          "name": {
            "type": "string"
          },
          "nameAttribute": {
            "type": "string"
          },
          "retired": {
            "type": "boolean"
          },
          "startDate": {
            "description": "ISO 8601 date time format",
            "example": "1999-12-31T23:59:59Z",
            "format": "date-time",
            "type": "string"
          },
          "subsetInfo": {
            "items": {
              "$ref": "#/components/schemas/EnumSubsetInfo"
            },
            "type": "array"
          },
          "subsets": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "typedInstances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumAccommodationType"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TaEnumInstanceSwagger": {
        "description": "Full list of <b>active</b> enum instances in the enum domain. Only returned if the endpoint is invoked passing the query parameter <ul><li><code>?_include={enumPropertyName}.instances</code>, if we want to target specific enums, comma separated, for instance: <p><code>?_include=enumPropertyName1.instances,enumPropertyName2.instances</code></p><li> or <code>?_include=enum.instances</code> (all the instances in all the enum properties in the response will be returned)</ul>",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "type": "string"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "title": "EnumInstanceSwaggerResponse",
        "type": "object"
      },
      "TaEnumResponseAccommodationType": {
        "properties": {
          "includeAttributes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "taEnum": {
            "$ref": "#/components/schemas/TaEnumAccommodationType"
          }
        },
        "type": "object"
      },
      "TaEnumTaEnumType": {
        "properties": {
          "active": {
            "type": "boolean"
          },
          "alphaSort": {
            "type": "boolean"
          },
          "defaultFirst": {
            "type": "boolean"
          },
          "domainDescription": {
            "type": "string"
          },
          "domainId": {
            "format": "int32",
            "type": "integer"
          },
          "domainName": {
            "type": "string"
          },
          "dorder": {
            "format": "int32",
            "type": "integer"
          },
          "editable": {
            "type": "boolean"
          },
          "endDate": {
            "description": "ISO 8601 date time format",
            "example": "1999-12-31T23:59:59Z",
            "format": "date-time",
            "type": "string"
          },
          "fullId": {
            "format": "int64",
            "type": "integer"
          },
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "nameAttribute": {
            "type": "string"
          },
          "retired": {
            "type": "boolean"
          },
          "startDate": {
            "description": "ISO 8601 date time format",
            "example": "1999-12-31T23:59:59Z",
            "format": "date-time",
            "type": "string"
          },
          "subsetInfo": {
            "items": {
              "$ref": "#/components/schemas/EnumSubsetInfo"
            },
            "type": "array"
          },
          "subsets": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TaxCodeRecord": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "additionalWithholdAmount": {
            "$ref": "#/components/schemas/AdditionalWithholdAmountMoneyResponse"
          },
          "dependentDeductions": {
            "$ref": "#/components/schemas/DependentDeductionsMoneyResponse"
          },
          "effectiveDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "endDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "extensions": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "filingMaritalStatus": {
            "$ref": "#/components/schemas/FilingMaritalStatusResponse"
          },
          "id": {
            "description": "Tax Code Record ID (unique in the system)",
            "type": "string"
          },
          "nonStdDeductions": {
            "$ref": "#/components/schemas/NonStdDeductionsMoneyResponse"
          },
          "numberExemptions": {
            "description": "The tax exemptions e.g. number of exemptions accumulated.",
            "format": "int64",
            "type": "integer"
          },
          "otherIncome": {
            "$ref": "#/components/schemas/OtherIncomeMoneyResponse"
          },
          "percentageRate": {
            "description": "A percentage rate for tax record. The percentageRate must be of precision 10,2.",
            "type": "string"
          },
          "regionTaxCodeDetails": {
            "$ref": "#/components/schemas/RegionTaxCodeDetails"
          },
          "taxCode": {
            "$ref": "#/components/schemas/TaxCodeResponse"
          },
          "taxType": {
            "$ref": "#/components/schemas/TaxTypeResponse"
          },
          "version": {
            "$ref": "#/components/schemas/VersionResponse"
          }
        },
        "type": "object"
      },
      "TaxCodeRecordResources": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "elements": {
            "items": {
              "$ref": "#/components/schemas/TaxCodeRecord"
            },
            "type": "array"
          },
          "hasMoreElements": {
            "description": "<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>",
            "type": "boolean"
          },
          "meta": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "totalSize": {
            "description": "<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "TaxCodeRequest": {
        "description": "Specifies a code for a subcategory of tax type (EnumDomainId=2232). Sample values are 'Unknown', 'Maximum Age Limit', 'Maximum Benefit Expiry Age'",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TaxCodeResponse": {
        "description": "Specifies a code for a subcategory of tax type (EnumDomainId=2232). Sample values are 'Unknown', 'Maximum Age Limit', 'Maximum Benefit Expiry Age'",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "TaxOffsetsMoneyRequest": {
        "description": "Specifies the Tax Offsets amount.",
        "properties": {
          "amountMinorUnits": {
            "description": "The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TaxOffsetsMoneyResponse": {
        "description": "Specifies the Tax Offsets amount.",
        "properties": {
          "amountMinorUnits": {
            "description": "The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
            "format": "int64",
            "type": "integer"
          },
          "currency": {
            "description": "The currency used in the Money amount",
            "type": "string"
          },
          "scale": {
            "description": "The scale used in the Money amount",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "TaxTypeRequest": {
        "description": "Specifies the type of tax, e.g. 'Federal Income Tax', 'State Income Tax' (EnumDomainId=2321). Sample values are 'Unknown', 'TaxTypeA', 'TaxTypeB'.",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TaxTypeResponse": {
        "description": "Specifies the type of tax, e.g. 'Federal Income Tax', 'State Income Tax' (EnumDomainId=2321). Sample values are 'Unknown', 'TaxTypeA', 'TaxTypeB'.",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "TimeApprovedBasisResponse": {
        "description": "The time approved basis in this period e.g. Hours, Days' (Enum Domain = 6758). Right now, the system will always return Hours. In the future, this might change.",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "TimeZoneRequest": {
        "description": "Occupation Time Zone (<I>domainId</I> = 300)",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TimeZoneResponse": {
        "description": "Occupation Time Zone (<I>domainId</I> = 300)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "TitleRequest": {
        "description": "Person's title, Mrs, Ms etc (<I>domainId</I> = 15)",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TitleResponse": {
        "description": "Person's title, Mrs, Ms etc (<I>domainId</I> = 15)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "TypeResponse": {
        "description": "The type of actual period for e.g. Office Visit, InCapacity. This maps to enum AbsencePeriodType(domain id 6811)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "UserErrorModel": {
        "properties": {
          "error": {
            "type": "string"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "ValidationMessageModel": {
        "properties": {
          "validationMessage": {
            "type": "string"
          }
        },
        "required": [
          "validationMessage"
        ],
        "type": "object"
      },
      "VersionRequest": {
        "description": "Specifies the version for this tax record. Sample values are 'Pre 2020', '2020'",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "VersionResponse": {
        "description": "Specifies the version for this tax record. Sample values are 'Pre 2020', '2020'",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "WebMessageCaseEmbeddable": {
        "description": "Case for WebMessage",
        "properties": {
          "caseReference": {
            "description": "Business identifier for this case.",
            "type": "string"
          },
          "caseType": {
            "description": "Specific type of the case",
            "type": "string"
          },
          "id": {
            "description": "Resource Id of the case for which we want to perform action on the web messages.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "WebMessageResource": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "case": {
            "$ref": "#/components/schemas/WebMessageCaseEmbeddable"
          },
          "contactDateTime": {
            "description": "Timestmp of when the web message was created",
            "format": "date",
            "type": "string"
          },
          "customer": {
            "$ref": "#/components/schemas/CustomerEmbeddable"
          },
          "id": {
            "description": "Resource Id of Web Message",
            "type": "string"
          },
          "msgOriginatesFromPortal": {
            "description": "A flag indicating whether the message originates from the customer on the portal or not (in which case the message originating from the insurer)",
            "type": "boolean"
          },
          "narrative": {
            "description": "Narrative for WebMessage",
            "type": "string"
          },
          "readByGroupClient": {
            "description": "A flag indicating whether the message has been read or not. All msgs which orginate from Portal (i.e. messages from the customer) will be automatically marked as read when created. All messages which do not originate from the portal (from the insurer to the customer) will be marked as read once the customer has read the message",
            "type": "boolean"
          },
          "rootCase": {
            "$ref": "#/components/schemas/WebMessageCaseEmbeddable"
          },
          "subject": {
            "description": "Subject for WebMessage",
            "type": "string"
          }
        },
        "type": "object"
      },
      "WebMessages": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "elements": {
            "items": {
              "$ref": "#/components/schemas/WebMessageResource"
            },
            "type": "array"
          },
          "hasMoreElements": {
            "description": "<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>",
            "type": "boolean"
          },
          "meta": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "totalSize": {
            "description": "<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "WeekBasedWorkPatternTypeResponse": {
        "description": "Work Pattern Type e.g. Fixed, 2 Weeks Rotating (ENUM DomainId=277)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "WeeklyBasisEarningAmountsRequest": {
        "description": "Weekly Basis Earning Amounts Request Details.",
        "properties": {
          "overtimeHourlyRate": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          },
          "overtimeHours": {
            "description": "Number of overtime hours in a working week or bi-week.",
            "type": "number"
          },
          "shiftAllowance": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          },
          "shiftBasis": {
            "description": "Basis of weekly or bi-weekly shift earnings - either an additional hourly allowance or an additional amount.",
            "type": "string"
          },
          "shiftHours": {
            "description": "Number of shift hours in a working week or bi-week.",
            "type": "number"
          },
          "standardHourRate": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          },
          "standardHours": {
            "description": "The number of hours in a standard working week or bi-week.",
            "type": "number"
          },
          "statutoryBasis": {
            "description": "Additional weekly or bi-weekly vacation or statutory entitlements type. It may be an amount or percentage of regular hour.",
            "type": "string"
          },
          "statutoryValue": {
            "description": "Additional weekly or bi-weekly vacation or statutory entitlement amount or percentage of regular hours.",
            "type": "number"
          },
          "totalAmountOverridden": {
            "description": "This attribute indicates if the total weekly or bi-weekly amount has been manually overridden.",
            "type": "boolean"
          },
          "totalEarnings": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          }
        },
        "required": [
          "totalAmountOverridden"
        ],
        "type": "object"
      },
      "WeeklyBasisEarningAmountsResponse": {
        "description": "Weekly Basis Earning Amounts Response Details.",
        "properties": {
          "overtimeEarnings": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          },
          "overtimeHourlyRate": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          },
          "overtimeHours": {
            "description": "Number of overtime hours in a working week or bi-week.",
            "type": "number"
          },
          "shiftAllowance": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          },
          "shiftBasis": {
            "description": "Basis of weekly or bi-weekly shift earnings - either an additional hourly allowance or an additional amount.",
            "type": "string"
          },
          "shiftEarnings": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          },
          "shiftHours": {
            "description": "Number of shift hours in a working week or bi-week.",
            "type": "number"
          },
          "standardEarnings": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          },
          "standardHourRate": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          },
          "standardHours": {
            "description": "The number of hours in a standard working week or bi-week.",
            "type": "number"
          },
          "statutoryBasis": {
            "description": "Additional weekly or bi-weekly vacation or statutory entitlements type. It may be an amount or percentage of regular hour.",
            "type": "string"
          },
          "statutoryEarnings": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          },
          "statutoryValue": {
            "description": "Additional weekly or bi-weekly vacation or statutory entitlement amount or percentage of regular hours.",
            "type": "number"
          },
          "totalAmountOverridden": {
            "description": "This attribute indicates if the total weekly or bi-weekly amount has been manually overridden.",
            "type": "boolean"
          },
          "totalEarnings": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          }
        },
        "required": [
          "totalAmountOverridden"
        ],
        "type": "object"
      },
      "WeeklyEarningsRequest": {
        "properties": {
          "classExtensionInformation": {
            "description": "An array of the extensionAttribute objects which contain Earnings extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "earningsBasis": {
            "description": "The earnings frequency.",
            "type": "string"
          },
          "effectiveDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "endDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "notes": {
            "description": "Notes relating to the earnings period.",
            "maxLength": 200,
            "minLength": 0,
            "type": "string"
          },
          "salaryAmountBasis": {
            "description": "Basis for salary amount being used.",
            "type": "string"
          },
          "weeklyBasisEarningAmountsRequest": {
            "$ref": "#/components/schemas/WeeklyBasisEarningAmountsRequest"
          }
        },
        "required": [
          "earningsBasis"
        ],
        "type": "object"
      },
      "WithholdingTaxStatusRequest": {
        "description": "For payments to caregivers, that are not subject to PAYE, does withholding tax apply.",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "WithholdingTaxStatusResponse": {
        "description": "For payments to caregivers, that are not subject to PAYE, does withholding tax apply.",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "WorkPatternDayOfWeekResponse": {
        "description": "Day of the week (ENUM DomainId=169)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "WorkPatternDayResponse": {
        "description": "List of days which make up the pattern. There can be 7, 14, 21 or 28 of these.",
        "properties": {
          "dayOfWeek": {
            "$ref": "#/components/schemas/WorkPatternDayOfWeekResponse"
          },
          "hours": {
            "description": "The number of whole working hours on this day in the work pattern (0-24)",
            "format": "int32",
            "type": "integer"
          },
          "minutes": {
            "description": "The number of minutes on this day in the work pattern (0-59)",
            "format": "int32",
            "type": "integer"
          },
          "weekNumber": {
            "description": "The number of the week in the pattern within which this day occurs (1, 2, 3 or 4)",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "WorkPatternTypeRequest": {
        "description": "Work Pattern Type e.g. Fixed, 2 Weeks Rotating (ENUM DomainId=277)",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "WorkWeekStartsRequest": {
        "description": "The day of the week on which the work week starts (ENUM DomainId=169)",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "WorkWeekStartsResponse": {
        "description": "The day of the week on which the work week starts (ENUM DomainId=169)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "WriteDivisionClassLinkCommand": {
        "description": "The list of class and division ids that are linked to the claimant member details for the group policy (sorted by division name and class name).",
        "properties": {
          "classId": {
            "description": "The ID of the selected Class",
            "type": "string"
          },
          "divisionId": {
            "description": "The ID of the selected Division",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "info": {
    "license": {
      "name": "FINEOS License"
    },
    "title": "FINEOS Group Client API",
    "version": "21.3"
  },
  "openapi": "3.0.1",
  "paths": {
    "/contact-centre/claims/{claimId}/medical-details/pregnancy-details": {
      "get": {
        "description": "Returns Pregnancy Details on a claim for a group client user.Pregnancy Details consist of pregnancy specific dates, indicator of complications and delivery type as described in PregnancyDetails. Pregnancy Details are composed of attributes of the FINEOS Medical Details entity, which is related to all FINEOS Claims entities with a one to one mapping. Pregnancy Details represents the current view of the pregnancy aspects of the Claim. <p>The permission key for this endpoint is URL_GET_GROUPCLIENT_CLAIMS_MEDICALDETAILS_PREGNANCYDETAILS</p>",
        "operationId": "getSingle_21",
        "parameters": [
          {
            "description": "The user who is making the request",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Claim Medical Details identifier",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PregnancyDetails"
                }
              }
            },
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Returns Pregnancy Details on a claim for a group client user",
        "tags": [
          "Pregnancy Details"
        ]
      }
    },
    "/contact-centre/claims/{claimId}/medical-details/pregnancy-details/edit": {
      "post": {
        "description": "Updates the Pregnancy Details associated with the Claim for a group client user. Pregnancy Details consist of pregnancy specific dates, indicator of complications and delivery type as described in <code>PregnancyDetails</code>. Pregnancy Details are composed of attributes of the FINEOS Medical Details entity, which is related to all FINEOS Claims entities with a one to one mapping. Pregnancy Details represents the current view of the pregnancy aspects of the Claim. ",
        "operationId": "edit_11",
        "parameters": [
          {
            "description": "The user who is making the request",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Claim Medical Details identifier",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The client sends the previously returned ETag value in the If-Match header to indicate the version of the Resource it wishes to update<P>If this is not the most up to date version, the server will return a 412 error.",
            "in": "header",
            "name": "If-Match",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditPregnancyDetailsCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PregnancyDetails"
                }
              }
            },
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Precondition Failed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Updates the Pregnancy Details associated with the Claim for a group client user.",
        "tags": [
          "Pregnancy Details"
        ]
      }
    },
    "/enum-domains": {
      "get": {
        "description": "An Enum Domain is a collection of Enum Instance.  For example, an Enum Domain could be <I>Title</I> and the instances be: <I>Mr., Mrs., Dr.</I><P>This API provides the ability to search and sort for various Enum Domains. All parameters are case senstive and no wildcards are accepted.<br><br> The name query parameters can be specified more than once. For example: `/enum-domains?name=Title&name=StudySkills` will return the Enum Domain with name 'Title' and the Enum Domain with name 'StudySkills'<br><br>If the query endpoint has no matches, an empty list is returned<br><br>If the request specifies query parameters different from the parameters allowed, the service will return a <b>400 error</b> code</P>",
        "operationId": "query_18",
        "parameters": [
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the enum domain. More than one can be specified",
            "in": "query",
            "name": "name",
            "required": true,
            "schema": {
              "items": {
                "type": "string"
              },
              "maxItems": 2147483647,
              "minItems": 1,
              "type": "array"
            }
          },
          {
            "description": "Comma separated list of sort parameters. Ascending by default, for descending preappend with <B>-</B>",
            "examples": {
              "Sort by name ascending": {
                "description": "Sort by name ascending",
                "summary": "Sorts by name ascending",
                "value": "name"
              },
              "Sort by name decending": {
                "description": "Sort by name decending",
                "summary": "Sorts by name decending",
                "value": "-name"
              }
            },
            "in": "query",
            "name": "sort",
            "schema": {
              "$ref": "#/components/schemas/QuerySortInfo"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnumDomains"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Get Enum Domains. Sort available and query available.",
        "tags": [
          "Enum Domain"
        ]
      }
    },
    "/enum-domains/{enumDomainId}": {
      "get": {
        "description": "An Enum Domain is grouping of Enum instances. For example <I>Title</I> which groups Mr., Mrs, Dr.<P>Gets specific Enum Domain as specified by the <CODE>enumDomainId</CODE></P>",
        "operationId": "getSingle_26",
        "parameters": [
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "enumDomainId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnumDomain"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Get specific Enum Domain",
        "tags": [
          "Enum Domain"
        ]
      }
    },
    "/enum-domains/{enumDomainId}/enum-instances": {
      "get": {
        "operationId": "query_19",
        "parameters": [
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "enumDomainId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Comma separated list of sort parameters. Ascending by default, for descending preappend with <B>-</B>",
            "examples": {
              "Sort by dOrder ascending, then dOrder ascending": {
                "description": "Sort by dOrder ascending, then dOrder ascending",
                "summary": "Sorts by dOrder ascending, then dOrder ascending",
                "value": "dOrder,name"
              },
              "Sort by dOrder descending, then name ascending": {
                "description": "Sort by dOrder descending, then name ascending",
                "summary": "Sorts by dOrder descending, then name ascending",
                "value": "-dOrder,name"
              },
              "Sort by name ascending": {
                "description": "Sort by name ascending",
                "summary": "Sorts by name ascending",
                "value": "name"
              },
              "Sort by name decending": {
                "description": "Sort by name decending",
                "summary": "Sorts by name decending",
                "value": "-name"
              }
            },
            "in": "query",
            "name": "sort",
            "schema": {
              "$ref": "#/components/schemas/QuerySortInfo"
            }
          },
          {
            "description": "Enum instance name",
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Enum instance fullId, corresponds to <code>TaEnum.fullId</code>",
            "in": "query",
            "name": "fullId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "If <code>true</code> retired Instances only are returned,if <code>false</code>(or not specified) non-retired instances only are returned",
            "in": "query",
            "name": "retired",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Date at which the Enum was activated",
            "in": "query",
            "name": "startDate",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Date at which the Enum will become inactive (since that date, enum should be considered inactive)",
            "in": "query",
            "name": "endDate",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Denotes the order the Enum resides within all Enum Instances within Domain",
            "in": "query",
            "name": "dOrder",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The name of the subset to which the Enum Instance belongs",
            "in": "query",
            "name": "subsets.name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnumInstances"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Get Enum Instance that belong to a particular Enum Domain. Sort and equality search available",
        "tags": [
          "Enum Instance"
        ]
      }
    },
    "/enum-domains/{enumDomainId}/enum-instances/{enumInstanceId}": {
      "get": {
        "description": "An Enum Instance represents a specific value in an Enum Domain e.g. Mr. Mrs.\n<P>Gets a specific Enum Instance as specified by <code>enumInstanceId</code> in a specific Enum Domain as specified by <code>enumDomainId</code></P>",
        "operationId": "getSingle_27",
        "parameters": [
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "enumDomainId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "enumInstanceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnumInstance"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Get specified Enum Instance in a specified Enum Domain",
        "tags": [
          "Enum Instance"
        ]
      }
    },
    "/enum-instances/{enumInstanceId}": {
      "get": {
        "description": "An Enum Instance is an specific Enum value within an Enum Domain.  For example, an Enum Domain could be <I>Title</I> and the instances be: <I>Mr., Mrs., Dr.</I><P>Gets a specific Enum Instance as specified by <code>enumInstanceId</code>",
        "operationId": "getSingleEnumInstance",
        "parameters": [
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "enumInstanceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnumInstance"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Gets Enum Instance as specified by enumInstanceId",
        "tags": [
          "Enum Instance"
        ]
      }
    },
    "/groupClient/absence/absences/{absenceId}/actual-absence-periods": {
      "get": {
        "description": "Actual time details the time reported by an employee relating to the employee's definitive period of absence where that absence period was initially specified as estimated or episodic.  Employer can view the list of actual time recorded on a specific absence or absence takeover case.<br>The record are displayed ascending order of actual reported date. The sorting can be changed as per status, actual date.<br>The records can be filter based on status and actual date.<p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_ACTUAL_TIME_RECORDED</p>",
        "operationId": "query_1",
        "parameters": [
          {
            "description": "The id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique absence or absence takeover case reference number",
            "in": "path",
            "name": "absenceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter the data based on the status of the actual record.",
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter the data based on the actual recorded date of the request. All the record actual date must be greater than or equal to given date.",
            "in": "query",
            "name": "_actualFromDate",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter the data based on the actual recorded date of the request. All the record actual date must be less than or equal to given date.",
            "in": "query",
            "name": "_actualToDate",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter the data based the manager acceptance status.",
            "in": "query",
            "name": "managerAccepted",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Comma separated list of sort parameters. Ascending by default, for descending prepended with <B>-</B>. Allowed sorting values are status and actualDate. For example ?sort=status.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualAbsencePeriodResources"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Employer can view the list of actual time recorded on a specific case.",
        "tags": [
          "Episodic Actual Absence Periods"
        ]
      }
    },
    "/groupClient/absence/absences/{absenceId}/actual-absence-periods/bulk-create": {
      "post": {
        "description": "Actual time details the time reported by an employee relating to the employee's definitive period of absence where that absence period was initially specified as estimated or episodic. Recording actual time taken as a period of absence provides an accurate record of the actual leave time that an employee has taken in an absence or absence takeover case. Employer can record actual time on a pending, approved, or declined leave request in an absence or absence takeover case and when the absence or absence takeover case is in the Adjudication, Manage Time, or Completion phase.The application automatically approves actual time if the following conditions are true:<UL><li>The leave request is approved.</li><li>The actual reported time falls within the leave request absence period start and end dates.</li><li>The actual reported time falls within the certified period start and end date where a certification is required.</li><li>For absence periods, the frequency and duration of the actual reported time matches the frequency and duration of the certification and the number of certified episodes has not been exceeded.</li><li>The actual reported time is less than or equal to today's date (cannot be a date in the future).</li><li>The actual reported dates are not denied dates on any leave plan.</li><li>The actual time is reported by an authorized party and through an authorized channel (as defined in the service agreement).</li><li>The actual reported time requires manager approval and is provided (as defined in the service agreement).</li><li>The actual reported time falls within the reporting policy procedure time frame (if defined in the service agreement).</li><li>The certification for leave specifies frequency and duration details.</li></UL><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_ACTUAL_TIME_RECORDED_ADD</p>",
        "operationId": "bulkCreate",
        "parameters": [
          {
            "description": "The id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique absence or absence takeover case reference number",
            "in": "path",
            "name": "absenceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkCreateActualAbsencePeriodCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualAbsencePeriodResources"
                }
              }
            },
            "description": "Created"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Employer can record the actual time taken on the episodic leave request.",
        "tags": [
          "Episodic Actual Absence Periods"
        ]
      }
    },
    "/groupClient/absence/absences/{absenceId}/actual-absence-periods/{actualAbsencePeriodId}": {
      "get": {
        "description": "Actual time details the time reported by an employee relating to the employee's definitive period of absence where that absence period was initially specified as estimated or episodic. The employee view of the detail of a specific actual time recorded.<p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_ACTUAL_TIME_RECORDED_GETSINGLE</p>",
        "operationId": "getSingle_2",
        "parameters": [
          {
            "description": "The id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique absence or absence takeover case reference number",
            "in": "path",
            "name": "absenceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique id of the actual time record.",
            "in": "path",
            "name": "actualAbsencePeriodId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualAbsencePeriodResource"
                }
              }
            },
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Employer can view the detail of the actual time taken on the episodic leave request.",
        "tags": [
          "Episodic Actual Absence Periods"
        ]
      }
    },
    "/groupClient/absence/accommodation-cases/{accommodationCaseId}": {
      "get": {
        "description": "Reasonable accommodation is where a change is required in the work environment or to the way work duties are usually done that enables an individual with a disability or limitation to appropriately carry out their job duties. This is aligned with the Americans with Disabilities Act that prohibits discrimination in employment on the basis of disability and requires employers to provide reasonable accommodations to applicants and employees (unless this creates undue hardship for the employer).<br>This API returns the details of a specific accommodation case as per the accommodation case id provided in the URL.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_ACCOMMODATION_CASE_GETSINGLE</p>",
        "operationId": "getSingle_1",
        "parameters": [
          {
            "description": "The id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Accommodation case id.",
            "in": "path",
            "name": "accommodationCaseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccommodationCaseResource"
                }
              }
            },
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "This endpoint will return the detail of the specific accommodation case.",
        "tags": [
          "Accommodation Case"
        ]
      }
    },
    "/groupClient/absence/employees-approved-leaves": {
      "get": {
        "description": "<p> An employee is a person who is hired to work for another person or business (the employer) for compensation and is subject to the employer direction as to the details of how to perform the job. This person can request some time off which can be approved or denied based on a certain criteria.</p>This endpoint will: <p><ul><li>Return list of employees who has been approved for leave within a time frame </li> </ul> </p> <p> Example of this API being used in a business scenarios <ul><li>Scenario 1<br><code>/absence/employees-approved-leaves?startDate=2020-01-01&endDate=2020-01-31</code><br>Returns employees who has been approved to leave in the specific period.<br> Note:The insurer may want to use this when there is a large number of employees who are not currently working at the officebut they are approved not to be working.</li> </ul> </p>The permission key for this endpoint is: <b>URL_GET_GROUPCLIENT_ABSENCE_EMPLOYEESAPPROVEDLEAVES </b> <Section> <H3>Technical Note</H3> <H4>Application Categories</H4> <UL> <LI><Code>FineosAPI.DatesManagement.EmployeesApprovedMaxDateRange:</CODE> Maximum date range to filter the data of the Employees on approved leave endpoint. Will enforce a response limit to restrict the amount of information to be returned.</LI> </UL> </Section>",
        "operationId": "rpcGet",
        "parameters": [
          {
            "description": "The id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "start date",
            "in": "query",
            "name": "startDate",
            "required": true,
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "end date",
            "in": "query",
            "name": "endDate",
            "required": true,
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeesOnApprovedLeaveRpcResponse"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Retrieves a list of employees who has been approved to leave within a time range",
        "tags": [
          "Group Client Absence"
        ]
      }
    },
    "/groupClient/absence/events": {
      "get": {
        "description": "<p>An event represents a business decision/event or action taken on the absence case. Absence case business event is triggered when the business decision is taken on the absence case. The business decision like Employee request leave, Approved, Withdrawn, Declined, etc.</p><p>This API will return a summary of the events occurred on the absence case with in the given date range. Standalone (without parent case) absences are filtered out by the query and are not part of the response. It allows filter the data based on the multiple query parameters which can be used together or separately as described below.<UL><LI><B>eventDate._ge (Mandatory)</B> - Used to look for event where the event date is equal or greater than the given date.</LI><LI><B>eventDate._le (Mandatory)</B> - Used to look for event where the event date is equal or lesser than the given date.</LI><LI><B>eventName (Optional)</B> - Used to look for only the specified event. To filter the data based on more than one event, pass the event and value pair multiple times.<br>For example to filter the event based on Pending or Approved, provide the following query parameter <B>?eventName=Pending&eventName=Approved </B> </LI> </UL><H3>Technical Note</H3> <H4>Application Categories</H4><UL> <LI><Code>AbsenceEvent.MaximumDateRange:</CODE> the maximum event date range allowed to filter events detail.</LI> </UL>The permission key for this endpoint is: <B>URL_GET_GROUPCLIENT_ABSENCE_CASE_EVENT</B>",
        "operationId": "query",
        "parameters": [
          {
            "description": "The id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter the data where the event date is greater or equal to the given date.",
            "example": "2021-01-14",
            "in": "query",
            "name": "eventDate._ge",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter the data where the event date is less than or equal to the given date.",
            "example": "2021-01-14",
            "in": "query",
            "name": "eventDate._le",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "allowEmptyValue": true,
            "description": "Filter the data based on the event name.",
            "example": "Pending",
            "in": "query",
            "name": "eventName",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AbsenceCaseEventResources"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Get the list of all the absence case business events.",
        "tags": [
          "Absence Event"
        ]
      }
    },
    "/groupClient/absence/events/{eventId}": {
      "get": {
        "description": "<p>An event represents a business decision/event or action taken on the absence case. Absence case business event is triggered when the business decision is taken on the absence case. The business decision like Employee request leave, Approved, Withdrawn, Declined, etc.</p><p>Get the details of a specific absence case business event. Standalone (without parent case) absences are filtered out by the query and are not part of the response.</p> <H3>Technical Note</H3> The permission key for this endpoint is: <B>URL_GET_GROUPCLIENT_ABSENCE_CASE_EVENT_GETSINGLE</B>",
        "operationId": "getSingle",
        "parameters": [
          {
            "description": "The id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The unique identifier for the Absence Case Event.",
            "in": "path",
            "name": "eventId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AbsenceCaseEventResource"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Get the details of a specific absence case business event.",
        "tags": [
          "Absence Event"
        ]
      }
    },
    "/groupClient/absence/service-agreement/leave-plan-summaries": {
      "get": {
        "description": "In absence management, a leave plan defines the available absence allowed to an employee and the conditions an employee must meet to be entitled to take leave. <br>A service agreement represents an agreement between an insurer and an employer organization to provide services to the employer. <br>Leave plans form part of that service agreement as they define the types of absences the insurer manages for an employer.<br>This endpoint will return a summary view of all leave plans linked to the active service agreement.<p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_LEAVEPLANS</p>",
        "operationId": "query_2",
        "parameters": [
          {
            "description": "The id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceAgreementLeavePlanSummaries"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "This endpoint will return a summary view of all leave plans linked to the active service agreement.",
        "tags": [
          "Leave Plan"
        ]
      }
    },
    "/groupClient/absence/service-agreement/leave-plan-summaries/{leavePlanSummaryId}": {
      "get": {
        "description": "In absence management, a leave plan defines the available absence allowed to an employee and the conditions an employee must meet to be entitled to take leave. <br>A service agreement represents an agreement between an insurer and an employer organization to provide services to the employer. <br>Leave plans form part of that service agreement as they define the types of absences the insurer manages for an employer.<br>This endpoint will return a summary view of a leave plan linked to the active service agreement.<p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_LEAVEPLANS</p>",
        "operationId": "getSingle_5",
        "parameters": [
          {
            "description": "The id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "UUID of the leave plan on the active service acreement",
            "in": "path",
            "name": "leavePlanSummaryId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceAgreementLeavePlanSummary"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "This endpoint will return a summary view of a leave plan linked to the active service agreement.",
        "tags": [
          "Leave Plan"
        ]
      }
    },
    "/groupClient/absence/service-agreement/leave-plans/{leavePlanId}": {
      "get": {
        "description": "In absence management, a leave plan defines the available absence allowed to an employee and the conditions an employee must meet to be entitled to take leave. <br>A service agreement represents an agreement between an insurer and an employer organization to provide services to the employer. <br>Leave plans form part of that service agreement as they define the types of absences the insurer manages for an employer.<br>This endpoint will return a detail view of a leave plan linked to the active service agreement.<p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_LEAVEPLANS</p>",
        "operationId": "getSingle_4",
        "parameters": [
          {
            "description": "The id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "UUID of the leave plan on the active service agreement",
            "in": "path",
            "name": "leavePlanId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceAgreementLeavePlan"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "This endpoint will return a detail view of a leave plan linked to the active service agreement.",
        "tags": [
          "Leave Plan"
        ]
      }
    },
    "/groupClient/absences/absence-cases/{absenceCaseId}/leave-periods-change-request": {
      "post": {
        "description": "Requests a call to action for the carrier to make a change in the leave periods of an absence case.<p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_ABSENCE_LEAVEPERIODSCHANGEREQUEST_ADD</p>",
        "operationId": "changeLeavePeriodRequest",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Resource Id of Absence Case requested.",
            "in": "path",
            "name": "absenceCaseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelLeavePeriodsDetails"
              }
            }
          },
          "description": "List of leave period changes requested.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CancelLeavePeriodsDetails"
                }
              }
            },
            "description": "Returns when leave period is successfully changed "
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            },
            "description": "Cannot recognize the delegated user id"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            },
            "description": "User does not have permission to access the resource or the instance data"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationMessageModel"
                }
              }
            },
            "description": "Request could not be processed by the application for some application specific reason e.g. validation error"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "summary": "Requests a call to action for the carrier to make a change in the leave periods of an absence case.",
        "tags": [
          "Leave Periods Change Request"
        ]
      }
    },
    "/groupClient/absences/absence-period-decisions": {
      "get": {
        "description": "This API returns a list of decisions taken in relation to leave periods requested by one or more employees; the period can be requested within an absence case or an absence takeover case.<br><br>A decision is represented by a set of status which includes leave plan applicability, elegibility and availablity status, evidence document status, requested period approval or denial.<br><br>If different decisions have been taken for different days in the same period, e.g some days have been approved and some denied, the requested period is broken down to sub-periods composed by consecutive days holding the same decision. These sub-periods can be easily identified because they hold the same period reference number.<br><br>Additionally, each decision holds general information about the selected leave plan, the leave request, a reference to the absense case id and the employee id, for any period in the list.<br><br>Decision on reported actuals and blackout periods are also returned by the API.<p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_ABSENCE_ABSENCEPERIODDECISIONS </p>",
        "operationId": "getAbsencePeriodDecisions",
        "parameters": [
          {
            "description": "Id of the user accessing the resource.",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "description": "Id of the user accessing the resource.",
              "type": "string"
            }
          },
          {
            "description": "The absence or absence takeover case number. If no case number is given, the API will return all requested periods for all available absences.<br><br>Either absenceId or employeeId must be provided.",
            "in": "query",
            "name": "absenceId",
            "schema": {
              "description": "The Absence or Absence Takeover Case Number for which we want to retrieve the Period Decisions.",
              "type": "string"
            }
          },
          {
            "description": "The employee reference number. If no reference number is given, the API will return period requested by all employees.Either absenceId or employeeId must be provided.",
            "in": "query",
            "name": "customerId",
            "schema": {
              "default": "",
              "description": "The Customer Id of Employee for whom we want to retrieve the Period Decisions",
              "type": "string"
            }
          },
          {
            "description": "The search period start date. If a start date is given, only periods ending after this date will be returned.",
            "in": "query",
            "name": "startDate",
            "schema": {
              "description": "The Start Date from which we want to retrieve the Period Decisions",
              "type": "string"
            }
          },
          {
            "description": "The search period end date. If an end date is given, only periods starting before this date will be returned.",
            "in": "query",
            "name": "endDate",
            "schema": {
              "description": "The End Date to which we want to retrieve the Period Decisions",
              "type": "string"
            }
          },
          {
            "description": "The includeTrackerPlans controls whether, for each absence period decision returned, tracker plans should also be included in the list of leave plans that have been selected for the corresponding absence period. By default, includeTrackerPlans is true and tracker plans are included in the above list; if includeTrackerPlans is set to false, tracker plans are not included.",
            "in": "query",
            "name": "includeTrackerPlans",
            "schema": {
              "default": true,
              "description": "Controls whether tracker plans should be included.",
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PeriodDecisions"
                }
              }
            },
            "description": "List of Absence Period Decisions"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            },
            "description": "Cannot recognize the delegated user id"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            },
            "description": "User does not have permission to access the resource or the instance data"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            },
            "description": "Request could not be processed by the application for some application specific reason e.g. validation error"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "summary": "Retrieves decisions related to requested leave periods.",
        "tags": [
          "Group Client Absence"
        ]
      }
    },
    "/groupClient/absences/accommodation-cases/{accommodationCaseId}": {
      "get": {
        "deprecated": true,
        "description": "Retrieves accommodation case information.<p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_ABSENCE_ACCOMMODATIONCASES_GETSINGLE</p>",
        "operationId": "readAccommodationCase",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Resource Id of Accommodation Case requested.",
            "in": "path",
            "name": "accommodationCaseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupClientAccommodationCase"
                }
              }
            },
            "description": "Returns accommodation case information."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            },
            "description": "Cannot recognize the delegated user id"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            },
            "description": "User does not have permission to access the resource or the instance data"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "summary": "Retrieves accommodation case information.",
        "tags": [
          "Group Client Absence"
        ]
      }
    },
    "/groupClient/absences/{customerId}/leave-plans/{leavePlanId}/leave-availability": {
      "get": {
        "description": "Get the available leave balance details of the employee as on given date.The leave balance will be approximate balance avilable with the employee as per the leave plan entitlement.The start and end date of the leave calculation period is calcualted based on the leave plan calculation period.The calculation period may be any of the following type.<UL><li><B>Rolling Back :</B> A Rolling Back period is a fixed-length period measured backwards from the date that an employee has requested leave under a leave plan.In this example,The leave request starts on 13-Oct-2018. As the Time Within Period is 12 months,the calculation period is from 14-Oct-2017 to 13-Oct-2018.</li><li><B>Rolling Forward :</B> A Rolling Forward period is a fixed-length period measured forward from the first approved date of absence taken by an employee under a leave plan.The next rolling forward period begins on the next approved date of absence taken by the same employee under the same leave plan following completion of the previous rolling forward period.In this example, the first leave request was on 11-Jan-2017. As the Time Within Period is 12 months,the calculation period runs until 10-Jan-2018.</li><li><B>Fixed Year :</B> With a Fixed Year calculation period, the entitlement period starts on a specified date and counts from this date each year.For example,If an employee requests leave on 24-May-2018 and the Starting From date is 13-Nov-2017,the entitlement period runs from 13-Nov-2017 to 12-Nov-2018.</li><li><B>Calendar Year :</B> This generally runs from Jan 01 to Dec 31 in each year. This is the case when it's a 12-month time within period.It's also possible to have a 24-month time within period and a calendar year calculation period.For example,If an employee requests leave on 20-June-2018,The entitlement period the application considers is from 01-Jan 2018 to 31-Dec-2018.</li></UL><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_ABSENCE_LEAVEPLANS_LEAVEAVAILABILITY</p>",
        "operationId": "getLeaveAvailability",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "leavePlanId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "calculationDate",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/EmployeeLeaveBalance"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Get the available leave balance details of the employee as on given date."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            },
            "description": "Cannot recognize the delegated user id"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            },
            "description": "User does not have permission to access the resource or the instance data"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "summary": "Get the available leave balance details of the employee as on given date.",
        "tags": [
          "Leave Plan"
        ]
      }
    },
    "/groupClient/cases/{caseId}/addEForm/{eformType}": {
      "post": {
        "description": "Adds a new EForm document to a Case, returning the newly created data.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CASES_EFORM_ADD</p>",
        "operationId": "addEForm",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Case number",
            "in": "path",
            "name": "caseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the Simple Eform Type or Eform Type to create",
            "in": "path",
            "name": "eformType",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/EFormAttribute"
                },
                "type": "array"
              }
            }
          },
          "description": "List of eFormAttributes of the EForm document which will be created",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EForm"
                }
              }
            },
            "description": "Added EForm successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Adds an EForm",
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/cases/{caseId}/caseStatusHistory": {
      "get": {
        "description": "Returns list of the case statuses of a particular case for a group client user.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CASES_CASESTATUSHISTORY</p>",
        "operationId": "getCaseStatusHistory",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "case number",
            "in": "path",
            "name": "caseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/CaseStatusHistory"
                  },
                  "type": "array"
                }
              }
            },
            "description": "A list of the case statuses of a particular case for a group client user"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/cases/{caseId}/contacts": {
      "get": {
        "description": "Retrieve a list of contacts linked to a case.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CASES_CONTACTS</p>",
        "operationId": "getCaseContacts",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "case number",
            "in": "path",
            "name": "caseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/CaseContactSummary"
                  },
                  "type": "array"
                }
              }
            },
            "description": "List of contacts linked to a case"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/cases/{caseId}/contacts/{contactId}/documents": {
      "get": {
        "description": "Retrieve a list of documents for a contact linked to a case.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CASES_CONTACTDOCUMENTS</p>",
        "operationId": "getCaseContactDocuments",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "case number",
            "in": "path",
            "name": "caseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "case contact ID",
            "in": "path",
            "name": "contactId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/GroupClientDocument"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Documents of a contact linked to a case"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/cases/{caseId}/documents": {
      "get": {
        "description": "Returns the list of documents that for a case. Where _filter=includeChildCases, will also return documents that are linked to child cases of the provided CaseID All cases, and child cases must be accessible by the group client point of contact i.e. cases where the group client has a configured party case role on the case. The following event is used to determine the applicable roles for group client - Viewpoint.groupClient.getAllowedCaseTypeRoleNamesForGroupClientEvent Documents that are linked directly to the case, or to a contact on the case will be returned. Documents returned may be further filtered based on the following event - Viewpoint.groupClient.includeInListOfDocumentsForGroupClientEvent. By default, no filtering will apply. However, a rule could be configured if there was a need for instance to exclude documents of a specific document type from the list returned to the group client.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CASES_DOCUMENTS</p>",
        "operationId": "getDocuments",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of the case. Only documents associated with this case or this case contacts are returned.",
            "in": "path",
            "name": "caseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Will be used when there is a need to apply a filter to the documents returned. Valid business criteria are as follows.<p><ul><li><b>?_filter=includeChildCases</b> Apply this filter when the requirement is see all documents for a case and all of it's child cases. When no filter is provided, only documents for the case in the url will be returned.</ul></li>",
            "in": "query",
            "name": "_filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/GroupClientDocument"
                  },
                  "type": "array"
                }
              }
            },
            "description": "A list of documents linked to the case"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Returns a list of documents for the case and it's child cases (child cases only considered where filter indicates that child cases should be considered)",
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/cases/{caseId}/documents/base64Upload/{documentType}": {
      "post": {
        "description": "Upload documents to the FINEOS system using a JSON payload with Base64 encoding for the file content and file details.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CASES_DOCUMENT_BASE64UPLOAD</p>",
        "operationId": "uploadBase64EncodedFile",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The case number of the case for which we upload the document.",
            "in": "path",
            "name": "caseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of external document type we wish to upload.",
            "in": "path",
            "name": "documentType",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Base64EncodedFileData"
              }
            }
          },
          "description": "Basic information needed for Uploading a document",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Document will be successfully uploaded and Document Object will be returned as a JSON."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Upload documents to the FINEOS system using a JSON payload with Base64 encoding for the file content and file details.",
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/cases/{caseId}/documents/upload/{documentType}": {
      "post": {
        "description": "This API will enable the group client to upload documentation to the FINEOS system.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CASES_DOCUMENT_UPLOAD</p>",
        "operationId": "uploadFile",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The case number of the case for which we upload the document.",
            "in": "path",
            "name": "caseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of external document type we wish to upload.",
            "in": "path",
            "name": "documentType",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "documentContents": {
                    "description": "Uploaded file",
                    "format": "binary",
                    "type": "string"
                  },
                  "documentDescription": {
                    "type": "string"
                  },
                  "managedRequirementId": {
                    "format": "int64",
                    "type": "integer"
                  }
                },
                "required": [
                  "documentContents"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/GroupClientDocument"
                  },
                  "type": "array"
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Uploads a document to configured DMS",
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/cases/{caseId}/documents/{documentId}/base64Download": {
      "get": {
        "description": "Returns the document to download, base64 encoded, in a JSON object.<p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CASES_DOCUMENTS_BASE64DOWNLOAD </p>",
        "operationId": "getDocumentContentsAsBase64EncodedString",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of the claim case.",
            "in": "path",
            "name": "caseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of the document to download. Only document associated with the claim is allowed to download.",
            "in": "path",
            "name": "documentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Base64EncodedFileDetails"
                }
              }
            },
            "description": "The document downloaded successfully."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/cases/{caseId}/documents/{documentId}/download": {
      "get": {
        "description": "Returns the document to download.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CASES_DOCUMENTDOWNLOAD</p>",
        "operationId": "getDocumentContentsAsStream",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of the claim case.",
            "in": "path",
            "name": "caseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of the document to download. Only document associated with the claim is allowed to download.",
            "in": "path",
            "name": "documentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The document downloaded successfully."
          },
          "400": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/cases/{caseId}/documents/{documentId}/markread": {
      "post": {
        "description": "Mark a document as read by user within the FINEOS system.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CASES_DOCUMENT_MARKREAD</p>",
        "operationId": "markDocumentAsRead",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The case number for the case to which the document is associated",
            "in": "path",
            "name": "caseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The I value of the document we wish to mark as read",
            "in": "path",
            "name": "documentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupClientDocument"
                }
              }
            },
            "description": "Document successfully updated"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Mark a document as read by user within the FINEOS system.",
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/cases/{caseId}/eforms": {
      "get": {
        "description": "Retrieve a list of eforms linked to a case or linked to a contact on a case.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CASES_EFORMS </p>",
        "operationId": "getEforms",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "case number",
            "in": "path",
            "name": "caseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "String which contains comma delimited column names.",
            "in": "query",
            "name": "eFormTypes",
            "schema": {
              "default": "",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/EFormSummary"
                  },
                  "type": "array"
                }
              }
            },
            "description": "List of eforms linked to a case or linked to a contact on a case"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/cases/{caseId}/eforms/updateEForm/{eformId}": {
      "post": {
        "description": "Update existing EForm document.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CASES_EFORM_UPDATE</p>",
        "operationId": "updateEForm",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Claim case number",
            "in": "path",
            "name": "caseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of an EForm document",
            "in": "path",
            "name": "eformId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/EFormAttribute"
                },
                "type": "array"
              }
            }
          },
          "description": "Updated EForm document",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EForm"
                }
              }
            },
            "description": "EForm document updated successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/cases/{caseId}/eforms/{eformId}/readEform": {
      "get": {
        "description": "To retrieve the information stored in a specified EForm document.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CASES_READEFORM</p>",
        "operationId": "readEForm",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "case number",
            "in": "path",
            "name": "caseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of an EForm document",
            "in": "path",
            "name": "eformId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EForm"
                }
              }
            },
            "description": "Eform linked to the case"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/cases/{caseId}/managedRequirements": {
      "get": {
        "description": "Returns a list of managed requirement on the case.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CASES_MANAGEDREQUIREMENTS</p>",
        "operationId": "getManagedRequirements",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Case number",
            "in": "path",
            "name": "caseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ManagedRequirementDetails"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Successful Request. Returns a list of managed Requirement"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/cases/{caseId}/managedRequirements/{managedReqId}/documents": {
      "get": {
        "description": "Returns a list of documents linked to a managed requirement<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CASES_MANAGEDREQDOCUMENTS</p>",
        "operationId": "getDocumentsForManagedRequirement",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "claim case number",
            "in": "path",
            "name": "caseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Managed Requirement Id",
            "in": "path",
            "name": "managedReqId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/GroupClientDocument"
                  },
                  "type": "array"
                }
              }
            },
            "description": "List of documents linked to the managed requirement"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/cases/{caseId}/managedRequirements/{managedReqId}/eforms": {
      "get": {
        "description": "Returns a list of eforms linked to a managed requirement.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CASES_MANAGEDREQEFORMS</p>",
        "operationId": "getEformsForManagedRequirement",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "claim case number",
            "in": "path",
            "name": "caseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Managed Requirement Id",
            "in": "path",
            "name": "managedReqId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/EFormSummary"
                  },
                  "type": "array"
                }
              }
            },
            "description": "List of eforms linked to the managed requirement"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/cases/{caseId}/managedRequirements/{managedReqId}/linkDocument/{docId}": {
      "post": {
        "description": "Links the document to the managed requirement if the claim belongs to the customer and the managed requirement is linked to the claim.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CASES_MANAGEDREQ_LINKDOCUMENT</p>",
        "operationId": "linkDocumentToManagedRequirement",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Claim case number",
            "in": "path",
            "name": "caseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The managed Requirement id",
            "in": "path",
            "name": "managedReqId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The document id",
            "in": "path",
            "name": "docId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Links document to managed requirement",
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/cases/{caseId}/outstanding-information": {
      "get": {
        "description": "Returns the list of the outstanding information items for open outstanding requirements (not suppressed or removed) that have been added to the case or its child cases and if the case is an Absence Case, it also returns the pending, received but still pending decision or received but not satisfied evidence results associated to any of its leave requests that are pending or in review.<BR>Individual outstanding requirement and evidences returned may be further filtered based on configured events and rules. By default, no filtering will apply. However, rules can be configured if there was a need for instance to exclude specific outstanding requirement categories or type or specific evidences from the list returned to the group client.<BR> Where two outstanding items of the same type exist on different cases, only a single item will be returned in the payload.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CASES_OUTSTANDINGINFORMATION</p>",
        "operationId": "getOutstandingItems",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "case number",
            "in": "path",
            "name": "caseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/OutstandingInformationItem"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Returns a list of outstanding information items."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Returns a list of outstanding information items.",
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/cases/{caseId}/outstanding-information-received": {
      "post": {
        "description": "This API will be used to update the outstanding information items that exist on the case or any of its child cases.<BR>The API expects that there is at least one outstanding information item existing on either the provided case or one of its child cases, that is either an open outstanding requirement on one of the cases, or a pending evidence request on one of the absence cases for the same document type. If not, a 422 response will be returned.<BR>For all cases, where a document has been provided, it will link the document to the any open outstanding requirements where the type for the outstanding requirement (as determined by an event) matches the type supplied in the URL.<BR>In addition, where the case or any or its sub cases are absence cases, it will also update the evidences on the absence cases for the same type to mark them as received or satisfied.<BR>An outstanding information item may be automatically closed or marked as satisfactory, this will be determined by an event.<BR>A task will then be generated for the back-office user to inform them that one or many outstanding information items have been updated, so that they can view the related document (where it exists) or can examine the case and determine whether it satisfies the outstanding information.<BR>The task will be created on either an absence, accommodation, generic or a claim case. It will never be created for a notification case. If all outstanding information items that are updated are specific to a claim or generic case only OR if there is a mix of claim and absence outstanding information items updated, the task will be associated with a claim or generic case. Otherwise, it will be associated with an absence case.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CASES_OUTSTANDINGINFORMATIONRECEIVED_ADD</p>",
        "operationId": "updateOutstandingInformationItem",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Id of the case for which the outstanding items will be updated.",
            "in": "path",
            "name": "caseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OutstandingInformationData"
              }
            }
          },
          "description": "The data to mark outstanding requirement and evidnces.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Request."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Updates the outstanding information items for the type provided that exist on the case or any of its child cases.",
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/cases/{caseId}/participants": {
      "get": {
        "description": "Retrieves Case Participants for a case.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CASES_PARTICIPANTS</p>",
        "operationId": "getCaseParticipants",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Case number",
            "in": "path",
            "name": "caseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/CaseParticipantsSummary"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Read successful"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/cases/{caseId}/participants/{participantId}/readParticipantContactDetails": {
      "get": {
        "description": "Returns a Case Participant details (date of birth, gender, correspondence address etc.) for group client.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CASES_READPARTICIPANTCONTACTDETAILS</p>",
        "operationId": "readParticipantContactDetails",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "claim case number",
            "in": "path",
            "name": "caseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "participant Id",
            "in": "path",
            "name": "participantId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParticipantContactDetails"
                }
              }
            },
            "description": "Case Participant details for group client"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/cases/{caseId}/participants/{participantId}/readParticipantDetails": {
      "get": {
        "description": "Returns a Case Participant details (date of birth, gender, correspondence address etc.) for group client.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CASES_READPARTICIPANTDETAILS</p>",
        "operationId": "readParticipantDetails",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "claim case number",
            "in": "path",
            "name": "caseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "participant Id",
            "in": "path",
            "name": "participantId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Participant"
                }
              }
            },
            "description": "Case Participant details for group client"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/cases/{caseId}/web-messages": {
      "get": {
        "description": "Web Messages are the type of communications used when specific things happen in cases that need group client and carrier to follow up on. They cover ad-hoc communication for those things that can't be predicted ahead of time.<P>Provides the ability of querying against the web message for a case</P><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CASES_WEBMESSAGES</p>",
        "operationId": "query_14",
        "parameters": [
          {
            "description": "The id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Resource Id of the case for which we want to perform action on the web messages.",
            "in": "path",
            "name": "caseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Includes Web Messages of the direct subcases in the list retrieved.",
            "in": "query",
            "name": "_includeWebMessagesFromSubCases",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebMessages"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Retrieves a list of Web Messages, belonging to an specific case, sent by the Group Client to the Carrier and vice versa.",
        "tags": [
          "Web Message"
        ]
      },
      "post": {
        "description": "Web Messages are the type of communications used when specific things happen in cases that need group client and carrier to follow up on. They cover ad-hoc communication for those things that can't be predicted ahead of time.<P>A Web Message communication for the Carrier is created at case level.</P><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CASES_WEBMESSAGES_ADD</p>",
        "operationId": "create_5",
        "parameters": [
          {
            "description": "The id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Resource Id of the case for which we want to perform action on the web messages.",
            "in": "path",
            "name": "caseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWebMessageCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebMessageResource"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Sends a Web Message communication to the Carrier with regards to a case if the GroupClient has access to that case.",
        "tags": [
          "Web Message"
        ]
      }
    },
    "/groupClient/cases/{caseId}/web-messages/{webMessageId}": {
      "get": {
        "description": "Web Messages are the type of communications used when specific things happen in cases that need group client and carrier to follow up on. They cover ad-hoc communication for those things that can't be predicted ahead of time.<p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CASES_WEBMESSAGES_GETSINGLE </p>",
        "operationId": "getSingle_18",
        "parameters": [
          {
            "description": "The id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Resource Id of the case for which we want to perform action on the web messages.",
            "in": "path",
            "name": "caseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Resource Id of Web Message",
            "in": "path",
            "name": "webMessageId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebMessageResource"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Allows to get a single web message given it's ID",
        "tags": [
          "Web Message"
        ]
      }
    },
    "/groupClient/cases/{caseId}/web-messages/{webMessageId}/edit": {
      "post": {
        "description": "Web Messages are the type of communications used when specific things happen in cases that need group client and carrier to follow up on. They cover ad-hoc communication for those things that can't be predicted ahead of time.<p>Update existing Web Message communication with the data provided in the request payload.</p><ul><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CASES_WEBMESSAGES_EDIT</p>",
        "operationId": "edit_8",
        "parameters": [
          {
            "description": "The id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Resource Id of the case for which we want to perform action on the web messages.",
            "in": "path",
            "name": "caseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Resource Id of Web Message",
            "in": "path",
            "name": "webMessageId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditWebMessageCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebMessageResource"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Update existing Web Message communication with the data provided in the request payload.",
        "tags": [
          "Web Message"
        ]
      }
    },
    "/groupClient/claim/{claimId}/lodgeClaim": {
      "post": {
        "description": "This operation is triggered by a customer when he/she is finished with updating a claim. This operation will notify head office users to take over this claim.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CLAIMS_LODGE</p>",
        "operationId": "lodgeClaim",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Claim case number",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lodgement successful"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/claims": {
      "get": {
        "description": "Returns a GroupClientClaims object which contains a list of claim summary. The results can be sorted on these columns : claimId, claimType, creationDate, effectiveDate, description, status.<p>This API returns a list of claim cases where:</p><ul><li>The Group Client has a specific role (such as 'Employer' or 'Fund') on the claim. The list of applicable roles is determined by calling the ViewPoint.GroupClient. GetGroupClientPartyCaseRoleEvent</li><li>And the claim case satisfies the filter input parameters</li><li>And the case has the same adminGroup as one of the adminGroups that the user can access, as returned by the getAdminGroupsForGroupClientUser interface method; if this interface is not implemented, the case will not be returned</li><li>And the claim case is not Anonymised</li></ul>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CLAIMS",
        "operationId": "getClaims",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This header paramter will be used by the portal user.",
            "in": "header",
            "name": "role",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Start date of the period which will be used to search by the claim incurred date criteria",
            "in": "query",
            "name": "claimIncurredDateFrom",
            "schema": {
              "default": "",
              "type": "string"
            }
          },
          {
            "description": "End date of the period which will be used to search by the claim incurred date criteria",
            "in": "query",
            "name": "claimIncurredDateTo",
            "schema": {
              "default": "",
              "type": "string"
            }
          },
          {
            "description": "Start date of the period which will be used to search by the claim notification date criteria",
            "in": "query",
            "name": "notificationDateFrom",
            "schema": {
              "default": "",
              "type": "string"
            }
          },
          {
            "description": "End date of the period which will be used to search by the claim notification date criteria",
            "in": "query",
            "name": "notificationDateTo",
            "schema": {
              "default": "",
              "type": "string"
            }
          },
          {
            "description": "Status of the claim which will be used as a search criteria",
            "in": "query",
            "name": "status",
            "schema": {
              "default": "",
              "type": "string"
            }
          },
          {
            "description": "Requested page number",
            "in": "query",
            "name": "pageNbr",
            "schema": {
              "default": 0,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Requested number of claims per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 0,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "String which contains comma delimited column names. Results can be sorted on these columns : claimId, claimType, creationDate, effectiveDate, description, status.",
            "in": "query",
            "name": "sort",
            "schema": {
              "default": "",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ClaimSummary"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Successful Request.Returns a GroupClientClaims object which contains a list of claim summary objects."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/claims/notifications": {
      "get": {
        "description": "Returns a NotificationCaseDetail object which contains notification claim cases summary along with the child claim cases. List will exclude the closed and anonymised case from result. The results can be sorted on these columns : notificationcreateddate, notificationcaseid.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CLAIMS_NOTIFICATIONS</p>",
        "operationId": "getNotifications",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Boolean status which will use to include or exclude closed cases",
            "in": "query",
            "name": "includeClosedCases",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Start date of the period which will be used to search by the claim notification date or incurred date criteria",
            "in": "query",
            "name": "startDate",
            "schema": {
              "default": "",
              "type": "string"
            }
          },
          {
            "description": "End date of the period which will be used to search by the claim notification date or incurred date criteria",
            "in": "query",
            "name": "endDate",
            "schema": {
              "default": "",
              "type": "string"
            }
          },
          {
            "description": "Requested page number",
            "in": "query",
            "name": "pageNbr",
            "schema": {
              "default": 0,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "Requested number of claims per page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "default": 0,
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "String which contains comma delimited column names. Results can be sorted on these columns : notificationcreateddate, notificationcaseid.",
            "in": "query",
            "name": "sort",
            "schema": {
              "default": "",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationCaseDetail"
                }
              }
            },
            "description": "Successful Request. Returns a NotificationCaseDetail object which contains a list of claim summary objects."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Returns a NotificationCaseDetail object which contains notification claim cases summary along with the child claim cases.",
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/claims/startClaim/{claimCaseType}": {
      "post": {
        "description": "Creates a claim with the customer as the default participant and links policies to it<p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CLAIMS_START</p>",
        "operationId": "addClaim",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of a claim case type",
            "in": "path",
            "name": "claimCaseType",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StartClaimDetails"
              }
            }
          },
          "description": "Basic information needed for creating a group client claim",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StartClaimSummary"
                }
              }
            },
            "description": "Claim Summary"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/claims/{claimId}/benefits": {
      "get": {
        "description": "Returns a list of benefit summaries for a group client user.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CLAIMS_BENEFITS</p>",
        "operationId": "getClaimBenefits",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "claim case number",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/BenefitSummary"
                  },
                  "type": "array"
                }
              }
            },
            "description": "A list of benefit summaries for a group client user"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/claims/{claimId}/benefits/{benefitId}/readDisabilityBenefit": {
      "get": {
        "description": "Returns a disability Benefit for a group client user.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CLAIMS_DISABILITYBENEFIT_GETSINGLE</p>",
        "operationId": "getClaimDisabilityBenefit",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "claim case number",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "benefit case number",
            "in": "path",
            "name": "benefitId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReadDisabilityBenefitResult"
                }
              }
            },
            "description": "A disability benefit for a group client user"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/claims/{claimId}/benefits/{benefitId}/readLumpSumBenefit": {
      "get": {
        "description": "Returns a lump sum Benefit for a group client user.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CLAIMS_READLUMPSUMBENEFIT</p>",
        "operationId": "getClaimLumpSumBenefit",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "claim case number",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "benefit case number",
            "in": "path",
            "name": "benefitId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReadLumpSumBenefitResult"
                }
              }
            },
            "description": "A lump sum benefit for a group client user"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/claims/{claimId}/group-policy-member-details": {
      "get": {
        "description": "A group policy member detail represents the employee details relating to a claim<p>Gets the list of group policies that are linked to the Claim case provided.</p><p>If there are no group policies linked to the Claim case, an empty list will be returned.</p><p>For each group policy linked to the Claim case, the following policy member details, which are specific to that claim, will be returned (where they are available):</p><ul><li>Member Number</li><li>Division Ids</li><li>Class Ids</li></ul><p>The list of available class and division names for each policy linked to the Claim case will also be returned.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CLAIMS_GROUPPOLICYMEMBERDETAILS</p>",
        "operationId": "query_15",
        "parameters": [
          {
            "description": "The id of the claim case.",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupPolicyMemberDetails"
                }
              }
            },
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Gets the list of group policies that are linked to the Claim case provided.",
        "tags": [
          "Group Policy Member Details"
        ]
      }
    },
    "/groupClient/claims/{claimId}/group-policy-member-details/{groupPolicyMemberDetailId}": {
      "get": {
        "description": "A group policy member detail represents the employee details relating to a claim<p>Gets a single group policy member detail</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CLAIMS_GROUPPOLICYMEMBERDETAILS_GETSINGLE</p>",
        "operationId": "getSingle_19",
        "parameters": [
          {
            "description": "The id of the claim case.",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The unique identifier for the policy member detail.",
            "in": "path",
            "name": "groupPolicyMemberDetailId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupPolicyMemberDetail"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Gets a single group policy member detail",
        "tags": [
          "Group Policy Member Details"
        ]
      }
    },
    "/groupClient/claims/{claimId}/group-policy-member-details/{groupPolicyMemberDetailId}/edit": {
      "post": {
        "description": "A group policy member detail represents the employee details relating to a claim<p>Updates the following group policy information of one group policy linked to a Claim case:</p><ul><li>Member Number</li><li>Division Ids</li><li>Class Ids</li></ul><p>This API accepts one member number and a list of class and division ID pairs.</p><p>It is expected that the class and division ids provided are valid for the group policy in question.</p><p>The list of class and division ID pairs provided replaces any that were previously selected for the group policy linked to the Claim case.</p><p>Where DivisionClassLinkEmbeddable object is included in the request, it is expected that both divisionId and classId are populated.</p><p>Where possible an update to the Back Office will be triggered by this API to update the coverages available on the Claim case - at least one class id and division id is required for this.</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CLAIMS_GROUPPOLICYMEMBERDETAILS_EDIT</p>",
        "operationId": "edit_9",
        "parameters": [
          {
            "description": "The id of the claim case.",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The unique identifier for the policy member detail.",
            "in": "path",
            "name": "groupPolicyMemberDetailId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The client sends the previously returned ETag value in the If-Match header to indicate the version of the Resource it wishes to update<P>If this is not the most up to date version, the server will return a 412 error.",
            "in": "header",
            "name": "If-Match",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditGroupPolicyMemberDetailCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupPolicyMemberDetail"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Precondition Failed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Updates group policy information on a Claim case.",
        "tags": [
          "Group Policy Member Details"
        ]
      }
    },
    "/groupClient/claims/{claimId}/medical-details": {
      "get": {
        "description": "Returns Medical Details on a claim for a group client user.Medical Details consist of a definition of the condition, cause of injury, relevant dates and more as described in MedicalDetails. Medical Details are related to all FINEOS Claims entities with a one to one mapping. Medical Details represents the current view of the medical aspects of the Claim.<p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CLAIMS_MEDICALDETAILS</p>",
        "operationId": "getSingle_20",
        "parameters": [
          {
            "description": "The user who is making the request",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Claim identifier",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MedicalDetailsResource"
                }
              }
            },
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Returns Medical Details on a claim for a group client user",
        "tags": [
          "Medical Details"
        ]
      }
    },
    "/groupClient/claims/{claimId}/medical-details/edit": {
      "post": {
        "description": "Updates the Medical Detail associated with the Claim for a group client user. Medical Details consist of a definition of the condition, cause of injury, relevant dates and more as described in <code>MedicalDetails</code>. Medical Details are related to all FINEOS Claims entities with a one to one mapping. Medical Details represents the current view of the medical aspects of the Claim. <p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CLAIMS_MEDICALDETAILS_EDIT</p>",
        "operationId": "edit_10",
        "parameters": [
          {
            "description": "The user who is making the request",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Claim identifier",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The client sends the previously returned ETag value in the If-Match header to indicate the version of the Resource it wishes to update<P>If this is not the most up to date version, the server will return a 412 error.",
            "in": "header",
            "name": "If-Match",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditMedicalDetailsCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MedicalDetailsResource"
                }
              }
            },
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Precondition Failed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Updates the Medical Details associated with the Claim for a group client user.",
        "tags": [
          "Medical Details"
        ]
      }
    },
    "/groupClient/claims/{claimId}/medical-details/pregnancy-details": {
      "get": {
        "description": "Returns Pregnancy Details on a claim for a group client user.Pregnancy Details consist of pregnancy specific dates, indicator of complications and delivery type as described in PregnancyDetails. Pregnancy Details are composed of attributes of the FINEOS Medical Details entity, which is related to all FINEOS Claims entities with a one to one mapping. Pregnancy Details represents the current view of the pregnancy aspects of the Claim. <p>The permission key for this endpoint is URL_GET_GROUPCLIENT_CLAIMS_MEDICALDETAILS_PREGNANCYDETAILS</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CLAIMS_MEDICALDETAILS_PREGNANCYDETAILS</p>",
        "operationId": "getSingle_22",
        "parameters": [
          {
            "description": "The user who is making the request",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Claim Medical Details identifier",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PregnancyDetails"
                }
              }
            },
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Returns Pregnancy Details on a claim for a group client user",
        "tags": [
          "Pregnancy Details"
        ]
      }
    },
    "/groupClient/claims/{claimId}/medical-details/pregnancy-details/edit": {
      "post": {
        "description": "Updates the Pregnancy Details associated with the Claim for a group client user. Pregnancy Details consist of pregnancy specific dates, indicator of complications and delivery type as described in <code>PregnancyDetails</code>. Pregnancy Details are composed of attributes of the FINEOS Medical Details entity, which is related to all FINEOS Claims entities with a one to one mapping. Pregnancy Details represents the current view of the pregnancy aspects of the Claim. <p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CLAIMS_MEDICALDETAILS_PREGNANCYDETAILS</p>",
        "operationId": "edit_12",
        "parameters": [
          {
            "description": "The user who is making the request",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Claim Medical Details identifier",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The client sends the previously returned ETag value in the If-Match header to indicate the version of the Resource it wishes to update<P>If this is not the most up to date version, the server will return a 412 error.",
            "in": "header",
            "name": "If-Match",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditPregnancyDetailsCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PregnancyDetails"
                }
              }
            },
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Precondition Failed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Updates the Pregnancy Details associated with the Claim for a group client user.",
        "tags": [
          "Pregnancy Details"
        ]
      }
    },
    "/groupClient/claims/{claimId}/medicalDetails/addDiagnosisCode": {
      "post": {
        "description": "Add diagnosis code to claim case medical details.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CLAIMS_DIAGNOSISCODE_ADD</p>",
        "operationId": "addDiagnosisDetailsForGroupClient",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The claim case number.",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewDiagnosisDetails"
              }
            }
          },
          "description": "The diagnosis details to be added to the claim case.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiagnosisDetails"
                }
              }
            },
            "description": "Diagnosis details"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/claims/{claimId}/medicalDetails/addHospitalisationDetails": {
      "post": {
        "description": "Add the hospitalisation details associated to the claim case.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CLAIMS_HOSPITALISATIONDETS_ADD</p>",
        "operationId": "addHospitalisationDetails",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Claim case number",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HospitalisationDetails"
              }
            }
          },
          "description": "Hospitalization details to be added.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HospitalisationDetailsResponse"
                }
              }
            },
            "description": "Returns the hospitalisation details added related to the claim."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Add the hospitalisation details associated to the claim case.",
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/claims/{claimId}/medicalDetails/diagnosisCodes": {
      "get": {
        "description": "Returns Diagnosis Codes Details for Claim Medical Details for a group client user.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CLAIMS_DIAGNOSISCODES</p>",
        "operationId": "getClaimDiagnosisCodes",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "claim case number",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DiagnosisDetails"
                  },
                  "type": "array"
                }
              }
            },
            "description": "iagnosis Codes Details for Medical Details on a claim for a group client user"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/claims/{claimId}/medicalDetails/diagnosisCodes/{diagnosisCodeId}/removeDiagnosisCode": {
      "post": {
        "description": "API to remove the diagnosis detail associated with claim.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CLAIMS_DIAGNOSISCODE_REMOVE</p>",
        "operationId": "removeDiagnosisCode",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Claim case number.",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "diagnosis detail id associated with the claim to be removed.",
            "in": "path",
            "name": "diagnosisCodeId",
            "required": true,
            "schema": {
              "description": "Business Entity OID",
              "example": "PE-00012-0000001234",
              "format": "string",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Removed successfully."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/claims/{claimId}/medicalDetails/diagnosisCodes/{diagnosisCodeId}/updateDiagnosisCode": {
      "post": {
        "description": "Add diagnosis code to claim case medical details.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CLAIMS_DIAGNOSISCODE_UPDATE</p>",
        "operationId": "updateDiagnosisDetailsForGroupClient",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The claim case number.",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The diagnosis code id.",
            "in": "path",
            "name": "diagnosisCodeId",
            "required": true,
            "schema": {
              "description": "Business Entity OID",
              "example": "PE-00012-0000001234",
              "format": "string",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewDiagnosisDetails"
              }
            }
          },
          "description": "The diagnosis details to be updated to the claim case.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiagnosisDetails"
                }
              }
            },
            "description": "Diagnosis details"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/claims/{claimId}/medicalDetails/hospitalisationDetails": {
      "get": {
        "description": "Get the list of hospitalisation associated to the claim case.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CLAIMS_HOSPITALISATIONDETAILS </p>",
        "operationId": "getHospitalizationDetails",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Claim case number",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/HospitalisationDetailsResponse"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Returns the list hospitalisation details related to the claim."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Get the list of hospitalisation associated to the claim case.",
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/claims/{claimId}/medicalDetails/hospitalisationDetails/{hospitalisationDetailsId}/removeHospitalisationDetails": {
      "post": {
        "description": "API to remove the hospitalisation detail associated with claim.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CLAIMS_HOSPITALISATIONDETS_REMOVE</p>",
        "operationId": "removeHospitalisationDetails",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Claim case number.",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Hopitalisation detail Oid associated with the claim to be removed.",
            "in": "path",
            "name": "hospitalisationDetailsId",
            "required": true,
            "schema": {
              "description": "Business Entity OID",
              "example": "PE-00012-0000001234",
              "format": "string",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Removed successfully."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/claims/{claimId}/medicalDetails/hospitalisationDetails/{hospitalisationDetailsId}/updateHospitalisationDetails": {
      "post": {
        "description": "update hospitalisationDetails related information of the claim.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CLAIMS_HOSPITALISATIONDETS_UPDATE</p>",
        "operationId": "updateHospitalisationDetails",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The claim case number.",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The hospitalisation id received in the request.",
            "in": "path",
            "name": "hospitalisationDetailsId",
            "required": true,
            "schema": {
              "description": "Business Entity OID",
              "example": "PE-00012-0000001234",
              "format": "string",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HospitalisationDetails"
              }
            }
          },
          "description": "update hospitalisationDetails related information of the claim.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HospitalisationDetailsResponse"
                }
              }
            },
            "description": "update hospitalisationDetails related information of the claim"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "update hospitalisationDetails related information of the claim.",
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/claims/{claimId}/medicalDetails/restrictionsLimitations": {
      "get": {
        "description": "Retrieves restrictions and limitations, so that user can review some key information about the claim.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CLAIMS_RESTRICTIONSLIMITATIONS</p>",
        "operationId": "readRestrictionsLimitationsForGroupClient",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Claim case number",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestrictionsLimitations"
                }
              }
            },
            "description": "Read successful. Returns restrictions and limitations"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/claims/{claimId}/medicalDetails/updateRestrictionsLimitations": {
      "post": {
        "description": "update restrictions and limitations related information of the claim.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CLAIMS_RESTRICTIONSLIMITS_UPDATE</p>",
        "operationId": "updateRestrictionsLimitationsForGroupClient",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The claim case number.",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestrictionsLimitations"
              }
            }
          },
          "description": "restrictions and limitations related information of the claim.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestrictionsLimitations"
                }
              }
            },
            "description": "update restrictions and limitations related information of the claim"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/claims/{claimId}/occupations": {
      "get": {
        "description": "Retrieve the occupations of a claim.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CLAIMS_OCCUPATIONS</p>",
        "operationId": "getClaimOccupations",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "claim number",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ReadOccupation"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The occupations of a claim"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/claims/{claimId}/occupations/addOccupation": {
      "post": {
        "description": "Adds an occupation detail for a claim case.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CLAIMS_OCCUPATION_ADD</p>",
        "operationId": "addOccupation",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The id of claim case.",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClaimOccupation"
              }
            }
          },
          "description": "The occupation detail to be added.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReadOccupation"
                }
              }
            },
            "description": "Returns the occupation details added."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Adds an occupation detail for a claim case.",
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/claims/{claimId}/occupations/{occupationId}/addMonthlyBasisPreDisabilityEarnings": {
      "post": {
        "description": "Add monthly basis pre-disability earnings details for a group client.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CLAIMS_OCCUPATIONMTHLYPREDISEARNINGS_ADD</p>",
        "operationId": "addMonthlyBasisPreDisabilityEarnings",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Claim case number",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Occupation Id number",
            "in": "path",
            "name": "occupationId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MonthlyEarningsRequest"
              }
            }
          },
          "description": "EarningsRequest detail object to add monthly pre-disability earnings for a group client.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EarningsResponse"
                }
              }
            },
            "description": "Returns the newly created JSON monthly basis pre-disability earnings object."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Create monthly basis pre-disability earnings.",
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/claims/{claimId}/occupations/{occupationId}/addWeeklyBasisPreDisabilityEarnings": {
      "post": {
        "description": "Add weekly basis pre-disability earnings details for a customer.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CLAIMS_OCCUPATIONWKLYPREDISEARNINGS_ADD</p>",
        "operationId": "addWeeklyBasisPreDisabilityEarnings",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Claim case number",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Occupation Id number",
            "in": "path",
            "name": "occupationId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WeeklyEarningsRequest"
              }
            }
          },
          "description": "EarningsRequest detail object to add weekly pre-disability earnings for a customer.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EarningsResponse"
                }
              }
            },
            "description": "Returns the newly created JSON weekly basis pre-disability earnings object."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Create weekly basis pre-disability earnings.",
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/claims/{claimId}/occupations/{occupationId}/earnings": {
      "get": {
        "description": "Returns the Pre-Disability Earnings Details for the Group Client<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CLAIMS_OCCUPATIONEARNINGS</p>",
        "operationId": "getEarnings",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "claim case number",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "occupation Id number",
            "in": "path",
            "name": "occupationId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/EarningsResponse"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Pre-Disability Earnings Details for the Group Client"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Get Pre-Disability Earnings Details for the Group Client",
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/claims/{claimId}/occupations/{occupationId}/removeOccupation": {
      "post": {
        "description": "Removes an occupation detail for a claim case.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CLAIMS_OCCUPATION_REMOVE</p>",
        "operationId": "removeOccupation",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The id of claim case.",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The id of occupation to be removed.",
            "in": "path",
            "name": "occupationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No value at response."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Removes an occupation detail for a claim case.",
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/claims/{claimId}/occupations/{occupationId}/removePreDisabilityEarningsRecord/{earningsId}": {
      "post": {
        "description": "Removes the earnings record for the claim occupation.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CLAIMS_OCCUPATIONPREDISEARNINGS_REMOVE</p>",
        "operationId": "removeEarnings",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The id of claim case.",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The id of occupation.",
            "in": "path",
            "name": "occupationId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The id of earning record to be removed.",
            "in": "path",
            "name": "earningsId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Earnings details successfully removed"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Remove the earnings record for the claim occupation.",
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/claims/{claimId}/occupations/{occupationId}/updateMonthlyBasisPreDisabilityEarnings/{earningsId}": {
      "post": {
        "description": "Updates and Returns the updated Pre-Disability Earnings Details for a group client.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CLAIMS_OCCUPATIONMTHLYPREDISEARNINGS_UPDATE</p>",
        "operationId": "updateMonthlyBasisPreDisabilityEarnings",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "claim case number",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "occupation Id number",
            "in": "path",
            "name": "occupationId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "earnings Id",
            "in": "path",
            "name": "earningsId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MonthlyEarningsRequest"
              }
            }
          },
          "description": "Earnings record details to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/EarningsResponse"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Returns the JSON for updated monthly basis pre-disability earnings object."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Update monthly basis Pre-Disability Earnings for a group client.",
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/claims/{claimId}/occupations/{occupationId}/updateOccupation": {
      "post": {
        "description": "Updates occupation details of a claim.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CLAIMS_OCCUPATION_UPDATE</p>",
        "operationId": "updateOccupation",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Claim id of a claim associated with the group client user.",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Occupation id of a occupation associated with a claim.",
            "in": "path",
            "name": "occupationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClaimOccupation"
              }
            }
          },
          "description": "Occupation details to be updated.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReadOccupation"
                }
              }
            },
            "description": "Returns the updated occupation details of a claim."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Updates occupation details of a claim.",
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/claims/{claimId}/occupations/{occupationId}/updateWeeklyBasisPreDisabilityEarnings/{earningsId}": {
      "post": {
        "description": "Updates and Returns the updated Pre-Disability Earnings Details for a group client.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CLAIMS_OCCUPATIONWKLYPREDISEARNINGS_UPDATE</p>",
        "operationId": "updateWeeklyBasisPreDisabilityEarnings",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "claim case number",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "occupation Id number",
            "in": "path",
            "name": "occupationId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "earnings Id",
            "in": "path",
            "name": "earningsId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WeeklyEarningsRequest"
              }
            }
          },
          "description": "Earnings record details to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EarningsResponse"
                }
              }
            },
            "description": "Returns the JSON for updated weekly basis pre-disability earnings object."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Update weekly basis Pre-Disability Earnings for a group client",
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/claims/{claimId}/otherIncomeSources": {
      "get": {
        "description": "Returns Income Sources listed on a claim for group client user.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CLAIMS_OTHERINCOME</p>",
        "operationId": "readIncomeSource",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "claim case number",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncomeSourceResponse"
                }
              }
            },
            "description": "A list of Income Sources on a claim for group client user"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Returns Income Sources listed on a claim for group client user.",
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/claims/{claimId}/otherIncomeSources/addOtherIncomeSource": {
      "post": {
        "description": "Add the other income sources details associated to the claim case.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CLAIMS_OTHERINCOME_ADD</p>",
        "operationId": "addOtherIncomeSource",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Claim case number",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IncomeSource"
              }
            }
          },
          "description": "OtherIncomeSource details to be added.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncomeSourceResponse"
                }
              }
            },
            "description": "Returns the other income sources details added to the claim."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Add the other income sources details associated to the claim case.",
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/claims/{claimId}/otherIncomeSources/{incomeSourceId}/removeOtherIncomeSource": {
      "post": {
        "description": "Remove other income source details associated with the claim case.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CLAIMS_OTHERINCOME_REMOVE</p>",
        "operationId": "removeOtherIncomeSource",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "claim case number",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Other Income Source Id to be removed.",
            "in": "path",
            "name": "incomeSourceId",
            "required": true,
            "schema": {
              "description": "Business Entity OID",
              "example": "PE-00012-0000001234",
              "format": "string",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Other Income Source details successfully removed"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Remove other income source details associated with the claim case.",
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/claims/{claimId}/otherIncomeSources/{incomeSourceId}/updateOtherIncomeSource": {
      "post": {
        "description": "Update the other income sources details associated to the claim case.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CLAIMS_OTHERINCOME_UPDATE</p>",
        "operationId": "updateOtherIncomeSource",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Claim case number",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The income sources id received in the request.",
            "in": "path",
            "name": "incomeSourceId",
            "required": true,
            "schema": {
              "description": "Business Entity OID",
              "example": "PE-00012-0000001234",
              "format": "string",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IncomeSource"
              }
            }
          },
          "description": "OtherIncomeSource details to be updated.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncomeSourceResponse"
                }
              }
            },
            "description": "Returns the other income sources details updated to the claim."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Update the other income sources details associated to the claim case.",
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/claims/{claimId}/payments": {
      "get": {
        "description": "Returns all the payments made (paid payments not payments waiting to be paid) on the claim which relate to the group client customer or which have been configured to be returned to the customer.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CLAIMS_PAYMENTS</p>",
        "operationId": "getPayments",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of the claim. Only payments associated to this claim are returned.",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Payment"
                  },
                  "type": "array"
                }
              }
            },
            "description": "A list of payments"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/claims/{claimId}/payments/{paymentId}/paymentLines": {
      "get": {
        "description": "Returns all the payment lines for payments made which relate to the group client.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CLAIMS_PAYMENTLINES</p>",
        "operationId": "getPaymentLines",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of the claim for which we get the payment lines for payments made.",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of payment for which to get the payment lines.",
            "in": "path",
            "name": "paymentId",
            "required": true,
            "schema": {
              "description": "Business Entity OID",
              "example": "PE-00012-0000001234",
              "format": "string",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PaymentLine"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Returns A list of payment lines for group client"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/claims/{claimId}/readDisabilityDetails": {
      "get": {
        "description": "Retrieves disability claims details, so that user can review some key information about the claim.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CLAIMS_DISABILITYDETAILS</p>",
        "operationId": "readDisabilityClaim",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Claim case number",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReadDisabilityResult"
                }
              }
            },
            "description": "Read successful. Returns disability claims details"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/claims/{claimId}/socialSecurityBenefit": {
      "get": {
        "description": "Returns social security benefit details of the claim for a group client user.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CLAIMS_SOCIALSECURITYBENEFIT</p>",
        "operationId": "getSocialSecurityBenefit",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "claim case number",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SocialSecurityBenefitResponse"
                }
              }
            },
            "description": "Social security benefit details of the claim for a group client user"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/claims/{claimId}/socialSecurityBenefit/decisions": {
      "get": {
        "description": "Get the details of claims social security decision details for group client user<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CLAIMS_SOCIALSECURITYDECISIONS</p>",
        "operationId": "getSocialSecurityDecisions",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The id of customer that belongs to the group client user.",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SocialSecurityDecisionResponse"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Read Successfull, get the details of claims social security decision details for group client user"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Get the details of claims social security decision details for group client user.",
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/claims/{claimId}/updateDisabilityDetails": {
      "post": {
        "description": "API to update a claim on-line of type Disability claim only.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CLAIMS_DISABILITYDETAILS_UPDATE</p>",
        "operationId": "updateDisabilityClaim",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Claim case number",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DisabilityClaim"
              }
            }
          },
          "description": "Set of disability claim information exposed to a customer for editing",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update successful"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/customers": {
      "get": {
        "description": "A <code>Customer</code> is similar to a <code>CustomerInfo</code>, except it is more of a summary view of the Customer. Customer includes:<UL><LI>First and last names</LI></UL>, but <I>not</I> more detailed fields such as:<UL><LI>Nationality</LI></UL><P>This endpoint queries Customers as specified by the query parametersIt is possible to query by various parameters, including:<UL><LI><B>firstName._startsWith</B>: what the firstName starts with.</LI><LI><B>lastName._startsWith</B>: what the lastName starts with</LI><LI><B>idNumber</B>: customer's identification number (SSN or a National Insurance number)</LI><LI><B>_phoneNumber</B>: person's telephone No.</LI><LI><B>_crossField</B>: a string that will search multiple fields</LI></UL><B>Note</B>:<I>the convention of using an underscore <B>_</B>is to indicate a search parameter that is not in the payload</I></P><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CUSTOMERS</p>",
        "operationId": "query_4",
        "parameters": [
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Comma separated list of sort parameters. Ascending by default, for descending preappend with <B>-</B>. Can sort by firstName or lastName.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Performs a starts with search on first name. If <code>firstName._startsWith</code> is provided <code>lastName._startsWith</code> must be provided also.",
            "in": "query",
            "name": "firstName._startsWith",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Performs a starts with search on last name. If <code>lastName._startsWith</code> is provided <code>firstName._startsWith</code> must be provided also.",
            "in": "query",
            "name": "lastName._startsWith",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Searches for customer by identification number. This might represent an SSN or a National Insurance number.",
            "in": "query",
            "name": "idNumber",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Searches for customer by Phone Number. If searching by Phone Number, Int Code, Area Code and Phone Number are required parameters.",
            "in": "query",
            "name": "_phoneNumber",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Searches for customer by Phone Number. If searching by Phone Number, Int Code, Area Code and Phone Number are required parameters.",
            "in": "query",
            "name": "_phoneNumberAreaCode",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Searches for customer by Phone Number. If searching by Phone Number, Int Code, Area Code and Phone Number are required parameters.",
            "in": "query",
            "name": "_phoneNumberIntCode",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Customer's emailAddress",
            "in": "query",
            "name": "_emailAddress",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "<p>A search string that searches across multiple fields</p><p>For example</p><ul>    <li>/groupClient/customers?_crossField=Sam</li>    <li>/groupClient/customers?_crossField=EMP-101</li>    <li>/groupClient/customers?_crossField=Sam%20Smith</li>    <li>/groupClient/customers?_crossField=015987459</li></ul><p>The system will attempt to search using this search string based on</p><ul>    <li>First Name</li>    <li>Last Name</li>    <li>Identification Number (such as SSN or National Insurance Number)</li>    <li>Employee Id. We will only attempt to perform this search if the system is configured to retrieve customers based on occupation.</li></ul><p>Search criteria will facilitate starts with searches on string fields (First Name, Last Name and Employee Id). Non-string fields (Identification Number) will be exact match.</p><p>For example, a search string of 'Sa' or 'Sam' should return all record representing Sam Smith or Fiona Sampson. A search string of 123456789 will return a result if a Customer record related to the Group Client exists with that id number.</p><p>If the user chooses to search with multiple elements in the search string, then a result will be returned only if each element in the search string returns a result on either first name, last name, identification number or employee id. For example, if a user were to search with the string 'Sam S 123' then the following would be returned in the results</p><table>   <tr>        <th>First Name</th>        <th>Last Name</th>        <th>Identification Number</th>        <th>Employee Id</th>   </tr>   <tr>        <td>Sam</td>        <td>Smith</td>        <td>123</td>        <td>888</td>   </tr>   <tr>        <td>Simon</td>        <td>Sampson</td>        <td>555</td>        <td>123</td>   </tr>   <tr>        <td>Siobhan</td>        <td>Sammon</td>        <td>444</td>        <td>123-A-B-C</td>   </tr></table>",
            "in": "query",
            "name": "_crossField",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Date Of Birth of the Customer",
            "in": "query",
            "name": "dateOfBirth",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerResources"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Queries Customers accessible to Group Client user.",
        "tags": [
          "Customer"
        ]
      }
    },
    "/groupClient/customers/{customerId}": {
      "get": {
        "description": "A <code>Customer</code> is similar to a <code>CustomerInfo</code>, except it is more of a summary view of the Customer. Customer includes:<UL><LI>First and last names</LI></UL>, but <I>not</I> more detailed fields such as:<UL><LI>Nationality</LI></UL><P>Gets specific Customer Info as specified by the <CODE>customerInfoId</CODE></P><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CUSTOMERS_GETSINGLE</p>",
        "operationId": "getSingle_7",
        "parameters": [
          {
            "description": "A <code>Customer</code> is similar to a <code>CustomerInfo</code>, except it is more of a summary view of the Customer. Customer includes:<UL><LI>First and last names</LI></UL>, but <I>not</I> more detailed fields such as:<UL><LI>Nationality</LI></UL>",
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerResource"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Get specific Customer",
        "tags": [
          "Customer"
        ]
      }
    },
    "/groupClient/customers/{customerId}/communication-preferences": {
      "get": {
        "description": "<p>The communication preferences of a person are captured in three different contact contexts:</p><ul><li>Direct communication (person to person)</li><li>Written correspondence (Alternative communication channel in case the party wants to go paperless, whenever is possible). When a customer links a phone number or email address to this context:<ul><li>Implies that the customer wants to go paperless.</li><li>The new piece of correspondence will be available for download in Portal.</li><li>The customer will receive an alert to the mentioned email address or mobile phone number, notifying that the document is ready for download in Portal.</li></ul></li><li>Notification of updates (via SMS and/or email, important updates regarding changes in the status of the claim).</li></ul><p>This endpoint returns the list of email addresses and list of phone numbers linked to these three different communication preference contexts.</p><p>Each communication context is represented by a CommunicationPreference resource, which can hold one or more contact mediums:</p><ul><li>Direct communication: Can hold one email address <b>or</b> one phone number</li><li>Written correspondence: Can hold one email address <b>or</b> one phone number</li><li>Notification of updates: Can hold one email address <b>and</b> one phone number</li></ul><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CUSTOMERS_COMMUNICATIONPREFERENCES</p>",
        "operationId": "query_3",
        "parameters": [
          {
            "description": "Reference Number of the Customer owning the communication preferences",
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommunicationPreferences"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Lists the communication preferences of a person",
        "tags": [
          "Communication Preferences"
        ]
      }
    },
    "/groupClient/customers/{customerId}/communication-preferences/{communicationPreferenceId}": {
      "get": {
        "description": "<p>The communication preferences of a person are captured in three different contact contexts:</p><ul><li>Direct communication (person to person)</li><li>Written correspondence (Alternative communication channel in case the party wants to go paperless, whenever is possible). When a customer links a phone number or email address to this context:<ul><li>Implies that the customer wants to go paperless.</li><li>The new piece of correspondence will be available for download in Portal.</li><li>The customer will receive an alert to the mentioned email address or mobile phone number, notifying that the document is ready for download in Portal.</li></ul></li><li>Notification of updates (via SMS and/or email, important updates regarding changes in the status of the claim).</li></ul>Gets the communication preferences of a person in a particular context</br><p>Being <b>communicationPreferenceId</b> one of the following values:</p><ul><li>9312000 (Written correspondence)</li><li>9312001 (Notification of updates</li><li>9312002 (Direct communication)</li></ul><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CUSTOMERS_COMMUNICATIONPREFERENCES_GETSINGLE</p>",
        "operationId": "getSingle_6",
        "parameters": [
          {
            "description": "Reference Number of the Customer owning the communication preferences",
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of the communication preference, matching the full ID of the contact context enum",
            "in": "path",
            "name": "communicationPreferenceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommunicationPreferenceResource"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Gets the communication preferences of a person in a particular context",
        "tags": [
          "Communication Preferences"
        ]
      }
    },
    "/groupClient/customers/{customerId}/communication-preferences/{communicationPreferenceId}/link": {
      "post": {
        "description": "<p>The communication preferences of a person are captured in three different contact contexts:</p><ul><li>Direct communication (person to person)</li><li>Written correspondence (Alternative communication channel in case the party wants to go paperless, whenever is possible). When a customer links a phone number or email address to this context:<ul><li>Implies that the customer wants to go paperless.</li><li>The new piece of correspondence will be available for download in Portal.</li><li>The customer will receive an alert to the mentioned email address or mobile phone number, notifying that the document is ready for download in Portal.</li></ul></li><li>Notification of updates (via SMS and/or email, important updates regarding changes in the status of the claim).</li></ul><p>Being <b>communicationPreferenceId</b> one of the following values:</p><ul><li>9312000 (Written correspondence)</li><li>9312001 (Notification of updates</li><li>9312002 (Direct communication)</li></ul><p>And the contact medium to link identified by a <i>LinkCommand</i>, that can represent an existing <i>EmailAddress</i> or <i>PhoneNumber</i> previously registered in the system</p><p>Each communication preference context is represented by a CommunicationPreference resource, which can hold one or more contact mediums:</p><ul><li>Direct communication: Can hold one email address <b>or</b> one phone number</li><li>Written correspondence: Can hold one email address <b>or</b> one phone number</li><li>Notification of updates: Can hold one email address <b>and</b> one phone number</li></ul><p>If the communication preference context to use in the operation has already linked another contact medium, the old one will be unlinked automatically.</p><p>In case the LinkCommand has an empty ID, we unlink any existing contact medium from the requested context.</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CUSTOMERS_COMMUNICATIONPREFERENCES_LINK</p>",
        "operationId": "link",
        "parameters": [
          {
            "description": "Reference Number of the Customer owning the communication preferences",
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of the communication preference, matching the full ID of the contact context enum",
            "in": "path",
            "name": "communicationPreferenceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LinkCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommunicationPreferenceResource"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Links a contact medium to a communication preference context",
        "tags": [
          "Communication Preferences"
        ]
      }
    },
    "/groupClient/customers/{customerId}/customer-info": {
      "get": {
        "description": "A customer info represents information about a customer.  This information includes:<UL><LI>First and last names</LI><LI>Place of Birth</LI><LI>Nationality</LI></UL><P>The Customer's most up to date, correspondance address is included with it. If they have no address the <code>address</code> field will be null.  If it is an Australian Address additional fields are included under <code>extraAustralianFields</code><P>A customer can have cases associated with them<P>Gets specific Customer Info as specified by the <CODE>customerInfoId</CODE></P><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CUSTOMERS_CUSTOMERINFO</p>",
        "operationId": "getSingle_8",
        "parameters": [
          {
            "description": "Reference Number of the Customer for which Occupations are to be returned",
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerInfo"
                }
              }
            },
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Get specific Customer Info",
        "tags": [
          "CustomerInfo"
        ]
      }
    },
    "/groupClient/customers/{customerId}/customer-info/edit": {
      "post": {
        "description": "A customer info represents information about a customer.  This information includes:<UL><LI>First and last names</LI><LI>Place of Birth</LI><LI>Nationality</LI></UL><P>The Customer's most up to date, correspondance address is included with it. If they have no address the <code>address</code> field will be null.  If it is an Australian Address additional fields are included under <code>extraAustralianFields</code><P>A customer can have cases associated with them<P><B>Note</B>: In an edit, a firstName or lastName is never allowed to be set to an empty string or null. Similarly, no enum is allowed to be set to null.</P><P><B>Further note</B>: when an Customer Info Resource is updated via this API, a task is created in the back office.  This task can be configured via the application category <code>CustomerDataUpdatedNotification</code>and the properties <code>TaskTypeName</code> and <code>UpdateCustomerDesc</code></P><P>It is also possible to set the default verification status for the change via the application category<code>CustomerVerification</code> and property <code>CustomerVerificationStatus</code></P><P>If Address Country is Australia then <code>extraAustralianFields</code> requires to be available in the payload</P><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CUSTOMERS_CUSTOMERINFO_EDIT</p>",
        "operationId": "edit_1",
        "parameters": [
          {
            "description": "The client sends the previously returned ETag value in the If-Match header to indicate the version of the Resource it wishes to update<P>If this is not the most up to date version, the server will return a 412 error.",
            "in": "header",
            "name": "If-Match",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Reference Number of the Customer for which Occupations are to be returned",
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditCustomerInfoCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerInfo"
                }
              }
            },
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Edits customer info",
        "tags": [
          "CustomerInfo"
        ]
      }
    },
    "/groupClient/customers/{customerId}/customer-occupations": {
      "get": {
        "description": "<p>Returns the list of Occupations at Customer level for the specified customer which are applicable to the <b>Employer</b> represented by the User.</p><ul><li>An Occupation represents a Customer's employment with one particular Employer. A Customer can have multiple Occupations, across different Employers</li><li>Occupations can exist at Customer or Claim level. This endpoint is specific to Customer.</li><li>Will perform an Access Check to ensure that the Customer is related to the user's Group Client</li><li>Endpoint returns the Occupation(s) in descending order by Date of Hire</li> <li>Will only return Occupations where the Employer for the Occupation matches the user's Group Client</li> <li>Where a valid request is received, but the Customer has no Occupations for the Group Client Employer, empty list will be returned.</li> </ul><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CUSTOMERS_CUSTOMEROCCUPATIONS</p>",
        "operationId": "query_5",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Reference Number of the Customer for which Occupations are to be returned",
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerOccupations"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Retrieves customer occupations",
        "tags": [
          "Customer Occupation"
        ]
      }
    },
    "/groupClient/customers/{customerId}/customer-occupations/{customerOccupationId}": {
      "get": {
        "description": "<p>Returns the Occupation at Customer level for the specified customer and Occupation.</p><ul><li>An Occupation represents a Customer's employment with one particular Employer. A Customer can have multiple Occupations, across different Employers</li><li>Occupations can exist at Customer or Claim level. This endpoint is specific to Customer.</li><li>Will perform an Access Check to ensure that the Customer is related to the user's Group Client</li><li>Will only return Occupation if the Employer for the Occupation matches the user's Group Client.</li><li>Will return an error if the Occupation is for a different Customer to that specified as a parameter.</li></ul><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CUSTOMERS_CUSTOMEROCCUPATIONS_GETSINGLE</p>",
        "operationId": "getSingle_9",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Reference Number of the Customer for which Occupations are to be returned",
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of the Occupation which is to be read",
            "in": "path",
            "name": "customerOccupationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerOccupation"
                }
              }
            },
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Get specific Customer Occupation",
        "tags": [
          "Customer Occupation"
        ]
      }
    },
    "/groupClient/customers/{customerId}/customer-occupations/{customerOccupationId}/absence-employment": {
      "get": {
        "description": "<p>Returns the Absence Employment Data at Customer level for the specified customer and Occupation.</p><ul><li>Absence Employment extends the information for an Occupation with employment related data relevant to Absences.</li><li>Occupations can exist at Customer or Claim level. This endpoint is specific to Customer.</li><li>Will perform an Access Check to ensure that the Customer is related to the user's Group Client.</li><li>Will only return data if the Employer for the Occupation matches the user's Group Client</li><li>Will return an error if the Employer for the Occupation does not match the user's Group Client</li><li>Will return an error if the Occupation is not found for the Customer Party.</li><li>If no Absence Employment Data has been added for the Occupation thus far, an empty response with status code 404 will be returned.</li><li>If Occupation Qualifiers have been specified, these will be returned in occupationQualifiers list for reference only</li></ul><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CUSTOMERS_CUSTOMEROCCUPATIONS_ABSENCEEMPLOYMENT</p>",
        "operationId": "getSingle_3",
        "parameters": [
          {
            "description": "The id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Reference Number of the Customer for which Occupations are to be read",
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of the Occupation which is to be read",
            "in": "path",
            "name": "customerOccupationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AbsenceEmploymentResource"
                }
              }
            },
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Retrieves the Absence Employment data for a Customer Occupation",
        "tags": [
          "Absence Employment"
        ]
      },
      "post": {
        "description": "<p>Add Absence Employment Data provided in the request payload to an Occupation at Customer level for the specified Customer Occupation.</p><ul><li>Absence Employment extends the information for an Occupation with employment related data relevant to Absences.</li><li>Occupations can exist at Customer or Claim level. This endpoint is specific to Customer.</li><li>Will perform an Access Check to ensure that the Customer is related to the user's Group Client.</li><li>If an Absence Employment does not exist on the Occupation, it will be created on the Occupation based on the request payload.</li><li>If an Absence Employment already exists on the Occupation, then a 403 HTTP response will be returned, along with the message \"Absence employment data already exist on this Occupation.\"</li><li>Will return an error if the Occupation is for a different Customer to that specified as a parameter</li><li>If a Manager has been specified in the payload, the Manager must have a current Occupation for the same Employer as the Employer on the Customer Occupation record.</li></ul><p>The permission key for this endpoint is:URL_POST_GROUPCLIENT_CUSTOMERS_CUSTOMEROCCUPATIONS_ABSENCEEMPLOYMENT_ADD</p>",
        "operationId": "create",
        "parameters": [
          {
            "description": "The id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Reference Number of the Customer for which Occupations are to be read",
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of the Occupation which is to be read",
            "in": "path",
            "name": "customerOccupationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAbsenceEmploymentCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AbsenceEmploymentResource"
                }
              }
            },
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Create Absence Employment record for a Customer Occupation",
        "tags": [
          "Absence Employment"
        ]
      }
    },
    "/groupClient/customers/{customerId}/customer-occupations/{customerOccupationId}/absence-employment/edit": {
      "post": {
        "description": "<p>Edit Absence Employment record on an Occupation at Customer level for the specified record with the data provided in the request payload.</p><ul><li>Absence Employment extends the information for an Occupation with employment related data relevant to Absences.</li><li>Occupations can exist at Customer or Claim level. This endpoint is specific to Customer.</li><li>Will perform an Access Check to ensure that the Customer is related to the user's Group Client.</li><li>Edits the Absence Employment record saved on the specified Customer Occupation based on the contents of the request payload.</li><li>Will return an error if the Employer for the Occupation does not match the user's Group Client</li><li>Will return an error if the Occupation is for a different Customer to that specified as a parameter</li><li>Will return an error if the Organisations of the mananger and the groupclient do not match</li></ul><p>The permission key for this endpoint is:URL_POST_GROUPCLIENT_CUSTOMERS_CUSTOMEROCCUPATIONS_ABSENCEEMPLOYMENT_EDIT</p>",
        "operationId": "edit",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Reference Number of the Customer for which Occupations are to be read",
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of the Occupation which is to be read",
            "in": "path",
            "name": "customerOccupationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The client sends the previously returned ETag value in the If-Match header to indicate the version of the Resource it wishes to update<P>If this is not the most up to date version, the server will return a 412 error.",
            "in": "header",
            "name": "If-Match",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditAbsenceEmploymentCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AbsenceEmploymentResource"
                }
              }
            },
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Precondition Failed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Edit Absence Employment record for a Customer Occupation",
        "tags": [
          "Absence Employment"
        ]
      }
    },
    "/groupClient/customers/{customerId}/customer-occupations/{customerOccupationId}/contractual-earnings": {
      "get": {
        "description": "Returns the Contractual Earnings record(s) at Customer level for the specified Customer and Occupation.<ul><li>Contractual Earnings are the Earnings for a specified period. A Customer can have multiple Earnings as long as effective dates do not overlap.</li><li>Earnings are attached to Occupations, and can exist at Customer or Claim level. This endpoint is specific to Earnings on Customer Occupations.</li><li>Will perform an Access Check to ensure that the Customer is related to the user's Group Client</li> <li>For Weekly and Bi-Weekly frequencies, TotalAmountOverride determines whether earnings were specified using Amount (true) or StandardHours and StandardHourlyRate.</li> <li>The Contractual Earnings will be returned ordered by 'From Date' descending</li> <li>Will only return Contractual Earnings for the Occupation. Actual recorded earnings, or earnings for custom frequencies, will not be returned.</li> <li>Will only return Contractual Earnings if the Employer for the Occupation matches the user's Group Client</li>     <li>Will return an error if the Occupation is for a different Customer to that specified as a parameter</li></ul><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CUSTOMERS_CUSTOMEROCCUPATIONS_CONTRACTUALEARNINGS</p>",
        "operationId": "query_6",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Reference Number of the Customer for which Contractual Earnings are to be returned",
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of the Occupation which is to be read",
            "in": "path",
            "name": "customerOccupationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractualEarningsList"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Returns the Contractual Earnings record(s) at Customer level for the specified Customer and Occupation.",
        "tags": [
          "Contractual Earnings"
        ]
      },
      "post": {
        "description": "<p>Create new Contractual Earnings record on an Occupation at Customer level for the specified customer with the data provided in the request payload</p><ul><li>Contractual Earnings are the Earnings for a specified period. A Customer can have multiple Earnings as long as effective dates do not overlap.</li><li>Earnings are attached to Occupations, and can exist at Customer or Claim level. This endpoint is specific to Earnings on Customer Occupations.</li><li>Will perform an Access Check to ensure that the Customer is related to the user's Group Client</li><li>This version of the endpoint does not support Class Extensions; or use of Weekly and Bi-weekly frequencies</li><li>Add a new Contractual Earnings record on the specified Customer Occupation based on the contents of the request payload</li><li>The system will verify that the Effective From Date and Effective To Date are valid, and that they do not overlap with any existing Earnings record for the same Customers Occupations</li><li>The endpoint sets system attribute 'Verified' to true for all successful saves</li><li>Will only support add for Contractual Earnings on a Customer Occupation. An attempt to add Actual recorded earnings, or earnings for custom frequencies, will result in an error.</li><li>Will return an error if the Employer for the Occupation does not match the user's Group Client</li><li>Will return an error if the Occupation is for a different Customer to that specified as a parameter</li><li>By default, the earnings total is specified in the Amount attribute. For Weekly and Bi-weekly frequencies, depending on the value of TotalAmountOverride, earnings are specified using Amount (true) or StandardHours and StandardHourlyRate.</li></ul><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CUSTOMERS_CUSTOMEROCCUPATIONS_CONTRACTUALEARNINGS_ADD</p>",
        "operationId": "create_1",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Reference Number of the Customer for which Contractual Earnings are to be returned",
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of the Occupation which is to be read",
            "in": "path",
            "name": "customerOccupationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateContractualEarningsCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractualEarnings"
                }
              }
            },
            "description": "Created",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Add a Contractual Earnings record for a Customer Occupation",
        "tags": [
          "Contractual Earnings"
        ]
      }
    },
    "/groupClient/customers/{customerId}/customer-occupations/{customerOccupationId}/contractual-earnings/{contractualEarningsId}": {
      "get": {
        "description": "<p>Returns a Contractual Earnings record at Customer level for the specified Earnings identifier</p><ul><li>Contractual Earnings are the Earnings for a specified period. A Customer can have multiple Earnings as long as effective dates do not overlap.</li><li>Earnings are attached to Occupations, and can exist at Customer or Claim level. This endpoint is specific to Earnings on Customer Occupations.</li><li>Will perform an Access Check to ensure that the Customer is related to the user's Group Client</li><li>For Weekly and Bi-Weekly frequencies, TotalAmountOverride determines whether earnings were specified using Amount (true) or StandardHours and StandardHourlyRate.</li><li>Will only return Contractual Earnings. Will return an error if an Actual Earnings record, or record for a custom frequency, is requested.</li><li>Will only return Contractual Earnings if the Employer for the Occupation matches the user's Group Client</li><li>Will validate that the requested Earnings are for the specified Occupation and Customer</li></ul><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CUSTOMERS_CUSTOMEROCCUPATIONS_CONTRACTUALEARNINGS_GETSINGLE</p>",
        "operationId": "getSingle_10",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Reference Number of the Customer for which Contractual Earnings are to be returned",
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of the Occupation which is to be read",
            "in": "path",
            "name": "customerOccupationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of the Contractual Earnings which are to be read",
            "in": "path",
            "name": "contractualEarningsId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractualEarnings"
                }
              }
            },
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Get a specific Contractual Earnings Record",
        "tags": [
          "Contractual Earnings"
        ]
      }
    },
    "/groupClient/customers/{customerId}/customer-occupations/{customerOccupationId}/contractual-earnings/{contractualEarningsId}/edit": {
      "post": {
        "description": "<p>Update existing Contractual Earnings record on an Occupation at Customer level for the specified record with the data provided in the request payload.</p><ul><li>Contractual Earnings are the Earnings for a specified period. A Customer can have multiple Earnings as long as effective dates do not overlap.</li><li>Earnings are attached to Occupations, and can exist at Customer or Claim level. This endpoint is specific to Earnings on Customer Occupations.</li><li>Will perform an Access Check to ensure that the Customer is related to the user's Group Client</li><li>This version of the endpoint does not support Class Extensions; change of Frequency; or use of Weekly and Bi-weekly frequencies.</li><li>Updates the Contractual Earnings record saved on the specified Customer Occupation based on the contents of the request payload if the updated Earnings passes validation.</li><li>The endpoint sets system attribute 'Verified' to true for all successful saves</li><li>Will only support edits for Contractual Earnings on a Customer Occupation. Edits to Actual recorded earnings, or earnings for custom frequencies, will not be supported.</li><li>Will return an error if the Employer for the Occupation does not match the user's Group Client</li><li>Will return an error if the Occupation is for a different Customer to that specified as a parameter</li><li>By default, the earnings total is specified in the Amount attribute. For Weekly and Bi-weekly frequencies, depending on the value of TotalAmountOverride, earnings are specified using Amount (true) or StandardHours and StandardHourlyRate.</li></ul><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CUSTOMERS_CUSTOMEROCCUPATIONS_CONTRACTUALEARNINGS_EDIT</p>",
        "operationId": "edit_3",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Reference Number of the Customer for which Occupations are to be updated",
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of the Occupation which is to be updated",
            "in": "path",
            "name": "customerOccupationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of the Contractual Earnings which is to be updated",
            "in": "path",
            "name": "contractualEarningsId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The client sends the previously returned ETag value in the If-Match header to indicate the version of the Resource it wishes to update<P>If this is not the most up to date version, the server will return a 412 error.",
            "in": "header",
            "name": "If-Match",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditContractualEarningsCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractualEarnings"
                }
              }
            },
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Precondition Failed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Edit a Contractual Earnings record for a Customer Occupation",
        "tags": [
          "Contractual Earnings"
        ]
      }
    },
    "/groupClient/customers/{customerId}/customer-occupations/{customerOccupationId}/edit": {
      "post": {
        "description": "<p>Update an existing Customer level Occupation for the customer with the data provided in the request payload.</p><ul><li>An Occupation represents a Customer's employment with one particular Employer. A Customer can have multiple Occupations, across different Employers</li><li>Occupations can exist at Customer or Claim level. This endpoint is specific to Customer.</li><li>Will perform an Access Check to ensure that the Customer is related to the user's Group Client</li><li>Updates the saved Occupation based on the contents of the request payload if the updated Occupation passes validation.</li><li>The endpoint sets system attribute 'Verified' to true for all successful saves</li><li>Edits to daysWorkedPerWeek will only be applied if overrideDaysWorkedPerWeek is true and Occupation does not already have a Work Pattern defined</li><li>Will return an error if the Employer for the Occupation does not match the user's Group Client</li><li>Will return an error if the Occupation is for a different Customer to that specified as a parameter</li></ul><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CUSTOMERS_CUSTOMEROCCUPATIONS_EDIT</p>",
        "operationId": "edit_2",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Reference Number of the Customer for which Occupations are to be updated",
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of the Occupation which is to be updated",
            "in": "path",
            "name": "customerOccupationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The client sends the previously returned ETag value in the If-Match header to indicate the version of the Resource it wishes to update<P>If this is not the most up to date version, the server will return a 412 error.",
            "in": "header",
            "name": "If-Match",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditCustomerOccupationCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerOccupation"
                }
              }
            },
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Precondition Failed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Edit a customer occupation",
        "tags": [
          "Customer Occupation"
        ]
      }
    },
    "/groupClient/customers/{customerId}/customer-occupations/{customerOccupationId}/regular-weekly-work-pattern": {
      "get": {
        "description": "Returns the Regular Weekly Work Pattern at Customer level for the specified customer and Occupation.<ul><li>The Work Pattern calendar enables you to record the days a party works and rests for a particular occupation over a period of time.</li><li>This API is for Regular Week Based work patterns i.e. those with a type of Fixed, 2 weeks Rotating, 3 weeks Rotating or 4 weeks Rotating.</li></ul><ul><li>This API returns the week-based work pattern, if any, linked to the Occupation identified by the occupationId provided in the URL, relating to the Customer identified by the customerId provided in the URL.</li><li>Occupations can exist at Customer or Claim level. This endpoint is specific to Customer.</li><li>It is expected that prior to calling this API, the GET /groupClient/customers/{customerId}/customer-occupations endpoint will have been used to retrieve information on the occupation, including the workPatternBasis attribute which indicates the type of work pattern in use on the Occupation (Unknown, Week Based, Other). When workPatternBasis is Week Based, this API can then be used to retrieve the work pattern.</li><li>If this API is used to try to retrieve a work pattern from a non-existent occupation, or from an Occupation that does not have a work pattern defined, or that has a work pattern that is not Week Based, an error response will be returned.</li><li>Will perform an Access Check to ensure that the Customer is related to the user's Group Client</li><li>Will only return data if the Employer for the Occupation matches the user's Group Client</li><li>Will return an error if the Occupation is for a different Customer to that specified as a parameter</li></ul><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CUSTOMERS_CUSTOMEROCCUPATIONS_REGULARWEEKLYWORKPATTERN</p>",
        "operationId": "getSingle_11",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Reference Number of the Customer for which Contractual Earnings are to be returned",
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of the Occupation which is to be read",
            "in": "path",
            "name": "customerOccupationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerOccupationWeekBasedWorkPattern"
                }
              }
            },
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Retrieves the Regular Weekly Work Pattern for a Customer Occupation",
        "tags": [
          "Customer Occupation Regular Weekly Work Pattern"
        ]
      },
      "post": {
        "description": "Create a Regular Weekly Work Pattern on an Occupation at Customer level for the specified Customer Occupation.<ul><li>The Work Pattern calendar enables you to record the days a party works and rests for a particular occupation over a period of time.</li><li>This API is for Regular Week Based work patterns i.e. those with a type of Fixed, 2 weeks Rotating, 3 weeks Rotating or 4 weeks Rotating.</li></ul><ul><li>Occupations can exist at Customer or Claim level. This endpoint is specific to Customer.</li><li>If Work Pattern already exists on the Occupation, it will be replaced with the request payload. Otherwise, the Work Pattern record will be created on the Occupation based on the request payload.</li><li>If this API is used to try to add a work pattern for a non-existent occupation, or for a work pattern that is not Week Based, an error response will be returned.</li><li>When adding a work pattern, workPatternType and workPatternDays arrays must be provided.</li><li>If Work Pattern already exists on the Occupation, an error response will be returned.</li><li>Will perform an Access Check to ensure that the Customer is related to the user's Group Client</li><li>Will return an error if the Occupation is for a different Customer to that specified as a parameter</li></ul><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CUSTOMERS_CUSTOMEROCCUPATIONS_REGULARWEEKLYWORKPATTERN_ADD</p>",
        "operationId": "create_2",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Reference Number of the Customer for which Contractual Earnings are to be returned",
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of the Occupation which is to be read",
            "in": "path",
            "name": "customerOccupationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWeekBasedWorkPatternCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerOccupationWeekBasedWorkPattern"
                }
              }
            },
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Create a Regular Weekly Work Pattern for a Customer Occupation",
        "tags": [
          "Customer Occupation Regular Weekly Work Pattern"
        ]
      }
    },
    "/groupClient/customers/{customerId}/customer-occupations/{customerOccupationId}/regular-weekly-work-pattern/edit": {
      "post": {
        "description": "Edit an existing Regular Weekly Work Pattern on an Occupation at Customer level for the specified Customer Occupation.<ul><li>The Work Pattern calendar enables you to record the days a party works and rests for a particular occupation over a period of time.</li><li>This API is for Regular Week Based work patterns i.e. those with a type of Fixed, 2 weeks Rotating, 3 weeks Rotating or 4 weeks Rotating.</li></ul><ul><li>Occupations can exist at Customer or Claim level. This endpoint is specific to Customer.</li><li>If Work Pattern already exists on the Occupation, it will be replaced with the request payload.</li><li>If this API is used to try to edit a work pattern for a non-existent occupation, or for a work pattern that is not Week Based, an error response will be returned.</li><li>If Work Pattern does not exist on the Occupation, an error response will be returned.</li><li>Will perform an Access Check to ensure that the Customer is related to the user's Group Client</li><li>Will return an error if the Occupation is for a different Customer to that specified as a parameter</li></ul><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CUSTOMERS_CUSTOMEROCCUPATIONS_REGULARWEEKLYWORKPATTERN_EDIT</p>",
        "operationId": "edit_4",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Reference Number of the Customer for which Occupations are to be updated",
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of the Occupation which is to be updated",
            "in": "path",
            "name": "customerOccupationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The client sends the previously returned ETag value in the If-Match header to indicate the version of the Resource it wishes to update<P>If this is not the most up to date version, the server will return a 412 error.",
            "in": "header",
            "name": "If-Match",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditWeekBasedWorkPatternCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerOccupationWeekBasedWorkPattern"
                }
              }
            },
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Precondition Failed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Edit an existing Regular Weekly Work Pattern for a Customer Occupation",
        "tags": [
          "Customer Occupation Regular Weekly Work Pattern"
        ]
      }
    },
    "/groupClient/customers/{customerId}/email-addresses": {
      "get": {
        "description": "<P>Provides the ability of querying against the email addresses of a customer</P><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CUSTOMERS_EMAILADDRESSES</p>",
        "operationId": "query_7",
        "parameters": [
          {
            "description": "Reference Number of the Customer owning the email addresses",
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Emails"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Provides the ability of querying against the email addresses of a customer",
        "tags": [
          "Email Address"
        ]
      },
      "post": {
        "description": "<P>Allows to create a new email linked to the given customer</P><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CUSTOMERS_EMAILADDRESSES_ADD</p>",
        "operationId": "create_3",
        "parameters": [
          {
            "description": "Reference Number of the Customer owning the email addresses",
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEmailAddressCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailAddressResource"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Allows to create a new email linked to the given customer",
        "tags": [
          "Email Address"
        ]
      }
    },
    "/groupClient/customers/{customerId}/email-addresses/{emailAddressId}": {
      "get": {
        "description": "Email for a party. For example: <I>myemail@somemail.com</I>\n<P>Allows to get a single email address given it's ID</P><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CUSTOMERS_EMAILADDRESSES_GETSINGLE</p>",
        "operationId": "getSingle_12",
        "parameters": [
          {
            "description": "Reference Number of the Customer owning the email addresses",
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The id of the resource",
            "in": "path",
            "name": "emailAddressId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailAddressResource"
                }
              }
            },
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Allows to get a single email address given it's ID",
        "tags": [
          "Email Address"
        ]
      }
    },
    "/groupClient/customers/{customerId}/email-addresses/{emailAddressId}/edit": {
      "post": {
        "description": "<P>Allows to edit email address given it's ID</P><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CUSTOMERS_EMAILADDRESSES_EDIT</p>",
        "operationId": "edit_5",
        "parameters": [
          {
            "description": "Reference Number of the Customer owning the email addresses",
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The id of the resource",
            "in": "path",
            "name": "emailAddressId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The client sends the previously returned ETag value in the If-Match header to indicate the version of the Resource it wishes to update<P>If this is not the most up to date version, the server will return a 412 error.",
            "in": "path",
            "name": "If-Match",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditEmailAddressCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailAddressResource"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Allows to edit an email address given it's ID",
        "tags": [
          "Email Address"
        ]
      }
    },
    "/groupClient/customers/{customerId}/email-addresses/{emailAddressId}/remove": {
      "post": {
        "description": "<P>Allows to remove an email address given it's ID</P><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CUSTOMERS_EMAILADDRESSES_REMOVE</p>",
        "operationId": "remove",
        "parameters": [
          {
            "description": "Reference Number of the Customer owning the email addresses",
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The id of the resource",
            "in": "path",
            "name": "emailAddressId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Allows to remove an email address given it's ID",
        "tags": [
          "Email Address"
        ]
      }
    },
    "/groupClient/customers/{customerId}/payment-preferences": {
      "get": {
        "description": "A Payment Preferences is a method how the customer receive the payment. The payment preferences outline the party's preferred method of payment, such as check or electronic funds transfer (EFT).Customer can have more than one payment preferences. One of the payment preferences must be marked as default payment type for customer. If the payment method is cheque then the Name to print on the cheque is not empty and similarly if the payment method is ETF then account details will not be empty.<p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CUSTOMERS_PAYMENTPREFS</p>",
        "operationId": "query_16",
        "parameters": [
          {
            "description": "The id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of customer",
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentPreferenceResources"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "A Payment Preferences is a method how the customer receive the payment.",
        "tags": [
          "Payment Preference"
        ]
      },
      "post": {
        "description": "A Payment Preferences is a method how the customer receive the payment. The payment preferences outline the party's preferred method of payment, such as check or electronic funds transfer (EFT). Allows to create a new payment preference for the given customer.<ul> <li> <b>Payment Method:</b> User needs to provide the method of payment for the party, such as check or Electronic Funds Transfer (EFT). If EFT is provided, then bank account details such as Bank Code, Bank Account, Account Name, Account Type, and Routing Number fields should be provided. If check payment method is provided, then Name to Print on Check field is required. Any one of the (Account Detail or Check) details should be provided.</li><li> <b>Address overriding:</b> If the user provide <b>overridePostalAddress=true</b> then address detail must be provided along with the other detail. if <b>overridePostalAddress=false</b>, then party's current active correspondence address will be set.</li></ul> <p>The permission key to access endpoint is - <b>URL_POST_GROUPCLIENT_CUSTOMERS_PAYMENTPREF_ADD</b>.</p> <p>The secure action required to add is - <b>PY_EDIT_PAYMENT_PREFERENCE</b>. If not assigned then it will return HTTP 403 response.",
        "operationId": "create_6",
        "parameters": [
          {
            "description": "The id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of customer",
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePaymentPreferenceCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentPreferenceResource"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Allows to create a new payment preference for the given customer.",
        "tags": [
          "Payment Preference"
        ]
      }
    },
    "/groupClient/customers/{customerId}/payment-preferences/{paymentPreferenceId}": {
      "get": {
        "description": "A Payment Preferences is a method how the customer receive the payment. The payment preferences outline the party's preferred method of payment, such as check or electronic funds transfer (EFT).<p>The permission key for this endpoint is: URL_GROUPCLIENT_CUSTOMERS_PAYMENTPREF_DTL</p>",
        "operationId": "getSingle_23",
        "parameters": [
          {
            "description": "The id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of customer",
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Payment preference id",
            "in": "path",
            "name": "paymentPreferenceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentPreferenceResource"
                }
              }
            },
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Allows to view the detail of a specific payment preference of the customer.",
        "tags": [
          "Payment Preference"
        ]
      }
    },
    "/groupClient/customers/{customerId}/payment-preferences/{paymentPreferenceId}/edit": {
      "post": {
        "description": "A Payment Preferences is a method how the customer receive the payment. The payment preferences outline the party's preferred method of payment, such as check or electronic funds transfer (EFT).Allows to update the specific payment preferences of the customer. <p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CUSTOMERS_PAYMENTPREF_UPDATE</p>",
        "operationId": "edit_13",
        "parameters": [
          {
            "description": "The id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of customer",
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Payment preference id",
            "in": "path",
            "name": "paymentPreferenceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The client sends the previously returned ETag value in the If-Match header to indicate the version of the Resource it wishes to update<P>If this is not the most up to date version, the server will return a 412 error.",
            "in": "header",
            "name": "If-Match",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditPaymentPreferenceCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentPreferenceResource"
                }
              }
            },
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Precondition Failed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Allows to update the specific payment preferences of the customer.",
        "tags": [
          "Payment Preference"
        ]
      }
    },
    "/groupClient/customers/{customerId}/paymentPreferences": {
      "get": {
        "deprecated": true,
        "description": "<p>Note: this endpoint is deprecated, please use <ul><li>​/groupClient​/customers​/{customerId}​/payment-preferences​/{paymentPreferenceId}​</li><li>​/groupClient​/customers​/{customerId}​/payment-preferences​</li></ul> instead</p>Returns the list of payment preference objects <p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CUSTOMERS_PAYMENTPREFS</p>",
        "operationId": "getPaymentPreferences",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer id",
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PaymentPreferenceResponse"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Request successful. The details of the payment preferences to the customer will be returned"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Lists of  payment preferences for the group client user",
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/customers/{customerId}/paymentPreferences/addPaymentPreference": {
      "post": {
        "deprecated": true,
        "description": "<p>Note: this endpoint is deprecated, please use <ul><li>​/groupClient​/customers​/{customerId}​/payment-preferences​</li></ul> instead</p> Add payment preference details for a party.<p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CUSTOMERS_PAYMENTPREF_ADD</p>",
        "operationId": "addPaymentPreference",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Customer number",
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPaymentPreference"
              }
            }
          },
          "description": "Payment preference details to be added.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentPreferenceResponse"
                }
              }
            },
            "description": "Returns the payment preference details added related to the party."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Add payment preference details for a party",
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/customers/{customerId}/paymentPreferences/{paymentPreferenceId}/updatePaymentPreference": {
      "post": {
        "deprecated": true,
        "description": "<p>Note: this endpoint is deprecated, please use <ul><li>​/groupClient​/customers​/{customerId}​/payment-preferences​/{paymentPreferenceId}​/edit</li></ul> instead</p>Updates a payment preference detail for a party.<p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CUSTOMERS_PAYMENTPREF_UPDATE</p>",
        "operationId": "updatePaymentPreference",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer id of a customer associated with the group client user",
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "payment preference id of a customer associated with the group client user",
            "in": "path",
            "name": "paymentPreferenceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPaymentPreference"
              }
            }
          },
          "description": "Payment preference details to be updated.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentPreferenceResponse"
                }
              }
            },
            "description": "Returns the payment preference details updated related for a party."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Updates a payment preference details for a party.",
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/customers/{customerId}/phone-numbers": {
      "get": {
        "description": "<p>Provides the ability of querying against the phone numbers of a customer</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CUSTOMERS_PHONENUMBERS</p>",
        "operationId": "query_12",
        "parameters": [
          {
            "description": "Reference Number of the Customer owning the phone numbers",
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhoneNumbers"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Provides the ability of querying against the phone numbers of a customer",
        "tags": [
          "Phone Number"
        ]
      },
      "post": {
        "description": "<p>Allows to create a new phone number linked to the given customer</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CUSTOMERS_PHONENUMBERS_ADD</p>",
        "operationId": "create_4",
        "parameters": [
          {
            "description": "Reference Number of the Customer owning the phone numbers",
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePhoneNumberCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhoneNumberResource"
                }
              }
            },
            "description": "Created"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Allows to create a new phone number linked to the given customer",
        "tags": [
          "Phone Number"
        ]
      }
    },
    "/groupClient/customers/{customerId}/phone-numbers/{phoneNumberId}": {
      "get": {
        "description": "A party's phone number\n<p>Allows to get a single phone number given it's ID</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CUSTOMERS_PHONENUMBERS_GETSINGLE</p>",
        "operationId": "getSingle_17",
        "parameters": [
          {
            "description": "Reference Number of the Customer owning the phone numbers",
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The id of the resource",
            "in": "path",
            "name": "phoneNumberId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhoneNumberResource"
                }
              }
            },
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Allows to get a single phone number given it's ID",
        "tags": [
          "Phone Number"
        ]
      }
    },
    "/groupClient/customers/{customerId}/phone-numbers/{phoneNumberId}/edit": {
      "post": {
        "description": "<p>Allows to edit a phone number given it's ID</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CUSTOMERS_PHONENUMBERS_EDIT</p>",
        "operationId": "edit_7",
        "parameters": [
          {
            "description": "Reference Number of the Customer owning the phone numbers",
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The id of the resource",
            "in": "path",
            "name": "phoneNumberId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The client sends the previously returned ETag value in the If-Match header to indicate the version of the Resource it wishes to update<P>If this is not the most up to date version, the server will return a 412 error.",
            "in": "path",
            "name": "If-Match",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditPhoneNumberCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhoneNumberResource"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Allows to edit a phone number given it's ID",
        "tags": [
          "Phone Number"
        ]
      }
    },
    "/groupClient/customers/{customerId}/phone-numbers/{phoneNumberId}/remove": {
      "post": {
        "description": "<p>Allows to remove a phone number given it's ID</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CUSTOMERS_PHONENUMBERS_REMOVE</p>",
        "operationId": "remove_1",
        "parameters": [
          {
            "description": "Reference Number of the Customer owning the phone numbers",
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The id of the resource",
            "in": "path",
            "name": "phoneNumberId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Allows to remove a phone number given it's ID",
        "tags": [
          "Phone Number"
        ]
      }
    },
    "/groupClient/customers/{customerId}/tax-code-records": {
      "get": {
        "description": "A tax code record represents a tax information entry for an individual customer. The tax information contains a tax type and a tax code. There can be more than one tax records for each customer.<ul><li>Allows to get a single tax code record (tax type details) by its Id.</li><li>The group client must have access to this cusotmer party.</li><li>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CUSTOMERS_TAXCODERECORDS</li></ul>",
        "operationId": "query_17",
        "parameters": [
          {
            "description": "The id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Reference Number of the customer for which tax code records are to be returned",
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxCodeRecordResources"
                }
              }
            },
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Returns all tax code records",
        "tags": [
          "Tax Code Record"
        ]
      },
      "post": {
        "description": "A tax code record represents a tax information entry for an individual customer. The tax information contains a tax type and a tax code. There can be more than one tax records for each customer.<ul>\n<li>Allows to create a new tax code record for the logged on customer. Group client must have access to this customer party.</li><li>CreateTaxCodeRecordCommand contains basic tax record data.</li><li>It can be extended using regionTaxCodeDetails attribute - it can contain CreateAUTaxCodeDetailsCommand or CreateNZTaxCodeDetailsCommand.</li><li>If regionTaxCodeDetails attribute is in use, a region specific (AU or NZ) tax record will be created.</li><li>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CUSTOMERS_TAXCODERECORDS_ADD</li></ul>",
        "operationId": "create_7",
        "parameters": [
          {
            "description": "Reference Number of the Customer owning the tax code records",
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTaxCodeRecordCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxCodeRecord"
                }
              }
            },
            "description": "Created",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Creates a tax code record for the Customer",
        "tags": [
          "Tax Code Record"
        ]
      }
    },
    "/groupClient/customers/{customerId}/tax-code-records/{taxCodeRecordId}": {
      "get": {
        "description": "A tax code record represents a tax information entry for an individual customer. The tax information contains a tax type and a tax code. There can be more than one tax records for each customer.<ul><li>Allows to get a single tax code record (tax type details) by its Id.</li><li>The tax code record belong to the given customer party (selected by the customer Id) and the group client must have access to this customer party.</li><li>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CUSTOMERS_TAXCODERECORDS_GETSINGLE</li></ul>",
        "operationId": "getSingle_24",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Reference Number of the customer for which tax code records are to be returned",
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Tax Code Record ID (unique in the system)",
            "in": "path",
            "name": "taxCodeRecordId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxCodeRecord"
                }
              }
            },
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Returns specific tax code record",
        "tags": [
          "Tax Code Record"
        ]
      }
    },
    "/groupClient/customers/{customerId}/tax-code-records/{taxCodeRecordId}/edit": {
      "post": {
        "description": "A tax code record represents a tax information entry for an individual customer. The tax information contains a tax type and a tax code. There can be more than one tax records for each customer.<ul><li>Allows to edit a tax code record selected by its Id.</li><li>The tax code record must belong to the customer party (selected by customerId) and the group client must have access to this customer.</li><li>If the tax record has a region specific extension it cannot be changed to other region.</li><li>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CUSTOMERS_TAXCODERECORDS_EDIT</li></ul>",
        "operationId": "edit_14",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Reference Number of the customer for which tax code records are to be returned",
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Tax Code Record ID (unique in the system)",
            "in": "path",
            "name": "taxCodeRecordId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The client sends the previously returned ETag value in the If-Match header to indicate the version of the Resource it wishes to update<P>If this is not the most up to date version, the server will return a 412 error.",
            "in": "header",
            "name": "If-Match",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditTaxCodeRecordCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxCodeRecord"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Precondition Failed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Edits a tax code record selected by its Id",
        "tags": [
          "Tax Code Record"
        ]
      }
    },
    "/groupClient/customers/{customerId}/tax-code-records/{taxCodeRecordId}/remove": {
      "post": {
        "description": "A tax code record represents a tax information entry for an individual customer. The tax information contains a tax type and a tax code. There can be more than one tax records for each customer.<ul><li>Allows to remove a tax code record selected by its Id.</li><li>The tax code record must be related to the logged on customer or to the represented customer party if representedCustomerId is provided.</li><li>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CUSTOMERS_TAXCODERECORDS_REMOVE</li></ul>",
        "operationId": "remove_2",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Reference Number of the customer for which tax code records are to be returned",
            "in": "path",
            "name": "customerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Tax Code Record ID (unique in the system)",
            "in": "path",
            "name": "taxCodeRecordId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Removes a tax code record selected by its Id",
        "tags": [
          "Tax Code Record"
        ]
      }
    },
    "/groupClient/eforms/{eformType}": {
      "post": {
        "description": "Add an EForm to the GroupClient represented by the current user. If the eformType provided in the API URL does not exist, a new EForm Type will be created.<p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_EFORMS_ADD</p>",
        "operationId": "addEFormEmployeeNotEstablishedForGroupClient",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the Simple Eform Type or Eform Type to create",
            "in": "path",
            "name": "eformType",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/EFormAttribute"
                },
                "type": "array"
              }
            }
          },
          "description": "List of eFormAttributes of the EForm document which will be created",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EForm"
                }
              }
            },
            "description": "EForm added successfully."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Add an EForm to the GroupClient represented by the current user.",
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/endpoint-permissions": {
      "get": {
        "description": "<P>A groupClient user may only be allowed access a sub-selection of deployed endpoints.</P><P>This API provides a list of endpoints the currently logged in Group Client user can access.</P>There are two ways this API can be invoked.<UL>\t<LI><CODE>/groupClient/endpoint-permissions?_filter=accessible</CODE> -- returns a list of all endpoints the current logged in Group Client user can access.</LI> <LI><CODE>/groupClient/endpoint-permissions?name=URL_GET_GROUPCLIENT_CUSTOMERS&name=URL_GET_GROUPCLIENT_CLAIMS&name=URL_GET_GROUPCLIENT_CASES_DOCUMENTS</CODE> -- return if the currently logged in Group Client user can access the specified endpoints.</LI></UL><P><B>Note:</B> The permission key / endpoint identifier follows a general naming convention of the form:<UL> <LI><pre>URL\\_{HTTP_VERB}\\_{PERSONA}\\_{ELEMENTS_IDENTIFYING_RESOURCE}\\_{RESOURCEACTION/GET_IDENTIFIER}</pre></LI></UL>where the combination of these elements should be unique for each endpoint.</P></UL>Some examples:<UL> <LI>URL_GET_GROUPCLIENT_CUSTOMERS</LI> <LI>URL_GET_GROUPCLIENT_CUSTOMERS_EMAILADDRESSES</LI> <LI>URL_GET_GROUPCLIENT_CUSTOMERS_CUSTOMEROCCUPATIONS_CONTRACTUALEARNINGS</LI> <LI>URL_GET_GROUPCLIENT_CUSTOMERS_EMAILADDRESSES_GETSINGLE</LI> <LI>URL_POST_GROUPCLIENT_NOTIFICATIONS_ADD</LI> <LI>URL_POST_GROUPCLIENT_CUSTOMERS_PHONENUMBERS_ADD</LI></UL><P><B>Note:</B> It is not possible to specify both <code>_filter=accessible</code> and specific <code>name</code> values.  This will result in a <code>400</code> error response.</P><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_ENDPOINTPERMISSIONS</p>",
        "operationId": "query_8",
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "query",
            "name": "_filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndpointPermissionResources"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Retrieves permissions the groupClient can access.",
        "tags": [
          "Endpoint Permission"
        ]
      }
    },
    "/groupClient/endpoint-permissions/{endpointPermissionId}": {
      "get": {
        "description": "<P>Allows to get a single endpoint permission given it's ID</P><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_ENDPOINTPERMISSIONS_GETSINGLE</p>\n<P>A groupClient user may only be allowed access a sub-selection of deployed endpoints.</P><P>This API provides a list of endpoints the currently logged in Group Client user can access.</P>There are two ways this API can be invoked.<UL>\t<LI><CODE>/groupClient/endpoint-permissions?_filter=accessible</CODE> -- returns a list of all endpoints the current logged in Group Client user can access.</LI> <LI><CODE>/groupClient/endpoint-permissions?name=URL_GET_GROUPCLIENT_CUSTOMERS&name=URL_GET_GROUPCLIENT_CLAIMS&name=URL_GET_GROUPCLIENT_CASES_DOCUMENTS</CODE> -- return if the currently logged in Group Client user can access the specified endpoints.</LI></UL><P><B>Note:</B> The permission key / endpoint identifier follows a general naming convention of the form:<UL> <LI><pre>URL\\_{HTTP_VERB}\\_{PERSONA}\\_{ELEMENTS_IDENTIFYING_RESOURCE}\\_{RESOURCEACTION/GET_IDENTIFIER}</pre></LI></UL>where the combination of these elements should be unique for each endpoint.</P></UL>Some examples:<UL> <LI>URL_GET_GROUPCLIENT_CUSTOMERS</LI> <LI>URL_GET_GROUPCLIENT_CUSTOMERS_EMAILADDRESSES</LI> <LI>URL_GET_GROUPCLIENT_CUSTOMERS_CUSTOMEROCCUPATIONS_CONTRACTUALEARNINGS</LI> <LI>URL_GET_GROUPCLIENT_CUSTOMERS_EMAILADDRESSES_GETSINGLE</LI> <LI>URL_POST_GROUPCLIENT_NOTIFICATIONS_ADD</LI> <LI>URL_POST_GROUPCLIENT_CUSTOMERS_PHONENUMBERS_ADD</LI></UL><P><B>Note:</B> It is not possible to specify both <code>_filter=accessible</code> and specific <code>name</code> values.  This will result in a <code>400</code> error response.</P>",
        "operationId": "getSingle_13",
        "parameters": [
          {
            "description": "The id of the resource",
            "in": "path",
            "name": "endpointPermissionId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndpointPermissionResource"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Allows to get a single endpoint permission given it's ID",
        "tags": [
          "Endpoint Permission"
        ]
      }
    },
    "/groupClient/group-client-users": {
      "get": {
        "description": "<p>Returns the list of Group Client Users which the Group Client Administrator user administrates.</p><ul><li>A Group Client User is a portal user authorized to act on behalf of the Group Client organization (such as a HR person, a Fund Administrator or a Client Relations operative).</li><li>A Group Client Admin User is a Group Client User with Admin privileges assigned.</li><li>A Group Client Admin User is authorised to manage the Group Client Users configured on the organisation (Note: This includes other Group Client Admin Users.).</li><li>The list of Group Client Users returned contains all Group Client Users configured for the organisation (including the Group Client user accessing the resource).</li><li>The permission key for this endpoint is: URL_GET_GROUPCLIENT_GROUPCLIENTUSERS</li></ul>",
        "operationId": "query_9",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AltGroupClientUserListSchema"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthenticated - Cannot recognise the delegated user id"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorised - User does not have permission to access the resource or the instance data"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Retrieves the list of Group Client Users.",
        "tags": [
          "Group Client User"
        ]
      }
    },
    "/groupClient/group-client-users/{groupClientUserId}": {
      "get": {
        "description": "A portal user authorized to act on behalf of the group client organization (such as a HR person, a Fund Administrator or a Client Relations operative)\n<p>Returns the Group Client user information for the specified Group Client user.</p><ul><li>A Group Client user is a portal user authorised to act on behalf of the group client organization (such as a HR person, a Fund Administrator or a Client Relations operative).</li><li>User can access resources when their <i>Enabled</i> status is True.</li><li>The permission key for this endpoint is: URL_GET_GROUPCLIENT_GROUPCLIENTUSERS_GETSINGLE</li></ul>",
        "operationId": "getSingle_14",
        "parameters": [
          {
            "description": "userId",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The unique identifier for the group client user that is returned",
            "in": "path",
            "name": "groupClientUserId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupClientUser"
                }
              }
            },
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthenticated - Cannot recognise the delegated user id"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorised - User does not have permission to access the resource or the instance data"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Retrieves a Group Client user.",
        "tags": [
          "Group Client User"
        ]
      }
    },
    "/groupClient/group-client-users/{groupClientUserId}/edit": {
      "post": {
        "description": "<p>Update the Group Client Users' access rights as per the detail provided in the request payload.</p><ul><li>Only Enabled Group Client Users are authorised to access APIs.</li><li>The Group Client Admin User can Enable a Group Client Users access.</li><li>The Group Client Admin User can Disable a Group Client Users access.</li><li>Group Client Admin are not authorised to manage themselves, (even though they are Group Client Users, they do not have admin rights over themselves.).</li><li>The permission key for this endpoint is: URL_POST_GROUPCLIENT_GROUPCLIENTUSERS_EDIT</li></ul>",
        "operationId": "edit_6",
        "parameters": [
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The client sends the previously returned ETag value in the If-Match header to indicate the version of the Resource it wishes to update<P>If this is not the most up to date version, the server will return a 412 error.",
            "in": "header",
            "name": "If-Match",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The unique identifier for the group client user that is returned",
            "in": "path",
            "name": "groupClientUserId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditGroupClientUserCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupClientUser"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthenticated - Cannot recognise the delegated user id"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorised - User does not have permission to access the resource or the instance data"
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Precondition Failed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Edit access rights for the Group Client User.",
        "tags": [
          "Group Client User"
        ]
      }
    },
    "/groupClient/notifications": {
      "get": {
        "description": "A notification is used to link a number of cases together that share an event e.g. Pregnancy, Sickness or an Accident. Services can be offered depending on the event and depending on what agreement between Employer and Carrier.<P>Typically in a FINEOS system the use of Notification is quite particular.For example, Notification is used by downstream components such as Absence, so the Absence and Claims can be linked for a particular event.<P>A notification is returned even if it only contains subcases that are not returned themselves (that is, the list of subcases will be empty); from an Absence perspective, sub cases that are takeover and void are not returned.<P>Even though the Notification can link the cases, the actual business process (that arises from the created cases) such as assessment, approval process regarding job protection, accommodation and/or payments happen independently.<P>This end-point contains multiple query parameter which can all be used together or separately as described below. Query parameters are name value pairs, which include the following:<UL><LI><code>customer.id</code></LI> - Used to look for Notifications for a specific customer.<LI><code>caseNumber._startsWith</code></LI> - Used to search for Notification with the caseNumber starting with</UL>A query parameter should be provided, otherwise an Invalid request (i.e. a 400) will be returned.<p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_NOTIFICATIONS</p>If this query receives the query parameters pageSize, pageIndex and sort value e.g. <code>?pageSize=5&pageIndex=6&sort={sortField}</code>,  it will return a paginated response.<P>The <code>pageIndex</code> refers the page number and <code>pageSize</code> refers to the max number of entries a page can return.<P>In the page response the following links will be included:<UL><LI><B>first</B>: a link to the first page</LI><LI><B>prev</B>: a link to the last page</LI><LI><B>next</B>: a link to the next page</LI><LI><B>last</B>: a link to the last page</LI><LI><B>self</B>: a link which indicates the exact request which created the response. <I>This includes, pageSize, pageIndex and sort fields.</I></LI></UL>If there is no prev or next page, <code>null</code> will be returned.<P>This can happen if you are on the first or last page.<P>Similarly, if the query has no matching results, all the links (except self) will be null.<B>Note:</B>A sort parameter must be included",
        "operationId": "query_10",
        "parameters": [
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The customer's id for which the Notifications are sought.",
            "in": "query",
            "name": "customer.id",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The starting characters of the <I>caseNumber</I> of the Notification",
            "in": "query",
            "name": "caseNumber._startsWith",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The starting characters of the <I>adminGroup</I> of the Notification",
            "in": "query",
            "name": "adminGroup._startsWith",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The starting characters of the <I>Customer's firstName</I> of the Notification",
            "in": "query",
            "name": "customer.firstName._startsWith",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The starting characters of the <I>Customer's lastName</I> of the Notification",
            "in": "query",
            "name": "customer.lastName._startsWith",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The starting characters of the Notification Reason",
            "in": "query",
            "name": "notificationReason.name._startsWith",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Executes a specific business filter.  For example: outstanding-information",
            "in": "query",
            "name": "_filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Comma separated list of sort parameters. Ascending by default, for descending preappend with <B>-</B>",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The size of each page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The page index number",
            "in": "query",
            "name": "pageIndex",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Only Notifications created on or after this date will be returned (i.e. `createdDate` less than or equal to).",
            "in": "query",
            "name": "createdDate._le",
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "Only Notifications created on or before this date will be returned (i.e. `createdDate` greater than or equal to).",
            "in": "query",
            "name": "createdDate._ge",
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "Only Notifications where the ExpectedRTWDate is on or after this date will be returned (i.e. ExpectedRTWDate greater than or equal to).",
            "in": "query",
            "name": "expectedRTWDate._le",
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "Only Notifications where the ExpectedRTWDate is on or before this date will be returned (i.e. ExpectedRTWDate less than or equal to).",
            "in": "query",
            "name": "expectedRTWDate._ge",
            "schema": {
              "format": "date",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Notifications"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Queries Notifications the Group Client User has access to",
        "tags": [
          "Notification"
        ]
      }
    },
    "/groupClient/notifications/{notificationId}": {
      "get": {
        "description": "A notification is used to link a number of cases together that share an event e.g. Pregnancy, Sickness or an Accident. Services can be offered depending on the event and depending on what agreement between Employer and Carrier.<P>Typically in a FINEOS system the use of Notification is quite particular.For example, Notification is used by downstream components such as Absence, so the Absence and Claims can be linked for a particular event.<P>A notification is returned even if it only contains subcases that are not returned themselves (that is, the list of subcases will be empty); from an Absence perspective, sub cases that are takeover and void are not returned.<P>Even though the Notification can link the cases, the actual business process (that arises from the created cases) such as assessment, approval process regarding job protection, accommodation and/or payments happen independently.<p>Retrieves a notification as specified by the notificationId.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_NOTIFICATIONS_GETSINGLE</p>",
        "operationId": "getSingle_15",
        "parameters": [
          {
            "description": "An id to uniquely identify the Notification",
            "in": "path",
            "name": "notificationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Notification"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Gets specific notification",
        "tags": [
          "Notification"
        ]
      }
    },
    "/groupClient/permission-groups": {
      "get": {
        "description": "<P>A groupClient user may only be allowed access a subset of deployed endpoints.</P><P>This is governed by <I>permissions</I> that are configured in the back-office application, where each permission controls access to a group of endpoints.<P>Each permission provides <I>binary</I> access to the endpoints it controls; that is, the user can either access the endpoint or not.<P>This API returns the full list of <B>back-office permissions</B> that have been assigned to the current logged-in user. It allows a carrier to develop a portal in which the permission names are hard-coded in the portal UI.</P><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_PERMISSIONGROUPS</p>",
        "operationId": "query_11",
        "parameters": [
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionGroupResources"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Retrieves the list of back-office permissions assigned to the groupClient user.",
        "tags": [
          "Permission Group"
        ]
      }
    },
    "/groupClient/permission-groups/{permissionGroupId}": {
      "get": {
        "description": "<P>A groupClient user may only be allowed access a subset of deployed endpoints.</P><P>This is governed by <I>permissions</I> that are configured in the back-office application, where each permission controls access to a group of endpoints.<P>Each permission provides <I>binary</I> access to the endpoints it controls; that is, the user can either access the endpoint or not.<P>This API returns the full list of <B>back-office permissions</B> that have been assigned to the current logged-in user. It allows a carrier to develop a portal in which the permission names are hard-coded in the portal UI.</P>\n<P>Allows to get a single permission group given it's ID</P><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_PERMISSIONGROUPS_GETSINGLE</p>",
        "operationId": "getSingle_16",
        "parameters": [
          {
            "description": "The id of the resource",
            "in": "path",
            "name": "permissionGroupId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionGroupResource"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Allows to get a single permission group given it's ID",
        "tags": [
          "Permission Group"
        ]
      }
    },
    "/groupClient/startNotification": {
      "post": {
        "description": "Employer create a new notification case on behalf of the employee. After creating the notification case successfully, a follow-up notification task will be created for the back-office user to complete the intake process. To give more information about the request a Simple EForm document will be added notification case. The back-office user can view the EFrom data to get more information about the notification case request.",
        "operationId": "createNotificationForEmployee",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationDetails"
              }
            }
          },
          "description": "Payload carries information for notification case and eform attributes.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Request. Returns notification case details."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Employer create a new notification case on behalf of the employee.",
        "tags": [
          "Group Client"
        ]
      }
    },
    "/groupClient/web-messages": {
      "get": {
        "description": "Web Messages are the type of communications used when specific things happen in cases that need group client and carrier to follow up on. They cover ad-hoc communication for those things that can't be predicted ahead of time.<P>This endpoint retrieves all the web messages belonging to those cases the Group Client has access to.web messages sent outside the context of a case will not be returned.<p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_WEBMESSAGES</p>If this query receives the query parameters pageSize, pageIndex and sort value e.g. <code>?pageSize=5&pageIndex=6&sort={sortField}</code>,  it will return a paginated response.<P>The <code>pageIndex</code> refers the page number and <code>pageSize</code> refers to the max number of entries a page can return.<P>In the page response the following links will be included:<UL><LI><B>first</B>: a link to the first page</LI><LI><B>prev</B>: a link to the last page</LI><LI><B>next</B>: a link to the next page</LI><LI><B>last</B>: a link to the last page</LI><LI><B>self</B>: a link which indicates the exact request which created the response. <I>This includes, pageSize, pageIndex and sort fields.</I></LI></UL>If there is no prev or next page, <code>null</code> will be returned.<P>This can happen if you are on the first or last page.<P>Similarly, if the query has no matching results, all the links (except self) will be null.<B>Note:</B>A sort parameter must be included<\n>If this query receives the query parameters pageSize, rowIndex and sort value e.g. <code>?pageSize=10&rowIndex=8&sort={sortField}</code>,  it will return a paginated response.<P>The <code>rowIndex</code> refers the first row index of the source that will be returned <code>pageSize</code> refers to the max number of entries can be returned.<P>In the page response the following links will be included:<UL><LI><B>first</B>: a link to the first page</LI><LI><B>prev</B>: a link to the prev page</LI><LI><B>next</B>: a link to the next page</LI><LI><B>last</B>: a link to the last page</LI><LI><B>self</B>: a link which indicates the exact request which created the response. <I>This includes, pageSize, rowIndex and sort fields.</I></LI></UL>If there is no prev or next page, <code>null</code> will be returned.<P>This can happen if you are on the first or last page.<P>Similarly, if the query has no matching results, all the links (except self) will be null.<B>Note:</B>A sort parameter must be included<\n>",
        "operationId": "query_13",
        "parameters": [
          {
            "description": "The id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This is sort parameter. Sort is ascending by default, for descending preappend with <B>-</B>",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The size of each page",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The page index number",
            "in": "query",
            "name": "pageIndex",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The row index number",
            "in": "query",
            "name": "rowIndex",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Web messages retrieved will have the status provided for the read attribute.",
            "in": "query",
            "name": "readByGroupClient",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Web Messages retrieved will either be from the Group Client (msgOriginatesFromPortal is true) or from the Carrier (msgOriginatesFromPortal is false).",
            "in": "query",
            "name": "msgOriginatesFromPortal",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Triggers a count only query of the web messages meeting the conditions provided as parameters. In this case, the response payload will only contain the result totalSize number but it won not have any list of web messages.",
            "in": "query",
            "name": "countOnly",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebMessages"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Provides the ability of querying against the web messages for Group Client has access to",
        "tags": [
          "Web Message"
        ]
      }
    },
    "/healthcheck": {
      "get": {
        "operationId": "getSingle_25",
        "parameters": [
          {
            "description": "user identification",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "401": {
            "description": "userid header not present or invalid"
          },
          "500": {
            "description": "internal server error"
          }
        },
        "summary": "check frameworks services status",
        "tags": [
          "Health Check"
        ]
      }
    }
  },
  "tags": [
    {
      "name": "Group Client"
    },
    {
      "name": "Group Client Absence"
    },
    {
      "name": "CustomerInfo"
    },
    {
      "name": "Customer Occupation"
    },
    {
      "name": "Endpoint Permission"
    },
    {
      "name": "Enum Domain"
    },
    {
      "name": "Enum Instance"
    },
    {
      "name": "Email Address"
    },
    {
      "name": "Phone Number"
    },
    {
      "name": "Communication Preferences"
    },
    {
      "name": "Contractual Earnings"
    },
    {
      "name": "Notification"
    },
    {
      "name": "Permission Group"
    },
    {
      "name": "Group Policy Member Details"
    },
    {
      "name": "Medical Details"
    },
    {
      "name": "Web Message"
    },
    {
      "name": "Absence Employment"
    },
    {
      "name": "Episodic Actual Absence Periods"
    },
    {
      "name": "Payment Preferences"
    },
    {
      "name": "Absence Event"
    }
  ]
}