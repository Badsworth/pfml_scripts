{
  "openapi": "3.0.1",
  "info": {
    "title": "FINEOS Group Client API",
    "license": {
      "name": "FINEOS License"
    },
    "version": "9.2.17.18"
  },
  "tags": [
    {
      "name": "Group Client"
    },
    {
      "name": "Group Client Absence"
    },
    {
      "name": "CustomerInfo"
    },
    {
      "name": "Customer Occupation"
    },
    {
      "name": "Endpoint Permission"
    },
    {
      "name": "Enum Domain"
    },
    {
      "name": "Enum Instance"
    },
    {
      "name": "Email Address"
    },
    {
      "name": "Phone Number"
    },
    {
      "name": "Communication Preferences"
    },
    {
      "name": "Contractual Earnings"
    },
    {
      "name": "Notification"
    },
    {
      "name": "Permission Group"
    },
    {
      "name": "Group Policy Member Details"
    },
    {
      "name": "Medical Details"
    },
    {
      "name": "Web Message"
    }
  ],
  "paths": {
    "/groupClient/customers/{customerId}/communication-preferences/{communicationPreferenceId}": {
      "get": {
        "tags": [
          "Communication Preferences"
        ],
        "summary": "Gets the communication preferences of a person in a particular context",
        "description": "<p>The communication preferences of a person are captured in three different contact contexts:</p><ul><li>Direct communication (person to person)</li><li>Written correspondence (Alternative communication channel in case the party wants to go paperless, whenever is possible). When a customer links a phone number or email address to this context:<ul><li>Implies that the customer wants to go paperless.</li><li>The new piece of correspondence will be available for download in Portal.</li><li>The customer will receive an alert to the mentioned email address or mobile phone number, notifying that the document is ready for download in Portal.</li></ul></li><li>Notification of updates (via SMS and/or email, important updates regarding changes in the status of the claim).</li></ul>Gets the communication preferences of a person in a particular context</br><p>Being <b>communicationPreferenceId</b> one of the following values:</p><ul><li>9312000 (Written correspondence)</li><li>9312001 (Notification of updates</li><li>9312002 (Direct communication)</li></ul><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CUSTOMERS_COMMUNICATIONPREFERENCES_GETSINGLE</p>",
        "operationId": "getSingle",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "Reference Number of the Customer owning the communication preferences",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "communicationPreferenceId",
            "in": "path",
            "description": "Id of the communication preference, matching the full ID of the contact context enum",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userid",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommunicationPreferenceResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/customers/{customerId}/communication-preferences": {
      "get": {
        "tags": [
          "Communication Preferences"
        ],
        "summary": "Lists the communication preferences of a person",
        "description": "<p>The communication preferences of a person are captured in three different contact contexts:</p><ul><li>Direct communication (person to person)</li><li>Written correspondence (Alternative communication channel in case the party wants to go paperless, whenever is possible). When a customer links a phone number or email address to this context:<ul><li>Implies that the customer wants to go paperless.</li><li>The new piece of correspondence will be available for download in Portal.</li><li>The customer will receive an alert to the mentioned email address or mobile phone number, notifying that the document is ready for download in Portal.</li></ul></li><li>Notification of updates (via SMS and/or email, important updates regarding changes in the status of the claim).</li></ul><p>This endpoint returns the list of email addresses and list of phone numbers linked to these three different communication preference contexts.</p><p>Each communication context is represented by a CommunicationPreference resource, which can hold one or more contact mediums:</p><ul><li>Direct communication: Can hold one email address <b>or</b> one phone number</li><li>Written correspondence: Can hold one email address <b>or</b> one phone number</li><li>Notification of updates: Can hold one email address <b>and</b> one phone number</li></ul><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CUSTOMERS_COMMUNICATIONPREFERENCES</p>",
        "operationId": "query",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "Reference Number of the Customer owning the communication preferences",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userid",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommunicationPreferences"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/customers/{customerId}/communication-preferences/{communicationPreferenceId}/link": {
      "post": {
        "tags": [
          "Communication Preferences"
        ],
        "summary": "Links a contact medium to a communication preference context",
        "description": "<p>The communication preferences of a person are captured in three different contact contexts:</p><ul><li>Direct communication (person to person)</li><li>Written correspondence (Alternative communication channel in case the party wants to go paperless, whenever is possible). When a customer links a phone number or email address to this context:<ul><li>Implies that the customer wants to go paperless.</li><li>The new piece of correspondence will be available for download in Portal.</li><li>The customer will receive an alert to the mentioned email address or mobile phone number, notifying that the document is ready for download in Portal.</li></ul></li><li>Notification of updates (via SMS and/or email, important updates regarding changes in the status of the claim).</li></ul><p>Being <b>communicationPreferenceId</b> one of the following values:</p><ul><li>9312000 (Written correspondence)</li><li>9312001 (Notification of updates</li><li>9312002 (Direct communication)</li></ul><p>And the contact medium to link identified by a <i>LinkCommand</i>, that can represent an existing <i>EmailAddress</i> or <i>PhoneNumber</i> previously registered in the system</p><p>Each communication preference context is represented by a CommunicationPreference resource, which can hold one or more contact mediums:</p><ul><li>Direct communication: Can hold one email address <b>or</b> one phone number</li><li>Written correspondence: Can hold one email address <b>or</b> one phone number</li><li>Notification of updates: Can hold one email address <b>and</b> one phone number</li></ul><p>If the communication preference context to use in the operation has already linked another contact medium, the old one will be unlinked automatically.</p><p>In case the LinkCommand has an empty ID, we unlink any existing contact medium from the requested context.</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CUSTOMERS_COMMUNICATIONPREFERENCES_LINK</p>",
        "operationId": "link",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "Reference Number of the Customer owning the communication preferences",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "communicationPreferenceId",
            "in": "path",
            "description": "Id of the communication preference, matching the full ID of the contact context enum",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userid",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LinkCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommunicationPreferenceResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/customers/{customerId}": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get specific Customer",
        "description": "A <code>Customer</code> is similar to a <code>CustomerInfo</code>, except it is more of a summary view of the Customer. Customer includes:<UL><LI>First and last names</LI></UL>, but <I>not</I> more detailed fields such as:<UL><LI>Nationality</LI></UL><P>Gets specific Customer Info as specified by the <CODE>customerInfoId</CODE></P><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CUSTOMERS_GETSINGLE</p>",
        "operationId": "getSingle_1",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "A <code>Customer</code> is similar to a <code>CustomerInfo</code>, except it is more of a summary view of the Customer. Customer includes:<UL><LI>First and last names</LI></UL>, but <I>not</I> more detailed fields such as:<UL><LI>Nationality</LI></UL>",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userid",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/customers": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Queries Customers accessible to Group Client user.",
        "description": "A <code>Customer</code> is similar to a <code>CustomerInfo</code>, except it is more of a summary view of the Customer. Customer includes:<UL><LI>First and last names</LI></UL>, but <I>not</I> more detailed fields such as:<UL><LI>Nationality</LI></UL><P>This endpoint queries Customers as specified by the query parametersIt is possible to query by various parameters, including:<UL><LI><B>firstName._startsWith</B>: what the firstName starts with.</LI><LI><B>lastName._startsWith</B>: what the lastName starts with</LI><LI><B>idNumber</B>: customer's identification number (SSN or a National Insurance number)</LI><LI><B>_phoneNumber</B>: person's telephone No.</LI><LI><B>_crossField</B>: a string that will search multiple fields</LI></UL><B>Note</B>:<I>the convention of using an underscore <B>_</B>is to indicate a search parameter that is not in the payload</I></P><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CUSTOMERS</p>",
        "operationId": "query_1",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Comma separated list of sort parameters. Ascending by default, for descending preappend with <B>-</B>. Can sort by firstName or lastName.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "firstName._startsWith",
            "in": "query",
            "description": "Performs a starts with search on first name. If <code>firstName._startsWith</code> is provided <code>lastName._startsWith</code> must be provided also.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastName._startsWith",
            "in": "query",
            "description": "Performs a starts with search on last name. If <code>lastName._startsWith</code> is provided <code>firstName._startsWith</code> must be provided also.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "idNumber",
            "in": "query",
            "description": "Searches for customer by identification number. This might represent an SSN or a National Insurance number.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_phoneNumber",
            "in": "query",
            "description": "Searches for customer by Phone Number. If searching by Phone Number, Int Code, Area Code and Phone Number are required parameters.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_phoneNumberAreaCode",
            "in": "query",
            "description": "Searches for customer by Phone Number. If searching by Phone Number, Int Code, Area Code and Phone Number are required parameters.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_phoneNumberIntCode",
            "in": "query",
            "description": "Searches for customer by Phone Number. If searching by Phone Number, Int Code, Area Code and Phone Number are required parameters.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_emailAddress",
            "in": "query",
            "description": "The Customer's emailAddress",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_crossField",
            "in": "query",
            "description": "<p>A search string that searches across multiple fields</p><p>For example</p><ul>    <li>/groupClient/customers?_crossField=Sam</li>    <li>/groupClient/customers?_crossField=EMP-101</li>    <li>/groupClient/customers?_crossField=Sam%20Smith</li>    <li>/groupClient/customers?_crossField=015987459</li></ul><p>The system will attempt to search using this search string based on</p><ul>    <li>First Name</li>    <li>Last Name</li>    <li>Identification Number (such as SSN or National Insurance Number)</li>    <li>Employee Id. We will only attempt to perform this search if the system is configured to retrieve customers based on occupation.</li></ul><p>Search criteria will facilitate starts with searches on string fields (First Name, Last Name and Employee Id). Non-string fields (Identification Number) will be exact match.</p><p>For example, a search string of 'Sa' or 'Sam' should return all record representing Sam Smith or Fiona Sampson. A search string of 123456789 will return a result if a Customer record related to the Group Client exists with that id number.</p><p>If the user chooses to search with multiple elements in the search string, then a result will be returned only if each element in the search string returns a result on either first name, last name, identification number or employee id. For example, if a user were to search with the string 'Sam S 123' then the following would be returned in the results</p><table>   <tr>        <th>First Name</th>        <th>Last Name</th>        <th>Identification Number</th>        <th>Employee Id</th>   </tr>   <tr>        <td>Sam</td>        <td>Smith</td>        <td>123</td>        <td>888</td>   </tr>   <tr>        <td>Simon</td>        <td>Sampson</td>        <td>555</td>        <td>123</td>   </tr>   <tr>        <td>Siobhan</td>        <td>Sammon</td>        <td>444</td>        <td>123-A-B-C</td>   </tr></table>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateOfBirth",
            "in": "query",
            "description": "The Date Of Birth of the Customer",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerResources"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/customers/{customerId}/customer-info/edit": {
      "post": {
        "tags": [
          "CustomerInfo"
        ],
        "summary": "Edits customer info",
        "description": "A customer info represents information about a customer.  This information includes:<UL><LI>First and last names</LI><LI>Place of Birth</LI><LI>Nationality</LI></UL><P>The Customer's most up to date, correspondance address is included with this Resource. If they have no address the <code>address</code> field will be null.  If it is an Australian Address additional fields are included under <code>extraAustralianFields</code><P>A customer can have cases associated with them<P><B>Note</B>: In an edit, a firstName or lastName is never allowed to be set to an empty string or null. Similarly, no enum is allowed to be set to null.</P><P><B>Further note</B>: when an Customer Info Resource is updated via this API, a task is created in the back office.  This task can be configured via the application category <code>CustomerDataUpdatedNotification</code>and the properties <code>TaskTypeName</code> and <code>UpdateCustomerDesc</code></P><P>It is also possible to set the default verification status for the change via the application category<code>CustomerVerification</code> and property <code>CustomerVerificationStatus</code></P><P>If Address Country is Australia then <code>extraAustralianFields</code> requires to be available in the payload</P><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CUSTOMERS_CUSTOMERINFO_EDIT</p>",
        "operationId": "edit",
        "parameters": [
          {
            "name": "If-Match",
            "in": "header",
            "description": "The client sends the previously returned ETag value in the If-Match header to indicate the version of the Resource it wishes to update<P>If this is not the most up to date version, the server will return a 412 error.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "in": "path",
            "description": "Reference Number of the Customer for which Occupations are to be returned",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userid",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditCustomerInfoCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerInfo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/customers/{customerId}/customer-info": {
      "get": {
        "tags": [
          "CustomerInfo"
        ],
        "summary": "Get specific Customer Info",
        "description": "A customer info represents information about a customer.  This information includes:<UL><LI>First and last names</LI><LI>Place of Birth</LI><LI>Nationality</LI></UL><P>The Customer's most up to date, correspondance address is included with this Resource. If they have no address the <code>address</code> field will be null.  If it is an Australian Address additional fields are included under <code>extraAustralianFields</code><P>A customer can have cases associated with them<P>Gets specific Customer Info as specified by the <CODE>customerInfoId</CODE></P><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CUSTOMERS_CUSTOMERINFO</p>",
        "operationId": "getSingle_2",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "Reference Number of the Customer for which Occupations are to be returned",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userid",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerInfo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/customers/{customerId}/customer-occupations/{customerOccupationId}/edit": {
      "post": {
        "tags": [
          "Customer Occupation"
        ],
        "summary": "Edit a customer occupation",
        "description": "<p>Update an existing Customer level Occupation for the customer with the data provided in the request payload.</p><ul><li>An Occupation represents a Customer's employment with one particular Employer. A Customer can have multiple Occupations, across different Employers</li><li>Occupations can exist at Customer or Claim level. This endpoint is specific to Customer.</li><li>Will perform an Access Check to ensure that the Customer is related to the user's Group Client</li><li>Updates the saved Occupation based on the contents of the request payload if the updated Occupation passes validation.</li><li>The endpoint sets system attribute 'Verified' to true for all successful saves</li><li>Edits to daysWorkedPerWeek will only be applied if overrideDaysWorkedPerWeek is true and Occupation does not already have a Work Pattern defined</li><li>Will return an error if the Employer for the Occupation does not match the user's Group Client</li><li>Will return an error if the Occupation is for a different Customer to that specified as a parameter</li></ul><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CUSTOMERS_CUSTOMEROCCUPATIONS_EDIT</p>",
        "operationId": "edit_1",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "in": "path",
            "description": "Reference Number of the Customer for which Occupations are to be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerOccupationId",
            "in": "path",
            "description": "Id of the Occupation which is to be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The client sends the previously returned ETag value in the If-Match header to indicate the version of the Resource it wishes to update<P>If this is not the most up to date version, the server will return a 412 error.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userid",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditCustomerOccupationCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerOccupation"
                }
              }
            }
          },
          "400": {
            "description": "Invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/customers/{customerId}/customer-occupations/{customerOccupationId}": {
      "get": {
        "tags": [
          "Customer Occupation"
        ],
        "summary": "Get specific Customer Occupation",
        "description": "<p>Returns the Occupation at Customer level for the specified customer and Occupation.</p><ul><li>An Occupation represents a Customer's employment with one particular Employer. A Customer can have multiple Occupations, across different Employers</li><li>Occupations can exist at Customer or Claim level. This endpoint is specific to Customer.</li><li>Will perform an Access Check to ensure that the Customer is related to the user's Group Client</li><li>Will only return Occupation if the Employer for the Occupation matches the user's Group Client.</li><li>Will return an error if the Occupation is for a different Customer to that specified as a parameter.</li></ul><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CUSTOMERS_CUSTOMEROCCUPATIONS_GETSINGLE</p>",
        "operationId": "getSingle_3",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "in": "path",
            "description": "Reference Number of the Customer for which Occupations are to be returned",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerOccupationId",
            "in": "path",
            "description": "Id of the Occupation which is to be read",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userid",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerOccupation"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/customers/{customerId}/customer-occupations": {
      "get": {
        "tags": [
          "Customer Occupation"
        ],
        "summary": "Retrieves customer occupations",
        "description": "<p>Returns the list of Occupations at Customer level for the specified customer which are applicable to the <b>Employer</b> represented by the User.</p><ul><li>An Occupation represents a Customer's employment with one particular Employer. A Customer can have multiple Occupations, across different Employers</li><li>Occupations can exist at Customer or Claim level. This endpoint is specific to Customer.</li><li>Will perform an Access Check to ensure that the Customer is related to the user's Group Client</li><li>Endpoint returns the Occupation(s) in descending order by Date of Hire</li> <li>Will only return Occupations where the Employer for the Occupation matches the user's Group Client</li> <li>Where a valid request is received, but the Customer has no Occupations for the Group Client Employer, empty list will be returned.</li> </ul><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CUSTOMERS_CUSTOMEROCCUPATIONS</p>",
        "operationId": "query_2",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "in": "path",
            "description": "Reference Number of the Customer for which Occupations are to be returned",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userid",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerOccupations"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/customers/{customerId}/customer-occupations/{customerOccupationId}/contractual-earnings/{contractualEarningsId}/edit": {
      "post": {
        "tags": [
          "Contractual Earnings"
        ],
        "summary": "Edit a Contractual Earnings record for a Customer Occupation",
        "description": "<p>Update existing Contractual Earnings record on an Occupation at Customer level for the specified record with the data provided in the request payload.</p><ul><li>Contractual Earnings are the Earnings for a specified period. A Customer can have multiple Earnings as long as effective dates do not overlap.</li><li>Earnings are attached to Occupations, and can exist at Customer or Claim level. This endpoint is specific to Earnings on Customer Occupations.</li><li>Will perform an Access Check to ensure that the Customer is related to the user's Group Client</li><li>This version of the endpoint does not support Class Extensions; change of Frequency; or use of Weekly and Bi-weekly frequencies.</li><li>Updates the Contractual Earnings record saved on the specified Customer Occupation based on the contents of the request payload if the updated Earnings passes validation.</li><li>The endpoint sets system attribute 'Verified' to true for all successful saves</li><li>Will only support edits for Contractual Earnings on a Customer Occupation. Edits to Actual recorded earnings, or earnings for custom frequencies, will not be supported.</li><li>Will return an error if the Employer for the Occupation does not match the user's Group Client</li><li>Will return an error if the Occupation is for a different Customer to that specified as a parameter</li><li>By default, the earnings total is specified in the Amount attribute. For Weekly and Bi-weekly frequencies, depending on the value of TotalAmountOverride, earnings are specified using Amount (true) or StandardHours and StandardHourlyRate.</li></ul><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CUSTOMERS_CUSTOMEROCCUPATIONS_CONTRACTUALEARNINGS_EDIT</p>",
        "operationId": "edit_2",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "in": "path",
            "description": "Reference Number of the Customer for which Occupations are to be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerOccupationId",
            "in": "path",
            "description": "Id of the Occupation which is to be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contractualEarningsId",
            "in": "path",
            "description": "Id of the Contractual Earnings which is to be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The client sends the previously returned ETag value in the If-Match header to indicate the version of the Resource it wishes to update<P>If this is not the most up to date version, the server will return a 412 error.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userid",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditContractualEarningsCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractualEarnings"
                }
              }
            }
          },
          "400": {
            "description": "Invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/customers/{customerId}/customer-occupations/{customerOccupationId}/contractual-earnings/{contractualEarningsId}": {
      "get": {
        "tags": [
          "Contractual Earnings"
        ],
        "summary": "Get a specific Contractual Earnings Record",
        "description": "<p>Returns a Contractual Earnings record at Customer level for the specified Earnings identifier</p><ul><li>Contractual Earnings are the Earnings for a specified period. A Customer can have multiple Earnings as long as effective dates do not overlap.</li><li>Earnings are attached to Occupations, and can exist at Customer or Claim level. This endpoint is specific to Earnings on Customer Occupations.</li><li>Will perform an Access Check to ensure that the Customer is related to the user's Group Client</li><li>For Weekly and Bi-Weekly frequencies, TotalAmountOverride determines whether earnings were specified using Amount (true) or StandardHours and StandardHourlyRate.</li><li>Will only return Contractual Earnings. Will return an error if an Actual Earnings record, or record for a custom frequency, is requested.</li><li>Will only return Contractual Earnings if the Employer for the Occupation matches the user's Group Client</li><li>Will validate that the requested Earnings are for the specified Occupation and Customer</li></ul><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CUSTOMERS_CUSTOMEROCCUPATIONS_CONTRACTUALEARNINGS_GETSINGLE</p>",
        "operationId": "getSingle_4",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "in": "path",
            "description": "Reference Number of the Customer for which Contractual Earnings are to be returned",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerOccupationId",
            "in": "path",
            "description": "Id of the Occupation which is to be read",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contractualEarningsId",
            "in": "path",
            "description": "Id of the Contractual Earnings which are to be read",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userid",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractualEarnings"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/customers/{customerId}/customer-occupations/{customerOccupationId}/contractual-earnings": {
      "get": {
        "tags": [
          "Contractual Earnings"
        ],
        "summary": "Returns the Contractual Earnings record(s) at Customer level for the specified Customer and Occupation.",
        "description": "Returns the Contractual Earnings record(s) at Customer level for the specified Customer and Occupation.<ul><li>Contractual Earnings are the Earnings for a specified period. A Customer can have multiple Earnings as long as effective dates do not overlap.</li><li>Earnings are attached to Occupations, and can exist at Customer or Claim level. This endpoint is specific to Earnings on Customer Occupations.</li><li>Will perform an Access Check to ensure that the Customer is related to the user's Group Client</li> <li>For Weekly and Bi-Weekly frequencies, TotalAmountOverride determines whether earnings were specified using Amount (true) or StandardHours and StandardHourlyRate.</li> <li>The Contractual Earnings will be returned ordered by 'From Date' descending</li> <li>Will only return Contractual Earnings for the Occupation. Actual recorded earnings, or earnings for custom frequencies, will not be returned.</li> <li>Will only return Contractual Earnings if the Employer for the Occupation matches the user's Group Client</li>     <li>Will return an error if the Occupation is for a different Customer to that specified as a parameter</li></ul><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CUSTOMERS_CUSTOMEROCCUPATIONS_CONTRACTUALEARNINGS</p>",
        "operationId": "query_3",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "in": "path",
            "description": "Reference Number of the Customer for which Contractual Earnings are to be returned",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerOccupationId",
            "in": "path",
            "description": "Id of the Occupation which is to be read",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userid",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractualEarningsList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Contractual Earnings"
        ],
        "summary": "Add a Contractual Earnings record for a Customer Occupation",
        "description": "<p>Create new Contractual Earnings record on an Occupation at Customer level for the specified customer with the data provided in the request payload</p><ul><li>Contractual Earnings are the Earnings for a specified period. A Customer can have multiple Earnings as long as effective dates do not overlap.</li><li>Earnings are attached to Occupations, and can exist at Customer or Claim level. This endpoint is specific to Earnings on Customer Occupations.</li><li>Will perform an Access Check to ensure that the Customer is related to the user's Group Client</li><li>This version of the endpoint does not support Class Extensions; or use of Weekly and Bi-weekly frequencies</li><li>Add a new Contractual Earnings record on the specified Customer Occupation based on the contents of the request payload</li><li>The system will verify that the Effective From Date and Effective To Date are valid, and that they do not overlap with any existing Earnings record for the same Customers Occupations</li><li>The endpoint sets system attribute 'Verified' to true for all successful saves</li><li>Will only support add for Contractual Earnings on a Customer Occupation. An attempt to add Actual recorded earnings, or earnings for custom frequencies, will result in an error.</li><li>Will return an error if the Employer for the Occupation does not match the user's Group Client</li><li>Will return an error if the Occupation is for a different Customer to that specified as a parameter</li><li>By default, the earnings total is specified in the Amount attribute. For Weekly and Bi-weekly frequencies, depending on the value of TotalAmountOverride, earnings are specified using Amount (true) or StandardHours and StandardHourlyRate.</li></ul><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CUSTOMERS_CUSTOMEROCCUPATIONS_CONTRACTUALEARNINGS_ADD</p>",
        "operationId": "create",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "in": "path",
            "description": "Reference Number of the Customer for which Contractual Earnings are to be returned",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerOccupationId",
            "in": "path",
            "description": "Id of the Occupation which is to be read",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userid",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateContractualEarningsCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractualEarnings"
                }
              }
            }
          },
          "400": {
            "description": "Invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/customers/{customerId}/customer-occupations/{customerOccupationId}/regular-weekly-work-pattern/edit": {
      "post": {
        "tags": [
          "Customer Occupation Regular Weekly Work Pattern"
        ],
        "summary": "Edit an existing Regular Weekly Work Pattern for a Customer Occupation",
        "description": "Edit an existing Regular Weekly Work Pattern on an Occupation at Customer level for the specified Customer Occupation.<ul><li>The Work Pattern calendar enables you to record the days a party works and rests for a particular occupation over a period of time.</li><li>This API is for Regular Week Based work patterns i.e. those with a type of Fixed, 2 weeks Rotating, 3 weeks Rotating or 4 weeks Rotating.</li></ul><ul><li>Occupations can exist at Customer or Claim level. This endpoint is specific to Customer.</li><li>If Work Pattern already exists on the Occupation, it will be replaced with the request payload.</li><li>If this API is used to try to edit a work pattern for a non-existent occupation, or for a work pattern that is not Week Based, an error response will be returned.</li><li>If Work Pattern does not exist on the Occupation, an error response will be returned.</li><li>Will perform an Access Check to ensure that the Customer is related to the user's Group Client</li><li>Will return an error if the Occupation is for a different Customer to that specified as a parameter</li></ul><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CUSTOMERS_CUSTOMEROCCUPATIONS_REGULARWEEKLYWORKPATTERN_EDIT</p>",
        "operationId": "edit_3",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "in": "path",
            "description": "Reference Number of the Customer for which Occupations are to be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerOccupationId",
            "in": "path",
            "description": "Id of the Occupation which is to be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The client sends the previously returned ETag value in the If-Match header to indicate the version of the Resource it wishes to update<P>If this is not the most up to date version, the server will return a 412 error.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userid",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditWeekBasedWorkPatternCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WeekBasedWorkPattern"
                }
              }
            }
          },
          "400": {
            "description": "Invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/customers/{customerId}/customer-occupations/{customerOccupationId}/regular-weekly-work-pattern": {
      "get": {
        "tags": [
          "Customer Occupation Regular Weekly Work Pattern"
        ],
        "summary": "Retrieves the Regular Weekly Work Pattern for a Customer Occupation",
        "description": "Returns the Regular Weekly Work Pattern at Customer level for the specified customer and Occupation.<ul><li>The Work Pattern calendar enables you to record the days a party works and rests for a particular occupation over a period of time.</li><li>This API is for Regular Week Based work patterns i.e. those with a type of Fixed, 2 weeks Rotating, 3 weeks Rotating or 4 weeks Rotating.</li></ul><ul><li>This API returns the week-based work pattern, if any, linked to the Occupation identified by the occupationId provided in the URL, relating to the Customer identified by the customerId provided in the URL.</li><li>Occupations can exist at Customer or Claim level. This endpoint is specific to Customer.</li><li>It is expected that prior to calling this API, the GET /groupClient/customers/{customerId}/customer-occupations endpoint will have been used to retrieve information on the occupation, including the workPatternBasis attribute which indicates the type of work pattern in use on the Occupation (Unknown, Week Based, Other). When workPatternBasis is Week Based, this API can then be used to retrieve the work pattern.</li><li>If this API is used to try to retrieve a work pattern from a non-existent occupation, or from an Occupation that does not have a work pattern defined, or that has a work pattern that is not Week Based, an error response will be returned.</li><li>Will perform an Access Check to ensure that the Customer is related to the user's Group Client</li><li>Will only return data if the Employer for the Occupation matches the user's Group Client</li><li>Will return an error if the Occupation is for a different Customer to that specified as a parameter</li></ul><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CUSTOMERS_CUSTOMEROCCUPATIONS_REGULARWEEKLYWORKPATTERN</p>",
        "operationId": "getSingle_5",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "in": "path",
            "description": "Reference Number of the Customer for which Contractual Earnings are to be returned",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerOccupationId",
            "in": "path",
            "description": "Id of the Occupation which is to be read",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userid",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WeekBasedWorkPattern"
                }
              }
            }
          },
          "400": {
            "description": "Invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Customer Occupation Regular Weekly Work Pattern"
        ],
        "summary": "Create a Regular Weekly Work Pattern for a Customer Occupation",
        "description": "Create a Regular Weekly Work Pattern on an Occupation at Customer level for the specified Customer Occupation.<ul><li>The Work Pattern calendar enables you to record the days a party works and rests for a particular occupation over a period of time.</li><li>This API is for Regular Week Based work patterns i.e. those with a type of Fixed, 2 weeks Rotating, 3 weeks Rotating or 4 weeks Rotating.</li></ul><ul><li>Occupations can exist at Customer or Claim level. This endpoint is specific to Customer.</li><li>If Work Pattern already exists on the Occupation, it will be replaced with the request payload. Otherwise, the Work Pattern record will be created on the Occupation based on the request payload.</li><li>If this API is used to try to add a work pattern for a non-existent occupation, or for a work pattern that is not Week Based, an error response will be returned.</li><li>When adding a work pattern, workPatternType and workPatternDays arrays must be provided.</li><li>If Work Pattern already exists on the Occupation, an error response will be returned.</li><li>Will perform an Access Check to ensure that the Customer is related to the user's Group Client</li><li>Will return an error if the Occupation is for a different Customer to that specified as a parameter</li></ul><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CUSTOMERS_CUSTOMEROCCUPATIONS_REGULARWEEKLYWORKPATTERN_ADD</p>",
        "operationId": "create_1",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "in": "path",
            "description": "Reference Number of the Customer for which Contractual Earnings are to be returned",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerOccupationId",
            "in": "path",
            "description": "Id of the Occupation which is to be read",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userid",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWeekBasedWorkPatternCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WeekBasedWorkPattern"
                }
              }
            }
          },
          "400": {
            "description": "Invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/customers/{customerId}/email-addresses/{emailAddressId}/edit": {
      "post": {
        "tags": [
          "Email Address"
        ],
        "summary": "Allows to edit an email address given it's ID",
        "description": "<P>Allows to edit email address given it's ID</P><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CUSTOMERS_EMAILADDRESSES_EDIT</p>",
        "operationId": "edit_4",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "Reference Number of the Customer owning the email addresses",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "emailAddressId",
            "in": "path",
            "description": "The id of the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "path",
            "description": "The client sends the previously returned ETag value in the If-Match header to indicate the version of the Resource it wishes to update<P>If this is not the most up to date version, the server will return a 412 error.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userid",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditEmailAddressCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailAddressResource"
                }
              }
            }
          },
          "400": {
            "description": "Invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/customers/{customerId}/email-addresses/{emailAddressId}": {
      "get": {
        "tags": [
          "Email Address"
        ],
        "summary": "Allows to get a single email address given it's ID",
        "description": "Email for a party. For example: <I>myemail@somemail.com</I>\n<P>Allows to get a single email address given it's ID</P><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CUSTOMERS_EMAILADDRESSES_GETSINGLE</p>",
        "operationId": "getSingle_6",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "Reference Number of the Customer owning the email addresses",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "emailAddressId",
            "in": "path",
            "description": "The id of the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userid",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailAddressResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/customers/{customerId}/email-addresses/{emailAddressId}/remove": {
      "post": {
        "tags": [
          "Email Address"
        ],
        "summary": "Allows to remove an email address given it's ID",
        "description": "<P>Allows to remove an email address given it's ID</P><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CUSTOMERS_EMAILADDRESSES_REMOVE</p>",
        "operationId": "remove",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "Reference Number of the Customer owning the email addresses",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "emailAddressId",
            "in": "path",
            "description": "The id of the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userid",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/customers/{customerId}/email-addresses": {
      "get": {
        "tags": [
          "Email Address"
        ],
        "summary": "Provides the ability of querying against the email addresses of a customer",
        "description": "<P>Provides the ability of querying against the email addresses of a customer</P><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CUSTOMERS_EMAILADDRESSES</p>",
        "operationId": "query_4",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "Reference Number of the Customer owning the email addresses",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userid",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Emails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Email Address"
        ],
        "summary": "Allows to create a new email linked to the given customer",
        "description": "<P>Allows to create a new email linked to the given customer</P><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CUSTOMERS_EMAILADDRESSES_ADD</p>",
        "operationId": "create_2",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "Reference Number of the Customer owning the email addresses",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userid",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEmailAddressCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailAddressResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/endpoint-permissions/{endpointPermissionId}": {
      "get": {
        "tags": [
          "Endpoint Permission"
        ],
        "summary": "Allows to get a single endpoint permission given it's ID",
        "description": "<P>Allows to get a single endpoint permission given it's ID</P><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_ENDPOINTPERMISSIONS_GETSINGLE</p>\n<P>A groupClient user may only be allowed access a sub-selection of deployed endpoints.</P><P>This API provides a list of endpoints the currently logged in Group Client user can access.</P>There are two ways this API can be invoked.<UL>\t<LI><CODE>/groupClient/endpoint-permissions?_filter=accessible</CODE> -- returns a list of all endpoints the current logged in Group Client user can access.</LI> <LI><CODE>/groupClient/endpoint-permissions?name=URL_GET_GROUPCLIENT_CUSTOMERS&name=URL_GET_GROUPCLIENT_CLAIMS&name=URL_GET_GROUPCLIENT_CASES_DOCUMENTS</CODE> -- return if the currently logged in Group Client user can access the specified endpoints.</LI></UL><P><B>Note:</B> The permission key / endpoint identifier follows a general naming convention of the form:<UL> <LI><pre>URL\\_{HTTP_VERB}\\_{PERSONA}\\_{ELEMENTS_IDENTIFYING_RESOURCE}\\_{RESOURCEACTION/GET_IDENTIFIER}</pre></LI></UL>where the combination of these elements should be unique for each endpoint.</P></UL>Some examples:<UL> <LI>URL_GET_GROUPCLIENT_CUSTOMERS</LI> <LI>URL_GET_GROUPCLIENT_CUSTOMERS_EMAILADDRESSES</LI> <LI>URL_GET_GROUPCLIENT_CUSTOMERS_CUSTOMEROCCUPATIONS_CONTRACTUALEARNINGS</LI> <LI>URL_GET_GROUPCLIENT_CUSTOMERS_EMAILADDRESSES_GETSINGLE</LI> <LI>URL_POST_GROUPCLIENT_NOTIFICATIONS_ADD</LI> <LI>URL_POST_GROUPCLIENT_CUSTOMERS_PHONENUMBERS_ADD</LI></UL><P><B>Note:</B> It is not possible to specify both <code>_filter=accessible</code> and specific <code>name</code> values.  This will result in a <code>400</code> error response.</P>",
        "operationId": "getSingle_7",
        "parameters": [
          {
            "name": "endpointPermissionId",
            "in": "path",
            "description": "The id of the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userid",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndpointPermissionResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/endpoint-permissions": {
      "get": {
        "tags": [
          "Endpoint Permission"
        ],
        "summary": "Retrieves permissions the groupClient can access.",
        "description": "<P>A groupClient user may only be allowed access a sub-selection of deployed endpoints.</P><P>This API provides a list of endpoints the currently logged in Group Client user can access.</P>There are two ways this API can be invoked.<UL>\t<LI><CODE>/groupClient/endpoint-permissions?_filter=accessible</CODE> -- returns a list of all endpoints the current logged in Group Client user can access.</LI> <LI><CODE>/groupClient/endpoint-permissions?name=URL_GET_GROUPCLIENT_CUSTOMERS&name=URL_GET_GROUPCLIENT_CLAIMS&name=URL_GET_GROUPCLIENT_CASES_DOCUMENTS</CODE> -- return if the currently logged in Group Client user can access the specified endpoints.</LI></UL><P><B>Note:</B> The permission key / endpoint identifier follows a general naming convention of the form:<UL> <LI><pre>URL\\_{HTTP_VERB}\\_{PERSONA}\\_{ELEMENTS_IDENTIFYING_RESOURCE}\\_{RESOURCEACTION/GET_IDENTIFIER}</pre></LI></UL>where the combination of these elements should be unique for each endpoint.</P></UL>Some examples:<UL> <LI>URL_GET_GROUPCLIENT_CUSTOMERS</LI> <LI>URL_GET_GROUPCLIENT_CUSTOMERS_EMAILADDRESSES</LI> <LI>URL_GET_GROUPCLIENT_CUSTOMERS_CUSTOMEROCCUPATIONS_CONTRACTUALEARNINGS</LI> <LI>URL_GET_GROUPCLIENT_CUSTOMERS_EMAILADDRESSES_GETSINGLE</LI> <LI>URL_POST_GROUPCLIENT_NOTIFICATIONS_ADD</LI> <LI>URL_POST_GROUPCLIENT_CUSTOMERS_PHONENUMBERS_ADD</LI></UL><P><B>Note:</B> It is not possible to specify both <code>_filter=accessible</code> and specific <code>name</code> values.  This will result in a <code>400</code> error response.</P><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_ENDPOINTPERMISSIONS</p>",
        "operationId": "query_5",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "_filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userid",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndpointPermissionResources"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/group-client-users/{groupClientUserId}/edit": {
      "post": {
        "tags": [
          "Group Client User"
        ],
        "summary": "Edit access rights for the Group Client User.",
        "description": "<p>Update the Group Client Users' access rights as per the detail provided in the request payload.</p><ul><li>Only Enabled Group Client Users are authorised to access APIs.</li><li>The Group Client Admin User can Enable a Group Client Users access.</li><li>The Group Client Admin User can Disable a Group Client Users access.</li><li>Group Client Admin are not authorised to manage themselves, (even though they are Group Client Users, they do not have admin rights over themselves.).</li><li>The permission key for this endpoint is: URL_POST_GROUPCLIENT_GROUPCLIENTUSERS_EDIT</li></ul>",
        "operationId": "edit_5",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The client sends the previously returned ETag value in the If-Match header to indicate the version of the Resource it wishes to update<P>If this is not the most up to date version, the server will return a 412 error.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupClientUserId",
            "in": "path",
            "description": "The unique identifier for the group client user that is returned",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userid",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditGroupClientUserCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupClientUser"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated - Cannot recognise the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorised - User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/group-client-users/{groupClientUserId}": {
      "get": {
        "tags": [
          "Group Client User"
        ],
        "summary": "Retrieves a Group Client user.",
        "description": "A portal user authorized to act on behalf of the group client organization (such as a HR person, a Fund Administrator or a Client Relations operative)\n<p>Returns the Group Client user information for the specified Group Client user.</p><ul><li>A Group Client user is a portal user authorised to act on behalf of the group client organization (such as a HR person, a Fund Administrator or a Client Relations operative).</li><li>User can access resources when their <i>Enabled</i> status is True.</li><li>The permission key for this endpoint is: URL_GET_GROUPCLIENT_GROUPCLIENTUSERS_GETSINGLE</li></ul>",
        "operationId": "getSingle_8",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupClientUserId",
            "in": "path",
            "description": "The unique identifier for the group client user that is returned",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userid",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupClientUser"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated - Cannot recognise the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorised - User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/group-client-users": {
      "get": {
        "tags": [
          "Group Client User"
        ],
        "summary": "Retrieves the list of Group Client Users.",
        "description": "<p>Returns the list of Group Client Users which the Group Client Administrator user administrates.</p><ul><li>A Group Client User is a portal user authorized to act on behalf of the Group Client organization (such as a HR person, a Fund Administrator or a Client Relations operative).</li><li>A Group Client Admin User is a Group Client User with Admin privileges assigned.</li><li>A Group Client Admin User is authorised to manage the Group Client Users configured on the organisation (Note: This includes other Group Client Admin Users.).</li><li>The list of Group Client Users returned contains all Group Client Users configured for the organisation (including the Group Client user accessing the resource).</li><li>The permission key for this endpoint is: URL_GET_GROUPCLIENT_GROUPCLIENTUSERS</li></ul>",
        "operationId": "query_6",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userid",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AltGroupClientUserListSchema"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated - Cannot recognise the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorised - User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/notifications/{notificationId}": {
      "get": {
        "tags": [
          "Group Client"
        ],
        "summary": "Retrieves a notification as specified by the notificationId.",
        "description": "The detailed summary of the notification case.",
        "operationId": "getNotificationDetail",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "notificationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request. Returns a notification as specified by the notificationId."
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognize the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/notifications": {
      "get": {
        "tags": [
          "Notification"
        ],
        "summary": "Queries Notifications the Group Client User has access to",
        "description": "A notification is used to link a number of cases together that share an event e.g. Pregnancy, Sickness or an Accident. Services can be offered depending on the event and depending on what agreement between Employer and Carrier.<P>Typcially in a FINEOS system the use of Notification is quite particular.For example, Notification is used by downsteam components such Absence, so the Absence and Claims can be linked for a particular event. <P>Even though the Notification can link the cases, the actual business Process (that arise from the created Cases) such as assessment, approval process regarding job protection, accommodation and/or payments happen indepdently.<P>This end-point contains multiple query parameter which can all be used together or separately as described below. Query parameters are name value pairs, which include the following:<UL><LI><code>customer.id</code></LI> - Used to look for Notifications for a specific customer.<LI><code>caseNumber._startsWith</code></LI> - Used to search for Notification with the caseNumber starting with</UL>A query parameter should be provided, otherwise an Invalid request (i.e. a 400) will be returned.<p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_NOTIFICATIONS</p>If this query receives the query parameters pageSize, pageIndex and sort value e.g. <code>?pageSize=5&pageIndex=6&sort={sortField}</code>,  it will return a paginated response.<P>The <code>pageIndex</code> refers the page number and <code>pageSize</code> refers to the max number of entries a page can return.<P>In the page response the following links will be included:<UL><LI><B>first</B>: a link to the first page</LI><LI><B>prev</B>: a link to the last page</LI><LI><B>next</B>: a link to the next page</LI><LI><B>last</B>: a link to the last page</LI><LI><B>self</B>: a link which indicates the exact request which created the response. <I>This includes, pageSize, pageIndex and sort fields.</I></LI></UL>If there is no prev or next page, <code>null</code> will be returned.<P>This can happen if you are on the first or last page.<P>Similarly, if the query has no matching results, all the links (except self) will be null.<B>Note:</B>A sort parameter must be included",
        "operationId": "query_7",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customer.id",
            "in": "query",
            "description": "The customer's id for which the Notifications are sought.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "caseNumber._startsWith",
            "in": "query",
            "description": "The starting characters of the <I>caseNumber</I> of the Notification",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "adminGroup._startsWith",
            "in": "query",
            "description": "The starting characters of the <I>adminGroup</I> of the Notification",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customer.firstName._startsWith",
            "in": "query",
            "description": "The starting characters of the <I>Customer's firstName</I> of the Notification",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customer.lastName._startsWith",
            "in": "query",
            "description": "The starting characters of the <I>Customer's lastName</I> of the Notification",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "notificationReason.name._startsWith",
            "in": "query",
            "description": "The starting characters of the Notification Reason",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_filter",
            "in": "query",
            "description": "Executes a specific business filter.  For example: outstanding-information",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Comma separated list of sort parameters. Ascending by default, for descending preappend with <B>-</B>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The size of each page",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "The page index number",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Notifications"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/permission-groups/{permissionGroupId}": {
      "get": {
        "tags": [
          "Permission Group"
        ],
        "summary": "Allows to get a single permission group given it's ID",
        "description": "<P>A groupClient user may only be allowed access a subset of deployed endpoints.</P><P>This is governed by <I>permissions</I> that are configured in the back-office application, where each permission controls access to a group of endpoints.<P>Each permission provides <I>binary</I> access to the endpoints it controls; that is, the user can either access the endpoint or not.<P>This API returns the full list of <B>back-office permissions</B> that have been assigned to the current logged-in user. It allows a carrier to develop a portal in which the permission names are hard-coded in the portal UI.</P>\n<P>Allows to get a single permission group given it's ID</P><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_PERMISSIONGROUPS_GETSINGLE</p>",
        "operationId": "getSingle_10",
        "parameters": [
          {
            "name": "permissionGroupId",
            "in": "path",
            "description": "The id of the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userid",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionGroupResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/permission-groups": {
      "get": {
        "tags": [
          "Permission Group"
        ],
        "summary": "Retrieves the list of back-office permissions assigned to the groupClient user.",
        "description": "<P>A groupClient user may only be allowed access a subset of deployed endpoints.</P><P>This is governed by <I>permissions</I> that are configured in the back-office application, where each permission controls access to a group of endpoints.<P>Each permission provides <I>binary</I> access to the endpoints it controls; that is, the user can either access the endpoint or not.<P>This API returns the full list of <B>back-office permissions</B> that have been assigned to the current logged-in user. It allows a carrier to develop a portal in which the permission names are hard-coded in the portal UI.</P><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_PERMISSIONGROUPS</p>",
        "operationId": "query_8",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionGroupResources"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/customers/{customerId}/phone-numbers/{phoneNumberId}/edit": {
      "post": {
        "tags": [
          "Phone Number"
        ],
        "summary": "Allows to edit a phone number given it's ID",
        "description": "<p>Allows to edit a phone number given it's ID</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CUSTOMERS_PHONENUMBERS_EDIT</p>",
        "operationId": "edit_6",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "Reference Number of the Customer owning the phone numbers",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "phoneNumberId",
            "in": "path",
            "description": "The id of the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "path",
            "description": "The client sends the previously returned ETag value in the If-Match header to indicate the version of the Resource it wishes to update<P>If this is not the most up to date version, the server will return a 412 error.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userid",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditPhoneNumberCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhoneNumberResource"
                }
              }
            }
          },
          "400": {
            "description": "Invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/customers/{customerId}/phone-numbers/{phoneNumberId}": {
      "get": {
        "tags": [
          "Phone Number"
        ],
        "summary": "Allows to get a single phone number given it's ID",
        "description": "A party's phone number\n<p>Allows to get a single phone number given it's ID</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CUSTOMERS_PHONENUMBERS_GETSINGLE</p>",
        "operationId": "getSingle_11",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "Reference Number of the Customer owning the phone numbers",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "phoneNumberId",
            "in": "path",
            "description": "The id of the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userid",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhoneNumberResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/customers/{customerId}/phone-numbers/{phoneNumberId}/remove": {
      "post": {
        "tags": [
          "Phone Number"
        ],
        "summary": "Allows to remove a phone number given it's ID",
        "description": "<p>Allows to remove a phone number given it's ID</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CUSTOMERS_PHONENUMBERS_REMOVE</p>",
        "operationId": "remove_1",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "Reference Number of the Customer owning the phone numbers",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "phoneNumberId",
            "in": "path",
            "description": "The id of the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userid",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/customers/{customerId}/phone-numbers": {
      "get": {
        "tags": [
          "Phone Number"
        ],
        "summary": "Provides the ability of querying against the phone numbers of a customer",
        "description": "<p>Provides the ability of querying against the phone numbers of a customer</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CUSTOMERS_PHONENUMBERS</p>",
        "operationId": "query_9",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "Reference Number of the Customer owning the phone numbers",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userid",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhoneNumbers"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Phone Number"
        ],
        "summary": "Allows to create a new phone number linked to the given customer",
        "description": "<p>Allows to create a new phone number linked to the given customer</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CUSTOMERS_PHONENUMBERS_ADD</p>",
        "operationId": "create_3",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "Reference Number of the Customer owning the phone numbers",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userid",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePhoneNumberCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhoneNumberResource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/claims/{claimId}/group-policy-member-details/{groupPolicyMemberDetailId}/edit": {
      "post": {
        "tags": [
          "Group Policy Member Details"
        ],
        "summary": "Updates group policy information on a Claim case.",
        "description": "A group policy member detail represents the employee details relating to a claim<p>Updates the following group policy information of one group policy linked to a Claim case:</p><ul><li>Member Number</li><li>Division Ids</li><li>Class Ids</li></ul><p>This API accepts one member number and a list of class and division ID pairs.</p><p>It is expected that the class and division ids provided are valid for the group policy in question.</p><p>The list of class and division ID pairs provided replaces any that were previously selected for the group policy linked to the Claim case.</p><p>Where DivisionClassLinkEmbeddable object is included in the request, it is expected that both divisionId and classId are populated.</p><p>Where possible an update to the Back Office will be triggered by this API to update the coverages available on the Claim case - at least one class id and division id is required for this.</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CLAIMS_GROUPPOLICYMEMBERDETAILS_EDIT</p>",
        "operationId": "edit_7",
        "parameters": [
          {
            "name": "claimId",
            "in": "path",
            "description": "The id of the claim case.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupPolicyMemberDetailId",
            "in": "path",
            "description": "The unique identifier for the policy member detail.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The client sends the previously returned ETag value in the If-Match header to indicate the version of the Resource it wishes to update<P>If this is not the most up to date version, the server will return a 412 error.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userid",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditGroupPolicyMemberDetailCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupPolicyMemberDetail"
                }
              }
            }
          },
          "400": {
            "description": "Invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/claims/{claimId}/group-policy-member-details/{groupPolicyMemberDetailId}": {
      "get": {
        "tags": [
          "Group Policy Member Details"
        ],
        "summary": "Gets a single group policy member detail",
        "description": "A group policy member detail represents the employee details relating to a claim<p>Gets a single group policy member detail</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CLAIMS_GROUPPOLICYMEMBERDETAILS_GETSINGLE</p>",
        "operationId": "getSingle_12",
        "parameters": [
          {
            "name": "claimId",
            "in": "path",
            "description": "The id of the claim case.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupPolicyMemberDetailId",
            "in": "path",
            "description": "The unique identifier for the policy member detail.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userid",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupPolicyMemberDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/claims/{claimId}/group-policy-member-details": {
      "get": {
        "tags": [
          "Group Policy Member Details"
        ],
        "summary": "Gets the list of group policies that are linked to the Claim case provided.",
        "description": "A group policy member detail represents the employee details relating to a claim<p>Gets the list of group policies that are linked to the Claim case provided.</p><p>If there are no group policies linked to the Claim case, an empty list will be returned.</p><p>For each group policy linked to the Claim case, the following policy member details, which are specific to that claim, will be returned (where they are available):</p><ul><li>Member Number</li><li>Division Ids</li><li>Class Ids</li></ul><p>The list of available class and division names for each policy linked to the Claim case will also be returned.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CLAIMS_GROUPPOLICYMEMBERDETAILS</p>",
        "operationId": "query_10",
        "parameters": [
          {
            "name": "claimId",
            "in": "path",
            "description": "The id of the claim case.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userid",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupPolicyMemberDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/claims/{claimId}/medical-details/edit": {
      "post": {
        "tags": [
          "Medical Details"
        ],
        "summary": "Updates the Medical Details associated with the Claim for a group client user.",
        "description": "Updates the Medical Detail associated with the Claim for a group client user. Medical Details consist of a definition of the condition, cause of injury, relevant dates and more as described in <code>MedicalDetails</code>. Medical Details are related to all FINEOS Claims entities with a one to one mapping. Medical Details represents the current view of the medical aspects of the Claim. <p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CLAIMS_MEDICALDETAILS_EDIT</p>",
        "operationId": "edit_8",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "The user who is making the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "claimId",
            "in": "path",
            "description": "Claim identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The client sends the previously returned ETag value in the If-Match header to indicate the version of the Resource it wishes to update<P>If this is not the most up to date version, the server will return a 412 error.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userid",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditMedicalDetailsCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MedicalDetails"
                }
              }
            }
          },
          "400": {
            "description": "Invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/claims/{claimId}/medical-details": {
      "get": {
        "tags": [
          "Medical Details"
        ],
        "summary": "Returns Medical Details on a claim for a group client user",
        "description": "Returns Medical Details on a claim for a group client user.Medical Details consist of a definition of the condition, cause of injury, relevant dates and more as described in MedicalDetails. Medical Details are related to all FINEOS Claims entities with a one to one mapping. Medical Details represents the current view of the medical aspects of the Claim.<p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CLAIMS_MEDICALDETAILS</p>",
        "operationId": "getSingle_13",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "The user who is making the request",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "claimId",
            "in": "path",
            "description": "Claim identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userid",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MedicalDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/healthcheck": {
      "get": {
        "tags": [
          "Health Check"
        ],
        "summary": "check frameworks services status",
        "operationId": "getSingle_14",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "user identification",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "401": {
            "description": "userid header not present or invalid"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/enum-domains/{enumDomainId}": {
      "get": {
        "tags": [
          "Enum Domain"
        ],
        "summary": "Get specific Enum Domain",
        "description": "An Enum Domain is grouping of Enum instances. For example <I>Title</I> which groups Mr., Mrs, Dr.<P>Gets specific Enum Domain as specified by the <CODE>enumDomainId</CODE></P>",
        "operationId": "getSingle_15",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "enumDomainId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userid",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnumDomain"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/enum-domains": {
      "get": {
        "tags": [
          "Enum Domain"
        ],
        "summary": "Get Enum Domains. Sort available and query available.",
        "description": "An Enum Domain is a collection of Enum Instance.  For example, an Enum Domain could be <I>Title</I> and the instances be: <I>Mr., Mrs., Dr.</I><P>This API provides the ability to search and sort for various Enum Domains. All parameters are case senstive and no wildcards are accepted.<br><br> The name query parameters can be specified more than once. For example: `/enum-domains?name=Title&name=StudySkills` will return the Enum Domain with name 'Title' and the Enum Domain with name 'StudySkills'<br><br>If the query endpoint has no matches, an empty list is returned<br><br>If the request specifies query parameters different from the parameters allowed, the service will return a <b>400 error</b> code</P>",
        "operationId": "query_11",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name of the enum domain. More than one can be specified",
            "required": true,
            "schema": {
              "maxItems": 2147483647,
              "minItems": 1,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Comma separated list of sort parameters. Ascending by default, for descending preappend with <B>-</B>",
            "schema": {
              "$ref": "#/components/schemas/QuerySortInfo"
            },
            "examples": {
              "Sort by name ascending": {
                "summary": "Sorts by name ascending",
                "description": "Sort by name ascending",
                "value": "name"
              },
              "Sort by name decending": {
                "summary": "Sorts by name decending",
                "description": "Sort by name decending",
                "value": "-name"
              }
            }
          },
          {
            "name": "userid",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnumDomains"
                }
              }
            }
          },
          "400": {
            "description": "Invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/enum-instances/{enumInstanceId}": {
      "get": {
        "tags": [
          "Enum Instance"
        ],
        "summary": "Gets Enum Instance as specified by enumInstanceId",
        "description": "An Enum Instance is an specific Enum value within an Enum Domain.  For example, an Enum Domain could be <I>Title</I> and the instances be: <I>Mr., Mrs., Dr.</I><P>Gets a specific Enum Instance as specified by <code>enumInstanceId</code>",
        "operationId": "getSingleEnumInstance",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "enumInstanceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userid",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnumInstance"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/enum-domains/{enumDomainId}/enum-instances/{enumInstanceId}": {
      "get": {
        "tags": [
          "Enum Instance"
        ],
        "summary": "Get specified Enum Instance in a specified Enum Domain",
        "description": "An Enum Instance represents a specific value in an Enum Domain e.g. Mr. Mrs.\n<P>Gets a specific Enum Instance as specified by <code>enumInstanceId</code> in a specific Enum Domain as specified by <code>enumDomainId</code></P>",
        "operationId": "getSingle_16",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "enumDomainId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "enumInstanceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userid",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnumInstance"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/enum-domains/{enumDomainId}/enum-instances": {
      "get": {
        "tags": [
          "Enum Instance"
        ],
        "summary": "Get Enum Instance that belong to a particular Enum Domain. Sort and equality search available",
        "operationId": "query_12",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "enumDomainId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Comma separated list of sort parameters. Ascending by default, for descending preappend with <B>-</B>",
            "schema": {
              "$ref": "#/components/schemas/QuerySortInfo"
            },
            "examples": {
              "Sort by name ascending": {
                "summary": "Sorts by name ascending",
                "description": "Sort by name ascending",
                "value": "name"
              },
              "Sort by dOrder descending, then name ascending": {
                "summary": "Sorts by dOrder descending, then name ascending",
                "description": "Sort by dOrder descending, then name ascending",
                "value": "-dOrder,name"
              },
              "Sort by dOrder ascending, then dOrder ascending": {
                "summary": "Sorts by dOrder ascending, then dOrder ascending",
                "description": "Sort by dOrder ascending, then dOrder ascending",
                "value": "dOrder,name"
              },
              "Sort by name decending": {
                "summary": "Sorts by name decending",
                "description": "Sort by name decending",
                "value": "-name"
              }
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Enum instance name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fullId",
            "in": "query",
            "description": "Enum instance fullId, corresponds to <code>TaEnum.fullId</code>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "retired",
            "in": "query",
            "description": "If <code>true</code> retired Instances only are returned,if <code>false</code>(or not specified) non-retired instances only are returned",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Date at which the Enum was activated",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "Date at which the Enum will become inactive (since that date, enum should be considered inactive)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dOrder",
            "in": "query",
            "description": "Denotes the order the Enum resides within all Enum Instances within Domain",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "subsets.name",
            "in": "query",
            "description": "The name of the subset to which the Enum Instance belongs",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userid",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnumInstances"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/absences/accommodation-cases/{accommodationCaseId}": {
      "get": {
        "tags": [
          "Group Client Absence"
        ],
        "summary": "Retrieves accommodation case information.",
        "description": "Retrieves accommodation case information.<p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_ABSENCE_ACCOMMODATIONCASES_GETSINGLE</p>",
        "operationId": "readAccommodationCase",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accommodationCaseId",
            "in": "path",
            "description": "Resource Id of Accommodation Case requested.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns accommodation case information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupClientAccommodationCase"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognize the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/absences/{customerId}/leave-plans/{leavePlanId}/leave-availability": {
      "get": {
        "tags": [
          "Group Client Absence"
        ],
        "summary": "Get the available leave balance details of the employee as on given date.",
        "description": "Get the available leave balance details of the employee as on given date.The leave balance will be approximate balance avilable with the employee as per the leave plan entitlement.The start and end date of the leave calculation period is calcualted based on the leave plan calculation period.The calculation period may be any of the following type.<UL><li><B>Rolling Back :</B> A Rolling Back period is a fixed-length period measured backwards from the date that an employee has requested leave under a leave plan.In this example,The leave request starts on 13-Oct-2018. As the Time Within Period is 12 months,the calculation period is from 14-Oct-2017 to 13-Oct-2018.</li><li><B>Rolling Forward :</B> A Rolling Forward period is a fixed-length period measured forward from the first approved date of absence taken by an employee under a leave plan.The next rolling forward period begins on the next approved date of absence taken by the same employee under the same leave plan following completion of the previous rolling forward period.In this example, the first leave request was on 11-Jan-2017. As the Time Within Period is 12 months,the calculation period runs until 10-Jan-2018.</li><li><B>Fixed Year :</B> With a Fixed Year calculation period, the entitlement period starts on a specified date and counts from this date each year.For example,If an employee requests leave on 24-May-2018 and the Starting From date is 13-Nov-2017,the entitlement period runs from 13-Nov-2017 to 12-Nov-2018.</li><li><B>Calendar Year :</B> This generally runs from Jan 01 to Dec 31 in each year. This is the case when it's a 12-month time within period.It's also possible to have a 24-month time within period and a calendar year calculation period.For example,If an employee requests leave on 20-June-2018,The entitlement period the application considers is from 01-Jan 2018 to 31-Dec-2018.</li></UL><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_ABSENCE_LEAVEPLANS_LEAVEAVAILABILITY</p>",
        "operationId": "getLeaveAvailability",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "leavePlanId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "calculationDate",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get the available leave balance details of the employee as on given date.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmployeeLeaveBalance"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognize the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/absences/absence-cases/{absenceCaseId}/leave-periods-change-request": {
      "post": {
        "tags": [
          "Group Client Absence"
        ],
        "summary": "Requests a call to action for the carrier to make a change in the leave periods of an absence case.",
        "description": "Requests a call to action for the carrier to make a change in the leave periods of an absence case.<p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_ABSENCE_LEAVEPERIODSCHANGEREQUEST_ADD</p>",
        "operationId": "changeLeavePeriodRequest",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "absenceCaseId",
            "in": "path",
            "description": "Resource Id of Absence Case requested.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "List of leave period changes requested.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelLeavePeriodsDetails"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns when leave period is successfully changed ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CancelLeavePeriodsDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognize the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Request could not be processed by the application for some application specific reason e.g. validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationMessageModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/absences/absence-period-decisions": {
      "get": {
        "tags": [
          "Group Client Absence"
        ],
        "summary": "Retrieves decisions related to requested leave periods.",
        "description": "This API returns a list of decisions taken in relation to leave periods requested by one or more employees.<br><br>A decision is represented by a set of status which includes leave plan applicability, elegibility and availablity status, evidence document status, requested period approval or denial.<br><br>If different decisions have been taken for different days in the same period, e.g some days have been approved and some denied, the requested period is broken down to sub-periods composed by consecutive days holding the same decision. These sub-periods can be easily identified because they hold the same period reference number.<br><br>Additionally, each decision holds general information about the selected leave plan, the leave request, a reference to the absense case id and the employee id, for any period in the list.<p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_ABSENCE_ABSENCEPERIODDECISIONS </p>",
        "operationId": "getAbsencePeriodDecisions",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the user accessing the resource."
            }
          },
          {
            "name": "absenceId",
            "in": "query",
            "description": "The absence case number. If no case number is given, the API will return all requested periods for all available absences.<br><br>Either absenceId or employeeId must be provided.",
            "schema": {
              "type": "string",
              "description": "The Absence Case Number for which we want to retrieve the Period Decisions"
            }
          },
          {
            "name": "customerId",
            "in": "query",
            "description": "The employee reference number. If no reference number is given, the API will return period requested by all employees.Either absenceId or employeeId must be provided.",
            "schema": {
              "type": "string",
              "description": "The Customer Id of Employee for whom we want to retrieve the Period Decisions",
              "default": ""
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "The search period start date. If a start date is given, only periods ending after this date will be returned.",
            "schema": {
              "type": "string",
              "description": "The Start Date from which we want to retrieve the Period Decisions"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "The search period end date. If an end date is given, only periods starting before this date will be returned.",
            "schema": {
              "type": "string",
              "description": "The End Date to which we want to retrieve the Period Decisions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of Absence Period Decisions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PeriodDecisions"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognize the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Request could not be processed by the application for some application specific reason e.g. validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/claims/startClaim/{claimCaseType}": {
      "post": {
        "tags": [
          "Group Client"
        ],
        "description": "Creates a claim with the customer as the default participant and links policies to it<p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CLAIMS_START</p>",
        "operationId": "addClaim",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "claimCaseType",
            "in": "path",
            "description": "Name of a claim case type",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Basic information needed for creating a group client claim",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StartClaimDetails"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Claim Summary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaimSummary"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognise the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Request could not be processed by the application for some application specific reason e.g. validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ValidationMessageModel"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/claims/{claimId}/medicalDetails/restrictionsLimitations": {
      "get": {
        "tags": [
          "Group Client"
        ],
        "description": "Retrieves restrictions and limitations, so that user can review some key information about the claim.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CLAIMS_RESTRICTIONSLIMITATIONS</p>",
        "operationId": "readRestrictionsLimitationsForGroupClient",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "claimId",
            "in": "path",
            "description": "Claim case number",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Read successful. Returns restrictions and limitations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestrictionsLimitations"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognize the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/claims/{claimId}/medicalDetails/addDiagnosisCode": {
      "post": {
        "tags": [
          "Group Client"
        ],
        "description": "Add diagnosis code to claim case medical details.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CLAIMS_DIAGNOSISCODE_ADD</p>",
        "operationId": "addDiagnosisDetailsForGroupClient",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "claimId",
            "in": "path",
            "description": "The claim case number.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The diagnosis details to be added to the claim case.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewDiagnosisDetails"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Diagnosis details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiagnosisDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognise the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/getCustomerForGroupClient": {
      "get": {
        "tags": [
          "Group Client"
        ],
        "description": "<p>Note: this endpoint is deprecated, please use /customers instead</p> Returns a GroupClient Customer details which contains a list of GetCustomerResponse details.<p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CUSTOMERFORGROUPCLIENT</p>",
        "operationId": "getCustomerForGroupClient",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "firstName",
            "in": "query",
            "description": "First Name of the Customer which will be used as search criteria",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastName",
            "in": "query",
            "description": "Last Name of the Customer which will be used as search criteria",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateOfBirth",
            "in": "query",
            "description": "Date Of Birth of the Customer which will be used as search criteria",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "identificationNumber",
            "in": "query",
            "description": "Identification Number of the Customer which will be used as search criteria",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "phoneNumber",
            "in": "query",
            "description": "Phone Number of the Customer which will be used as search criteria",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "areaCode",
            "in": "query",
            "description": "Area Code of the Customer which will be used as search criteria",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "intCode",
            "in": "query",
            "description": "IntCode of the Customer which will be used as search criteria",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "emailAddress",
            "in": "query",
            "description": "Email Address of the Customer which will be used as search criteria",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.Returns a Customer details which contains a list of GetCustomerResponse objects.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetCustomerResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognise the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Request could not be processed by the application for some application specific reason e.g. validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ValidationMessageModel"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/groupClient/claims/{claimId}/medicalDetails/updateRestrictionsLimitations": {
      "post": {
        "tags": [
          "Group Client"
        ],
        "description": "update restrictions and limitations related information of the claim.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CLAIMS_RESTRICTIONSLIMITS_UPDATE</p>",
        "operationId": "updateRestrictionsLimitationsForGroupClient",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "claimId",
            "in": "path",
            "description": "The claim case number.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "restrictions and limitations related information of the claim.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestrictionsLimitations"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "update restrictions and limitations related information of the claim",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestrictionsLimitations"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognize the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/claims/{claimId}/medicalDetails/diagnosisCodes/{diagnosisCodeId}/updateDiagnosisCode": {
      "post": {
        "tags": [
          "Group Client"
        ],
        "description": "Add diagnosis code to claim case medical details.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CLAIMS_DIAGNOSISCODE_UPDATE</p>",
        "operationId": "updateDiagnosisDetailsForGroupClient",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "claimId",
            "in": "path",
            "description": "The claim case number.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "diagnosisCodeId",
            "in": "path",
            "description": "The diagnosis code id.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Business Entity OID",
              "format": "string",
              "example": "PE-00012-0000001234"
            }
          }
        ],
        "requestBody": {
          "description": "The diagnosis details to be updated to the claim case.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewDiagnosisDetails"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Diagnosis details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiagnosisDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognize the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/claims/{claimId}/medicalDetails/diagnosisCodes/{diagnosisCodeId}/removeDiagnosisCode": {
      "post": {
        "tags": [
          "Group Client"
        ],
        "description": "API to remove the diagnosis detail associated with claim.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CLAIMS_DIAGNOSISCODE_REMOVE</p>",
        "operationId": "removeDiagnosisCode",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "claimId",
            "in": "path",
            "description": "Claim case number.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "diagnosisCodeId",
            "in": "path",
            "description": "diagnosis detail id associated with the claim to be removed.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Business Entity OID",
              "format": "string",
              "example": "PE-00012-0000001234"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Removed successfully."
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognize the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/claims/{claimId}/payments/{paymentId}/paymentLines": {
      "get": {
        "tags": [
          "Group Client"
        ],
        "description": "Returns all the payment lines for payments made which relate to the group client.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CLAIMS_PAYMENTLINES</p>",
        "operationId": "getPaymentLines",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "claimId",
            "in": "path",
            "description": "Id of the claim for which we get the payment lines for payments made.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentId",
            "in": "path",
            "description": "Id of payment for which to get the payment lines.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Business Entity OID",
              "format": "string",
              "example": "PE-00012-0000001234"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns A list of payment lines for group client",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentLine"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognise the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/eforms/{eformType}": {
      "post": {
        "tags": [
          "Group Client"
        ],
        "summary": "Add an EForm to the GroupClient represented by the current user.",
        "description": "Add an EForm to the GroupClient represented by the current user. If the eformType provided in the API URL does not exist, a new EForm Type will be created.<p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_EFORMS_ADD</p>",
        "operationId": "addEFormEmployeeNotEstablishedForGroupClient",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eformType",
            "in": "path",
            "description": "The name of the Simple Eform Type or Eform Type to create",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "List of eFormAttributes of the EForm document which will be created",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EFormAttribute"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "EForm added successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EForm"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognize the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Request could not be processed by the application for some application specific reason e.g. validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ValidationMessageModel"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/claims/{claimId}/socialSecurityBenefit/decisions": {
      "get": {
        "tags": [
          "Group Client"
        ],
        "summary": "Get the details of claims social security decision details for group client user.",
        "description": "Get the details of claims social security decision details for group client user<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CLAIMS_SOCIALSECURITYDECISIONS</p>",
        "operationId": "getSocialSecurityDecisions",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "claimId",
            "in": "path",
            "description": "The id of customer that belongs to the group client user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Read Successfull, get the details of claims social security decision details for group client user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SocialSecurityDecisionResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognize the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/cases/{caseId}/contacts": {
      "get": {
        "tags": [
          "Group Client"
        ],
        "description": "Retrieve a list of contacts linked to a case.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CASES_CONTACTS</p>",
        "operationId": "getCaseContacts",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "caseId",
            "in": "path",
            "description": "case number",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of contacts linked to a case",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CaseContactSummary"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognise the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/cases/{caseId}/contacts/{contactId}/documents": {
      "get": {
        "tags": [
          "Group Client"
        ],
        "description": "Retrieve a list of documents for a contact linked to a case.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CASES_CONTACTDOCUMENTS</p>",
        "operationId": "getCaseContactDocuments",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "caseId",
            "in": "path",
            "description": "case number",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contactId",
            "in": "path",
            "description": "case contact ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Documents of a contact linked to a case",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupClientDocument"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognise the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/cases/{caseId}/documents/base64Upload/{documentType}": {
      "post": {
        "tags": [
          "Group Client"
        ],
        "summary": "Upload documents to the FINEOS system using a JSON payload with Base64 encoding for the file content and file details.",
        "description": "Upload documents to the FINEOS system using a JSON payload with Base64 encoding for the file content and file details.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CASES_DOCUMENT_BASE64UPLOAD</p>",
        "operationId": "uploadBase64EncodedFile",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "caseId",
            "in": "path",
            "description": "The case number of the case for which we upload the document.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentType",
            "in": "path",
            "description": "The name of external document type we wish to upload.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Basic information needed for Uploading a document",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Base64EncodedFileData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Document will be successfully uploaded and Document Object will be returned as a JSON."
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognize the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Request could not be processed by the application for some application specific reason e.g. validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ValidationMessageModel"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/cases/{caseId}/outstanding-information": {
      "get": {
        "tags": [
          "Group Client"
        ],
        "summary": "Returns a list of outstanding information items.",
        "description": "Returns the list of the outstanding information items for open outstanding requirements (not suppressed or removed) that have been added to the case or its child cases and if the case is an Absence Case, it also returns the pending, received but still pending decision or received but not satisfied evidence results associated to any of its leave requests that are pending or in review.<BR>Individual outstanding requirement and evidences returned may be further filtered based on configured events and rules. By default, no filtering will apply. However, rules can be configured if there was a need for instance to exclude specific outstanding requirement categories or type or specific evidences from the list returned to the group client.<BR> Where two outstanding items of the same type exist on different cases, only a single item will be returned in the payload.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CASES_OUTSTANDINGINFORMATION</p>",
        "operationId": "getOutstandingItems",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "caseId",
            "in": "path",
            "description": "case number",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of outstanding information items.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OutstandingInformationItem"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognize the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/cases/{caseId}/outstanding-information-received": {
      "post": {
        "tags": [
          "Group Client"
        ],
        "summary": "Updates the outstanding information items for the type provided that exist on the case or any of its child cases.",
        "description": "This API will be used to update the outstanding information items that exist on the case or any of its child cases.<BR>The API expects that there is at least one outstanding information item existing on either the provided case or one of its child cases, that is either an open outstanding requirement on one of the cases, or a pending evidence request on one of the absence cases for the same document type. If not, a 422 response will be returned.<BR>For all cases, where a document has been provided, it will link the document to the any open outstanding requirements where the type for the outstanding requirement (as determined by an event) matches the type supplied in the URL.<BR>In addition, where the case or any or its sub cases are absence cases, it will also update the evidences on the absence cases for the same type to mark them as received or satisfied.<BR>An outstanding information item may be automatically closed or marked as satisfactory, this will be determined by an event.<BR>A task will then be generated for the back-office user to inform them that one or many outstanding information items have been updated, so that they can view the related document (where it exists) or can examine the case and determine whether it satisfies the outstanding information.<BR>The task will be created on either an absence, accommodation, generic or a claim case. It will never be created for a notification case. If all outstanding information items that are updated are specific to a claim or generic case only OR if there is a mix of claim and absence outstanding information items updated, the task will be associated with a claim or generic case. Otherwise, it will be associated with an absence case.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CASES_OUTSTANDINGINFORMATIONRECEIVED_ADD</p>",
        "operationId": "updateOutstandingInformationItem",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "caseId",
            "in": "path",
            "description": "The Id of the case for which the outstanding items will be updated.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The data to mark outstanding requirement and evidnces.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OutstandingInformationData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Request."
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognize the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Request could not be processed by the application for some application specific reason e.g. validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ValidationMessageModel"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/startNotification": {
      "post": {
        "tags": [
          "Group Client"
        ],
        "summary": "Employer create a new notification case on behalf of the employee.",
        "description": "Employer create a new notification case on behalf of the employee. After creating the notification case successfully, a follow-up notification task will be created for the back-office user to complete the intake process. To give more information about the request a Simple EForm document will be added notification case. The back-office user can view the EFrom data to get more information about the notification case request.",
        "operationId": "createNotificationForEmployee",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Payload carries information for notification case and eform attributes.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationDetails"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Request. Returns notification case details."
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognize the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/cases/{caseId}/eforms": {
      "get": {
        "tags": [
          "Group Client"
        ],
        "description": "Retrieve a list of eforms linked to a case or linked to a contact on a case.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CASES_EFORMS </p>",
        "operationId": "getEforms",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "caseId",
            "in": "path",
            "description": "case number",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eFormTypes",
            "in": "query",
            "description": "String which contains comma delimited column names.",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of eforms linked to a case or linked to a contact on a case",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EFormSummary"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognise the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/cases/{caseId}/managedRequirements/{managedReqId}/documents": {
      "get": {
        "tags": [
          "Group Client"
        ],
        "description": "Returns a list of documents linked to a managed requirement<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CASES_MANAGEDREQDOCUMENTS</p>",
        "operationId": "getDocumentsForManagedRequirement",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "caseId",
            "in": "path",
            "description": "claim case number",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "managedReqId",
            "in": "path",
            "description": "Managed Requirement Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of documents linked to the managed requirement",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupClientDocument"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognise the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/cases/{caseId}/managedRequirements/{managedReqId}/eforms": {
      "get": {
        "tags": [
          "Group Client"
        ],
        "description": "Returns a list of eforms linked to a managed requirement.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CASES_MANAGEDREQEFORMS</p>",
        "operationId": "getEformsForManagedRequirement",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "caseId",
            "in": "path",
            "description": "claim case number",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "managedReqId",
            "in": "path",
            "description": "Managed Requirement Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of eforms linked to the managed requirement",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EFormSummary"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognise the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/cases/{caseId}/addEForm/{eformType}": {
      "post": {
        "tags": [
          "Group Client"
        ],
        "summary": "Adds an EForm",
        "description": "Adds a new EForm document to a Case, returning the newly created data.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CASES_EFORM_ADD</p>",
        "operationId": "addEForm",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "caseId",
            "in": "path",
            "description": "Case number",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eformType",
            "in": "path",
            "description": "The name of the Simple Eform Type or Eform Type to create",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "List of eFormAttributes of the EForm document which will be created",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EFormAttribute"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Added EForm successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EForm"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognize the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Request could not be processed by the application for some application specific reason e.g. validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ValidationMessageModel"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/claims": {
      "get": {
        "tags": [
          "Group Client"
        ],
        "description": "Returns a GroupClientClaims object which contains a list of claim summary. The results can be sorted on these columns : claimId, claimType, creationDate, effectiveDate, description, status.<p>This API returns a list of claim cases where:</p><ul><li>The Group Client has a specific role (such as 'Employer' or 'Fund') on the claim. The list of applicable roles is determined by calling the ViewPoint.GroupClient. GetGroupClientPartyCaseRoleEvent</li><li>And the claim case satisfies the filter input parameters</li><li>And the case has the same adminGroup as one of the adminGroups that the user can access, as returned by the getAdminGroupsForGroupClientUser interface method; if this interface is not implemented, the case will not be returned</li><li>And the claim case is not Anonymised</li></ul>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CLAIMS",
        "operationId": "getClaims",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "role",
            "in": "header",
            "description": "This header paramter will be used by the portal user.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "claimIncurredDateFrom",
            "in": "query",
            "description": "Start date of the period which will be used to search by the claim incurred date criteria",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "claimIncurredDateTo",
            "in": "query",
            "description": "End date of the period which will be used to search by the claim incurred date criteria",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "notificationDateFrom",
            "in": "query",
            "description": "Start date of the period which will be used to search by the claim notification date criteria",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "notificationDateTo",
            "in": "query",
            "description": "End date of the period which will be used to search by the claim notification date criteria",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status of the claim which will be used as a search criteria",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "pageNbr",
            "in": "query",
            "description": "Requested page number",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Requested number of claims per page",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 0
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "String which contains comma delimited column names. Results can be sorted on these columns : claimId, claimType, creationDate, effectiveDate, description, status.",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request.Returns a GroupClientClaims object which contains a list of claim summary objects.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClaimSummary"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognise the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Request could not be processed by the application for some application specific reason e.g. validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/cases/{caseId}/documents": {
      "get": {
        "tags": [
          "Group Client"
        ],
        "summary": "Returns a list of documents for the case and it's child cases (child cases only considered where filter indicates that child cases should be considered)",
        "description": "Returns the list of documents that for a case. Where _filter=includeChildCases, will also return documents that are linked to child cases of the provided CaseID All cases, and child cases must be accessible by the group client point of contact i.e. cases where the group client has a configured party case role on the case. The following event is used to determine the applicable roles for group client - Viewpoint.groupClient.getAllowedCaseTypeRoleNamesForGroupClientEvent Documents that are linked directly to the case, or to a contact on the case will be returned. Documents returned may be further filtered based on the following event - Viewpoint.groupClient.includeInListOfDocumentsForGroupClientEvent. By default, no filtering will apply. However, a rule could be configured if there was a need for instance to exclude documents of a specific document type from the list returned to the group client.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CASES_DOCUMENTS</p>",
        "operationId": "getDocuments",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "caseId",
            "in": "path",
            "description": "Id of the case. Only documents associated with this case or this case contacts are returned.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_filter",
            "in": "query",
            "description": "Will be used when there is a need to apply a filter to the documents returned. Valid business criteria are as follows.<p><ul><li><b>?_filter=includeChildCases</b> Apply this filter when the requirement is see all documents for a case and all of it's child cases. When no filter is provided, only documents for the case in the url will be returned.</ul></li>",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of documents linked to the case",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupClientDocument"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognize the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/cases/{caseId}/managedRequirements": {
      "get": {
        "tags": [
          "Group Client"
        ],
        "description": "Returns a list of managed requirement on the case.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CASES_MANAGEDREQUIREMENTS</p>",
        "operationId": "getManagedRequirements",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "caseId",
            "in": "path",
            "description": "The Case number",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request. Returns a list of managed Requirement",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ManagedRequirementDetails"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognize the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/claims/{claimId}/payments": {
      "get": {
        "tags": [
          "Group Client"
        ],
        "description": "Returns all the payments made (paid payments not payments waiting to be paid) on the claim which relate to the group client customer or which have been configured to be returned to the customer.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CLAIMS_PAYMENTS</p>",
        "operationId": "getPayments",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "claimId",
            "in": "path",
            "description": "Id of the claim. Only payments associated to this claim are returned.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of payments",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Payment"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognize the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/claim/{claimId}/lodgeClaim": {
      "post": {
        "tags": [
          "Group Client"
        ],
        "description": "This operation is triggered by a customer when he/she is finished with updating a claim. This operation will notify head office users to take over this claim.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CLAIMS_LODGE</p>",
        "operationId": "lodgeClaim",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "claimId",
            "in": "path",
            "description": "Claim case number",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lodgement successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognise the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/customers/{customerId}/readCustomerContactDetails": {
      "get": {
        "tags": [
          "Group Client"
        ],
        "description": "<p>Note: this endpoint is deprecated, please use <ul><li>/customers/{customerId}/email-addresses</li><li>/customers/{customerId}/email-addresses/{emailId}</li><li>/customers/{customerId}/phone-numbers</li><li>/customers/{customerId}/phone-numbers/{phoneNumberId}</li></ul> instead</p> Return customer contact details for the user. These include email addresses and phonde numbers <p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CUSTOMERS_READCONTACTDETAILS</p>",
        "operationId": "readCustomerContactDetails",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "in": "path",
            "description": "The customerId belongs to the group client user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The Customer contact details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognize the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/groupClient/customers/{customerId}/readCustomerDetails": {
      "get": {
        "tags": [
          "Group Client"
        ],
        "description": "<p>Note: this endpoint is deprecated, please use /customers/{customerId}/customer-info instead</p> Returns group client customer details. <p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CUSTOMERS_CUSTOMERINFO</p>",
        "operationId": "readCustomerDetails",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "in": "path",
            "description": "Customer id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The customer's personal Details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupClientCustomer"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognize the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/groupClient/claims/{claimId}/readDisabilityDetails": {
      "get": {
        "tags": [
          "Group Client"
        ],
        "description": "Retrieves disability claims details, so that user can review some key information about the claim.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CLAIMS_DISABILITYDETAILS</p>",
        "operationId": "readDisabilityClaim",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "claimId",
            "in": "path",
            "description": "Claim case number",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Read successful. Returns disability claims details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReadDisabilityResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognize the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/cases/{caseId}/eforms/{eformId}/readEform": {
      "get": {
        "tags": [
          "Group Client"
        ],
        "description": "To retrieve the information stored in a specified EForm document.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CASES_READEFORM</p>",
        "operationId": "readEForm",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "caseId",
            "in": "path",
            "description": "case number",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eformId",
            "in": "path",
            "description": "Id of an EForm document",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Eform linked to the case",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EForm"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognise the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/customers/{customerId}/updateCustomerContactDetails": {
      "post": {
        "tags": [
          "Group Client"
        ],
        "summary": "Updates group client customer contact details",
        "description": "<p>Note: this endpoint is deprecated, please use <ul><li>/customers/{customerId}/email-addresses/{emailId}/edit</li><li>/customers/{customerId}/email-addresses</li><li>/customers/{customerId}/email-addresses/{emailId}/remove</li><li>/customers/{customerId}/phone-numbers/{phoneNumberId}/edit</li><li>/customers/{customerId}/phone-numbers</li><li>/customers/{customerId}/phone-numbers/{phoneNumberId}/remove</li></ul> instead</p> Updates the contact details for the customer of a group client user, which includes email addresses and phone numbers, returns updated contact details as response.<p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CUSTOMERS_CONTACTDETAILS_UPDATE</p>",
        "operationId": "updateCustomerContactDetails",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "in": "path",
            "description": "The id of customer that belongs to the group client user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The contact details for customer.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactDetails"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Customer contact details have been updated successfully, returns updated contact details as response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognize the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Request could not be processed by the application for some application specific reason e.g. validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ValidationMessageModel"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/groupClient/customers/{customerId}/updateCustomerDetails": {
      "post": {
        "tags": [
          "Group Client"
        ],
        "description": "<p>Note: this endpoint is deprecated, please use /customers/{customerId}/customer-info/edit instead</p> Updates the Customer's Personal Details. <p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CUSTOMERS_CUSTOMERINFO_EDIT</p>",
        "operationId": "updateCustomerDetails",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "in": "path",
            "description": "The customerId belongs to the group client user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The Customer details to update belongs to group client user.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Customer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The Customer's details have been updated successfully."
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognize the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Request could not be processed by the application for some application specific reason e.g. validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ValidationMessageModel"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/groupClient/claims/{claimId}/updateDisabilityDetails": {
      "post": {
        "tags": [
          "Group Client"
        ],
        "description": "API to update a claim on-line of type Disability claim only.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CLAIMS_DISABILITYDETAILS_UPDATE</p>",
        "operationId": "updateDisabilityClaim",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "claimId",
            "in": "path",
            "description": "Claim case number",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Set of disability claim information exposed to a customer for editing",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DisabilityClaim"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognise the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Request could not be processed by the application for some application specific reason e.g. validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ValidationMessageModel"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/cases/{caseId}/eforms/updateEForm/{eformId}": {
      "post": {
        "tags": [
          "Group Client"
        ],
        "description": "Update existing EForm document.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CASES_EFORM_UPDATE</p>",
        "operationId": "updateEForm",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "caseId",
            "in": "path",
            "description": "Claim case number",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eformId",
            "in": "path",
            "description": "Id of an EForm document",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Updated EForm document",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EFormAttribute"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "EForm document updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EForm"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognize the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Request could not be processed by the application for some application specific reason e.g. validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ValidationMessageModel"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/cases/{caseId}/managedRequirements/{managedReqId}/linkDocument/{docId}": {
      "post": {
        "tags": [
          "Group Client"
        ],
        "summary": "Links document to managed requirement",
        "description": "Links the document to the managed requirement if the claim belongs to the customer and the managed requirement is linked to the claim.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CASES_MANAGEDREQ_LINKDOCUMENT</p>",
        "operationId": "linkDocumentToManagedRequirement",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "caseId",
            "in": "path",
            "description": "Claim case number",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "managedReqId",
            "in": "path",
            "description": "The managed Requirement id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "docId",
            "in": "path",
            "description": "The document id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognize the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/cases/{caseId}/documents/{documentId}/markread": {
      "post": {
        "tags": [
          "Group Client"
        ],
        "summary": "Mark a document as read by user within the FINEOS system.",
        "description": "Mark a document as read by user within the FINEOS system.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CASES_DOCUMENT_MARKREAD</p>",
        "operationId": "markDocumentAsRead",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "caseId",
            "in": "path",
            "description": "The case number for the case to which the document is associated",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "description": "The I value of the document we wish to mark as read",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Document successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupClientDocument"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognize the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "404": {
            "description": "Document not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/cases/{caseId}/participants": {
      "get": {
        "tags": [
          "Group Client"
        ],
        "description": "Retrieves Case Participants for a case.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CASES_PARTICIPANTS</p>",
        "operationId": "getCaseParticipants",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "caseId",
            "in": "path",
            "description": "The Case number",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Read successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CaseParticipantsSummary"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognize the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/cases/{caseId}/participants/{participantId}/readParticipantDetails": {
      "get": {
        "tags": [
          "Group Client"
        ],
        "description": "Returns a Case Participant details (date of birth, gender, correspondence address etc.) for group client.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CASES_READPARTICIPANTDETAILS</p>",
        "operationId": "readParticipantDetails",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "caseId",
            "in": "path",
            "description": "claim case number",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "participantId",
            "in": "path",
            "description": "participant Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Case Participant details for group client",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Participant"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognise the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/cases/{caseId}/participants/{participantId}/readParticipantContactDetails": {
      "get": {
        "tags": [
          "Group Client"
        ],
        "description": "Returns a Case Participant details (date of birth, gender, correspondence address etc.) for group client.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CASES_READPARTICIPANTCONTACTDETAILS</p>",
        "operationId": "readParticipantContactDetails",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "caseId",
            "in": "path",
            "description": "claim case number",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "participantId",
            "in": "path",
            "description": "participant Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Case Participant details for group client",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParticipantContactDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognise the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/claims/{claimId}/benefits": {
      "get": {
        "tags": [
          "Group Client"
        ],
        "description": "Returns a list of benefit summaries for a group client user.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CLAIMS_BENEFITS</p>",
        "operationId": "getClaimBenefits",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "claimId",
            "in": "path",
            "description": "claim case number",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of benefit summaries for a group client user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BenefitSummary"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognise the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/claims/{claimId}/benefits/{benefitId}/readDisabilityBenefit": {
      "get": {
        "tags": [
          "Group Client"
        ],
        "description": "Returns a disability Benefit for a group client user.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CLAIMS_DISABILITYBENEFIT_GETSINGLE</p>",
        "operationId": "getClaimDisabilityBenefit",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "claimId",
            "in": "path",
            "description": "claim case number",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "benefitId",
            "in": "path",
            "description": "benefit case number",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A disability benefit for a group client user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReadDisabilityBenefitResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognise the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/claims/{claimId}/benefits/{benefitId}/readLumpSumBenefit": {
      "get": {
        "tags": [
          "Group Client"
        ],
        "description": "Returns a lump sum Benefit for a group client user.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CLAIMS_READLUMPSUMBENEFIT</p>",
        "operationId": "getClaimLumpSumBenefit",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "claimId",
            "in": "path",
            "description": "claim case number",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "benefitId",
            "in": "path",
            "description": "benefit case number",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A lump sum benefit for a group client user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReadLumpSumBenefitResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognise the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/cases/{caseId}/caseStatusHistory": {
      "get": {
        "tags": [
          "Group Client"
        ],
        "description": "Returns list of the case statuses of a particular case for a group client user.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CASES_CASESTATUSHISTORY</p>",
        "operationId": "getCaseStatusHistory",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "caseId",
            "in": "path",
            "description": "case number",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of the case statuses of a particular case for a group client user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CaseStatusHistory"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognise the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/cases/{caseId}/documents/{documentId}/download": {
      "get": {
        "tags": [
          "Group Client"
        ],
        "description": "Returns the document to download.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CASES_DOCUMENTDOWNLOAD</p>",
        "operationId": "getDocumentContentsAsStream",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "caseId",
            "in": "path",
            "description": "Id of the claim case.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "description": "Id of the document to download. Only document associated with the claim is allowed to download.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The document downloaded successfully."
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognize the delegated user id",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/cases/{caseId}/documents/{documentId}/base64Download": {
      "get": {
        "tags": [
          "Group Client"
        ],
        "description": "Returns the document to download, base64 encoded, in a JSON object.<p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CASES_DOCUMENTS_BASE64DOWNLOAD </p>",
        "operationId": "getDocumentContentsAsBase64EncodedString",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "caseId",
            "in": "path",
            "description": "Id of the claim case.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "description": "Id of the document to download. Only document associated with the claim is allowed to download.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The document downloaded successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Base64EncodedFileDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognize the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/cases/{caseId}/documents/upload/{documentType}": {
      "post": {
        "tags": [
          "Group Client"
        ],
        "summary": "Uploads a document to configured DMS",
        "description": "This API will enable the group client to upload documentation to the FINEOS system.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CASES_DOCUMENT_UPLOAD</p>",
        "operationId": "uploadFile",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "caseId",
            "in": "path",
            "description": "The case number of the case for which we upload the document.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentType",
            "in": "path",
            "description": "The name of external document type we wish to upload.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "documentContents"
                ],
                "type": "object",
                "properties": {
                  "documentContents": {
                    "type": "string",
                    "description": "Uploaded file",
                    "format": "binary"
                  },
                  "documentDescription": {
                    "type": "string"
                  },
                  "managedRequirementId": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupClientDocument"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognize the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/customers/{customerId}/paymentPreferences": {
      "get": {
        "tags": [
          "Group Client"
        ],
        "summary": "Lists of  payment preferences for the group client user",
        "description": "Returns the list of payment preference objects <p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CUSTOMERS_PAYMENTPREFS</p>",
        "operationId": "getPaymentPreferences",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "in": "path",
            "description": "customer id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request successful. The details of the payment preferences to the customer will be returned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentPreferenceResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognize the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/customers/{customerId}/paymentPreferences/addPaymentPreference": {
      "post": {
        "tags": [
          "Group Client"
        ],
        "summary": "Add payment preference details for a party",
        "description": " Add payment preference details for a party.<p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CUSTOMERS_PAYMENTPREF_ADD</p>",
        "operationId": "addPaymentPreference",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "in": "path",
            "description": "Customer number",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Payment preference details to be added.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPaymentPreference"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns the payment preference details added related to the party.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentPreferenceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request,if any invalid enum is provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognize the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Request could not be processed by the application for some application specific reason e.g. validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ValidationMessageModel"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/customers/{customerId}/paymentPreferences/{paymentPreferenceId}/updatePaymentPreference": {
      "post": {
        "tags": [
          "Group Client"
        ],
        "summary": "Updates a payment preference details for a party.",
        "description": "Updates a payment preference detail for a party.<p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CUSTOMERS_PAYMENTPREF_UPDATE</p>",
        "operationId": "updatePaymentPreference",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "in": "path",
            "description": "customer id of a customer associated with the group client user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentPreferenceId",
            "in": "path",
            "description": "payment preference id of a customer associated with the group client user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Payment preference details to be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPaymentPreference"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns the payment preference details updated related for a party.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentPreferenceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request,if any invalid enum is provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognize the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Request could not be processed by the application for some application specific reason e.g. validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ValidationMessageModel"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/claims/{claimId}/occupations/{occupationId}/earnings": {
      "get": {
        "tags": [
          "Group Client"
        ],
        "summary": "Get Pre-Disability Earnings Details for the Group Client",
        "description": "Returns the Pre-Disability Earnings Details for the Group Client<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CLAIMS_OCCUPATIONEARNINGS</p>",
        "operationId": "getEarnings",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "claimId",
            "in": "path",
            "description": "claim case number",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "occupationId",
            "in": "path",
            "description": "occupation Id number",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pre-Disability Earnings Details for the Group Client",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EarningsResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognize the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/claims/{claimId}/occupations/{occupationId}/addWeeklyBasisPreDisabilityEarnings": {
      "post": {
        "tags": [
          "Group Client"
        ],
        "summary": "Create weekly basis pre-disability earnings.",
        "description": "Add weekly basis pre-disability earnings details for a customer.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CLAIMS_OCCUPATIONWKLYPREDISEARNINGS_ADD</p>",
        "operationId": "addWeeklyBasisPreDisabilityEarnings",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "claimId",
            "in": "path",
            "description": "Claim case number",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "occupationId",
            "in": "path",
            "description": "Occupation Id number",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "EarningsRequest detail object to add weekly pre-disability earnings for a customer.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WeeklyEarningsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns the newly created JSON weekly basis pre-disability earnings object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EarningsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognize the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Request could not be processed by the application for some application specific reason e.g. validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ValidationMessageModel"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/claims/{claimId}/occupations/{occupationId}/removeOccupation": {
      "post": {
        "tags": [
          "Group Client"
        ],
        "summary": "Removes an occupation detail for a claim case.",
        "description": "Removes an occupation detail for a claim case.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CLAIMS_OCCUPATION_REMOVE</p>",
        "operationId": "removeOccupation",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "claimId",
            "in": "path",
            "description": "The id of claim case.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "occupationId",
            "in": "path",
            "description": "The id of occupation to be removed.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No value at response."
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognize the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/claims/{claimId}/occupations/{occupationId}/updateOccupation": {
      "post": {
        "tags": [
          "Group Client"
        ],
        "summary": "Updates occupation details of a claim.",
        "description": "Updates occupation details of a claim.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CLAIMS_OCCUPATION_UPDATE</p>",
        "operationId": "updateOccupation",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "claimId",
            "in": "path",
            "description": "Claim id of a claim associated with the group client user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "occupationId",
            "in": "path",
            "description": "Occupation id of a occupation associated with a claim.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Occupation details to be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClaimOccupation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns the updated occupation details of a claim.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReadOccupation"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognize the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Request could not be processed by the application for some application specific reason e.g. validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ValidationMessageModel"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/claims/{claimId}/occupations/{occupationId}/addMonthlyBasisPreDisabilityEarnings": {
      "post": {
        "tags": [
          "Group Client"
        ],
        "summary": "Create monthly basis pre-disability earnings.",
        "description": "Add monthly basis pre-disability earnings details for a group client.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CLAIMS_OCCUPATIONMTHLYPREDISEARNINGS_ADD</p>",
        "operationId": "addMonthlyBasisPreDisabilityEarnings",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "claimId",
            "in": "path",
            "description": "Claim case number",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "occupationId",
            "in": "path",
            "description": "Occupation Id number",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "EarningsRequest detail object to add monthly pre-disability earnings for a group client.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MonthlyEarningsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns the newly created JSON monthly basis pre-disability earnings object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EarningsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognize the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Request could not be processed by the application for some application specific reason e.g. validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ValidationMessageModel"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/claims/{claimId}/occupations": {
      "get": {
        "tags": [
          "Group Client"
        ],
        "description": "Retrieve the occupations of a claim.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CLAIMS_OCCUPATIONS</p>",
        "operationId": "getClaimOccupations",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "claimId",
            "in": "path",
            "description": "claim number",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The occupations of a claim",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReadOccupation"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognise the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/claims/{claimId}/occupations/addOccupation": {
      "post": {
        "tags": [
          "Group Client"
        ],
        "summary": "Adds an occupation detail for a claim case.",
        "description": "Adds an occupation detail for a claim case.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CLAIMS_OCCUPATION_ADD</p>",
        "operationId": "addOccupation",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "claimId",
            "in": "path",
            "description": "The id of claim case.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The occupation detail to be added.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClaimOccupation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns the occupation details added.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReadOccupation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request,if any invalid enum is provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognize the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Request could not be processed by the application for some application specific reason e.g. validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ValidationMessageModel"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/claims/{claimId}/occupations/{occupationId}/updateWeeklyBasisPreDisabilityEarnings/{earningsId}": {
      "post": {
        "tags": [
          "Group Client"
        ],
        "summary": "Update weekly basis Pre-Disability Earnings for a group client",
        "description": "Updates and Returns the updated Pre-Disability Earnings Details for a group client.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CLAIMS_OCCUPATIONWKLYPREDISEARNINGS_UPDATE</p>",
        "operationId": "updateWeeklyBasisPreDisabilityEarnings",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "claimId",
            "in": "path",
            "description": "claim case number",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "occupationId",
            "in": "path",
            "description": "occupation Id number",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "earningsId",
            "in": "path",
            "description": "earnings Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Earnings record details to be updated",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WeeklyEarningsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns the JSON for updated weekly basis pre-disability earnings object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EarningsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognize the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Request could not be processed by the application for some application specific reason e.g. validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ValidationMessageModel"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/claims/{claimId}/occupations/{occupationId}/removePreDisabilityEarningsRecord/{earningsId}": {
      "post": {
        "tags": [
          "Group Client"
        ],
        "summary": "Remove the earnings record for the claim occupation.",
        "description": "Removes the earnings record for the claim occupation.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CLAIMS_OCCUPATIONPREDISEARNINGS_REMOVE</p>",
        "operationId": "removeEarnings",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "claimId",
            "in": "path",
            "description": "The id of claim case.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "occupationId",
            "in": "path",
            "description": "The id of occupation.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "earningsId",
            "in": "path",
            "description": "The id of earning record to be removed.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Earnings details successfully removed"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognize the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/claims/{claimId}/occupations/{occupationId}/updateMonthlyBasisPreDisabilityEarnings/{earningsId}": {
      "post": {
        "tags": [
          "Group Client"
        ],
        "summary": "Update monthly basis Pre-Disability Earnings for a group client.",
        "description": "Updates and Returns the updated Pre-Disability Earnings Details for a group client.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CLAIMS_OCCUPATIONMTHLYPREDISEARNINGS_UPDATE</p>",
        "operationId": "updateMonthlyBasisPreDisabilityEarnings",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "claimId",
            "in": "path",
            "description": "claim case number",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "occupationId",
            "in": "path",
            "description": "occupation Id number",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "earningsId",
            "in": "path",
            "description": "earnings Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Earnings record details to be updated",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MonthlyEarningsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns the JSON for updated monthly basis pre-disability earnings object.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EarningsResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognize the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Request could not be processed by the application for some application specific reason e.g. validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ValidationMessageModel"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/claims/{claimId}/medicalDetails": {
      "get": {
        "tags": [
          "Group Client"
        ],
        "summary": "Returns Medical Details on a claim for a group client user",
        "description": "<p>Note: this endpoint is deprecated, please use /claims/{claimId}/medical-details instead</p> Returns Medical Details on a claim for a group client user.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CLAIMS_MEDICALDETAILS</p>",
        "operationId": "getClaimMedicalDetails",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "claimId",
            "in": "path",
            "description": "claim case number",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Medical Details on a claim for a group client user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MedicalDetailsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognize the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/claims/{claimId}/updateMedicalDetails": {
      "post": {
        "tags": [
          "Group Client"
        ],
        "summary": "Updates the medical detail associated with the claim.",
        "description": "Updates the medical detail associated with the claim.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CLAIMS_MEDICALDETAILS_EDIT</p>",
        "operationId": "updateClaimMedicalDetails",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "claimId",
            "in": "path",
            "description": "Claim case number.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Medical details to be added.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MedicalDetails"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns the medical details which are updated related to the claim.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MedicalDetailsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognize the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/claims/{claimId}/medicalDetails/pregnancyDetails": {
      "get": {
        "tags": [
          "Group Client"
        ],
        "description": "Returns Claim Pregnancy Details for a group client user<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CLAIMS_PREGNANCYDETAILS</p>",
        "operationId": "getClaimPregnancyDetails",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "claimId",
            "in": "path",
            "description": "claim case number",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pregnancy Details on a claim for a group client user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PregnancyDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognise the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/claims/{claimId}/medicalDetails/updatePregnancyDetails": {
      "post": {
        "tags": [
          "Group Client"
        ],
        "description": "Update the pregnancy details associated to the claim case.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CLAIMS_PREGNANCYDETAILS_UPDATE</p>",
        "operationId": "updatePregnancyDetails",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "claimId",
            "in": "path",
            "description": "Claim case number",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Pregnancy details to be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PregnancyDetails"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns the pregnancy details added related to the claim.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PregnancyDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognize the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/claims/{claimId}/medicalDetails/diagnosisCodes": {
      "get": {
        "tags": [
          "Group Client"
        ],
        "description": "Returns Diagnosis Codes Details for Claim Medical Details for a group client user.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CLAIMS_DIAGNOSISCODES</p>",
        "operationId": "getClaimDiagnosisCodes",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "claimId",
            "in": "path",
            "description": "claim case number",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "iagnosis Codes Details for Medical Details on a claim for a group client user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DiagnosisDetails"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognise the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/claims/{claimId}/medicalDetails/hospitalisationDetails": {
      "get": {
        "tags": [
          "Group Client"
        ],
        "summary": "Get the list of hospitalisation associated to the claim case.",
        "description": "Get the list of hospitalisation associated to the claim case.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CLAIMS_HOSPITALISATIONDETAILS </p>",
        "operationId": "getHospitalizationDetails",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "claimId",
            "in": "path",
            "description": "Claim case number",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the list hospitalisation details related to the claim.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HospitalisationDetailsResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognize the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/claims/{claimId}/medicalDetails/addHospitalisationDetails": {
      "post": {
        "tags": [
          "Group Client"
        ],
        "summary": "Add the hospitalisation details associated to the claim case.",
        "description": "Add the hospitalisation details associated to the claim case.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CLAIMS_HOSPITALISATIONDETS_ADD</p>",
        "operationId": "addHospitalisationDetails",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "claimId",
            "in": "path",
            "description": "Claim case number",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Hospitalization details to be added.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HospitalisationDetails"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns the hospitalisation details added related to the claim.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HospitalisationDetailsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognize the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Request could not be processed by the application for some application specific reason e.g. validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ValidationMessageModel"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/claims/{claimId}/socialSecurityBenefit": {
      "get": {
        "tags": [
          "Group Client"
        ],
        "description": "Returns social security benefit details of the claim for a group client user.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CLAIMS_SOCIALSECURITYBENEFIT</p>",
        "operationId": "getSocialSecurityBenefit",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "claimId",
            "in": "path",
            "description": "claim case number",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Social security benefit details of the claim for a group client user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SocialSecurityBenefitResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognise the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/claims/{claimId}/medicalDetails/hospitalisationDetails/{hospitalisationDetailsId}/updateHospitalisationDetails": {
      "post": {
        "tags": [
          "Group Client"
        ],
        "summary": "update hospitalisationDetails related information of the claim.",
        "description": "update hospitalisationDetails related information of the claim.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CLAIMS_HOSPITALISATIONDETS_UPDATE</p>",
        "operationId": "updateHospitalisationDetails",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "claimId",
            "in": "path",
            "description": "The claim case number.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hospitalisationDetailsId",
            "in": "path",
            "description": "The hospitalisation id received in the request.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Business Entity OID",
              "format": "string",
              "example": "PE-00012-0000001234"
            }
          }
        ],
        "requestBody": {
          "description": "update hospitalisationDetails related information of the claim.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HospitalisationDetails"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "update hospitalisationDetails related information of the claim",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HospitalisationDetailsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognize the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Request could not be processed by the application for some application specific reason e.g. validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ValidationMessageModel"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/claims/{claimId}/medicalDetails/hospitalisationDetails/{hospitalisationDetailsId}/removeHospitalisationDetails": {
      "post": {
        "tags": [
          "Group Client"
        ],
        "description": "API to remove the hospitalisation detail associated with claim.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CLAIMS_HOSPITALISATIONDETS_REMOVE</p>",
        "operationId": "removeHospitalisationDetails",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "claimId",
            "in": "path",
            "description": "Claim case number.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hospitalisationDetailsId",
            "in": "path",
            "description": "Hopitalisation detail Oid associated with the claim to be removed.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Business Entity OID",
              "format": "string",
              "example": "PE-00012-0000001234"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Removed successfully."
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognize the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/claims/{claimId}/otherIncomeSources/addOtherIncomeSource": {
      "post": {
        "tags": [
          "Group Client"
        ],
        "summary": "Add the other income sources details associated to the claim case.",
        "description": "Add the other income sources details associated to the claim case.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CLAIMS_OTHERINCOME_ADD</p>",
        "operationId": "addOtherIncomeSource",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "claimId",
            "in": "path",
            "description": "Claim case number",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "OtherIncomeSource details to be added.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IncomeSource"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns the other income sources details added to the claim.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncomeSourceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognize the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Request could not be processed by the application for some application specific reason e.g. validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ValidationMessageModel"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/claims/{claimId}/otherIncomeSources": {
      "get": {
        "tags": [
          "Group Client"
        ],
        "summary": "Returns Income Sources listed on a claim for group client user.",
        "description": "Returns Income Sources listed on a claim for group client user.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CLAIMS_OTHERINCOME</p>",
        "operationId": "readIncomeSource",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "claimId",
            "in": "path",
            "description": "claim case number",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Income Sources on a claim for group client user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncomeSourceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognize the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/claims/{claimId}/otherIncomeSources/{incomeSourceId}/removeOtherIncomeSource": {
      "post": {
        "tags": [
          "Group Client"
        ],
        "summary": "Remove other income source details associated with the claim case.",
        "description": "Remove other income source details associated with the claim case.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CLAIMS_OTHERINCOME_REMOVE</p>",
        "operationId": "removeOtherIncomeSource",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "claimId",
            "in": "path",
            "description": "claim case number",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "incomeSourceId",
            "in": "path",
            "description": "Other Income Source Id to be removed.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Business Entity OID",
              "format": "string",
              "example": "PE-00012-0000001234"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Other Income Source details successfully removed"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognize the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/claims/{claimId}/otherIncomeSources/{incomeSourceId}/updateOtherIncomeSource": {
      "post": {
        "tags": [
          "Group Client"
        ],
        "summary": "Update the other income sources details associated to the claim case.",
        "description": "Update the other income sources details associated to the claim case.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_POST_GROUPCLIENT_CLAIMS_OTHERINCOME_UPDATE</p>",
        "operationId": "updateOtherIncomeSource",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "claimId",
            "in": "path",
            "description": "Claim case number",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "incomeSourceId",
            "in": "path",
            "description": "The income sources id received in the request.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Business Entity OID",
              "format": "string",
              "example": "PE-00012-0000001234"
            }
          }
        ],
        "requestBody": {
          "description": "OtherIncomeSource details to be updated.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IncomeSource"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns the other income sources details updated to the claim.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncomeSourceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognize the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "422": {
            "description": "Request could not be processed by the application for some application specific reason e.g. validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationMessageModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/groupClient/claims/notifications": {
      "get": {
        "tags": [
          "Group Client"
        ],
        "summary": "Returns a NotificationCaseDetail object which contains notification claim cases summary along with the child claim cases.",
        "description": "Returns a NotificationCaseDetail object which contains notification claim cases summary along with the child claim cases. List will exclude the closed and anonymised case from result. The results can be sorted on these columns : notificationcreateddate, notificationcaseid.<p>To determine whether the Group Client user can access the case, this API calls the same validations used to determine whether the case itself can be returned by the /groupClient/claims API: check the party case role is correct, check the admin group is correct, check the case is not Anonymised.</p><p>The permission key for this endpoint is: URL_GET_GROUPCLIENT_CLAIMS_NOTIFICATIONS</p>",
        "operationId": "getNotifications",
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "description": "Id of the user accessing the resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeClosedCases",
            "in": "query",
            "description": "Boolean status which will use to include or exclude closed cases",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date of the period which will be used to search by the claim notification date or incurred date criteria",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date of the period which will be used to search by the claim notification date or incurred date criteria",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "pageNbr",
            "in": "query",
            "description": "Requested page number",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Requested number of claims per page",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 0
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "String which contains comma delimited column names. Results can be sorted on these columns : notificationcreateddate, notificationcaseid.",
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request. Returns a NotificationCaseDetail object which contains a list of claim summary objects.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationCaseDetail"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "401": {
            "description": "Cannot recognize the delegated user id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "User does not have permission to access the resource or the instance data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "CommunicationPreferenceResource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the communication preference, matching the full ID of the contact context enum"
          },
          "contactContext": {
            "$ref": "#/components/schemas/ContactMethodResponse"
          },
          "emailAddresses": {
            "type": "array",
            "description": "List of email addresses linked to the preference context",
            "items": {
              "$ref": "#/components/schemas/EmailAddressResource"
            }
          },
          "phoneNumbers": {
            "type": "array",
            "description": "List of phone numbers linked to the preference context",
            "items": {
              "$ref": "#/components/schemas/PhoneNumberResource"
            }
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "url"
            }
          }
        }
      },
      "ContactMethodResponse": {
        "type": "object",
        "properties": {
          "domainId": {
            "type": "integer",
            "description": "The <code>domain id</code> of the enum",
            "format": "int64"
          },
          "fullId": {
            "type": "integer",
            "description": "The <code>instance id</code> of the enum",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The enum instance name"
          },
          "domainName": {
            "type": "string",
            "description": "The enum domain name"
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Links to the enum domain and enum instance for the API"
            },
            "description": "Links to the enum domain and enum instance for the API"
          }
        },
        "description": "A choice in contact medium from an enumerated list"
      },
      "EmailAddressResource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the resource"
          },
          "emailAddress": {
            "type": "string",
            "description": "The email address"
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "url"
            }
          }
        }
      },
      "PhoneNumberResource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the resource"
          },
          "contactMethod": {
            "$ref": "#/components/schemas/ContactMethodResponse"
          },
          "areaCode": {
            "type": "string",
            "description": "Regional area code"
          },
          "extension": {
            "type": "string",
            "description": "Optional extension number for networks"
          },
          "intCode": {
            "type": "string",
            "description": "International area code"
          },
          "telephoneNo": {
            "type": "string",
            "description": "Local telephone number"
          },
          "exDirectory": {
            "type": "boolean",
            "description": "True if the number is ex-directory"
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "url"
            }
          }
        }
      },
      "ApiError": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "detail": {
            "type": "string"
          },
          "source": {
            "$ref": "#/components/schemas/ErrorSource"
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "url"
            }
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            }
          }
        }
      },
      "ErrorSource": {
        "type": "object",
        "properties": {
          "pointer": {
            "type": "string"
          },
          "parameter": {
            "type": "string"
          }
        }
      },
      "CommunicationPreferences": {
        "type": "object",
        "properties": {
          "elements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommunicationPreferenceResource"
            }
          },
          "totalSize": {
            "type": "integer",
            "description": "<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
            "format": "int32"
          },
          "hasMoreElements": {
            "type": "boolean",
            "description": "<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>"
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "url"
            }
          }
        }
      },
      "LinkCommand": {
        "required": [
          "id",
          "relName",
          "resource"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "resource": {
            "type": "string"
          },
          "relName": {
            "type": "string"
          }
        }
      },
      "CustomerResource": {
        "type": "object",
        "properties": {
          "customerNo": {
            "type": "string",
            "description": "Customer number"
          },
          "firstName": {
            "type": "string",
            "description": "The First Name of the Customer"
          },
          "lastName": {
            "type": "string",
            "description": "The Last Name of the Customer"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "idNumber": {
            "type": "string",
            "description": "The Customer's id number, could be SSN or national security number"
          },
          "jobTitle": {
            "type": "string",
            "description": "The Customer's job title. This field will be populated if the Customer represents an Employee i.e. a person with one current occupation where the Group Client is listed as the Employer."
          },
          "employeeID": {
            "type": "string",
            "description": "The Customer's employee id. This field will be populated if the Customer represents an Employee i.e. a person with one current occupation where the Group Client is listed as the Employer."
          },
          "workSite": {
            "type": "string",
            "description": "The Customer's worksite. This field will be populated if the Customer represents an Employee i.e. a person with one current occupation where the Group Client is listed as the Employer."
          },
          "organisationUnit": {
            "type": "string",
            "description": "The Customer's organisation unit. This field will be populated if the Customer represents an Employee i.e. a person with one current occupation where the Group Client is listed as the Employer."
          },
          "id": {
            "type": "string",
            "description": "An id that uniquely identifies the customer record."
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "url"
            }
          }
        },
        "description": "The customer the notification is associated with"
      },
      "CustomerResources": {
        "type": "object",
        "properties": {
          "elements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerResource"
            }
          },
          "totalSize": {
            "type": "integer",
            "description": "<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
            "format": "int32"
          },
          "hasMoreElements": {
            "type": "boolean",
            "description": "<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>"
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "url"
            }
          }
        }
      },
      "QuerySortInfo": {
        "type": "object",
        "properties": {
          "sortStatementsText": {
            "type": "string"
          },
          "sortOrderItemsList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SortOrderItem"
            }
          }
        }
      },
      "SortOrderItem": {
        "type": "object",
        "properties": {
          "columnName": {
            "type": "string"
          },
          "direction": {
            "type": "string",
            "enum": [
              "ASC",
              "DESC"
            ]
          }
        }
      },
      "AUFloorLevelTypesResponse": {
        "type": "object",
        "properties": {
          "domainId": {
            "type": "integer",
            "description": "The <code>domain id</code> of the enum",
            "format": "int64"
          },
          "fullId": {
            "type": "integer",
            "description": "The <code>instance id</code> of the enum",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The enum instance name"
          },
          "domainName": {
            "type": "string",
            "description": "The enum domain name"
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Links to the enum domain and enum instance for the API"
            },
            "description": "Links to the enum domain and enum instance for the API"
          }
        },
        "description": "The type of floor level from an enumerated list as in Basement, Floor, Ground Floor and so on. Corresponds to the AUFloorLevelTypes Enum Domain (<I>domainId</I> = 186)."
      },
      "AUPostalTypesResponse": {
        "type": "object",
        "properties": {
          "domainId": {
            "type": "integer",
            "description": "The <code>domain id</code> of the enum",
            "format": "int64"
          },
          "fullId": {
            "type": "integer",
            "description": "The <code>instance id</code> of the enum",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The enum instance name"
          },
          "domainName": {
            "type": "string",
            "description": "The enum domain name"
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Links to the enum domain and enum instance for the API"
            },
            "description": "Links to the enum domain and enum instance for the API"
          }
        },
        "description": "The postal type from an enumerated list as in PO Box, Roadside Mail Box and so on. Corresponds to the AUPostalTypes Enum Domain (<I>domainId</I> = 188)."
      },
      "AUStreetSuffixesResponse": {
        "type": "object",
        "properties": {
          "domainId": {
            "type": "integer",
            "description": "The <code>domain id</code> of the enum",
            "format": "int64"
          },
          "fullId": {
            "type": "integer",
            "description": "The <code>instance id</code> of the enum",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The enum instance name"
          },
          "domainName": {
            "type": "string",
            "description": "The enum domain name"
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Links to the enum domain and enum instance for the API"
            },
            "description": "Links to the enum domain and enum instance for the API"
          }
        },
        "description": "The suffix for the street from an enumerated list. Corresponds to the AUStreetSuffixes Enum Domain (<I>domainId</I> = 187)."
      },
      "AddressEmbeddable": {
        "type": "object",
        "properties": {
          "premiseNo": {
            "type": "string",
            "description": "The premise number i.e. the street number."
          },
          "addressLine1": {
            "type": "string",
            "description": "First line of an address."
          },
          "addressLine2": {
            "type": "string",
            "description": "Second line of an address."
          },
          "addressLine3": {
            "type": "string",
            "description": "Third line of an address."
          },
          "addressLine4": {
            "type": "string",
            "description": "Fourth line of an address."
          },
          "addressLine5": {
            "type": "string",
            "description": "Fifth line of an address."
          },
          "addressLine6": {
            "type": "string",
            "description": "Sixth line of an address."
          },
          "addressLine7": {
            "type": "string",
            "description": "Seventh line of an address."
          },
          "postCode": {
            "type": "string",
            "description": "International Postcode."
          },
          "country": {
            "$ref": "#/components/schemas/CountryResponse"
          },
          "extensions": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "extraAustralianFields": {
            "$ref": "#/components/schemas/AustralianAddressEmbeddable"
          }
        }
      },
      "AustralianAddressEmbeddable": {
        "type": "object",
        "properties": {
          "buildingName1": {
            "type": "string",
            "description": "The name of the building."
          },
          "buildingName2": {
            "type": "string",
            "description": "The name of the building continued."
          },
          "dpId": {
            "type": "integer",
            "description": "Referred to as DPID this is an 8-digit Australian post address identifier which uniquely identifies each delivery point to which Australia Post delivers mail. ",
            "format": "int32"
          },
          "floorLevelNumber": {
            "type": "string",
            "description": "The floorLevelNumber must be less than {max} characters"
          },
          "premiseNoSuffix": {
            "type": "string",
            "description": "The suffix to apply to the number of the premise."
          },
          "premiseNoTo": {
            "type": "integer",
            "description": "The high number in a range for the premise. This is used when an address consists of a range of numbers as in 8-10 Lower Pembroke Street where the value 10 would be stored in this field. ",
            "format": "int32"
          },
          "premiseNoToSuffix": {
            "type": "string",
            "description": "The suffix to apply to the number to of the premise. "
          },
          "postalNumber": {
            "type": "string",
            "description": "The postal number. "
          },
          "lotNumber": {
            "type": "string",
            "description": "The lot number."
          },
          "postalNumberPrefix": {
            "type": "string",
            "description": "This refers to the non-numeric portion preceding the Postal Number. EXAMPLE : PO Box B20 where B is the prefix. "
          },
          "postalNumberSuffix": {
            "type": "string",
            "description": "This refers to the non-numeric portion following the Postal Number. EXAMPLE : PO Box 20A where A is the suffix."
          },
          "floorLevelType": {
            "$ref": "#/components/schemas/AUFloorLevelTypesResponse"
          },
          "streetSuffix": {
            "$ref": "#/components/schemas/AUStreetSuffixesResponse"
          },
          "postalType": {
            "$ref": "#/components/schemas/AUPostalTypesResponse"
          },
          "extensions": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "CountryResponse": {
        "type": "object",
        "properties": {
          "domainId": {
            "type": "integer",
            "description": "The <code>domain id</code> of the enum",
            "format": "int64"
          },
          "fullId": {
            "type": "integer",
            "description": "The <code>instance id</code> of the enum",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The enum instance name"
          },
          "domainName": {
            "type": "string",
            "description": "The enum domain name"
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Links to the enum domain and enum instance for the API"
            },
            "description": "Links to the enum domain and enum instance for the API"
          }
        },
        "description": "Country for the address e.g. Ireland, USA (<I>domainId</I> = 21)"
      },
      "CustomerInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "firstName": {
            "type": "string",
            "description": "Person's first name"
          },
          "lastName": {
            "type": "string",
            "description": "Person's last name"
          },
          "secondName": {
            "type": "string",
            "description": "Person's second name"
          },
          "initials": {
            "type": "string",
            "description": "Person's middle initials"
          },
          "needsInterpreter": {
            "type": "boolean",
            "description": "Indicates if the customer needs an interpreter"
          },
          "placeOfBirth": {
            "type": "string",
            "description": "Place of Birth"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "idNumber": {
            "type": "string",
            "description": "ID number of the claimant. The ID number could be something like social security number, or tax identificaiton number. They ID type is indicated by the value of the <code>identificationNumberType</code> field."
          },
          "customerNo": {
            "type": "string",
            "description": "Customer number"
          },
          "securedClient": {
            "type": "boolean",
            "description": "Secured client flag"
          },
          "staff": {
            "type": "boolean",
            "description": "Staff flag"
          },
          "partyType": {
            "$ref": "#/components/schemas/PartyTypeResponse"
          },
          "gender": {
            "$ref": "#/components/schemas/GenderResponse"
          },
          "maritalStatus": {
            "$ref": "#/components/schemas/MaritalStatusResponse"
          },
          "nationality": {
            "$ref": "#/components/schemas/NationalityResponse"
          },
          "title": {
            "$ref": "#/components/schemas/TitleResponse"
          },
          "identificationNumberType": {
            "$ref": "#/components/schemas/IdentificationNumberTypeResponse"
          },
          "address": {
            "$ref": "#/components/schemas/AddressEmbeddable"
          },
          "extensions": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "url"
            }
          }
        }
      },
      "GenderResponse": {
        "type": "object",
        "properties": {
          "domainId": {
            "type": "integer",
            "description": "The <code>domain id</code> of the enum",
            "format": "int64"
          },
          "fullId": {
            "type": "integer",
            "description": "The <code>instance id</code> of the enum",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The enum instance name"
          },
          "domainName": {
            "type": "string",
            "description": "The enum domain name"
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Links to the enum domain and enum instance for the API"
            },
            "description": "Links to the enum domain and enum instance for the API"
          }
        },
        "description": "The customer's gender  e.g. Male (<I>domainId</I> = 1)"
      },
      "IdentificationNumberTypeResponse": {
        "type": "object",
        "properties": {
          "domainId": {
            "type": "integer",
            "description": "The <code>domain id</code> of the enum",
            "format": "int64"
          },
          "fullId": {
            "type": "integer",
            "description": "The <code>instance id</code> of the enum",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The enum instance name"
          },
          "domainName": {
            "type": "string",
            "description": "The enum domain name"
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Links to the enum domain and enum instance for the API"
            },
            "description": "Links to the enum domain and enum instance for the API"
          }
        },
        "description": "The type of identification number the party will have, e.g. social security, tax idendification, (<I>domainId</I> = 273)"
      },
      "MaritalStatusResponse": {
        "type": "object",
        "properties": {
          "domainId": {
            "type": "integer",
            "description": "The <code>domain id</code> of the enum",
            "format": "int64"
          },
          "fullId": {
            "type": "integer",
            "description": "The <code>instance id</code> of the enum",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The enum instance name"
          },
          "domainName": {
            "type": "string",
            "description": "The enum domain name"
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Links to the enum domain and enum instance for the API"
            },
            "description": "Links to the enum domain and enum instance for the API"
          }
        },
        "description": "Marital Status e.g. Single, Married etc. (<I>domainId</I> = 2)"
      },
      "NationalityResponse": {
        "type": "object",
        "properties": {
          "domainId": {
            "type": "integer",
            "description": "The <code>domain id</code> of the enum",
            "format": "int64"
          },
          "fullId": {
            "type": "integer",
            "description": "The <code>instance id</code> of the enum",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The enum instance name"
          },
          "domainName": {
            "type": "string",
            "description": "The enum domain name"
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Links to the enum domain and enum instance for the API"
            },
            "description": "Links to the enum domain and enum instance for the API"
          }
        },
        "description": "Person's nationaity (<I>domainId</I> = 95)"
      },
      "PartyTypeResponse": {
        "type": "object",
        "properties": {
          "domainId": {
            "type": "integer",
            "description": "The <code>domain id</code> of the enum",
            "format": "int64"
          },
          "fullId": {
            "type": "integer",
            "description": "The <code>instance id</code> of the enum",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The enum instance name"
          },
          "domainName": {
            "type": "string",
            "description": "The enum domain name"
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Links to the enum domain and enum instance for the API"
            },
            "description": "Links to the enum domain and enum instance for the API"
          }
        },
        "description": "The party type (<I>domainId</I> = 102)"
      },
      "TitleResponse": {
        "type": "object",
        "properties": {
          "domainId": {
            "type": "integer",
            "description": "The <code>domain id</code> of the enum",
            "format": "int64"
          },
          "fullId": {
            "type": "integer",
            "description": "The <code>instance id</code> of the enum",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The enum instance name"
          },
          "domainName": {
            "type": "string",
            "description": "The enum domain name"
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Links to the enum domain and enum instance for the API"
            },
            "description": "Links to the enum domain and enum instance for the API"
          }
        },
        "description": "Person's title, Mrs, Ms etc (<I>domainId</I> = 15)"
      },
      "AUFloorLevelTypesRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The enum instance name"
          },
          "fullId": {
            "type": "integer",
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64"
          }
        },
        "description": "The type of floor level from an enumerated list as in Basement, Floor, Ground Floor and so on. Corresponds to the AUFloorLevelTypes Enum Domain (<I>domainId</I> = 186)."
      },
      "AUPostalTypesRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The enum instance name"
          },
          "fullId": {
            "type": "integer",
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64"
          }
        },
        "description": "The postal type from an enumerated list as in PO Box, Roadside Mail Box and so on. Corresponds to the AUPostalTypes Enum Domain (<I>domainId</I> = 188)."
      },
      "AUStreetSuffixesRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The enum instance name"
          },
          "fullId": {
            "type": "integer",
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64"
          }
        },
        "description": "The suffix for the street from an enumerated list. Corresponds to the AUStreetSuffixes Enum Domain (<I>domainId</I> = 187)."
      },
      "CountryRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The enum instance name"
          },
          "fullId": {
            "type": "integer",
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64"
          }
        },
        "description": "Country for the address e.g. Ireland, USA (<I>domainId</I> = 21)"
      },
      "EditAddressCommand": {
        "type": "object",
        "properties": {
          "extraAustralianFields": {
            "$ref": "#/components/schemas/EditAustralianAddressCommand"
          },
          "premiseNo": {
            "type": "string"
          },
          "addressLine1": {
            "type": "string",
            "description": "First line of an address."
          },
          "addressLine2": {
            "type": "string",
            "description": "Second line of an address."
          },
          "addressLine3": {
            "type": "string",
            "description": "Third line of an address."
          },
          "addressLine4": {
            "type": "string",
            "description": "Fourth line of an address."
          },
          "addressLine5": {
            "type": "string",
            "description": "Fifth line of an address."
          },
          "addressLine6": {
            "type": "string",
            "description": "Sixth line of an address."
          },
          "addressLine7": {
            "type": "string",
            "description": "Seventh line of an address."
          },
          "postCode": {
            "type": "string",
            "description": "International Postcode."
          },
          "country": {
            "$ref": "#/components/schemas/CountryRequest"
          }
        }
      },
      "EditAustralianAddressCommand": {
        "type": "object",
        "properties": {
          "dpId": {
            "type": "integer",
            "description": "Referred to as DPID this is an 8-digit Australian post address identifier which uniquely identifies each delivery point to which Australia Post delivers mail. ",
            "format": "int32"
          },
          "buildingName1": {
            "type": "string",
            "description": "The name of the building."
          },
          "buildingName2": {
            "type": "string",
            "description": "The name of the building continued."
          },
          "floorLevelType": {
            "$ref": "#/components/schemas/AUFloorLevelTypesRequest"
          },
          "floorLevelNumber": {
            "type": "string",
            "description": "The floorLevelNumber must be less than {max} characters"
          },
          "premiseNoSuffix": {
            "type": "string",
            "description": "The suffix to apply to the number of the premise."
          },
          "premiseNoTo": {
            "type": "integer",
            "description": "The high number in a range for the premise. This is used when an address consists of a range of numbers as in 8-10 Lower Pembroke Street where the value 10 would be stored in this field. ",
            "format": "int32"
          },
          "premiseNoToSuffix": {
            "type": "string",
            "description": "The suffix to apply to the number to of the premise. "
          },
          "streetSuffix": {
            "$ref": "#/components/schemas/AUStreetSuffixesRequest"
          },
          "postalType": {
            "$ref": "#/components/schemas/AUPostalTypesRequest"
          },
          "postalNumber": {
            "type": "string",
            "description": "The postal number. "
          },
          "lotNumber": {
            "type": "string",
            "description": "The lot number."
          },
          "postalNumberPrefix": {
            "type": "string",
            "description": "This refers to the non-numeric portion preceding the Postal Number. EXAMPLE : PO Box B20 where B is the prefix. "
          },
          "postalNumberSuffix": {
            "type": "string",
            "description": "This refers to the non-numeric portion following the Postal Number. EXAMPLE : PO Box 20A where A is the suffix."
          }
        }
      },
      "EditCustomerInfoCommand": {
        "type": "object",
        "properties": {
          "needsInterpreter": {
            "type": "boolean",
            "description": "Indicates if the customer needs an interpreter"
          },
          "firstName": {
            "type": "string",
            "description": "Person's first name"
          },
          "lastName": {
            "type": "string",
            "description": "Person's last name"
          },
          "initials": {
            "type": "string",
            "description": "Person's middle initials"
          },
          "nationality": {
            "$ref": "#/components/schemas/NationalityRequest"
          },
          "idNumber": {
            "type": "string",
            "description": "ID number of the claimant. The ID number could be something like social security number, or tax identificaiton number. They ID type is indicated by the value of the <code>identificationNumberType</code> field."
          },
          "identificationNumberType": {
            "$ref": "#/components/schemas/IdentificationNumberTypeRequest"
          },
          "securedClient": {
            "type": "boolean",
            "description": "Secured client flag"
          },
          "staff": {
            "type": "boolean",
            "description": "Staff flag"
          },
          "partyType": {
            "$ref": "#/components/schemas/PartyTypeRequest"
          },
          "secondName": {
            "type": "string",
            "description": "Person's second name"
          },
          "placeOfBirth": {
            "type": "string",
            "description": "Place of Birth"
          },
          "gender": {
            "$ref": "#/components/schemas/GenderRequest"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "maritalStatus": {
            "$ref": "#/components/schemas/MaritalStatusRequest"
          },
          "address": {
            "$ref": "#/components/schemas/EditAddressCommand"
          }
        }
      },
      "GenderRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The enum instance name"
          },
          "fullId": {
            "type": "integer",
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64"
          }
        },
        "description": "The customer's gender  e.g. Male (<I>domainId</I> = 1)"
      },
      "IdentificationNumberTypeRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The enum instance name"
          },
          "fullId": {
            "type": "integer",
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64"
          }
        },
        "description": "The type of identification number the party will have, e.g. social security, tax idendification, (<I>domainId</I> = 273)"
      },
      "MaritalStatusRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The enum instance name"
          },
          "fullId": {
            "type": "integer",
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64"
          }
        },
        "description": "Marital Status e.g. Single, Married etc. (<I>domainId</I> = 2)"
      },
      "NationalityRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The enum instance name"
          },
          "fullId": {
            "type": "integer",
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64"
          }
        },
        "description": "Person's nationaity (<I>domainId</I> = 95)"
      },
      "PartyTypeRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The enum instance name"
          },
          "fullId": {
            "type": "integer",
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64"
          }
        },
        "description": "The party type (<I>domainId</I> = 102)"
      },
      "AltEmploymentCatResponse": {
        "type": "object",
        "properties": {
          "domainId": {
            "type": "integer",
            "description": "The <code>domain id</code> of the enum",
            "format": "int64"
          },
          "fullId": {
            "type": "integer",
            "description": "The <code>instance id</code> of the enum",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The enum instance name"
          },
          "domainName": {
            "type": "string",
            "description": "The enum domain name"
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Links to the enum domain and enum instance for the API"
            },
            "description": "Links to the enum domain and enum instance for the API"
          }
        },
        "description": "Alternate employment category (<I>domainId</I> = 167)"
      },
      "CustomerOccupation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "orgUnitName": {
            "type": "string",
            "description": "The name of the organisation unit within the employer organisation structure - reference only field"
          },
          "worksiteName": {
            "type": "string",
            "description": "The name of the employer location which the occupation is related to - reference only field"
          },
          "workPatternBasis": {
            "type": "string",
            "description": "Indicates the type of work pattern in use - reference only field"
          },
          "altEmploymentCat": {
            "$ref": "#/components/schemas/AltEmploymentCatResponse"
          },
          "daysWorkedPerWeek": {
            "type": "string",
            "description": "The number of days worked per week, which can be specified with partial days"
          },
          "employeeIdentifier": {
            "type": "string",
            "description": "Reference identifier of an employee in respect of its employer"
          },
          "empLocationCode": {
            "$ref": "#/components/schemas/EmpLocationCodeResponse"
          },
          "employmentCat": {
            "$ref": "#/components/schemas/EmploymentCatResponse"
          },
          "employmentStatus": {
            "$ref": "#/components/schemas/EmploymentStatusResponse"
          },
          "employmentTitle": {
            "$ref": "#/components/schemas/EmploymentTitleResponse"
          },
          "endPosCode": {
            "$ref": "#/components/schemas/EndPosCodeResponse"
          },
          "endPosReason": {
            "type": "string",
            "description": "he reason for job ending"
          },
          "hrsWorkedPerWeek": {
            "type": "string",
            "description": "The number of hours worked per week, which can be specified using partial hours"
          },
          "jobDesc": {
            "type": "string",
            "description": "Job description"
          },
          "jobEndDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "jobStartDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "jobStrenuous": {
            "$ref": "#/components/schemas/JobStrenuousResponse"
          },
          "jobTitle": {
            "type": "string",
            "description": "Job title"
          },
          "occCodeReference": {
            "type": "string",
            "description": "Occupation Industry Classification Code id"
          },
          "occCodeName": {
            "type": "string",
            "description": "The name(s) associated with the specific Occupation Industry Classification Code id"
          },
          "overrideDaysWorkedPerWeek": {
            "type": "boolean",
            "description": "Is override days worked per week true or false?"
          },
          "remarks": {
            "type": "string",
            "description": "Remarks about the Occupation"
          },
          "workSchDesc": {
            "type": "string",
            "description": "Work schedule description"
          },
          "extensions": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "url"
            }
          }
        }
      },
      "EmpLocationCodeResponse": {
        "type": "object",
        "properties": {
          "domainId": {
            "type": "integer",
            "description": "The <code>domain id</code> of the enum",
            "format": "int64"
          },
          "fullId": {
            "type": "integer",
            "description": "The <code>instance id</code> of the enum",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The enum instance name"
          },
          "domainName": {
            "type": "string",
            "description": "The enum domain name"
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Links to the enum domain and enum instance for the API"
            },
            "description": "Links to the enum domain and enum instance for the API"
          }
        },
        "description": "Employment location code indicating Place of Work (<I>domainId</I> = 166)"
      },
      "EmploymentCatResponse": {
        "type": "object",
        "properties": {
          "domainId": {
            "type": "integer",
            "description": "The <code>domain id</code> of the enum",
            "format": "int64"
          },
          "fullId": {
            "type": "integer",
            "description": "The <code>instance id</code> of the enum",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The enum instance name"
          },
          "domainName": {
            "type": "string",
            "description": "The enum domain name"
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Links to the enum domain and enum instance for the API"
            },
            "description": "Links to the enum domain and enum instance for the API"
          }
        },
        "description": "Employment category (<I>domainId</I> = 145)"
      },
      "EmploymentStatusResponse": {
        "type": "object",
        "properties": {
          "domainId": {
            "type": "integer",
            "description": "The <code>domain id</code> of the enum",
            "format": "int64"
          },
          "fullId": {
            "type": "integer",
            "description": "The <code>instance id</code> of the enum",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The enum instance name"
          },
          "domainName": {
            "type": "string",
            "description": "The enum domain name"
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Links to the enum domain and enum instance for the API"
            },
            "description": "Links to the enum domain and enum instance for the API"
          }
        },
        "description": "Employment status (<I>domainId</I> = 175)"
      },
      "EmploymentTitleResponse": {
        "type": "object",
        "properties": {
          "domainId": {
            "type": "integer",
            "description": "The <code>domain id</code> of the enum",
            "format": "int64"
          },
          "fullId": {
            "type": "integer",
            "description": "The <code>instance id</code> of the enum",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The enum instance name"
          },
          "domainName": {
            "type": "string",
            "description": "The enum domain name"
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Links to the enum domain and enum instance for the API"
            },
            "description": "Links to the enum domain and enum instance for the API"
          }
        },
        "description": "Employment title (<I>domainId</I> = 177)"
      },
      "EndPosCodeResponse": {
        "type": "object",
        "properties": {
          "domainId": {
            "type": "integer",
            "description": "The <code>domain id</code> of the enum",
            "format": "int64"
          },
          "fullId": {
            "type": "integer",
            "description": "The <code>instance id</code> of the enum",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The enum instance name"
          },
          "domainName": {
            "type": "string",
            "description": "The enum domain name"
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Links to the enum domain and enum instance for the API"
            },
            "description": "Links to the enum domain and enum instance for the API"
          }
        },
        "description": "Employment termination reason (<I>domainId</I> = 162)"
      },
      "JobStrenuousResponse": {
        "type": "object",
        "properties": {
          "domainId": {
            "type": "integer",
            "description": "The <code>domain id</code> of the enum",
            "format": "int64"
          },
          "fullId": {
            "type": "integer",
            "description": "The <code>instance id</code> of the enum",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The enum instance name"
          },
          "domainName": {
            "type": "string",
            "description": "The enum domain name"
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Links to the enum domain and enum instance for the API"
            },
            "description": "Links to the enum domain and enum instance for the API"
          }
        },
        "description": "Job strength category (<I>domainId</I> = 160)"
      },
      "AltEmploymentCatRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The enum instance name"
          },
          "fullId": {
            "type": "integer",
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64"
          }
        },
        "description": "Alternate employment category (<I>domainId</I> = 167)"
      },
      "EditCustomerOccupationCommand": {
        "type": "object",
        "properties": {
          "altEmploymentCat": {
            "$ref": "#/components/schemas/AltEmploymentCatRequest"
          },
          "jobStartDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "jobEndDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "employeeIdentifier": {
            "type": "string",
            "description": "Reference identifier of an employee in respect of its employer"
          },
          "empLocationCode": {
            "$ref": "#/components/schemas/EmpLocationCodeRequest"
          },
          "employmentCat": {
            "$ref": "#/components/schemas/EmploymentCatRequest"
          },
          "endPosCode": {
            "$ref": "#/components/schemas/EndPosCodeRequest"
          },
          "hrsWorkedPerWeek": {
            "type": "string",
            "description": "The number of hours worked per week, which can be specified using partial hours"
          },
          "occCodeReference": {
            "type": "string",
            "description": "Occupation Industry Classification Code id"
          },
          "occCodeName": {
            "type": "string",
            "description": "The name(s) associated with the specific Occupation Industry Classification Code id"
          },
          "overrideDaysWorkedPerWeek": {
            "type": "boolean",
            "description": "Is override days worked per week true or false?"
          },
          "workSchDesc": {
            "type": "string",
            "description": "Work schedule description"
          },
          "jobTitle": {
            "type": "string",
            "description": "Job title"
          },
          "jobDesc": {
            "type": "string",
            "description": "Job description"
          },
          "daysWorkedPerWeek": {
            "type": "string",
            "description": "The number of days worked per week, which can be specified with partial days"
          },
          "endPosReason": {
            "type": "string",
            "description": "he reason for job ending"
          },
          "remarks": {
            "type": "string",
            "description": "Remarks about the Occupation"
          },
          "jobStrenuous": {
            "$ref": "#/components/schemas/JobStrenuousRequest"
          },
          "employmentStatus": {
            "$ref": "#/components/schemas/EmploymentStatusRequest"
          },
          "employmentTitle": {
            "$ref": "#/components/schemas/EmploymentTitleRequest"
          },
          "extensions": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "EmpLocationCodeRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The enum instance name"
          },
          "fullId": {
            "type": "integer",
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64"
          }
        },
        "description": "Employment location code indicating Place of Work (<I>domainId</I> = 166)"
      },
      "EmploymentCatRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The enum instance name"
          },
          "fullId": {
            "type": "integer",
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64"
          }
        },
        "description": "Employment category (<I>domainId</I> = 145)"
      },
      "EmploymentStatusRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The enum instance name"
          },
          "fullId": {
            "type": "integer",
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64"
          }
        },
        "description": "Employment status (<I>domainId</I> = 175)"
      },
      "EmploymentTitleRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The enum instance name"
          },
          "fullId": {
            "type": "integer",
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64"
          }
        },
        "description": "Employment title (<I>domainId</I> = 177)"
      },
      "EndPosCodeRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The enum instance name"
          },
          "fullId": {
            "type": "integer",
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64"
          }
        },
        "description": "Employment termination reason (<I>domainId</I> = 162)"
      },
      "JobStrenuousRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The enum instance name"
          },
          "fullId": {
            "type": "integer",
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64"
          }
        },
        "description": "Job strength category (<I>domainId</I> = 160)"
      },
      "CustomerOccupations": {
        "type": "object",
        "properties": {
          "elements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerOccupation"
            }
          },
          "totalSize": {
            "type": "integer",
            "description": "<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
            "format": "int32"
          },
          "hasMoreElements": {
            "type": "boolean",
            "description": "<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>"
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "url"
            }
          }
        }
      },
      "AmountMoneyResponse": {
        "type": "object",
        "properties": {
          "amountMinorUnits": {
            "type": "integer",
            "description": "The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
            "format": "int64"
          },
          "currency": {
            "type": "string",
            "description": "The currency used in the Money amount"
          },
          "scale": {
            "type": "integer",
            "description": "The scale used in the Money amount",
            "format": "int32"
          }
        },
        "description": "Total earnings amount for the frequency. For Weekly and Bi-Weekly frequencies, a zero Amount should be specified if TotalAmountOverride is false."
      },
      "ContractualEarnings": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "amount": {
            "$ref": "#/components/schemas/AmountMoneyResponse"
          },
          "earningsType": {
            "$ref": "#/components/schemas/EarningsTypeResponse"
          },
          "effectiveDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "endDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "frequency": {
            "$ref": "#/components/schemas/EarningsBasisFrequencyResponse"
          },
          "standardHours": {
            "type": "string",
            "description": "Number of hours in a standard working period. In use for Weekly and Bi-Weekly frequcies only, when TotalAmountOverrride is false"
          },
          "standardHourlyRate": {
            "$ref": "#/components/schemas/StandardHourlyRateMoneyResponse"
          },
          "totalAmountOverride": {
            "type": "boolean",
            "description": "For Weekly and Bi-Weekly frequencies, determines whether earnings were specified using Amount (true) or StandardHours and StandardHourlyRate."
          },
          "extensions": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "url"
            }
          }
        }
      },
      "EarningsBasisFrequencyResponse": {
        "type": "object",
        "properties": {
          "domainId": {
            "type": "integer",
            "description": "The <code>domain id</code> of the enum",
            "format": "int64"
          },
          "fullId": {
            "type": "integer",
            "description": "The <code>instance id</code> of the enum",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The enum instance name"
          },
          "domainName": {
            "type": "string",
            "description": "The enum domain name"
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Links to the enum domain and enum instance for the API"
            },
            "description": "Links to the enum domain and enum instance for the API"
          }
        },
        "description": "Frequency for Earnings Basis (<I>domainId</I> = 235)"
      },
      "EarningsTypeResponse": {
        "type": "object",
        "properties": {
          "domainId": {
            "type": "integer",
            "description": "The <code>domain id</code> of the enum",
            "format": "int64"
          },
          "fullId": {
            "type": "integer",
            "description": "The <code>instance id</code> of the enum",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The enum instance name"
          },
          "domainName": {
            "type": "string",
            "description": "The enum domain name"
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Links to the enum domain and enum instance for the API"
            },
            "description": "Links to the enum domain and enum instance for the API"
          }
        },
        "description": "Earnings record type (<I>domainId</I> = 223)"
      },
      "StandardHourlyRateMoneyResponse": {
        "type": "object",
        "properties": {
          "amountMinorUnits": {
            "type": "integer",
            "description": "The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
            "format": "int64"
          },
          "currency": {
            "type": "string",
            "description": "The currency used in the Money amount"
          },
          "scale": {
            "type": "integer",
            "description": "The scale used in the Money amount",
            "format": "int32"
          }
        },
        "description": "Hourly rate for standard working period. In use for Weekly and Bi-Weekly frequencies only, when TotalAmountOverrride is false."
      },
      "AmountMoneyRequest": {
        "type": "object",
        "properties": {
          "amountMinorUnits": {
            "type": "string",
            "description": "The amount in minor units i.e. without a decimal point. So $100.27 will be 10027"
          }
        },
        "description": "Total earnings amount for the frequency. For Weekly and Bi-Weekly frequencies, a zero Amount should be specified if TotalAmountOverride is false."
      },
      "EarningsBasisFrequencyRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The enum instance name"
          },
          "fullId": {
            "type": "integer",
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64"
          }
        },
        "description": "Frequency for Earnings Basis (<I>domainId</I> = 235)"
      },
      "EarningsTypeRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The enum instance name"
          },
          "fullId": {
            "type": "integer",
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64"
          }
        },
        "description": "Earnings record type (<I>domainId</I> = 223)"
      },
      "EditContractualEarningsCommand": {
        "type": "object",
        "properties": {
          "totalAmountOverride": {
            "type": "boolean",
            "description": "For Weekly and Bi-Weekly frequencies, determines whether earnings were specified using Amount (true) or StandardHours and StandardHourlyRate."
          },
          "standardHourlyRate": {
            "$ref": "#/components/schemas/StandardHourlyRateMoneyRequest"
          },
          "effectiveDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "amount": {
            "$ref": "#/components/schemas/AmountMoneyRequest"
          },
          "frequency": {
            "$ref": "#/components/schemas/EarningsBasisFrequencyRequest"
          },
          "endDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "standardHours": {
            "type": "string",
            "description": "Number of hours in a standard working period. In use for Weekly and Bi-Weekly frequcies only, when TotalAmountOverrride is false"
          },
          "earningsType": {
            "$ref": "#/components/schemas/EarningsTypeRequest"
          },
          "extensions": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "StandardHourlyRateMoneyRequest": {
        "type": "object",
        "properties": {
          "amountMinorUnits": {
            "type": "string",
            "description": "The amount in minor units i.e. without a decimal point. So $100.27 will be 10027"
          }
        },
        "description": "Hourly rate for standard working period. In use for Weekly and Bi-Weekly frequencies only, when TotalAmountOverrride is false."
      },
      "CreateContractualEarningsCommand": {
        "required": [
          "earningsType",
          "totalAmountOverride"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/AmountMoneyRequest"
          },
          "earningsType": {
            "$ref": "#/components/schemas/EarningsTypeRequest"
          },
          "effectiveDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "endDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "frequency": {
            "$ref": "#/components/schemas/EarningsBasisFrequencyRequest"
          },
          "standardHours": {
            "type": "string",
            "description": "Number of hours in a standard working period. In use for Weekly and Bi-Weekly frequcies only, when TotalAmountOverrride is false"
          },
          "standardHourlyRate": {
            "$ref": "#/components/schemas/StandardHourlyRateMoneyRequest"
          },
          "totalAmountOverride": {
            "type": "boolean",
            "description": "For Weekly and Bi-Weekly frequencies, determines whether earnings were specified using Amount (true) or StandardHours and StandardHourlyRate."
          },
          "extensions": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "ContractualEarningsList": {
        "type": "object",
        "properties": {
          "elements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContractualEarnings"
            }
          },
          "totalSize": {
            "type": "integer",
            "description": "<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
            "format": "int32"
          },
          "hasMoreElements": {
            "type": "boolean",
            "description": "<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>"
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "url"
            }
          }
        }
      },
      "DayOfWeekResponse": {
        "type": "object",
        "properties": {
          "domainId": {
            "type": "integer",
            "description": "The <code>domain id</code> of the enum",
            "format": "int64"
          },
          "fullId": {
            "type": "integer",
            "description": "The <code>instance id</code> of the enum",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The enum instance name"
          },
          "domainName": {
            "type": "string",
            "description": "The enum domain name"
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Links to the enum domain and enum instance for the API"
            },
            "description": "Links to the enum domain and enum instance for the API"
          }
        },
        "description": "Day of the week (ENUM DomainId=169)"
      },
      "PatternStatusResponse": {
        "type": "object",
        "properties": {
          "domainId": {
            "type": "integer",
            "description": "The <code>domain id</code> of the enum",
            "format": "int64"
          },
          "fullId": {
            "type": "integer",
            "description": "The <code>instance id</code> of the enum",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The enum instance name"
          },
          "domainName": {
            "type": "string",
            "description": "The enum domain name"
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Links to the enum domain and enum instance for the API"
            },
            "description": "Links to the enum domain and enum instance for the API"
          }
        },
        "description": "Indicates whether the pattern is estimated by the Employee or confirmed by the Employer (ENUM DomainId=278)"
      },
      "WeekBasedWorkPattern": {
        "type": "object",
        "properties": {
          "patternStartDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "patternStatus": {
            "$ref": "#/components/schemas/PatternStatusResponse"
          },
          "workPatternType": {
            "$ref": "#/components/schemas/WorkPatternTypeResponse"
          },
          "workWeekStarts": {
            "$ref": "#/components/schemas/WorkWeekStartsResponse"
          },
          "workPatternDays": {
            "type": "array",
            "description": "List of days which make up the pattern. There can be 7, 14, 21 or 28 of these.",
            "items": {
              "$ref": "#/components/schemas/WorkPatternDayResponse"
            }
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "url"
            }
          }
        }
      },
      "WorkPatternDayResponse": {
        "type": "object",
        "properties": {
          "dayOfWeek": {
            "$ref": "#/components/schemas/DayOfWeekResponse"
          },
          "hours": {
            "type": "integer",
            "description": "The number of whole working hours on this day in the work pattern (0-24)",
            "format": "int32"
          },
          "minutes": {
            "type": "integer",
            "description": "The number of minutes on this day in the work pattern (0-59)",
            "format": "int32"
          },
          "weekNumber": {
            "type": "integer",
            "description": "The number of the week in the pattern within which this day occurs (1, 2, 3 or 4)",
            "format": "int32"
          }
        },
        "description": "List of days which make up the pattern. There can be 7, 14, 21 or 28 of these."
      },
      "WorkPatternTypeResponse": {
        "type": "object",
        "properties": {
          "domainId": {
            "type": "integer",
            "description": "The <code>domain id</code> of the enum",
            "format": "int64"
          },
          "fullId": {
            "type": "integer",
            "description": "The <code>instance id</code> of the enum",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The enum instance name"
          },
          "domainName": {
            "type": "string",
            "description": "The enum domain name"
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Links to the enum domain and enum instance for the API"
            },
            "description": "Links to the enum domain and enum instance for the API"
          }
        },
        "description": "Work Pattern Type e.g. Fixed, 2 Weeks Rotating (ENUM DomainId=277)"
      },
      "WorkWeekStartsResponse": {
        "type": "object",
        "properties": {
          "domainId": {
            "type": "integer",
            "description": "The <code>domain id</code> of the enum",
            "format": "int64"
          },
          "fullId": {
            "type": "integer",
            "description": "The <code>instance id</code> of the enum",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The enum instance name"
          },
          "domainName": {
            "type": "string",
            "description": "The enum domain name"
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Links to the enum domain and enum instance for the API"
            },
            "description": "Links to the enum domain and enum instance for the API"
          }
        },
        "description": "The day of the week on which the work week starts (ENUM DomainId=169)"
      },
      "DayOfWeekRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The enum instance name"
          },
          "fullId": {
            "type": "integer",
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64"
          }
        },
        "description": "Day of the week (ENUM DomainId=169)"
      },
      "EditWeekBasedWorkPatternCommand": {
        "required": [
          "workPatternDays",
          "workPatternType"
        ],
        "type": "object",
        "properties": {
          "workPatternDays": {
            "type": "array",
            "description": "List of days which make up the pattern. There can be 7, 14, 21 or 28 of these.",
            "items": {
              "$ref": "#/components/schemas/EditWorkPatternDayCommand"
            }
          },
          "workPatternType": {
            "$ref": "#/components/schemas/WorkPatternTypeRequest"
          },
          "workWeekStarts": {
            "$ref": "#/components/schemas/WorkWeekStartsRequest"
          },
          "patternStartDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "patternStatus": {
            "$ref": "#/components/schemas/PatternStatusRequest"
          }
        }
      },
      "EditWorkPatternDayCommand": {
        "required": [
          "dayOfWeek",
          "hours",
          "minutes",
          "weekNumber"
        ],
        "type": "object",
        "properties": {
          "dayOfWeek": {
            "$ref": "#/components/schemas/DayOfWeekRequest"
          },
          "hours": {
            "minimum": 0,
            "type": "integer",
            "description": "The number of whole working hours on this day in the work pattern (0-24)",
            "format": "int32"
          },
          "minutes": {
            "minimum": 0,
            "type": "integer",
            "description": "The number of minutes on this day in the work pattern (0-59)",
            "format": "int32"
          },
          "weekNumber": {
            "minimum": 0,
            "type": "integer",
            "description": "The number of the week in the pattern within which this day occurs (1, 2, 3 or 4)",
            "format": "int32"
          }
        },
        "description": "List of days which make up the pattern. There can be 7, 14, 21 or 28 of these."
      },
      "PatternStatusRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The enum instance name"
          },
          "fullId": {
            "type": "integer",
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64"
          }
        },
        "description": "Indicates whether the pattern is estimated by the Employee or confirmed by the Employer (ENUM DomainId=278)"
      },
      "WorkPatternTypeRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The enum instance name"
          },
          "fullId": {
            "type": "integer",
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64"
          }
        },
        "description": "Work Pattern Type e.g. Fixed, 2 Weeks Rotating (ENUM DomainId=277)"
      },
      "WorkWeekStartsRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The enum instance name"
          },
          "fullId": {
            "type": "integer",
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64"
          }
        },
        "description": "The day of the week on which the work week starts (ENUM DomainId=169)"
      },
      "CreateWeekBasedWorkPatternCommand": {
        "required": [
          "workPatternDays",
          "workPatternType"
        ],
        "type": "object",
        "properties": {
          "patternStartDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "patternStatus": {
            "$ref": "#/components/schemas/PatternStatusRequest"
          },
          "workPatternType": {
            "$ref": "#/components/schemas/WorkPatternTypeRequest"
          },
          "workWeekStarts": {
            "$ref": "#/components/schemas/WorkWeekStartsRequest"
          },
          "workPatternDays": {
            "type": "array",
            "description": "List of days which make up the pattern. There can be 7, 14, 21 or 28 of these.",
            "items": {
              "$ref": "#/components/schemas/CreateWorkPatternDayCommand"
            }
          }
        }
      },
      "CreateWorkPatternDayCommand": {
        "required": [
          "dayOfWeek",
          "hours",
          "minutes",
          "weekNumber"
        ],
        "type": "object",
        "properties": {
          "dayOfWeek": {
            "$ref": "#/components/schemas/DayOfWeekRequest"
          },
          "hours": {
            "minimum": 0,
            "type": "integer",
            "description": "The number of whole working hours on this day in the work pattern (0-24)",
            "format": "int32"
          },
          "minutes": {
            "minimum": 0,
            "type": "integer",
            "description": "The number of minutes on this day in the work pattern (0-59)",
            "format": "int32"
          },
          "weekNumber": {
            "minimum": 0,
            "type": "integer",
            "description": "The number of the week in the pattern within which this day occurs (1, 2, 3 or 4)",
            "format": "int32"
          }
        },
        "description": "List of days which make up the pattern. There can be 7, 14, 21 or 28 of these."
      },
      "EditEmailAddressCommand": {
        "type": "object",
        "properties": {
          "emailAddress": {
            "type": "string"
          }
        }
      },
      "CreateEmailAddressCommand": {
        "required": [
          "emailAddress"
        ],
        "type": "object",
        "properties": {
          "emailAddress": {
            "pattern": "^[\\w!#$%&'*+/=?`{|}~^-]+(?:\\.[\\w!#$%&'*+/=?`{|}~^-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,6}$",
            "type": "string"
          }
        }
      },
      "Emails": {
        "type": "object",
        "properties": {
          "elements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmailAddressResource"
            }
          },
          "totalSize": {
            "type": "integer",
            "description": "<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
            "format": "int32"
          },
          "hasMoreElements": {
            "type": "boolean",
            "description": "<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>"
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "url"
            }
          }
        }
      },
      "EndpointPermissionResource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Name of the endpoint"
          },
          "enabled": {
            "type": "boolean",
            "description": "If the endpoint is enabled or not for that user"
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "A map of links the user has permission to",
              "format": "url"
            },
            "description": "A map of links the user has permission to"
          }
        }
      },
      "EndpointPermissionResources": {
        "type": "object",
        "properties": {
          "elements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EndpointPermissionResource"
            }
          },
          "totalSize": {
            "type": "integer",
            "description": "<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
            "format": "int32"
          },
          "hasMoreElements": {
            "type": "boolean",
            "description": "<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>"
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "url"
            }
          }
        }
      },
      "AltRoleSchema": {
        "type": "object",
        "properties": {
          "domainId": {
            "type": "integer",
            "description": "The <code>domain id</code> of the enum",
            "format": "int64"
          },
          "fullId": {
            "type": "integer",
            "description": "The <code>instance id</code> of the enum",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The enum instance name"
          },
          "domainName": {
            "type": "string",
            "description": "The enum domain name"
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Links to the enum domain and enum instance for the API"
            },
            "description": "Links to the enum domain and enum instance for the API"
          }
        },
        "description": "Point of Contact Role (EnumDomainId=25)."
      },
      "AltStatusSchema": {
        "type": "object",
        "properties": {
          "domainId": {
            "type": "integer",
            "description": "The <code>domain id</code> of the enum",
            "format": "int64"
          },
          "fullId": {
            "type": "integer",
            "description": "The <code>instance id</code> of the enum",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The enum instance name"
          },
          "domainName": {
            "type": "string",
            "description": "The enum domain name"
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Links to the enum domain and enum instance for the API"
            },
            "description": "Links to the enum domain and enum instance for the API"
          }
        },
        "description": "The Users Account Status (EnumDomainId=1001)."
      },
      "GroupClientUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique Id used to identify the Group Client User."
          },
          "userReferenceIdentifier": {
            "type": "string",
            "description": "This is an additional reference id which can be used to identify a Group Client User."
          },
          "enabled": {
            "type": "boolean",
            "description": "An indicator used to determine if this Group Client User is enabled or not. True = enabled / false = disabled."
          },
          "status": {
            "$ref": "#/components/schemas/AltStatusSchema"
          },
          "role": {
            "$ref": "#/components/schemas/AltRoleSchema"
          },
          "nameOfUser": {
            "type": "string",
            "description": "The Group Client Users name."
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "url"
            }
          }
        }
      },
      "EditGroupClientUserCommand": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "An indicator used to determine if this Group Client User is enabled or not. True = enabled / false = disabled."
          }
        }
      },
      "AltGroupClientUserListSchema": {
        "type": "object",
        "properties": {
          "elements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupClientUser"
            }
          },
          "totalSize": {
            "type": "integer",
            "description": "<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
            "format": "int32"
          },
          "hasMoreElements": {
            "type": "boolean",
            "description": "<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>"
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "url"
            }
          }
        }
      },
      "CaseEmbeddable": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID used to identify Case"
          },
          "caseType": {
            "type": "string",
            "description": "Case type"
          },
          "caseNumber": {
            "type": "string",
            "description": "Case number"
          },
          "status": {
            "type": "string",
            "description": "The status of the sub-case."
          },
          "caseHandler": {
            "$ref": "#/components/schemas/CaseHandlerEmbeddable"
          }
        },
        "description": "Child cases of the Notification Case"
      },
      "CaseHandlerEmbeddable": {
        "type": "object",
        "properties": {
          "emailAddress": {
            "type": "string",
            "description": "Email Address"
          },
          "telephoneNo": {
            "type": "string",
            "description": "Telephone"
          },
          "name": {
            "type": "string",
            "description": "Name"
          },
          "id": {
            "type": "string",
            "description": "ID used to uniquely identify case handler"
          }
        },
        "description": "The casehandler associated with the Notification"
      },
      "NotifedByResponse": {
        "type": "object",
        "properties": {
          "domainId": {
            "type": "integer",
            "description": "The <code>domain id</code> of the enum",
            "format": "int64"
          },
          "fullId": {
            "type": "integer",
            "description": "The <code>instance id</code> of the enum",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The enum instance name"
          },
          "domainName": {
            "type": "string",
            "description": "The enum domain name"
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Links to the enum domain and enum instance for the API"
            },
            "description": "Links to the enum domain and enum instance for the API"
          }
        },
        "description": "Identifies who started this notification"
      },
      "Notification": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "An id to uniquely identify the Notification"
          },
          "caseNumber": {
            "type": "string",
            "description": "The Notification's case number"
          },
          "notificationReason": {
            "$ref": "#/components/schemas/NotificationReasonResponse"
          },
          "notificationDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "createdDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "adminGroup": {
            "type": "string",
            "description": "Administrative group of the notification case."
          },
          "status": {
            "type": "string",
            "description": "The status of the Notification"
          },
          "subCases": {
            "type": "array",
            "description": "Child cases of the Notification Case",
            "items": {
              "$ref": "#/components/schemas/CaseEmbeddable"
            }
          },
          "customer": {
            "$ref": "#/components/schemas/CustomerResource"
          },
          "caseHandler": {
            "$ref": "#/components/schemas/CaseHandlerEmbeddable"
          },
          "notifiedBy": {
            "$ref": "#/components/schemas/NotifedByResponse"
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "url"
            }
          }
        }
      },
      "NotificationReasonResponse": {
        "type": "object",
        "properties": {
          "domainId": {
            "type": "integer",
            "description": "The <code>domain id</code> of the enum",
            "format": "int64"
          },
          "fullId": {
            "type": "integer",
            "description": "The <code>instance id</code> of the enum",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The enum instance name"
          },
          "domainName": {
            "type": "string",
            "description": "The enum domain name"
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Links to the enum domain and enum instance for the API"
            },
            "description": "Links to the enum domain and enum instance for the API"
          }
        },
        "description": "The reason for the Notification (<I>domainId</I> = 290)"
      },
      "Notifications": {
        "type": "object",
        "properties": {
          "elements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Notification"
            }
          },
          "totalSize": {
            "type": "integer",
            "description": "<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
            "format": "int32"
          },
          "hasMoreElements": {
            "type": "boolean",
            "description": "<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>"
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "url"
            }
          }
        }
      },
      "PermissionGroupResource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Name of the endpoint"
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "A map of links the user has permission to",
              "format": "url"
            },
            "description": "A map of links the user has permission to"
          }
        }
      },
      "PermissionGroupResources": {
        "type": "object",
        "properties": {
          "elements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionGroupResource"
            }
          },
          "totalSize": {
            "type": "integer",
            "description": "<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
            "format": "int32"
          },
          "hasMoreElements": {
            "type": "boolean",
            "description": "<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>"
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "url"
            }
          }
        }
      },
      "EditPhoneNumberCommand": {
        "type": "object",
        "properties": {
          "exDirectory": {
            "type": "boolean"
          },
          "areaCode": {
            "type": "string"
          },
          "intCode": {
            "type": "string"
          },
          "telephoneNo": {
            "type": "string"
          },
          "contactMethod": {
            "$ref": "#/components/schemas/EnumCommand"
          },
          "extension": {
            "type": "string"
          }
        }
      },
      "EnumCommand": {
        "type": "object",
        "properties": {
          "fullId": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "CreatePhoneNumberCommand": {
        "required": [
          "contactMethod"
        ],
        "type": "object",
        "properties": {
          "contactMethod": {
            "$ref": "#/components/schemas/EnumCommand"
          },
          "areaCode": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string"
          },
          "extension": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string"
          },
          "intCode": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string"
          },
          "telephoneNo": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string"
          },
          "exDirectory": {
            "type": "boolean"
          }
        }
      },
      "PhoneNumbers": {
        "type": "object",
        "properties": {
          "elements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhoneNumberResource"
            }
          },
          "totalSize": {
            "type": "integer",
            "description": "<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
            "format": "int32"
          },
          "hasMoreElements": {
            "type": "boolean",
            "description": "<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>"
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "url"
            }
          }
        }
      },
      "DivisionClassLinkEmbeddable": {
        "type": "object",
        "properties": {
          "divisionId": {
            "type": "string",
            "description": "The ID of the selected Division"
          },
          "classId": {
            "type": "string",
            "description": "The ID of the selected Class"
          }
        },
        "description": "The list of class and division ids that are linked to the claimant member details for the group policy (sorted by division name and class name)."
      },
      "GroupPolicyClassEmbeddable": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID used to identify the group policy class"
          },
          "name": {
            "type": "string",
            "description": "The name of the selected group policy class"
          }
        },
        "description": "The ids and names of the classes that are available on the group policy (sorted by name)."
      },
      "GroupPolicyDivisionEmbeddable": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID used to identify the group policy division"
          },
          "name": {
            "type": "string",
            "description": "The name of the selected group policy division"
          }
        },
        "description": "The ids and names of the divisions that are available on the group policy (sorted by name)."
      },
      "GroupPolicyMemberDetail": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The claim member details ID."
          },
          "memberNumber": {
            "type": "string",
            "description": "The Claimant's member number for the group policy"
          },
          "policyReference": {
            "type": "string",
            "description": "The policy reference"
          },
          "divisionClassLinks": {
            "type": "array",
            "description": "The list of class and division ids that are linked to the claimant member details for the group policy (sorted by division name and class name).",
            "items": {
              "$ref": "#/components/schemas/DivisionClassLinkEmbeddable"
            }
          },
          "availablePolicyDivisions": {
            "type": "array",
            "description": "The ids and names of the divisions that are available on the group policy (sorted by name).",
            "items": {
              "$ref": "#/components/schemas/GroupPolicyDivisionEmbeddable"
            }
          },
          "availablePolicyClasses": {
            "type": "array",
            "description": "The ids and names of the classes that are available on the group policy (sorted by name).",
            "items": {
              "$ref": "#/components/schemas/GroupPolicyClassEmbeddable"
            }
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "url"
            }
          }
        }
      },
      "EditGroupPolicyMemberDetailCommand": {
        "type": "object",
        "properties": {
          "memberNumber": {
            "type": "string",
            "description": "The Claimant's member number for the group policy"
          },
          "divisionClassLinks": {
            "type": "array",
            "description": "The list of class and division ids that are linked to the claimant member details for the group policy (sorted by division name and class name).",
            "items": {
              "$ref": "#/components/schemas/WriteDivisionClassLinkCommand"
            }
          }
        }
      },
      "WriteDivisionClassLinkCommand": {
        "type": "object",
        "properties": {
          "classId": {
            "type": "string",
            "description": "The ID of the selected Class"
          },
          "divisionId": {
            "type": "string",
            "description": "The ID of the selected Division"
          }
        },
        "description": "The list of class and division ids that are linked to the claimant member details for the group policy (sorted by division name and class name)."
      },
      "GroupPolicyMemberDetails": {
        "type": "object",
        "properties": {
          "elements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupPolicyMemberDetail"
            }
          },
          "totalSize": {
            "type": "integer",
            "description": "<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
            "format": "int32"
          },
          "hasMoreElements": {
            "type": "boolean",
            "description": "<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>"
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "url"
            }
          }
        },
        "description": "The list of group policies linked to the claim (sorted by policy reference and member number) "
      },
      "ClientDominantSideResponse": {
        "type": "object",
        "properties": {
          "domainId": {
            "type": "integer",
            "description": "The <code>domain id</code> of the enum",
            "format": "int64"
          },
          "fullId": {
            "type": "integer",
            "description": "The <code>instance id</code> of the enum",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The enum instance name"
          },
          "domainName": {
            "type": "string",
            "description": "The enum domain name"
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Links to the enum domain and enum instance for the API"
            },
            "description": "Links to the enum domain and enum instance for the API"
          }
        },
        "description": "A snapshot of the claimant's dominant side at the time this claim was created (<I>EnumDomainId=2294</I>). Sample values are 'Unknown', 'Right' and 'Left'."
      },
      "LifeExpectancyResponse": {
        "type": "object",
        "properties": {
          "domainId": {
            "type": "integer",
            "description": "The <code>domain id</code> of the enum",
            "format": "int64"
          },
          "fullId": {
            "type": "integer",
            "description": "The <code>instance id</code> of the enum",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The enum instance name"
          },
          "domainName": {
            "type": "string",
            "description": "The enum domain name"
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Links to the enum domain and enum instance for the API"
            },
            "description": "Links to the enum domain and enum instance for the API"
          }
        },
        "description": "Projected life expectancy for the injured party based on the current medical information (<I>EnumDomainId=2481</I>). Sample values are 'Unknown', 'Less than 6 months' and '6-12 months'."
      },
      "MedicalDetails": {
        "type": "object",
        "properties": {
          "condition": {
            "type": "string",
            "description": "A description of the medical condition of the injured party."
          },
          "firstDoctorVisitDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "lastReceivedDateMedicalInfo": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "lastRequestedDateMedicalInfo": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "medicalAuthorisationReceivedDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "pregnancyIndicator": {
            "type": "boolean",
            "description": "Indicates whether a person is pregnant or not."
          },
          "treatmentPlan": {
            "type": "string",
            "description": "A description of the treatment plan for the injured party."
          },
          "clientDominantSide": {
            "type": "string",
            "description": "The claimants dominant side."
          },
          "lifeExpectancy": {
            "type": "string",
            "description": "Projected life expectancy for the injured party based on the current medical information."
          },
          "causeOfInjuryCode": {
            "type": "string",
            "description": "The code ID that specifies the cause of injury."
          },
          "extensionAttributes": {
            "type": "array",
            "description": "Extension attributes.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            }
          },
          "symptomsFirstAppeared": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          }
        }
      },
      "ClientDominantSideRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The enum instance name"
          },
          "fullId": {
            "type": "integer",
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64"
          }
        },
        "description": "A snapshot of the claimant's dominant side at the time this claim was created (<I>EnumDomainId=2294</I>). Sample values are 'Unknown', 'Right' and 'Left'."
      },
      "EditMedicalDetailsCommand": {
        "type": "object",
        "properties": {
          "lastReceivedDateMedicalInfoDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "lastRequestedDateMedicalInfoDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "pregnancyIndicator": {
            "type": "boolean",
            "description": "Indicates whether a person is pregnant or not."
          },
          "symptomsFirstAppearedDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "condition": {
            "type": "string",
            "description": "A description of the medical condition of the injured party. Cannot be more than 150 characters."
          },
          "firstDoctorVisitDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "treatmentPlan": {
            "type": "string",
            "description": "A description of the treatment plan for the injured party. Cannot be more than 256 characters."
          },
          "medicalAuthorisationReceivedDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "clientDominantSide": {
            "$ref": "#/components/schemas/ClientDominantSideRequest"
          },
          "lifeExpectancy": {
            "$ref": "#/components/schemas/LifeExpectancyRequest"
          },
          "causeOfInjuryCode": {
            "type": "string",
            "description": "The code ID that specifies the cause of injury. This represents a specific medical code that identifies a particular injury, and is associated with the corresponding claim (using a Code Value Link entity). This must be contained within inverted commas, otherwise the value will be coerced. For example, medical code 10-1 would be coerced into medical code 9."
          },
          "extensions": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "description": "An object of the extension attributes that contains MedicalDetails (OLClaimMedicalDetails) extension information."
            },
            "description": "An object of the extension attributes that contains MedicalDetails (OLClaimMedicalDetails) extension information."
          }
        }
      },
      "LifeExpectancyRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The enum instance name"
          },
          "fullId": {
            "type": "integer",
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64"
          }
        },
        "description": "Projected life expectancy for the injured party based on the current medical information (<I>EnumDomainId=2481</I>). Sample values are 'Unknown', 'Less than 6 months' and '6-12 months'."
      },
      "EnumDomain": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Enum domain ID (unique in the system)"
          },
          "name": {
            "type": "string",
            "description": "Enum domain name"
          },
          "description": {
            "type": "string",
            "description": "Description of this domain"
          },
          "editable": {
            "type": "boolean",
            "description": "Flag whether this domain is allowed to be edited. Domain can be edited from back office system only - No edit domain endpoint exists."
          },
          "alphaSort": {
            "type": "boolean",
            "description": "When value is equal to 'true' it indicating that domain instances when presented to user should be sorted alphabetically, 'false' otherwise. This parameter does not influence sort order of instances when returned by this API"
          },
          "defaultSort": {
            "type": "boolean",
            "description": "When value is equal to 'true' it indicating that default instance should be shown (to user) first in an alphabetically sorted view, 'false' othrwise. This parameter does not influence sort order of instances when returned by this API"
          },
          "instances": {
            "type": "array",
            "description": "List of the instances that belongs to this domain ",
            "items": {
              "$ref": "#/components/schemas/EnumInstanceSummary"
            }
          },
          "subsets": {
            "type": "array",
            "description": "List of subsets that belongs to this domain",
            "items": {
              "$ref": "#/components/schemas/EnumSubset"
            }
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Links to related objects (in this case: self and instances)",
              "format": "url",
              "example": "{'self': '','instances': ''}"
            },
            "description": "Links to related objects (in this case: self and instances)",
            "example": "{'self': '','instances': ''}"
          }
        },
        "description": "Enum Domain from TA"
      },
      "EnumInstanceSummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Enum instance ID"
          },
          "name": {
            "type": "string",
            "description": "Enum instance name"
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Links to related objects (in this case: enumInstance)",
              "format": "url",
              "example": "{'enumInstance': ''}"
            },
            "description": "Links to related objects (in this case: enumInstance)",
            "example": "{'enumInstance': ''}"
          }
        },
        "description": "This model class expose EnumInstance Summary"
      },
      "EnumSubset": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Enum subset name"
          },
          "instances": {
            "type": "array",
            "description": "List of the instances that belongs to this Subset ",
            "items": {
              "$ref": "#/components/schemas/EnumInstanceSummary"
            }
          }
        },
        "description": "This model class expose EnumSubset detailed information, this means that except name also list of EnumInstanceSummary objects get exposed."
      },
      "EnumDomains": {
        "type": "object",
        "properties": {
          "elements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnumDomain"
            }
          },
          "totalSize": {
            "type": "integer",
            "description": "<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
            "format": "int32"
          },
          "hasMoreElements": {
            "type": "boolean",
            "description": "<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>"
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "url"
            }
          }
        }
      },
      "EnumInstance": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Enum instance ID (unique in the domain)"
          },
          "name": {
            "type": "string",
            "description": "Enum instance name"
          },
          "domainId": {
            "type": "integer",
            "description": "Enum Domain ID, corresponds to <code>domainId</code>",
            "format": "int64"
          },
          "fullId": {
            "type": "integer",
            "description": "Enum instance fullId, corresponds to <code>TaEnum.fullId</code>",
            "format": "int64"
          },
          "domainName": {
            "type": "string",
            "description": "Name of domain to which this instance belongs to"
          },
          "retired": {
            "type": "boolean",
            "description": "If <code>true</code> retired Instances only are returned,if <code>false</code>(or not specified) non-retired instances only are returned"
          },
          "startDate": {
            "type": "string",
            "description": "Date at which the Enum was activated",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "description": "Date at which the Enum will become inactive (since that date, enum should be considered inactive)",
            "format": "date"
          },
          "dOrder": {
            "type": "integer",
            "description": "Denotes the order the Enum resides within all Enum Instances within Domain",
            "format": "int64"
          },
          "subsets": {
            "uniqueItems": true,
            "type": "array",
            "description": "List of subsets to which this instance belongs to",
            "items": {
              "$ref": "#/components/schemas/EnumSubsetSummary"
            }
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Links to related objects (in this case: SELF and DOMAIN)",
              "format": "url",
              "example": "{'self': '','domain': ''}"
            },
            "description": "Links to related objects (in this case: SELF and DOMAIN)",
            "example": "{'self': '','domain': ''}"
          }
        },
        "description": "This model class expose EnumInstance from TA"
      },
      "EnumSubsetSummary": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Enum subset name"
          }
        },
        "description": "This model class expose EnumSubset summary information."
      },
      "EnumInstances": {
        "type": "object",
        "properties": {
          "elements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnumInstance"
            }
          },
          "totalSize": {
            "type": "integer",
            "description": "<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
            "format": "int32"
          },
          "hasMoreElements": {
            "type": "boolean",
            "description": "<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>"
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "_links": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "url"
            }
          }
        }
      },
      "ErrorModel": {
        "required": [
          "error"
        ],
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "correlationId": {
            "type": "string"
          },
          "errorDetail": {
            "type": "string"
          },
          "stacktrace": {
            "type": "string"
          }
        }
      },
      "UserErrorModel": {
        "required": [
          "error"
        ],
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          }
        }
      },
      "CaseHandler": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Full name of the case handler."
          },
          "phoneNumber": {
            "type": "string",
            "description": "Phone number of the case handler."
          },
          "emailAddress": {
            "type": "string",
            "description": "Email address of the case handler."
          }
        },
        "description": "Person who is assigned to this accommodation case."
      },
      "Employee": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the employee"
          },
          "name": {
            "type": "string",
            "description": "Name of the employee"
          }
        },
        "description": "Employee for which leave request is submitted"
      },
      "GroupClientAccommodationCase": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the resource."
          },
          "caseReference": {
            "type": "string",
            "description": "Business identifier for this case."
          },
          "notificationDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "caseHandler": {
            "$ref": "#/components/schemas/CaseHandler"
          },
          "pregnancyRelated": {
            "type": "string",
            "description": "Identifies whether the accommodation being requested is related to an employee's pregnancy."
          },
          "decisionDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "phase": {
            "type": "string",
            "description": "Current phase in the Interactive Accommodation Process required by the Americans With Disabilities Act (ADA) and configured in the system, for example, 'Assessment'."
          },
          "stage": {
            "type": "string",
            "description": "Current stage in the Interactive Accommodation Process and configured in the system, for example, 'Evaluate Accommodation Options'."
          },
          "closureReasons": {
            "type": "array",
            "description": "List of reasons given if the case is not being accommodated.",
            "items": {
              "type": "string",
              "description": "List of reasons given if the case is not being accommodated."
            }
          },
          "accommodations": {
            "type": "array",
            "description": "List of accommodations contained in the case.",
            "items": {
              "$ref": "#/components/schemas/GroupClientAccommodationDetail"
            }
          },
          "limitations": {
            "type": "array",
            "description": "List of limitations the employee has that they require an accommodation in their job.",
            "items": {
              "type": "string",
              "description": "List of limitations the employee has that they require an accommodation in their job."
            }
          },
          "notificationCase": {
            "$ref": "#/components/schemas/NotificationCase"
          },
          "employee": {
            "$ref": "#/components/schemas/Employee"
          }
        }
      },
      "GroupClientAccommodationDetail": {
        "type": "object",
        "properties": {
          "accommodationCategory": {
            "type": "string",
            "description": "The Category that identifies this association."
          },
          "accommodationType": {
            "type": "string",
            "description": "The Type that identifies this accommodation"
          },
          "accommodationDescription": {
            "type": "string",
            "description": "The description of this accommodation."
          },
          "source": {
            "type": "string",
            "description": "Has the accommodation been resquested by employee or proposed by employer?"
          },
          "createDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "acceptedDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "implementedDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "endDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          }
        },
        "description": "List of accommodations contained in the case."
      },
      "NotificationCase": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Resource Id of the notification case this accommodation case belongs to if one exists."
          },
          "caseReference": {
            "type": "string",
            "description": "Business identifier for this case."
          }
        },
        "description": "Parent case of this accommodation case."
      },
      "EmployeeLeaveBalance": {
        "type": "object",
        "properties": {
          "approvedTime": {
            "type": "number",
            "description": "Employee total approved leave as per the leave plan calculation for the given period."
          },
          "pendingTime": {
            "type": "number",
            "description": "Employee total pending leave as per the leave plan calculation for the given period."
          },
          "availableBalance": {
            "type": "number",
            "description": "Employee total approximate available leave balance as per the leave plan calculation for the given period."
          },
          "timeBasis": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "The basis used to record time unit of approved, pending and entitlement. It may be Minutes, Hours, Days, Weeks, Years or Months. This maps to enum TimeUnits(domain id 6757)."
          },
          "availabilityPeriodStartDate": {
            "type": "string",
            "description": "ISO 8601 date time format",
            "format": "date-time",
            "example": "1999-12-31T23:59:59Z"
          },
          "availabilityPeriodEndDate": {
            "type": "string",
            "description": "ISO 8601 date time format",
            "format": "date-time",
            "example": "1999-12-31T23:59:59Z"
          },
          "timeEntitlement": {
            "type": "number",
            "description": "The time that is available to an employee who has met the eligibility requirements as per the leave plan calculation period."
          },
          "timeWithinPeriod": {
            "maximum": 9999,
            "type": "integer",
            "description": "The time frame within which the employee must avail of the entitled leave. For example, an employee may be entitled to 6 weeks leave within 12 months period.",
            "format": "int64"
          },
          "timeWithinPeriodBasis": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "The basis used to record time unit of time within a period. It may be Minutes, Hours, Days, Weeks or Months. This maps to enum LengthBasis(domain id 6758)."
          },
          "notificationMessage": {
            "type": "string",
            "description": "The additional information to the employer about the balance being presented and can explain some reasons to be cautious of the value presented here.The following information message returns as per the leave plan type.<UL><LI><B>Standard leave plan:</B> The approximate balance provides an indication of your balance under this leave plan and is for general information purposes only. This balance considers your leave requests within the highlighted months. We recommend that you submit a leave request for an accurate assessment of available time under each leave plan.</LI><LI><B>Shared leave plan:</B>The approximate balance estimates time left under this leave plan. Other leave requests and leave plan entitlements may affect this plan's balance. We recommend that you submit a leave request for an accurate evaluation of available time.</LI><LI><B>Tracking plans:</B>This leave plan tracks time shared between other leave plans and the approved and pending time is totaled from those plans. The approximate balance is a guide only.</LI><LI><B>Leave plan with versions:</B>The approximate balance is an estimate as this leave plan has different versions that may alter the plan's entitlements. These calculations are based on the version that is effective in the selected month. We recommend that you submit a leave request for an accurate evaluation of available time.</LI><LI><B>Leave plans with reasonable timebank:</B> The approximate balance is not available as this leave plan allows for a reasonable amount of time to be taken rather than a set entitlement. The amount of time available is at the employer's discretion.</LI><LI><B>Leave plans that are no longer serviced by a carrier:</B> The approximate balance is not available because this leave plan is no longer serviced by the employer.</LI></UL>"
          }
        }
      },
      "CancelLeavePeriodsDetails": {
        "required": [
          "changeRequestPeriods",
          "reason"
        ],
        "type": "object",
        "properties": {
          "reason": {
            "type": "string",
            "description": "Reason for the leave period change request (EnumDomainId=6870). For example, valid reasons for requesting the removal of one or more leave periods are 'Employee Requested Removal' and 'Created in Error'. Valid reasons for requesting the addition of a leave period are 'Add time for identical Absence Reason', 'Add time for different Absence Reason', 'Add time for unknown Absence Reason'"
          },
          "additionalNotes": {
            "type": "string",
            "description": "Additional notes for leave period change request."
          },
          "changeRequestPeriods": {
            "maxItems": 20,
            "minItems": 1,
            "type": "array",
            "description": "List of periods for leave period change request.",
            "items": {
              "$ref": "#/components/schemas/CancellationPeriod"
            }
          }
        }
      },
      "CancellationPeriod": {
        "required": [
          "endDate",
          "startDate"
        ],
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "endDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          }
        },
        "description": "List of periods for leave period change request."
      },
      "ValidationMessageModel": {
        "required": [
          "validationMessage"
        ],
        "type": "object",
        "properties": {
          "validationMessage": {
            "type": "string"
          }
        }
      },
      "Absence": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the absence case"
          },
          "caseReference": {
            "type": "string",
            "description": "Case reference related to absence"
          }
        },
        "description": "Absence case related to qualified request"
      },
      "Decision": {
        "type": "object",
        "properties": {
          "absence": {
            "$ref": "#/components/schemas/Absence"
          },
          "employee": {
            "$ref": "#/components/schemas/Employee"
          },
          "period": {
            "$ref": "#/components/schemas/Period"
          }
        },
        "description": "List of Period Decisions for the given absence or employee"
      },
      "LeavePlan": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier for the leave plan"
          },
          "name": {
            "type": "string",
            "description": "Leave plan long name"
          },
          "shortName": {
            "type": "string",
            "description": "Leave plan short name"
          },
          "applicabilityStatus": {
            "type": "string",
            "description": "Applicability status of leave plan"
          },
          "eligibilityStatus": {
            "type": "string",
            "description": "Eligibility status of leave plan"
          },
          "availabilityStatus": {
            "type": "string",
            "description": "Result of the evaluation of plan availability within a leave request"
          },
          "adjudicationStatus": {
            "type": "string",
            "description": "Adjudication status of leave plan"
          },
          "evidenceStatus": {
            "type": "string",
            "description": "Evidence status made on this Selected Leave Plan"
          },
          "category": {
            "type": "string",
            "description": "Leave plan category"
          },
          "calculationPeriodMethod": {
            "type": "string",
            "description": "Calculation period method of leave plan period."
          },
          "timeBankMethod": {
            "type": "string",
            "description": "The time bank method either from the Service Agreement or from the Leave Plan Availability"
          },
          "timeWithinPeriod": {
            "type": "integer",
            "description": "Number of time units for the period duration e.g. Weeks, Days",
            "format": "int64"
          },
          "timeWithinPeriodBasis": {
            "type": "string",
            "description": "Units of time used in calculating the time with in period "
          },
          "fixedYearStartDay": {
            "type": "integer",
            "description": "Start day for the specified fixed year",
            "format": "int64"
          },
          "fixedYearStartMonth": {
            "type": "string",
            "description": "Fixed year start month"
          },
          "timeEntitlement": {
            "type": "number",
            "description": "Number of time units for the time entitlement"
          },
          "timeEntitlementBasis": {
            "type": "string",
            "description": "Units of time used in leave plan availability"
          },
          "paidLeaveCaseId": {
            "type": "string",
            "description": "Paid leave case id"
          }
        },
        "description": "The leave plan associated with the request"
      },
      "LeaveRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Business Entity OID",
            "format": "string",
            "example": "PE-00012-0000001234"
          },
          "reasonName": {
            "type": "string",
            "description": "The leave request reason"
          },
          "qualifier1": {
            "type": "string",
            "description": "The leave request first qualifier"
          },
          "qualifier2": {
            "type": "string",
            "description": "The leave request second qualifier"
          },
          "decisionStatus": {
            "type": "string",
            "description": "Leave request decision status"
          },
          "approvalReason": {
            "type": "string",
            "description": "Reason for approval of a request"
          },
          "denialReason": {
            "type": "string",
            "description": "Reason for denial of a request"
          }
        },
        "description": "Leave request"
      },
      "Period": {
        "type": "object",
        "properties": {
          "periodReference": {
            "type": "string",
            "description": "Business Entity OID",
            "format": "string",
            "example": "PE-00012-0000001234"
          },
          "parentPeriodReference": {
            "type": "string",
            "description": "Reference number for the parent period"
          },
          "relatedToEpisodic": {
            "type": "boolean",
            "description": "True if this period represents a reported actual for an episodic requested period, false otherwise"
          },
          "startDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "endDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "balanceDeduction": {
            "type": "number",
            "description": "The amount of time deducted from the time bank in the specified time entitlement basis e.g. number of Weeks, Days etc."
          },
          "timeRequested": {
            "type": "string",
            "description": "The amount of time requested in this period, in the specified time entitlement basis e.g. number of Weeks, Days"
          },
          "timeDeducted": {
            "type": "string",
            "description": "The amount of time deducted in this period, in the specified time deducted basis e.g. number of Hours, Days"
          },
          "timeDeductedBasis": {
            "type": "string",
            "description": "The time deducted basis in this period e.g. Hours, Days"
          },
          "timeDecisionStatus": {
            "type": "string",
            "description": "Decision status associated with the period"
          },
          "timeDecisionReason": {
            "type": "string",
            "description": "Decision reason associated with the period"
          },
          "type": {
            "type": "string",
            "description": "Type of the absence period"
          },
          "status": {
            "type": "string",
            "description": "Status of the leave request"
          },
          "requestedEpisodicLeaveDetails": {
            "$ref": "#/components/schemas/RequestedEpisodicLeaveDetails"
          },
          "leavePlan": {
            "$ref": "#/components/schemas/LeavePlan"
          },
          "leaveRequest": {
            "$ref": "#/components/schemas/LeaveRequest"
          }
        },
        "description": "Leave period"
      },
      "PeriodDecisions": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "endDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "decisions": {
            "type": "array",
            "description": "List of Period Decisions for the given absence or employee",
            "items": {
              "$ref": "#/components/schemas/Decision"
            }
          }
        }
      },
      "RequestedEpisodicLeaveDetails": {
        "type": "object",
        "properties": {
          "frequency": {
            "type": "integer",
            "description": "How often individual periods of absence are taken, for example, 2 (times)",
            "format": "int64"
          },
          "frequencyInterval": {
            "type": "integer",
            "description": "The interval of time between the individual periods of absence, for example, 1 (Weeks).",
            "format": "int64"
          },
          "frequencyIntervalBasis": {
            "type": "string",
            "description": "The unit of the interval between the periods of absence, for example, Minutes, Hours, Days. This maps to a sub-set of the Enum TimeUnits (domain id 6757)"
          },
          "duration": {
            "type": "integer",
            "description": "The duration of each period of absence, for example, 3 (Hours).",
            "format": "int64"
          },
          "durationBasis": {
            "type": "string",
            "description": "The unit of the duration of the period of absence, for example, Minutes, Hours, Days. This maps to a sub-set of the Enum TimeUnits (domain id 6757)."
          }
        },
        "description": "The specified duration and frequency details for a period of time, typically associated with re-occurring unforeseeable absences for e.g. Requested Leave: Episodic / leave as needed (4 hours twice per day) due to Bereavement from Thursday, October 1st 2020 through Thursday, October 15th 2020."
      },
      "ClaimSummary": {
        "required": [
          "claimId",
          "claimType"
        ],
        "type": "object",
        "properties": {
          "claimId": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "The claim number of the claim"
          },
          "claimType": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The name by which the claim type is referred."
          },
          "creationDate": {
            "type": "string",
            "description": "ISO 8601 date time format",
            "format": "date-time",
            "example": "1999-12-31T23:59:59Z"
          },
          "effectiveDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "customerName": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "The customer name of the claim"
          },
          "policyReferences": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The reference(s) to the policy from within the relevant admin system."
          },
          "description": {
            "maxLength": 2000,
            "minLength": 0,
            "type": "string",
            "description": "Description for this case as entered by the user."
          },
          "status": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "This is the stage in the process that the case is currently at."
          },
          "claimHandler": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The Person that is handling the claim."
          },
          "claimHandlerEmailAddress": {
            "maxLength": 40,
            "minLength": 0,
            "type": "string",
            "description": "The email address of the claim handler."
          },
          "claimHandlerPhoneNo": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "The phone number of the claim handler."
          },
          "notificationDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "caseComplexity": {
            "type": "string",
            "description": "Case complexity on Claim"
          },
          "stageName": {
            "type": "string",
            "description": "The current stage of claim case."
          },
          "classExtensionInformation": {
            "type": "array",
            "description": "An array of the extensionAttribute objects which contain extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            }
          },
          "notificationCaseId": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "The notification case number of the claim case if applicable."
          }
        }
      },
      "ExtensionAttribute": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the attribute which extends standard claim set of attributes."
          },
          "stringValue": {
            "type": "string",
            "description": "Value of the class extension attribute of a string type."
          },
          "booleanValue": {
            "type": "boolean",
            "description": "Value of the class extension attribute of a boolean type."
          },
          "dateOnlyValue": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "decimalValue": {
            "type": "number",
            "description": "Value of the class extension attribute of a Decimal type."
          },
          "enumValue": {
            "$ref": "#/components/schemas/ModelEnum"
          },
          "moneyValue": {
            "type": "string",
            "description": "Value of the class extension attribute of a Money type."
          },
          "integerValue": {
            "type": "integer",
            "description": "Value of the class extension attribute of a string type.",
            "format": "int32"
          }
        },
        "description": "An array of the extensionAttribute objects which contain extension information."
      },
      "ModelEnum": {
        "required": [
          "domainName",
          "instanceValue"
        ],
        "type": "object",
        "properties": {
          "domainName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Domain name."
          },
          "instanceValue": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Enum instance value."
          }
        }
      },
      "Address": {
        "required": [
          "country"
        ],
        "type": "object",
        "properties": {
          "premiseNo": {
            "maxLength": 5,
            "minLength": 0,
            "type": "string",
            "description": "This is the premise number"
          },
          "addressLine1": {
            "maxLength": 40,
            "minLength": 0,
            "type": "string",
            "description": "Address Line 1"
          },
          "addressLine2": {
            "maxLength": 40,
            "minLength": 0,
            "type": "string",
            "description": "Address Line 2"
          },
          "addressLine3": {
            "maxLength": 40,
            "minLength": 0,
            "type": "string",
            "description": "Address Line 3"
          },
          "addressLine4": {
            "maxLength": 40,
            "minLength": 0,
            "type": "string",
            "description": "Address Line 4"
          },
          "addressLine5": {
            "maxLength": 40,
            "minLength": 0,
            "type": "string",
            "description": "Address Line 5"
          },
          "addressLine6": {
            "maxLength": 40,
            "minLength": 0,
            "type": "string",
            "description": "Address Line 6"
          },
          "addressLine7": {
            "maxLength": 40,
            "minLength": 0,
            "type": "string",
            "description": "Address Line 7"
          },
          "postCode": {
            "maxLength": 40,
            "minLength": 0,
            "type": "string",
            "description": "International Postcode"
          },
          "country": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Country"
          },
          "classExtensionInformation": {
            "type": "array",
            "description": "An array of the extensionAttribute objects which contain claim extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            }
          }
        }
      },
      "Customer": {
        "required": [
          "dateOfBirth",
          "firstName",
          "lastName"
        ],
        "type": "object",
        "properties": {
          "firstName": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Person's first name."
          },
          "lastName": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Person's last name."
          },
          "secondName": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Person's second name."
          },
          "initials": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "Person's middle initials."
          },
          "needsInterpretor": {
            "type": "boolean",
            "description": "Indicates if the customer needs an interpreter."
          },
          "placeOfBirth": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Place of birth."
          },
          "gender": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The person's gender."
          },
          "dateOfBirth": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "maritalStatus": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Person's marital status - single / married / etc."
          },
          "nationality": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Person's nationality."
          },
          "title": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Person's chosen title e.g. Mr / Mrs etc."
          },
          "idNumber": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "ID number of the claimant."
          },
          "identificationNumberType": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The type of identification number the party will have."
          },
          "securedClient": {
            "type": "boolean",
            "description": "Secured client flag."
          },
          "staff": {
            "type": "boolean",
            "description": "Staff flag."
          },
          "partyType": {
            "type": "string"
          },
          "classExtensionInformation": {
            "type": "array",
            "description": "An array of the extensionAttribute objects which contain customer (OCPerson) extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            }
          },
          "customerAddress": {
            "$ref": "#/components/schemas/CustomerAddress"
          },
          "initals": {
            "type": "string",
            "writeOnly": true
          }
        }
      },
      "CustomerAddress": {
        "type": "object",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "australianAddress": {
            "$ref": "#/components/schemas/ExtendedAddress"
          }
        },
        "description": "The reason why the payment preference has this status"
      },
      "ExtendedAddress": {
        "type": "object",
        "properties": {
          "buildingName1": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "description": "The name of the building."
          },
          "buildingName2": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string",
            "description": "The name of the building continued."
          },
          "floorLevelType": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "Type of floor level description."
          },
          "floorLevelNumber": {
            "maxLength": 2,
            "minLength": 0,
            "type": "string",
            "description": "The number of floor level."
          },
          "premiseNoSuffix": {
            "maxLength": 1,
            "minLength": 0,
            "type": "string",
            "description": "The suffix to apply to the number of the premise."
          },
          "premiseNoTo": {
            "maximum": 5,
            "minimum": 0,
            "type": "number",
            "description": "The high number in a range for the premise."
          },
          "premiseNoToSuffix": {
            "maxLength": 1,
            "minLength": 0,
            "type": "string",
            "description": "The suffix to apply to the number to of the premise."
          },
          "streetSuffix": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "The suffix for the street."
          },
          "postalType": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "The postal type - PO Box, Roadside Mail Box etc."
          },
          "postalNumber": {
            "maxLength": 11,
            "minLength": 0,
            "type": "string",
            "description": "The postal number."
          },
          "lotNumber": {
            "maxLength": 6,
            "minLength": 0,
            "type": "string",
            "description": "The lot number."
          },
          "dpid": {
            "maximum": 8,
            "minimum": 0,
            "type": "number",
            "description": "DPID - 8 digit Australian post address identifier."
          },
          "postalNumberPrefix": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "This refers to the non-numeric portion preceding the Postal Number."
          },
          "postalNumberSuffix": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "This refers to the non-numeric portion following the Postal Number."
          },
          "classExtensionInformation": {
            "type": "array",
            "description": "An array of the extensionAttribute objects which contain claim extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            }
          }
        }
      },
      "Policy": {
        "required": [
          "referenceNo"
        ],
        "type": "object",
        "properties": {
          "referenceNo": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Unique alphanumeric policy reference from the relevant policy admin system."
          }
        },
        "description": "Object with information about policies that will be added to the claim."
      },
      "StartClaimDetails": {
        "type": "object",
        "properties": {
          "description": {
            "maxLength": 2000,
            "minLength": 0,
            "type": "string",
            "description": "Description for this case as entered by the user."
          },
          "claimIncurredDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "policies": {
            "type": "array",
            "description": "An array of the policy objects with information about policies that will be added to the claim.",
            "items": {
              "$ref": "#/components/schemas/Policy"
            }
          },
          "notificationCaseId": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "The notification case number of the claim case if applicable."
          },
          "notificationReason": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Notification reason selected during notification case intake."
          },
          "customerNumber": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The customer number to find an existing party or customer of the claim."
          },
          "customer": {
            "$ref": "#/components/schemas/Customer"
          }
        }
      },
      "RestrictionsLimitations": {
        "type": "object",
        "properties": {
          "restrictionEffectiveDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "restrictions": {
            "type": "string",
            "description": "Specifies the disabilities/restrictions experienced by the injured party as a result of the claim."
          }
        }
      },
      "DiagnosisDetails": {
        "type": "object",
        "properties": {
          "medicalCode": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "The code ID that specifies a particular diagnosis."
          },
          "levelIndicator": {
            "type": "string",
            "description": "The injury code level e.g. primary or secondary assigned to the injury in the context of the claim."
          },
          "firstPrimaryCode": {
            "type": "boolean",
            "description": "Indicates whether or not this is the first medical code identified with the primary level indicator."
          },
          "description": {
            "maxLength": 500,
            "minLength": 0,
            "type": "string",
            "description": "A description of the medical code."
          },
          "causeGrouping": {
            "maxLength": 500,
            "minLength": 0,
            "type": "string",
            "description": "The name of the medical code group in which this medical code is contained."
          },
          "groupType": {
            "type": "string",
            "description": "Specifies the type of the medical code group."
          },
          "diagnosisDetailsId": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "Business Entity OID",
            "format": "string",
            "example": "PE-00012-0000001234"
          }
        }
      },
      "NewDiagnosisDetails": {
        "type": "object",
        "properties": {
          "medicalCode": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "The code ID that specifies a particular diagnosis."
          },
          "levelIndicator": {
            "type": "string",
            "description": "The injury code level e.g. primary or secondary assigned to the injury in the context of the claim."
          }
        }
      },
      "GetCustomerResponse": {
        "required": [
          "customerNumber",
          "firstName",
          "lastName"
        ],
        "type": "object",
        "properties": {
          "customerNumber": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The unique identifier for persons in the system."
          },
          "firstName": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Person's first name."
          },
          "lastName": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Person's last name."
          },
          "dateOfBirth": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "identificationNumber": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "ID number of the customer."
          },
          "phoneNumber": {
            "$ref": "#/components/schemas/GroupClientCustomerPhoneNumber"
          },
          "emailAddress": {
            "type": "string"
          }
        }
      },
      "GroupClientCustomerPhoneNumber": {
        "type": "object",
        "properties": {
          "phoneNumberType": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "The type of phone number (e.g. landline / mobile)"
          },
          "intCode": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "international code value"
          },
          "areaCode": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "area code value"
          },
          "telephoneNo": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "telephone No. value"
          }
        }
      },
      "PaymentLine": {
        "type": "object",
        "properties": {
          "lineType": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The name of the payment adjustment e.g. Gross Benefit, Income Tax, Seat Belt etc."
          },
          "integrationType": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "For adjustment PaymentLine this records the IntegrationType which may have been recorded for the adjustment"
          },
          "reference": {
            "maxLength": 250,
            "minLength": 0,
            "type": "string",
            "description": "For adjustment PaymentLine this records the Reference which may have been recorded for the adjustment"
          },
          "amount": {
            "maxLength": 28,
            "minLength": 0,
            "type": "string",
            "description": "Money amount format",
            "format": "money",
            "example": "1500.50"
          },
          "startDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "endDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "paymentLinesDetail": {
            "type": "array",
            "description": "The Payment Lines Details belongs to each payment.",
            "items": {
              "$ref": "#/components/schemas/PaymentLineDetails"
            }
          }
        }
      },
      "PaymentLineDetails": {
        "type": "object",
        "properties": {
          "adjustmentId": {
            "type": "string",
            "description": "Business Entity OID",
            "format": "string",
            "example": "PE-00012-0000001234"
          },
          "amount": {
            "maxLength": 28,
            "minLength": 0,
            "type": "string",
            "description": "Money amount format",
            "format": "money",
            "example": "1500.50"
          },
          "startDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "endDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "calcDetails": {
            "type": "array",
            "description": "The Calculation Details that explain how each adjustment is calculated. ",
            "items": {
              "type": "string",
              "description": "The Calculation Details that explain how each adjustment is calculated. "
            }
          },
          "payee": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The name of the Payee which the payment adjustment belongs."
          },
          "adjustmentTypeId": {
            "type": "string",
            "description": "Business Entity OID",
            "format": "string",
            "example": "PE-00012-0000001234"
          },
          "fixedAmountIncreaseInstructionClassExtension": {
            "type": "array",
            "description": "An array of the extensionAttribute objects which contain OLFixedAmountIncreaseInstruction extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            }
          },
          "adjustmentCalcDetailClassExtension": {
            "type": "array",
            "description": "An array of the extensionAttribute objects which contain OLAdjustmentCalcDetail extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            }
          }
        },
        "description": "The Payment Lines Details belongs to each payment."
      },
      "EForm": {
        "required": [
          "eformId"
        ],
        "type": "object",
        "properties": {
          "eformAttributes": {
            "type": "array",
            "description": "An array of EForm attributes.",
            "items": {
              "$ref": "#/components/schemas/EFormAttribute"
            }
          },
          "eformId": {
            "type": "integer",
            "description": "Unique automatically generated Id of an EForm document.",
            "format": "int64"
          },
          "eformType": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string",
            "description": "Name of the EForm document type"
          }
        }
      },
      "EFormAttribute": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of an EForm attibute."
          },
          "booleanValue": {
            "type": "boolean",
            "description": "Boolean value of an EForm attribute, which must be populated if the type attribute is set to boolean."
          },
          "dateValue": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "decimalValue": {
            "type": "number",
            "description": "Decimal value of an EForm attribute, which must be populated if the type attribute is set to decimal."
          },
          "integerValue": {
            "type": "integer",
            "description": "Integer value of an EForm attribute, which must be populated if the type attribute is set to integer.",
            "format": "int32"
          },
          "stringValue": {
            "type": "string",
            "description": "String value of an EForm attribute, which must be populated if the type attribute is set to string."
          },
          "enumValue": {
            "$ref": "#/components/schemas/ModelEnum"
          }
        }
      },
      "SocialSecurityDecisionResponse": {
        "required": [
          "socialSecurityDecisionId"
        ],
        "type": "object",
        "properties": {
          "socialSecurityDecisionId": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "The unique identifier for the social security"
          },
          "applicationDate": {
            "type": "string",
            "description": "ISO 8601 date time format",
            "format": "date-time",
            "example": "1999-12-31T23:59:59Z"
          },
          "decisionDate": {
            "type": "string",
            "description": "ISO 8601 date time format",
            "format": "date-time",
            "example": "1999-12-31T23:59:59Z"
          },
          "approvalType": {
            "type": "string",
            "description": "The level of decision made for the social security decision"
          },
          "decision": {
            "type": "string",
            "description": "This is the actual decision made for the social security decision"
          }
        }
      },
      "CaseContactSummary": {
        "type": "object",
        "properties": {
          "contactId": {
            "type": "integer",
            "description": "The ID of the contact",
            "format": "int64"
          },
          "date": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "reason": {
            "type": "string",
            "description": "The reason for the contact"
          },
          "methodOfContact": {
            "type": "string",
            "description": "The method of contact. E.g. Email, Phone etc."
          },
          "direction": {
            "type": "string",
            "description": "Whether it is incoming or outgoing contact"
          },
          "description": {
            "type": "string",
            "description": "The contact description"
          },
          "outcome": {
            "type": "string",
            "description": "The outcome of the contact e.g. Unknown, Sale, No Sale, No Show etc."
          },
          "manner": {
            "type": "string",
            "description": "The manner of the person making the contact e.g. Interested, Uninterested etc."
          },
          "customerName": {
            "type": "string",
            "description": "The party with whom contact was made."
          },
          "customerRepresentative": {
            "type": "string",
            "description": "The customer representative."
          },
          "durationInMinutes": {
            "type": "integer",
            "description": "The duration of the contact in minutes",
            "format": "int32"
          },
          "classAttributes": {
            "type": "array",
            "description": "Optional extension properties",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            }
          }
        }
      },
      "GroupClientDocument": {
        "required": [
          "documentId",
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "caseId": {
            "type": "string"
          },
          "rootCaseId": {
            "type": "string"
          },
          "documentId": {
            "type": "integer",
            "description": "The document Id",
            "format": "int64"
          },
          "name": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string",
            "description": "The short business description of the document type"
          },
          "type": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The form of the document e.g. image, email, document"
          },
          "fileExtension": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "The file extension of the document. e.g. .doc for MS Word."
          },
          "fileName": {
            "maxLength": 400,
            "minLength": 0,
            "type": "string",
            "description": "An external reference to the document. This can be a docid or a path and filename."
          },
          "originalFilename": {
            "maxLength": 300,
            "minLength": 0,
            "type": "string",
            "description": "The original attachment filename."
          },
          "receivedDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "effectiveFrom": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "effectiveTo": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "description": {
            "maxLength": 4000,
            "minLength": 0,
            "type": "string",
            "description": "User solicitied description of this document."
          },
          "title": {
            "maxLength": 2000,
            "minLength": 0,
            "type": "string",
            "description": "The title of the document."
          },
          "isRead": {
            "type": "boolean"
          },
          "createdBy": {
            "maxLength": 60,
            "minLength": 0,
            "type": "string",
            "description": "The User name who created a document."
          },
          "dateCreated": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "extensionAttributes": {
            "type": "array",
            "description": "An array of the extensionAttribute objects which contain document (OCDocumentBase) extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            }
          },
          "status": {
            "type": "string",
            "description": "The status of the document."
          },
          "privacyTag": {
            "type": "string",
            "description": "The privacyTag secure action of the document."
          },
          "readForMyOrganisation": {
            "type": "boolean",
            "description": "The read status of the document by other group client from same Organisation."
          }
        }
      },
      "Base64EncodedFileData": {
        "required": [
          "base64EncodedFileContents",
          "fileExtension",
          "fileName",
          "fileSizeInBytes"
        ],
        "type": "object",
        "properties": {
          "fileName": {
            "type": "string",
            "description": "The name of the file, without the extension."
          },
          "fileExtension": {
            "type": "string",
            "description": "The extension of the file, without a preceding dot."
          },
          "base64EncodedFileContents": {
            "type": "string",
            "description": "The base64 encoded file contents."
          },
          "contentType": {
            "type": "string",
            "description": "The MIME type of the file."
          },
          "description": {
            "type": "string",
            "description": "A description of the file."
          },
          "fileSizeInBytes": {
            "type": "integer",
            "description": "The size in bytes of the file.",
            "format": "int64"
          },
          "managedReqId": {
            "type": "integer",
            "description": "The Managed Requirement ID to be associated with the file.",
            "format": "int64"
          }
        }
      },
      "OutstandingInformationItem": {
        "type": "object",
        "properties": {
          "sourcePartyName": {
            "type": "string",
            "description": "Name of the party that is expected to provide the outstanding item."
          },
          "uploadCaseNumber": {
            "maxLength": 254,
            "minLength": 0,
            "type": "string",
            "description": "If the outstanding item is required by multiple cases, the upload Case Number is the id of the lowest case in the hierarchy which is the common parent of all such cases; If the outstanding item is required by one case only, the upload Case Number is the id of that case.Given a caseId, different outstanding items can a have different upload Case Number depending on which case(s) requires which outstanding items."
          },
          "informationType": {
            "maxLength": 350,
            "minLength": 0,
            "type": "string",
            "description": "The type of information item required.The type is intended to be a user-friendly value, that can be exposed on the portal and will mean something to the portal user."
          },
          "infoReceived": {
            "type": "boolean",
            "description": "Indicates whether any information has been received for the outstanding information item.<BR>For instance, a document could be uploaded and linked to an outstanding requirement, in which case the value will be TRUE, however the outstanding requirement will remain OPEN until a back office user validates that the uploaded document is actually what was required.<BR>This flag will always be FALSE for a evidence result which is either pending or received but not satisfied; it will be TRUE for a received evidence result which is received and satisfied.<BR>If the element represents a combination of outstanding requirements and evidence results, the flag will be FALSE if at least one of these elements returns FALSE."
          }
        }
      },
      "OutstandingInformationData": {
        "required": [
          "informationType"
        ],
        "type": "object",
        "properties": {
          "informationType": {
            "type": "string",
            "description": "The type of the outstanding item"
          },
          "documentId": {
            "type": "string",
            "description": "Document id to link to outstanding requirement. "
          }
        }
      },
      "NotificationDetails": {
        "type": "object",
        "properties": {
          "notificationReason": {
            "type": "string"
          },
          "customerId": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "lastWorkingDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          }
        }
      },
      "EFormSummary": {
        "required": [
          "eformId",
          "eformType"
        ],
        "type": "object",
        "properties": {
          "eformId": {
            "type": "integer",
            "description": "Unique automatically generated Id of an EForm document.",
            "format": "int64"
          },
          "eformTypeId": {
            "type": "string",
            "description": "Business Entity OID",
            "format": "string",
            "example": "PE-00012-0000001234"
          },
          "effectiveDateFrom": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "effectiveDateTo": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "eformType": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string",
            "description": "The short business description of the document type."
          }
        }
      },
      "ManagedRequirementDetails": {
        "required": [
          "category",
          "creationDate",
          "creator",
          "dateSuppressed",
          "documentReceived",
          "managedReqId",
          "sourceOfInfoPartyName",
          "subjectPartyName",
          "type"
        ],
        "type": "object",
        "properties": {
          "managedReqId": {
            "type": "integer",
            "description": "the identifier for this managed requirement.",
            "format": "int64"
          },
          "category": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The category name of the managed requirement."
          },
          "type": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The name of the type of the managed requirement."
          },
          "dateRequested": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "notProceedingWithDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "dateLastFollowedUp": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "followUpDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "description": {
            "maxLength": 250,
            "minLength": 0,
            "type": "string",
            "description": "A text description of the outstanding requirement or information."
          },
          "status": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The current status of this Managed Requirement. "
          },
          "dateCompleted": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "documentReceived": {
            "type": "boolean",
            "description": "Indicates that a document has been received for this managed requirement. Returns true if the managed requirement is linked to a document that this user can access,otherwise returns false."
          },
          "classExtensionInformation": {
            "type": "array",
            "description": "An array of the extensionAttribute objects which contain managed requirement (OCManagedRequirement) extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            }
          },
          "creator": {
            "type": "string",
            "description": "the creator for this managed requirement."
          },
          "subjectPartyName": {
            "type": "string",
            "description": "The subject party name of the managed requirement."
          },
          "sourceOfInfoPartyName": {
            "type": "string",
            "description": "The source of info party name of the managed requirement."
          },
          "creationDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "dateSuppressed": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          }
        }
      },
      "AccountTransferInfo": {
        "type": "object",
        "properties": {
          "bankAccountNumber": {
            "type": "string",
            "description": "The bank account number of an employee"
          },
          "bankAccountType": {
            "type": "string",
            "description": "The bank account type of an employee"
          },
          "bankInstituteName": {
            "type": "string",
            "description": "The bank institute name of an employee"
          },
          "bankBranchSortCode": {
            "type": "string",
            "description": "The employee bank branch sort code"
          },
          "bankCode": {
            "type": "string",
            "description": "The bank code of an employee"
          }
        },
        "description": "get bank account transfer info of an employee."
      },
      "ChequePaymentInfo": {
        "type": "object",
        "properties": {
          "chequeNumber": {
            "type": "string",
            "description": "The cheque number of an employee"
          }
        },
        "description": "get cheque payment info of an employee."
      },
      "Payment": {
        "type": "object",
        "properties": {
          "paymentId": {
            "type": "string",
            "description": "Business Entity OID",
            "format": "string",
            "example": "PE-00012-0000001234"
          },
          "benefitCaseNumber": {
            "type": "string",
            "description": "The Benefit Case Number."
          },
          "dateInterfaceRecordCreated": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "rootCaseNumber": {
            "type": "string"
          },
          "benefitCaseTypeName": {
            "type": "string"
          },
          "benefitRightTypeName": {
            "type": "string"
          },
          "paymentDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "effectiveDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "periodStartDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "periodEndDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "paymentType": {
            "maxLength": 250,
            "minLength": 0,
            "type": "string",
            "description": "The payment type e.g. recurring, adhoc etc"
          },
          "paymentMethod": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "The method used to transfer the payment e.g. EFT, Hand Typed Check etc."
          },
          "paymentAmount": {
            "type": "string",
            "description": "Money amount format",
            "format": "money",
            "example": "1500.50"
          },
          "payeeName": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "The party to whom the payment was made"
          },
          "nominatedPayeeName": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "The party the payee nominated to receive payment"
          },
          "paymentAddress": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "The address the payment was sent to"
          },
          "accountTransferInfo": {
            "$ref": "#/components/schemas/AccountTransferInfo"
          },
          "chequePaymentInfo": {
            "$ref": "#/components/schemas/ChequePaymentInfo"
          },
          "classExtensionInformation": {
            "type": "array",
            "description": "An array of the extensionAttribute objects which contain payments (OLPaymentEventInterface) extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            }
          }
        }
      },
      "ContactDetails": {
        "type": "object",
        "properties": {
          "phoneNumbers": {
            "type": "array",
            "description": "An array of objects which contain customer phone number details.",
            "items": {
              "$ref": "#/components/schemas/PhoneNumber"
            }
          },
          "emailAddresses": {
            "maxItems": 100,
            "minItems": 0,
            "type": "array",
            "description": "Email Address of the customer.",
            "items": {
              "$ref": "#/components/schemas/EmailAddress"
            }
          }
        }
      },
      "EmailAddress": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maximum": 10,
            "minimum": 0,
            "type": "integer",
            "description": "The id of the contact method (e.g. phone / mobile / emailAddress) ",
            "format": "int64"
          },
          "preferred": {
            "type": "boolean"
          },
          "emailAddress": {
            "maxLength": 120,
            "minLength": 0,
            "type": "string",
            "description": "Customers email address."
          },
          "classExtensionInformation": {
            "type": "array",
            "description": "An array of the extensionAttribute objects which contain email Address extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            }
          }
        },
        "description": "Return list of email addresses"
      },
      "PhoneNumber": {
        "required": [
          "id",
          "phoneNumberType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maximum": 10,
            "minimum": 0,
            "type": "integer",
            "description": "The id of the contact method (e.g. phone / mobile / emailAddress) ",
            "format": "int64"
          },
          "preferred": {
            "type": "boolean"
          },
          "phoneNumberType": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "The type of phone number (e.g. landline / mobile)"
          },
          "intCode": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "international code value"
          },
          "areaCode": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "area code value"
          },
          "telephoneNo": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "telephone No. value"
          },
          "classExtensionInformation": {
            "type": "array",
            "description": "An array of the extensionAttribute objects which contain phone number (OCPhone) extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            }
          }
        },
        "description": "Return list of phone numbers"
      },
      "GroupClientCustomer": {
        "required": [
          "dateOfBirth",
          "firstName",
          "isDeceased",
          "lastName"
        ],
        "type": "object",
        "properties": {
          "firstName": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Person's first name."
          },
          "lastName": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Person's last name."
          },
          "secondName": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Person's second name."
          },
          "initials": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "Person's middle initials."
          },
          "needsInterpretor": {
            "type": "boolean",
            "description": "Indicates if the customer needs an interpreter."
          },
          "placeOfBirth": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Place of birth."
          },
          "gender": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The person's gender."
          },
          "dateOfBirth": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "maritalStatus": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Person's marital status - single / married / etc."
          },
          "nationality": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Person's nationality."
          },
          "title": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Person's chosen title e.g. Mr / Mrs etc."
          },
          "idNumber": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "ID number of the claimant."
          },
          "identificationNumberType": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The type of identification number the party will have."
          },
          "securedClient": {
            "type": "boolean",
            "description": "Secured client flag."
          },
          "staff": {
            "type": "boolean",
            "description": "Staff flag."
          },
          "partyType": {
            "type": "string"
          },
          "classExtensionInformation": {
            "type": "array",
            "description": "An array of the extensionAttribute objects which contain customer (OCPerson) extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            }
          },
          "customerAddress": {
            "$ref": "#/components/schemas/CustomerAddress"
          },
          "isDeceased": {
            "type": "boolean",
            "description": "True if the person is deceased."
          },
          "dateOfDeath": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "initals": {
            "type": "string",
            "writeOnly": true
          }
        }
      },
      "DisabilityClaim": {
        "type": "object",
        "properties": {
          "claimIncurredDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "eventType": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "The type of event which occurred which led to the disability claim e.g. Accident or Sickness."
          },
          "reasonForClaimEffectiveDateChange": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "Allows a reason to be recorded for a change to the claim's effective date."
          },
          "claimAdditionalInfo": {
            "maxLength": 4000,
            "minLength": 0,
            "type": "string",
            "description": "Additional incident details relevant to the claim."
          },
          "disabilityDateFromCustomer": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "accidentDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "notificationDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "workRelated": {
            "type": "boolean",
            "description": "Indicates whether the event was work related or not."
          },
          "numberOfDependents": {
            "maximum": 10,
            "minimum": 0,
            "type": "integer",
            "description": "The number of dependents for the Customer relevant to this Claim",
            "format": "int64"
          },
          "claimType": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "This field can be used to capture the type of claim. This is a descriptive attribute which can be changed over the life of the claim"
          },
          "source": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "Describes how the claim was initiated, i.e. on-line, phone call, paper application form, customer portal."
          },
          "dateSymptomsFirstAppeared": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "expectedReturnToWorkDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "firstDayMissedWork": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "dismembermentOrLoss": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "Dismemberment/Loss injuries sustained by the customer."
          },
          "hoursWorked": {
            "maximum": 13,
            "minimum": 0,
            "type": "number",
            "description": "Number of hours worked",
            "format": "float"
          },
          "insuredSpouseWorking": {
            "type": "boolean",
            "description": "Indicates if the spouse of the insured is currently working."
          },
          "salaryCountNumDays": {
            "maximum": 5,
            "minimum": 0,
            "type": "integer",
            "description": "Salary Continuance Number of Days - Number of days beyond the disability date insured received full pay",
            "format": "int32"
          },
          "workHistory": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "This lists the work history of the insured including occupational, job duty as well as when the insured was employed at these jobs.  Used for any/all and LCDD decisions as well as assisting with job  placement strategy development of the vocational consultant."
          },
          "classExtensionInformation": {
            "type": "array",
            "description": "An array of the extensionAttribute objects which contain claim extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            }
          },
          "employerDateLastWorked": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          }
        }
      },
      "ReadDisabilityResult": {
        "type": "object",
        "properties": {
          "claimSummary": {
            "$ref": "#/components/schemas/ClaimSummary"
          },
          "disabilityClaim": {
            "$ref": "#/components/schemas/DisabilityClaim"
          },
          "customerDateOfBirth": {
            "type": "string",
            "description": "ISO 8601 date time format",
            "format": "date-time",
            "example": "1999-12-31T23:59:59Z"
          },
          "claimReopened": {
            "type": "boolean",
            "description": "This value is used to inform the group client if the claim is reopened."
          }
        }
      },
      "CaseParticipantsSummary": {
        "type": "object",
        "properties": {
          "participantId": {
            "type": "integer",
            "description": "Id of the participant",
            "format": "int64"
          },
          "rolename": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "The role name assigned to the participant on the case"
          },
          "partyName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The name of the party with the participant role on the case"
          },
          "startDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "endDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "referenceNo": {
            "maxLength": 40,
            "minLength": 0,
            "type": "string",
            "description": "The reference number of the party with the participant role on the case"
          },
          "sourceSystem": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The source system of the party with the participant role on the case"
          }
        },
        "description": "Participant Summary Details."
      },
      "Participant": {
        "required": [
          "participantSummary"
        ],
        "type": "object",
        "properties": {
          "participantSummary": {
            "$ref": "#/components/schemas/CaseParticipantsSummary"
          },
          "personDetails": {
            "$ref": "#/components/schemas/PersonDetails"
          },
          "correspondenceAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "extendedAddress": {
            "$ref": "#/components/schemas/ExtendedAddress"
          }
        }
      },
      "PersonDetails": {
        "type": "object",
        "properties": {
          "gender": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The person's gender."
          },
          "dateOfBirth": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "maritalStatus": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Person's marital status - single / married / etc."
          },
          "nationality": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Person's nationality."
          },
          "needsInterpretor": {
            "type": "boolean",
            "description": "Indicates if the customer needs an interpreter."
          },
          "classExtensionInformation": {
            "type": "array",
            "description": "An array of the extensionAttribute objects which contain customer (OCPerson) extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            }
          }
        },
        "description": "Person Details."
      },
      "ParticipantContactDetails": {
        "type": "object",
        "properties": {
          "phoneNumbers": {
            "type": "array",
            "description": "Return list of phone numbers",
            "items": {
              "$ref": "#/components/schemas/PhoneNumber"
            }
          },
          "emailAddresses": {
            "type": "array",
            "description": "Return list of email addresses",
            "items": {
              "$ref": "#/components/schemas/EmailAddress"
            }
          },
          "preferredContactMethod": {
            "type": "integer",
            "description": "Return the preferred contact method i.e. either the id of the preferred phone number or id of the preferred email address",
            "format": "int64"
          }
        }
      },
      "BenefitSummary": {
        "type": "object",
        "properties": {
          "benefitId": {
            "type": "string",
            "description": "The case number of the benefit."
          },
          "benefitCaseType": {
            "type": "string",
            "description": "The name by which the benefit type is referred."
          },
          "creationDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "benefitIncurredDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "customerName": {
            "type": "string",
            "description": "The full name of the customer."
          },
          "policyReferences": {
            "type": "string",
            "description": "The reference(s) to the policy from within the relevant admin system."
          },
          "description": {
            "type": "string",
            "description": "Description for this case as entered by the user."
          },
          "status": {
            "type": "string",
            "description": "This is the stage in the process that the case is currently at."
          },
          "benefitHandler": {
            "type": "string",
            "description": "The person that is handling the benefit."
          },
          "benefitHandlerPhoneNo": {
            "type": "string",
            "description": "The phone number of the benefit handler."
          },
          "benefitHandlerEmailAddress": {
            "type": "string",
            "description": "The email address of the benefit handler."
          },
          "benefitRightCategory": {
            "type": "string",
            "description": "Information about the category of the benefit right."
          },
          "stageName": {
            "type": "string",
            "description": "The current stage of benefit claim case."
          },
          "extensionAttributes": {
            "type": "array",
            "description": "Extra attributes from extension if any.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            }
          }
        },
        "description": "The summary of the disability benefit."
      },
      "DisabilityBenefit": {
        "type": "object",
        "properties": {
          "benefitIncurredDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "brokerAuthorisationFlag": {
            "type": "boolean",
            "description": "Flag that indicates if the broker is to be included in the correspondence."
          },
          "initialNotificationDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "notificationReceivedDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "overrideClaimIncurredDate": {
            "type": "boolean",
            "description": "Indicator which specifies that the benefit level incurred date should be used rather than the claim level incurred date."
          },
          "startDateOfBenefitForClaim": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "sourceOfRequest": {
            "type": "string",
            "description": "The type of source that is requesting the benefit, such as claimant, guardian, or medical officer."
          },
          "earliestDateForClaimPayment": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "employeeContributionPercentage": {
            "type": "number",
            "description": "Percentage representing the Employee Contribution Percentage."
          },
          "isReimbursement": {
            "type": "boolean",
            "description": "Indicates if the benefit is paid as a reimbursement or not."
          },
          "lateEnrollmentPeriod": {
            "type": "integer",
            "description": "Period after enrolment date when customer has to wait for coverage to become eligible.",
            "format": "int64"
          },
          "latestDateForClaimPayment": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "minimumQualifyPeriod": {
            "type": "integer",
            "description": "Period of time policy has to be in force before the minimum benefit provision can be applied.",
            "format": "int64"
          },
          "employerContributionPercentage": {
            "type": "number",
            "description": "Indicates the percent of the payment that is taxable. Typically used as the Employer contribution."
          },
          "isUnderwritten": {
            "type": "boolean",
            "description": "Indicates whether or not the member has been underwritten in order to have additional cover beyond what the group membership offers."
          },
          "policyWaitingPeriod": {
            "type": "integer",
            "description": "Period of time that the policy must be in force before the insured qualifies for coverage.",
            "format": "int64"
          },
          "benefitType": {
            "type": "string",
            "description": "Type of a benefit right such as Disability Income - STD, Disability Income LTD, Accelerated Death Benefit or Accidental Death Benefit."
          },
          "basisOfMinimumQualifyPeriod": {
            "type": "string",
            "description": "Basis of the period of time policy has to be in force before the minimum benefit provision can be applied (i.e. day, week month or year)."
          },
          "basisOfLateEnrollmentPeriod": {
            "type": "string",
            "description": "Basis of the period after enrolment date when customer has to wait for coverage to become eligible (i.e. day, week month or year)."
          },
          "basisOfPolicyWaitingPeriod": {
            "type": "string",
            "description": "Basis of the period of time that the policy must be in force before the insured qualifies for coverage (i.e. day, week month or year)."
          },
          "amountType": {
            "type": "string",
            "description": "Indicates the basis upon which the benefit is calculated, examples might be fixed amount basis, salary percentage basis or tiered basis."
          },
          "employeeContributionStatus": {
            "type": "string",
            "description": "Field which indicates whether a policy is contributory or non-contributory."
          },
          "accidentEliminationPeriod": {
            "type": "integer",
            "description": "Elimination Period units for accident.",
            "format": "int64"
          },
          "eliminationPeriod": {
            "type": "integer",
            "description": "The number of Elimination Days.",
            "format": "int64"
          },
          "hospitalEliminationPeriod": {
            "type": "integer",
            "description": "Elimination Period for hospitalisation.",
            "format": "int64"
          },
          "hospitalizationClauseApplies": {
            "type": "boolean",
            "description": "Indicator which determines whether the Hospitalization clause applies."
          },
          "basisOfEliminationPeriod": {
            "type": "string",
            "description": "Basis for elimination period."
          },
          "basisOfAccidentEliminationPeriod": {
            "type": "string",
            "description": "Basis for elimination period for accident."
          },
          "hospitalBasisOfEliminationPeriod": {
            "type": "string",
            "description": "Basis for elimination period for hospitalisation."
          },
          "accidentMaxBenefitPeriod": {
            "type": "integer",
            "description": "Number of units in the maximum period for an accident. The maximum length of the period to be paid if the customer remains disabled.",
            "format": "int64"
          },
          "hospitalMaxBenefitPeriod": {
            "type": "integer",
            "description": "Number of units in the maximum period for hospitalization.",
            "format": "int64"
          },
          "maxBenefitPeriod": {
            "type": "integer",
            "description": "Number of units in the maximum benefit period. The maximum length of the period to be paid if the claimant remains disabled",
            "format": "int64"
          },
          "minBenefitPeriod": {
            "type": "integer",
            "description": "Number of units in the minimum benefit period. The minimum length of the period to be paid if the claimant remains disabled.",
            "format": "int64"
          },
          "basisOfMinBenefitPeriod": {
            "type": "string",
            "description": "Basis of the minimum benefit period. The minimum length of the period to be paid if the claimant remains disabled."
          },
          "basisOfMaxBenefitPeriod": {
            "type": "string",
            "description": "Basis of the maximum benefit period. The maximum length of the period to be paid if the claimant remains disabled."
          },
          "accidentBasisOfMaxBenefitPeriod": {
            "type": "string",
            "description": "Basis for the maximum period for an accident."
          },
          "hospitalBasisOfMaxBenefitPeriod": {
            "type": "string",
            "description": "Basis of the maximum period for hospitalization."
          },
          "benefitStartDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "benefitEndDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "frequencyAmount": {
            "type": "string",
            "description": "Money amount format",
            "format": "money",
            "example": "1500.50"
          },
          "adviceToPayOverride": {
            "type": "string",
            "description": "The advice provided by the insurer with regard to an individual benefit can be overridden by the employer, either regarding the decision (to pay or not to pay) or the calculated amount."
          },
          "checkCutting": {
            "type": "string",
            "description": "Specify if the insurer may be the one cutting the checks, or the employer might prefer doing it themselves."
          },
          "adviceToPay": {
            "type": "boolean",
            "description": "Specify that the benefit is under a service level of advice to pay, that is the insurance carrier providing the service making the decision to approve or deny the paid benefit."
          },
          "extensionAttributes": {
            "type": "array",
            "description": "The array will contain extension attributes from Benefit and Benefit Right objects.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            }
          },
          "expectedResolutionDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "approvedThroughDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "periodType": {
            "type": "string",
            "description": "The type of Benefit Period used to derive the Approved Through Date. Indicates whether the approval is for a fully certified or partially certified period."
          }
        },
        "description": "The details of the disability benefit."
      },
      "ReadDisabilityBenefitResult": {
        "type": "object",
        "properties": {
          "benefitSummary": {
            "$ref": "#/components/schemas/BenefitSummary"
          },
          "disabilityBenefit": {
            "$ref": "#/components/schemas/DisabilityBenefit"
          }
        }
      },
      "LumpSumBenefit": {
        "type": "object",
        "properties": {
          "benefitIncurredDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "brokerAuthorisationFlag": {
            "type": "boolean",
            "description": "Flag that indicates if the broker is to be included in the correspondence."
          },
          "initialNotificationDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "notificationReceivedDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "overrideClaimIncurredDate": {
            "type": "boolean",
            "description": "Indicator which specifies that the benefit level incurred date should be used rather than the claim level incurred date."
          },
          "startDateOfBenefitForClaim": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "sourceOfRequest": {
            "type": "string",
            "description": "The type of source that is requesting the benefit, such as claimant, guardian, or medical officer."
          },
          "effectiveDateForCoverage": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "benefitExpiryDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "isUnderwritten": {
            "type": "boolean",
            "description": "Indicates whether or not the member has been underwritten in order to have additional cover beyond what the group membership offers."
          },
          "policyWaitingPeriod": {
            "type": "integer",
            "description": "Period of time that the policy must be in force before the insured qualifies for coverage.",
            "format": "int64"
          },
          "benefitType": {
            "type": "string",
            "description": "Type of a benefit right such as Disability Income - STD, Disability Income LTD, Accelerated Death Benefit or Accidental Death Benefit."
          },
          "basisOfPolicyWaitingPeriod": {
            "type": "string",
            "description": "Basis of the period of time that the policy must be in force before the insured qualifies for coverage (i.e. day, week month or year)."
          },
          "amountType": {
            "type": "string",
            "description": "Indicates the basis upon which the benefit is calculated, examples might be fixed amount basis, salary percentage basis or tiered basis."
          },
          "flatAmount": {
            "type": "string",
            "description": "Money amount format",
            "format": "money",
            "example": "1500.50"
          },
          "sumInsuredAtIncurredDate": {
            "type": "string",
            "description": "Money amount format",
            "format": "money",
            "example": "1500.50"
          },
          "maximumBenefitExpiryAge": {
            "type": "integer",
            "description": "Maximum Age to be eligible to receive benefit.",
            "format": "int64"
          },
          "extensionAttributes": {
            "type": "array",
            "description": "Extra attributes from extension if any.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            }
          }
        },
        "description": "A JSON representation of details of a lump sum benefit."
      },
      "ReadLumpSumBenefitResult": {
        "type": "object",
        "properties": {
          "benefitSummary": {
            "$ref": "#/components/schemas/BenefitSummary"
          },
          "lumpSumBenefit": {
            "$ref": "#/components/schemas/LumpSumBenefit"
          }
        }
      },
      "CaseStatusHistory": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "The stage in the process that the case was at."
          },
          "dateStatusEntered": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "dateStatusDeparted": {
            "type": "string",
            "description": "Formatted date when benefit's underlying process moved out of a step with this phase."
          }
        }
      },
      "Base64EncodedFileDetails": {
        "required": [
          "base64EncodedFileContents",
          "fileExtension",
          "fileName"
        ],
        "type": "object",
        "properties": {
          "fileName": {
            "type": "string",
            "description": "The name of the file, without the extension."
          },
          "fileExtension": {
            "type": "string",
            "description": "The extension of the file, without a preceding dot."
          },
          "base64EncodedFileContents": {
            "type": "string",
            "description": "The base64 encoded file contents."
          },
          "contentType": {
            "type": "string",
            "description": "The MIME type of the file."
          },
          "description": {
            "type": "string",
            "description": "A description of the file."
          }
        }
      },
      "AccountDetails": {
        "required": [
          "accountName",
          "accountNo",
          "routingNumber"
        ],
        "type": "object",
        "properties": {
          "bankCode": {
            "maxLength": 4,
            "minLength": 0,
            "type": "string",
            "description": "The Bank Code"
          },
          "accountNo": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "The Account number of the personal account"
          },
          "accountName": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "Name of the account holder"
          },
          "routingNumber": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "Sort code of the Bank"
          },
          "accountType": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "Account type of the bank"
          },
          "classExtensionInformation": {
            "type": "array",
            "description": "An array of the extensionAttribute objects which contain claim extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            }
          }
        },
        "description": "Account details"
      },
      "ChequeDetails": {
        "type": "object",
        "properties": {
          "nameToPrintOnCheck": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The name that should be printed on the check"
          }
        },
        "description": "Cheque details"
      },
      "PaymentPreferenceResponse": {
        "required": [
          "paymentMethod",
          "paymentPreferenceId"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the Payment Preference"
          },
          "effectiveFrom": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "effectiveTo": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "paymentMethod": {
            "type": "string",
            "description": "The name of the payment method. This is used to determine whether chequeDetails or accountDetails is displayed"
          },
          "isDefault": {
            "type": "boolean"
          },
          "customerAddress": {
            "$ref": "#/components/schemas/CustomerAddress"
          },
          "chequeDetails": {
            "$ref": "#/components/schemas/ChequeDetails"
          },
          "accountDetails": {
            "$ref": "#/components/schemas/AccountDetails"
          },
          "classExtensionInformation": {
            "type": "array",
            "description": "An array of the extensionAttribute objects which contain claim extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            }
          },
          "paymentPreferenceId": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "The unique identifier for payment preference"
          },
          "nominatedPayee": {
            "maxLength": 250,
            "minLength": 0,
            "type": "string",
            "description": "The nominated payee for the payment preference"
          },
          "status": {
            "type": "string",
            "description": "The status of the payment preference"
          },
          "stageName": {
            "type": "string",
            "description": "The current stage of the payment preference"
          }
        }
      },
      "NewPaymentPreference": {
        "required": [
          "paymentMethod"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the Payment Preference"
          },
          "effectiveFrom": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "effectiveTo": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "paymentMethod": {
            "type": "string",
            "description": "The name of the payment method. This is used to determine whether chequeDetails or accountDetails is displayed"
          },
          "isDefault": {
            "type": "boolean"
          },
          "customerAddress": {
            "$ref": "#/components/schemas/CustomerAddress"
          },
          "chequeDetails": {
            "$ref": "#/components/schemas/ChequeDetails"
          },
          "accountDetails": {
            "$ref": "#/components/schemas/AccountDetails"
          },
          "classExtensionInformation": {
            "type": "array",
            "description": "An array of the extensionAttribute objects which contain claim extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            }
          },
          "overridePostalAddress": {
            "type": "boolean",
            "description": "Indicates that an override address applies for the payment preference. (i.e. sets the paymentAddressType to override. When false the correspondence address for the payee (or nominated payee) applies."
          }
        }
      },
      "EarningsResponse": {
        "required": [
          "earningsBasis",
          "earningsId",
          "earningsType",
          "periodInWeeks"
        ],
        "type": "object",
        "properties": {
          "salaryAmountBasis": {
            "type": "string",
            "description": "Basis for salary amount being used."
          },
          "effectiveDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "endDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "notes": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string",
            "description": "Notes relating to the earnings period."
          },
          "earningsBasis": {
            "type": "string",
            "description": "The earnings frequency."
          },
          "classExtensionInformation": {
            "type": "array",
            "description": "An array of the extensionAttribute objects which contain Earnings extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            }
          },
          "earningsId": {
            "maximum": 32,
            "minimum": 0,
            "type": "integer",
            "description": "The unique identifier for the earnings record.",
            "format": "int64"
          },
          "earningsType": {
            "type": "string",
            "description": "The type of earnings record, it could refer to pre-disability, partial or salary."
          },
          "periodInWeeks": {
            "type": "integer",
            "description": "Period in weeks between Effective Date and End Date of Earnings record.",
            "format": "int32"
          },
          "weeklyBasisEarningAmountsResponse": {
            "$ref": "#/components/schemas/WeeklyBasisEarningAmountsResponse"
          },
          "monthlyBasisEarningAmountsResponse": {
            "$ref": "#/components/schemas/MonthlyBasisEarningAmountsResponse"
          }
        }
      },
      "MonthlyBasisEarningAmountsResponse": {
        "required": [
          "earningsAmount"
        ],
        "type": "object",
        "properties": {
          "earningsAmount": {
            "type": "string",
            "description": "Money amount format",
            "format": "money",
            "example": "1500.50"
          },
          "shiftPay": {
            "type": "string",
            "description": "Money amount format",
            "format": "money",
            "example": "1500.50"
          },
          "pensionContribution": {
            "type": "string",
            "description": "Money amount format",
            "format": "money",
            "example": "1500.50"
          },
          "bonuses": {
            "type": "string",
            "description": "Money amount format",
            "format": "money",
            "example": "1500.50"
          },
          "commissions": {
            "type": "string",
            "description": "Money amount format",
            "format": "money",
            "example": "1500.50"
          },
          "earningsAmountAsWeekly": {
            "type": "string",
            "description": "Money amount format",
            "format": "money",
            "example": "1500.50"
          },
          "totalEarnings": {
            "type": "string",
            "description": "Money amount format",
            "format": "money",
            "example": "1500.50"
          }
        },
        "description": "Monthly Basis Earning Amounts Response Details."
      },
      "WeeklyBasisEarningAmountsResponse": {
        "required": [
          "totalAmountOverridden"
        ],
        "type": "object",
        "properties": {
          "totalAmountOverridden": {
            "type": "boolean",
            "description": "This attribute indicates if the total weekly or bi-weekly amount has been manually overridden."
          },
          "standardHours": {
            "type": "number",
            "description": "The number of hours in a standard working week or bi-week."
          },
          "standardHourRate": {
            "type": "string",
            "description": "Money amount format",
            "format": "money",
            "example": "1500.50"
          },
          "overtimeHours": {
            "type": "number",
            "description": "Number of overtime hours in a working week or bi-week."
          },
          "overtimeHourlyRate": {
            "type": "string",
            "description": "Money amount format",
            "format": "money",
            "example": "1500.50"
          },
          "statutoryValue": {
            "type": "number",
            "description": "Additional weekly or bi-weekly vacation or statutory entitlement amount or percentage of regular hours."
          },
          "statutoryBasis": {
            "type": "string",
            "description": "Additional weekly or bi-weekly vacation or statutory entitlements type. It may be an amount or percentage of regular hour."
          },
          "shiftHours": {
            "type": "number",
            "description": "Number of shift hours in a working week or bi-week."
          },
          "shiftBasis": {
            "type": "string",
            "description": "Basis of weekly or bi-weekly shift earnings - either an additional hourly allowance or an additional amount."
          },
          "shiftAllowance": {
            "type": "string",
            "description": "Money amount format",
            "format": "money",
            "example": "1500.50"
          },
          "totalEarnings": {
            "type": "string",
            "description": "Money amount format",
            "format": "money",
            "example": "1500.50"
          },
          "standardEarnings": {
            "type": "string",
            "description": "Money amount format",
            "format": "money",
            "example": "1500.50"
          },
          "overtimeEarnings": {
            "type": "string",
            "description": "Money amount format",
            "format": "money",
            "example": "1500.50"
          },
          "statutoryEarnings": {
            "type": "string",
            "description": "Money amount format",
            "format": "money",
            "example": "1500.50"
          },
          "shiftEarnings": {
            "type": "string",
            "description": "Money amount format",
            "format": "money",
            "example": "1500.50"
          }
        },
        "description": "Weekly Basis Earning Amounts Response Details."
      },
      "WeeklyBasisEarningAmountsRequest": {
        "required": [
          "totalAmountOverridden"
        ],
        "type": "object",
        "properties": {
          "totalAmountOverridden": {
            "type": "boolean",
            "description": "This attribute indicates if the total weekly or bi-weekly amount has been manually overridden."
          },
          "standardHours": {
            "type": "number",
            "description": "The number of hours in a standard working week or bi-week."
          },
          "standardHourRate": {
            "type": "string",
            "description": "Money amount format",
            "format": "money",
            "example": "1500.50"
          },
          "overtimeHours": {
            "type": "number",
            "description": "Number of overtime hours in a working week or bi-week."
          },
          "overtimeHourlyRate": {
            "type": "string",
            "description": "Money amount format",
            "format": "money",
            "example": "1500.50"
          },
          "statutoryValue": {
            "type": "number",
            "description": "Additional weekly or bi-weekly vacation or statutory entitlement amount or percentage of regular hours."
          },
          "statutoryBasis": {
            "type": "string",
            "description": "Additional weekly or bi-weekly vacation or statutory entitlements type. It may be an amount or percentage of regular hour."
          },
          "shiftHours": {
            "type": "number",
            "description": "Number of shift hours in a working week or bi-week."
          },
          "shiftBasis": {
            "type": "string",
            "description": "Basis of weekly or bi-weekly shift earnings - either an additional hourly allowance or an additional amount."
          },
          "shiftAllowance": {
            "type": "string",
            "description": "Money amount format",
            "format": "money",
            "example": "1500.50"
          },
          "totalEarnings": {
            "type": "string",
            "description": "Money amount format",
            "format": "money",
            "example": "1500.50"
          }
        },
        "description": "Weekly Basis Earning Amounts Request Details."
      },
      "WeeklyEarningsRequest": {
        "required": [
          "earningsBasis"
        ],
        "type": "object",
        "properties": {
          "salaryAmountBasis": {
            "type": "string",
            "description": "Basis for salary amount being used."
          },
          "effectiveDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "endDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "notes": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string",
            "description": "Notes relating to the earnings period."
          },
          "earningsBasis": {
            "type": "string",
            "description": "The earnings frequency."
          },
          "classExtensionInformation": {
            "type": "array",
            "description": "An array of the extensionAttribute objects which contain Earnings extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            }
          },
          "weeklyBasisEarningAmountsRequest": {
            "$ref": "#/components/schemas/WeeklyBasisEarningAmountsRequest"
          }
        }
      },
      "ReadOccupation": {
        "type": "object",
        "properties": {
          "dateJobBegan": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "dateJobEnded": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "daysWorkedPerWeek": {
            "type": "number",
            "description": "The number of days worked per week."
          },
          "employer": {
            "type": "string",
            "description": "The name of the employer."
          },
          "endPosReason": {
            "type": "string",
            "description": "The reason for job ending."
          },
          "hoursWorkedPerWeek": {
            "type": "number",
            "description": "The number of hours worked per week."
          },
          "jobDesc": {
            "type": "string",
            "description": "The job description."
          },
          "jobTitle": {
            "type": "string",
            "description": "The job title."
          },
          "remarks": {
            "type": "string",
            "description": "The occupation remarks."
          },
          "selfEmployed": {
            "type": "boolean",
            "description": "Is occupation considered self-employed?"
          },
          "workScheduleDescription": {
            "type": "string",
            "description": "The work schedule description."
          },
          "employmentCategory": {
            "type": "string",
            "description": "The employment category."
          },
          "jobStrenuous": {
            "type": "string",
            "description": "The job strenuous."
          },
          "endEmploymentReason": {
            "type": "string",
            "description": "The code for occupation ending."
          },
          "employmentLocation": {
            "type": "string",
            "description": "The employment location code."
          },
          "additionalEmploymentCategory": {
            "type": "string",
            "description": "The alternate employment category."
          },
          "employmentStatus": {
            "type": "string",
            "description": "The employment status."
          },
          "employmentTitle": {
            "type": "string",
            "description": "The employment title."
          },
          "workPatternBasis": {
            "type": "string",
            "description": "The work pattern basis."
          },
          "employeeId": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The id of an employee in respect of its employer."
          },
          "extensionAttributes": {
            "type": "array",
            "description": "The extension attributes.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            }
          },
          "primary": {
            "type": "boolean",
            "description": "Is occupation the primary one?"
          },
          "occupationId": {
            "type": "integer",
            "description": "The occupation ID.",
            "format": "int64"
          },
          "codeId": {
            "type": "string",
            "description": "The occupation Code ID."
          },
          "codeName": {
            "type": "string",
            "description": "The name associated with the specific occupation Code ID."
          },
          "overrideDaysWorkedPerWeek": {
            "type": "boolean",
            "description": "Is override days worked per week true or false?"
          }
        }
      },
      "ClaimOccupation": {
        "type": "object",
        "properties": {
          "dateJobBegan": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "dateJobEnded": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "daysWorkedPerWeek": {
            "type": "number",
            "description": "The number of days worked per week."
          },
          "employer": {
            "type": "string",
            "description": "The name of the employer."
          },
          "endPosReason": {
            "type": "string",
            "description": "The reason for job ending."
          },
          "hoursWorkedPerWeek": {
            "type": "number",
            "description": "The number of hours worked per week."
          },
          "jobDesc": {
            "type": "string",
            "description": "The job description."
          },
          "jobTitle": {
            "type": "string",
            "description": "The job title."
          },
          "remarks": {
            "type": "string",
            "description": "The occupation remarks."
          },
          "selfEmployed": {
            "type": "boolean",
            "description": "Is occupation considered self-employed?"
          },
          "workScheduleDescription": {
            "type": "string",
            "description": "The work schedule description."
          },
          "employmentCategory": {
            "type": "string",
            "description": "The employment category."
          },
          "jobStrenuous": {
            "type": "string",
            "description": "The job strenuous."
          },
          "endEmploymentReason": {
            "type": "string",
            "description": "The code for occupation ending."
          },
          "employmentLocation": {
            "type": "string",
            "description": "The employment location code."
          },
          "additionalEmploymentCategory": {
            "type": "string",
            "description": "The alternate employment category."
          },
          "employmentStatus": {
            "type": "string",
            "description": "The employment status."
          },
          "employmentTitle": {
            "type": "string",
            "description": "The employment title."
          },
          "workPatternBasis": {
            "type": "string",
            "description": "The work pattern basis."
          },
          "employeeId": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The id of an employee in respect of its employer."
          },
          "extensionAttributes": {
            "type": "array",
            "description": "The extension attributes.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            }
          },
          "primary": {
            "type": "boolean",
            "description": "Is occupation the primary one?"
          }
        }
      },
      "MonthlyBasisEarningAmountsRequest": {
        "required": [
          "earningsAmount"
        ],
        "type": "object",
        "properties": {
          "earningsAmount": {
            "type": "string",
            "description": "Money amount format",
            "format": "money",
            "example": "1500.50"
          },
          "shiftPay": {
            "type": "string",
            "description": "Money amount format",
            "format": "money",
            "example": "1500.50"
          },
          "pensionContribution": {
            "type": "string",
            "description": "Money amount format",
            "format": "money",
            "example": "1500.50"
          },
          "bonuses": {
            "type": "string",
            "description": "Money amount format",
            "format": "money",
            "example": "1500.50"
          },
          "commissions": {
            "type": "string",
            "description": "Money amount format",
            "format": "money",
            "example": "1500.50"
          }
        },
        "description": "Monthly Basis Earning Amounts Request Details."
      },
      "MonthlyEarningsRequest": {
        "required": [
          "earningsBasis"
        ],
        "type": "object",
        "properties": {
          "salaryAmountBasis": {
            "type": "string",
            "description": "Basis for salary amount being used."
          },
          "effectiveDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "endDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "notes": {
            "maxLength": 200,
            "minLength": 0,
            "type": "string",
            "description": "Notes relating to the earnings period."
          },
          "earningsBasis": {
            "type": "string",
            "description": "The earnings frequency."
          },
          "classExtensionInformation": {
            "type": "array",
            "description": "An array of the extensionAttribute objects which contain Earnings extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            }
          },
          "monthlyBasisEarningAmountsRequest": {
            "$ref": "#/components/schemas/MonthlyBasisEarningAmountsRequest"
          }
        }
      },
      "MedicalDetailsResponse": {
        "type": "object",
        "properties": {
          "condition": {
            "type": "string",
            "description": "A description of the medical condition of the injured party."
          },
          "firstDoctorVisitDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "lastReceivedDateMedicalInfo": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "lastRequestedDateMedicalInfo": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "medicalAuthorisationReceivedDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "pregnancyIndicator": {
            "type": "boolean",
            "description": "Indicates whether a person is pregnant or not."
          },
          "treatmentPlan": {
            "type": "string",
            "description": "A description of the treatment plan for the injured party."
          },
          "clientDominantSide": {
            "type": "string",
            "description": "The claimants dominant side."
          },
          "lifeExpectancy": {
            "type": "string",
            "description": "Projected life expectancy for the injured party based on the current medical information."
          },
          "causeOfInjuryCode": {
            "type": "string",
            "description": "The code ID that specifies the cause of injury."
          },
          "extensionAttributes": {
            "type": "array",
            "description": "Extension attributes.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            }
          },
          "symptomsFirstAppeared": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "description": {
            "type": "string",
            "description": "Description of the cause of injury code."
          }
        }
      },
      "PregnancyDetails": {
        "type": "object",
        "properties": {
          "actualDeliveryDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "expectedDeliveryDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "pregnancyComplications": {
            "type": "boolean",
            "description": "Indicates whether or not pregnancy complications occurred."
          },
          "deliveryType": {
            "type": "string",
            "description": "Indicates the type of delivery following pregnancy."
          }
        }
      },
      "HospitalisationDetailsResponse": {
        "required": [
          "hospitalisationDetailId",
          "startDate"
        ],
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "endDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "endDateConfirmed": {
            "type": "boolean",
            "description": "The end date confirmation for the hospitalisation period."
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "The description of hospitalisation detail."
          },
          "hospitalReason": {
            "type": "string",
            "description": "The hospitalisation reason for the claim period."
          },
          "extensionAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            }
          },
          "hospitalisationDetailId": {
            "type": "string",
            "description": "Business Entity OID",
            "format": "string",
            "example": "PE-00012-0000001234"
          },
          "facility": {
            "type": "string",
            "description": "The facilitator(hospital) name."
          }
        }
      },
      "HospitalisationDetails": {
        "required": [
          "startDate"
        ],
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "endDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "endDateConfirmed": {
            "type": "boolean",
            "description": "The end date confirmation for the hospitalisation period."
          },
          "description": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "The description of hospitalisation detail."
          },
          "hospitalReason": {
            "type": "string",
            "description": "The hospitalisation reason for the claim period."
          },
          "extensionAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            }
          }
        }
      },
      "SocialSecurityBenefitResponse": {
        "type": "object",
        "properties": {
          "socialSecurityBenefitId": {
            "type": "string",
            "description": "The unique identification number(oid)."
          },
          "authorityConsentDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "benefitAmount": {
            "type": "string",
            "description": "Money amount format",
            "format": "money",
            "example": "1500.50"
          },
          "claimStatus": {
            "type": "string",
            "description": "The status of the insureds application with the Social Security Administration."
          },
          "awardInformationReceivedDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "disabilityBenefitsEligibleDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "earlyRetirementBenefitsEligibleDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "insuranceEndDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "reimbursementAgreementSignedDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "reimbursementAgreementReceived": {
            "type": "boolean",
            "description": "Indicates that the reimbursement Agreement has been received."
          }
        }
      },
      "IncomeSourceResponse": {
        "required": [
          "incomeName",
          "incomeType"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "string",
            "description": "Money amount format",
            "format": "money",
            "example": "1500.50"
          },
          "startDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "endDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "incomeName": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "Income source name."
          },
          "incomeType": {
            "type": "string",
            "description": "Type of the income source."
          },
          "frequency": {
            "type": "string",
            "description": "Frequency of the income."
          },
          "receivedFrom": {
            "type": "string",
            "description": "Identify from where the other income source was received."
          },
          "extensionAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            }
          },
          "incomeSourceId": {
            "type": "string",
            "description": "Business Entity OID",
            "format": "string",
            "example": "PE-00012-0000001234"
          }
        }
      },
      "IncomeSource": {
        "required": [
          "incomeName",
          "incomeType"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "string",
            "description": "Money amount format",
            "format": "money",
            "example": "1500.50"
          },
          "startDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "endDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "incomeName": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "Income source name."
          },
          "incomeType": {
            "type": "string",
            "description": "Type of the income source."
          },
          "frequency": {
            "type": "string",
            "description": "Frequency of the income."
          },
          "receivedFrom": {
            "type": "string",
            "description": "Identify from where the other income source was received."
          },
          "extensionAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            }
          }
        }
      },
      "NotificationCaseDetail": {
        "type": "object",
        "properties": {
          "totalNumberOfRecords": {
            "type": "integer",
            "format": "int64"
          },
          "notificationSummaries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationCaseSummaryForClaims"
            }
          },
          "linkshdr": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "uriBuilder": {
                  "type": "object"
                },
                "rel": {
                  "type": "string"
                },
                "rels": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "type": {
                  "type": "string"
                },
                "uri": {
                  "type": "string",
                  "format": "uri"
                },
                "params": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "title": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "NotificationCaseSummaryForClaims": {
        "type": "object",
        "properties": {
          "notificationCaseId": {
            "type": "string",
            "description": "The case number for the notification case."
          },
          "createdDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "notificationReason": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "Notification reason selected during notification case intake."
          },
          "notificationDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "status": {
            "type": "string",
            "description": "The notification case status his is the current phase of the notification case managing process."
          },
          "accidentDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "multipleConflictingAccidentDates": {
            "type": "boolean",
            "description": "Multiple conflicting accident dates found.If true,accidentDate attribute will be empty."
          },
          "expectedDeliveryDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "actualDeliveryDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "dateFirstMissingWork": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "expectedRTWDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "multipleConflictingExpectedRTWDates": {
            "type": "boolean",
            "description": "Multiple conflicting expected return to work dates found.If true,expectedRTW attribute will be empty."
          },
          "claims": {
            "type": "array",
            "description": "The child cases under this notification case.",
            "items": {
              "$ref": "#/components/schemas/NotificationClaimSummary"
            }
          }
        }
      },
      "NotificationClaimSummary": {
        "required": [
          "claimId",
          "claimType"
        ],
        "type": "object",
        "properties": {
          "claimId": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "The claim number of the claim"
          },
          "claimType": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The name by which the claim type is referred."
          },
          "creationDate": {
            "type": "string",
            "description": "ISO 8601 date time format",
            "format": "date-time",
            "example": "1999-12-31T23:59:59Z"
          },
          "effectiveDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "customerName": {
            "maxLength": 256,
            "minLength": 0,
            "type": "string",
            "description": "The customer name of the claim"
          },
          "policyReferences": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The reference(s) to the policy from within the relevant admin system."
          },
          "description": {
            "maxLength": 2000,
            "minLength": 0,
            "type": "string",
            "description": "Description for this case as entered by the user."
          },
          "status": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "This is the stage in the process that the case is currently at."
          },
          "claimHandler": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The Person that is handling the claim."
          },
          "claimHandlerEmailAddress": {
            "maxLength": 40,
            "minLength": 0,
            "type": "string",
            "description": "The email address of the claim handler."
          },
          "claimHandlerPhoneNo": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "The phone number of the claim handler."
          },
          "notificationDate": {
            "type": "string",
            "description": "ISO 8601 date format",
            "format": "date",
            "example": "1999-12-31"
          },
          "caseComplexity": {
            "type": "string",
            "description": "Case complexity on Claim"
          },
          "stageName": {
            "type": "string",
            "description": "The current stage of claim case."
          },
          "classExtensionInformation": {
            "type": "array",
            "description": "An array of the extensionAttribute objects which contain extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            }
          }
        },
        "description": "The child cases under this notification case."
      }
    }
  }
}