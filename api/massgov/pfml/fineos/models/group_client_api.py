# generated by datamodel-codegen:
#   filename:  group_client_api.json
#   timestamp: 2020-10-16T19:08:50+00:00

from __future__ import annotations

from datetime import date, datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import AnyUrl, BaseModel, Extra, Field


class _Links(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class Meta(BaseModel):
    pass


class EpisodeDurationBasisResponse(BaseModel):
    domainId: Optional[int] = Field(None, description="The <code>domain id</code> of the enum")
    fullId: Optional[int] = Field(None, description="The <code>instance id</code> of the enum")
    name: Optional[str] = Field(None, description="The enum instance name")
    domainName: Optional[str] = Field(None, description="The enum domain name")
    _links: Optional[Dict[str, _Links]] = Field(
        None, description="Links to the enum domain and enum instance for the API"
    )


class ManagerAcceptedResponse(BaseModel):
    domainId: Optional[int] = Field(None, description="The <code>domain id</code> of the enum")
    fullId: Optional[int] = Field(None, description="The <code>instance id</code> of the enum")
    name: Optional[str] = Field(None, description="The enum instance name")
    domainName: Optional[str] = Field(None, description="The enum domain name")
    _links: Optional[Dict[str, _Links]] = Field(
        None, description="Links to the enum domain and enum instance for the API"
    )


class ReceivedViaResponse(BaseModel):
    domainId: Optional[int] = Field(None, description="The <code>domain id</code> of the enum")
    fullId: Optional[int] = Field(None, description="The <code>instance id</code> of the enum")
    name: Optional[str] = Field(None, description="The enum instance name")
    domainName: Optional[str] = Field(None, description="The enum domain name")
    _links: Optional[Dict[str, _Links]] = Field(
        None, description="Links to the enum domain and enum instance for the API"
    )


class ReportedByResponse(BaseModel):
    domainId: Optional[int] = Field(None, description="The <code>domain id</code> of the enum")
    fullId: Optional[int] = Field(None, description="The <code>instance id</code> of the enum")
    name: Optional[str] = Field(None, description="The enum instance name")
    domainName: Optional[str] = Field(None, description="The enum domain name")
    _links: Optional[Dict[str, _Links]] = Field(
        None, description="Links to the enum domain and enum instance for the API"
    )


class StatusResponse(BaseModel):
    domainId: Optional[int] = Field(None, description="The <code>domain id</code> of the enum")
    fullId: Optional[int] = Field(None, description="The <code>instance id</code> of the enum")
    name: Optional[str] = Field(None, description="The enum instance name")
    domainName: Optional[str] = Field(None, description="The enum domain name")
    _links: Optional[Dict[str, _Links]] = Field(
        None, description="Links to the enum domain and enum instance for the API"
    )


class TypeResponse(BaseModel):
    domainId: Optional[int] = Field(None, description="The <code>domain id</code> of the enum")
    fullId: Optional[int] = Field(None, description="The <code>instance id</code> of the enum")
    name: Optional[str] = Field(None, description="The enum instance name")
    domainName: Optional[str] = Field(None, description="The enum domain name")
    _links: Optional[Dict[str, _Links]] = Field(
        None, description="Links to the enum domain and enum instance for the API"
    )


class MessageItemDTO(BaseModel):
    severity: Optional[int] = None
    message: Optional[str] = None


class Direction(Enum):
    ASC = "ASC"
    DESC = "DESC"


class SortOrderItem(BaseModel):
    columnName: Optional[str] = None
    direction: Optional[Direction] = None


class AbsencePeriodTypeRequest(BaseModel):
    name: Optional[str] = Field(None, description="The enum instance name")
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )


class EpisodePeriodBasisRequest(BaseModel):
    name: Optional[str] = Field(None, description="The enum instance name")
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )


class CreateAbsencePeriodTypeRequest(BaseModel):
    name: Optional[str] = Field(None, description="The enum instance name")
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )


class EpisodePeriodDurationBasisRequest(BaseModel):
    name: Optional[str] = Field(None, description="The enum instance name")
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )


class EmploymentClassificationResponse(BaseModel):
    domainId: Optional[int] = Field(None, description="The <code>domain id</code> of the enum")
    fullId: Optional[int] = Field(None, description="The <code>instance id</code> of the enum")
    name: Optional[str] = Field(None, description="The enum instance name")
    domainName: Optional[str] = Field(None, description="The enum domain name")
    _links: Optional[Dict[str, _Links]] = Field(
        None, description="Links to the enum domain and enum instance for the API"
    )


class EmploymentTypeResponse(BaseModel):
    domainId: Optional[int] = Field(None, description="The <code>domain id</code> of the enum")
    fullId: Optional[int] = Field(None, description="The <code>instance id</code> of the enum")
    name: Optional[str] = Field(None, description="The enum instance name")
    domainName: Optional[str] = Field(None, description="The enum domain name")
    _links: Optional[Dict[str, _Links]] = Field(
        None, description="Links to the enum domain and enum instance for the API"
    )


class EmploymentWorkStateResponse(BaseModel):
    domainId: Optional[int] = Field(None, description="The <code>domain id</code> of the enum")
    fullId: Optional[int] = Field(None, description="The <code>instance id</code> of the enum")
    name: Optional[str] = Field(None, description="The enum instance name")
    domainName: Optional[str] = Field(None, description="The enum domain name")
    _links: Optional[Dict[str, _Links]] = Field(
        None, description="Links to the enum domain and enum instance for the API"
    )


class OccupationQualifiersEmbeddable(BaseModel):
    id: Optional[str] = Field(None, description="Occupation qualifier internal reference.")
    qualifierDescription: Optional[str] = Field(
        None, description="Occupation qualifier description."
    )


class ErrorSource(BaseModel):
    pointer: Optional[str] = None
    parameter: Optional[str] = None


class EmploymentClassificationRequest(BaseModel):
    name: Optional[str] = Field(None, description="The enum instance name")
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )


class EmploymentTypeRequest(BaseModel):
    name: Optional[str] = Field(None, description="The enum instance name")
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )


class EmploymentWorkStateRequest(BaseModel):
    name: Optional[str] = Field(None, description="The enum instance name")
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )


class EditEmploymentClassificationRequest(BaseModel):
    name: Optional[str] = Field(None, description="The enum instance name")
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )


class EditEmploymentTypeRequest(BaseModel):
    name: Optional[str] = Field(None, description="The enum instance name")
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )


class EditEmploymentWorkStateRequest(BaseModel):
    name: Optional[str] = Field(None, description="The enum instance name")
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )


class ContactMethodResponse(BaseModel):
    domainId: Optional[int] = Field(None, description="The <code>domain id</code> of the enum")
    fullId: Optional[int] = Field(None, description="The <code>instance id</code> of the enum")
    name: Optional[str] = Field(None, description="The enum instance name")
    domainName: Optional[str] = Field(None, description="The enum domain name")
    _links: Optional[Dict[str, _Links]] = Field(
        None, description="Links to the enum domain and enum instance for the API"
    )


class EmailAddressResource(BaseModel):
    id: Optional[str] = Field(None, description="The id of the resource")
    emailAddress: Optional[str] = Field(None, description="The email address")
    _links: Optional[Dict[str, _Links]] = None


class PhoneNumberResource(BaseModel):
    id: Optional[str] = Field(None, description="The id of the resource")
    contactMethod: Optional[ContactMethodResponse] = None
    areaCode: Optional[str] = Field(None, description="Regional area code")
    extension: Optional[str] = Field(None, description="Optional extension number for networks")
    intCode: Optional[str] = Field(None, description="International area code")
    telephoneNo: Optional[str] = Field(None, description="Local telephone number")
    exDirectory: Optional[bool] = Field(None, description="True if the number is ex-directory")
    _links: Optional[Dict[str, _Links]] = None


class LinkCommand(BaseModel):
    id: str
    resource: str
    relName: str


class CustomerResource(BaseModel):
    customerNo: Optional[str] = Field(None, description="Customer number")
    firstName: Optional[str] = Field(None, description="The First Name of the Customer")
    lastName: Optional[str] = Field(None, description="The Last Name of the Customer")
    dateOfBirth: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    idNumber: Optional[str] = Field(
        None, description="The Customer's id number, could be SSN or national security number"
    )
    jobTitle: Optional[str] = Field(
        None,
        description="The Customer's job title. This field will be populated if the Customer represents an Employee i.e. a person with one current occupation where the Group Client is listed as the Employer.",
    )
    employeeID: Optional[str] = Field(
        None,
        description="The Customer's employee id. This field will be populated if the Customer represents an Employee i.e. a person with one current occupation where the Group Client is listed as the Employer.",
    )
    workSite: Optional[str] = Field(
        None,
        description="The Customer's worksite. This field will be populated if the Customer represents an Employee i.e. a person with one current occupation where the Group Client is listed as the Employer.",
    )
    organisationUnit: Optional[str] = Field(
        None,
        description="The Customer's organisation unit. This field will be populated if the Customer represents an Employee i.e. a person with one current occupation where the Group Client is listed as the Employer.",
    )
    id: Optional[str] = Field(
        None, description="An id that uniquely identifies the customer record."
    )
    _links: Optional[Dict[str, _Links]] = None


class CustomerResources(BaseModel):
    elements: Optional[List[CustomerResource]] = None
    totalSize: Optional[int] = Field(
        None,
        description="<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
    )
    hasMoreElements: Optional[bool] = Field(
        None,
        description="<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>",
    )
    meta: Optional[Dict[str, Meta]] = None
    _links: Optional[Dict[str, _Links]] = None


class AUFloorLevelTypesResponse(BaseModel):
    domainId: Optional[int] = Field(None, description="The <code>domain id</code> of the enum")
    fullId: Optional[int] = Field(None, description="The <code>instance id</code> of the enum")
    name: Optional[str] = Field(None, description="The enum instance name")
    domainName: Optional[str] = Field(None, description="The enum domain name")
    _links: Optional[Dict[str, _Links]] = Field(
        None, description="Links to the enum domain and enum instance for the API"
    )


class AUPostalTypesResponse(BaseModel):
    domainId: Optional[int] = Field(None, description="The <code>domain id</code> of the enum")
    fullId: Optional[int] = Field(None, description="The <code>instance id</code> of the enum")
    name: Optional[str] = Field(None, description="The enum instance name")
    domainName: Optional[str] = Field(None, description="The enum domain name")
    _links: Optional[Dict[str, _Links]] = Field(
        None, description="Links to the enum domain and enum instance for the API"
    )


class AUStreetSuffixesResponse(BaseModel):
    domainId: Optional[int] = Field(None, description="The <code>domain id</code> of the enum")
    fullId: Optional[int] = Field(None, description="The <code>instance id</code> of the enum")
    name: Optional[str] = Field(None, description="The enum instance name")
    domainName: Optional[str] = Field(None, description="The enum domain name")
    _links: Optional[Dict[str, _Links]] = Field(
        None, description="Links to the enum domain and enum instance for the API"
    )


class Extensions(BaseModel):
    pass


class AustralianAddressEmbeddable(BaseModel):
    buildingName1: Optional[str] = Field(None, description="The name of the building.")
    buildingName2: Optional[str] = Field(None, description="The name of the building continued.")
    dpId: Optional[int] = Field(
        None,
        description="Referred to as DPID this is an 8-digit Australian post address identifier which uniquely identifies each delivery point to which Australia Post delivers mail. ",
    )
    floorLevelNumber: Optional[str] = Field(
        None, description="The floorLevelNumber must not be more than {max} characters"
    )
    premiseNoSuffix: Optional[str] = Field(
        None, description="The suffix to apply to the number of the premise."
    )
    premiseNoTo: Optional[int] = Field(
        None,
        description="The high number in a range for the premise. This is used when an address consists of a range of numbers as in 8-10 Lower Pembroke Street where the value 10 would be stored in this field. ",
    )
    premiseNoToSuffix: Optional[str] = Field(
        None, description="The suffix to apply to the number to of the premise. "
    )
    postalNumber: Optional[str] = Field(None, description="The postal number. ")
    lotNumber: Optional[str] = Field(None, description="The lot number.")
    postalNumberPrefix: Optional[str] = Field(
        None,
        description="This refers to the non-numeric portion preceding the Postal Number. EXAMPLE : PO Box B20 where B is the prefix. ",
    )
    postalNumberSuffix: Optional[str] = Field(
        None,
        description="This refers to the non-numeric portion following the Postal Number. EXAMPLE : PO Box 20A where A is the suffix.",
    )
    floorLevelType: Optional[AUFloorLevelTypesResponse] = None
    streetSuffix: Optional[AUStreetSuffixesResponse] = None
    postalType: Optional[AUPostalTypesResponse] = None
    extensions: Optional[Dict[str, Extensions]] = None


class CountryResponse(BaseModel):
    domainId: Optional[int] = Field(None, description="The <code>domain id</code> of the enum")
    fullId: Optional[int] = Field(None, description="The <code>instance id</code> of the enum")
    name: Optional[str] = Field(None, description="The enum instance name")
    domainName: Optional[str] = Field(None, description="The enum domain name")
    _links: Optional[Dict[str, _Links]] = Field(
        None, description="Links to the enum domain and enum instance for the API"
    )


class GenderResponse(BaseModel):
    domainId: Optional[int] = Field(None, description="The <code>domain id</code> of the enum")
    fullId: Optional[int] = Field(None, description="The <code>instance id</code> of the enum")
    name: Optional[str] = Field(None, description="The enum instance name")
    domainName: Optional[str] = Field(None, description="The enum domain name")
    _links: Optional[Dict[str, _Links]] = Field(
        None, description="Links to the enum domain and enum instance for the API"
    )


class IdentificationNumberTypeResponse(BaseModel):
    domainId: Optional[int] = Field(None, description="The <code>domain id</code> of the enum")
    fullId: Optional[int] = Field(None, description="The <code>instance id</code> of the enum")
    name: Optional[str] = Field(None, description="The enum instance name")
    domainName: Optional[str] = Field(None, description="The enum domain name")
    _links: Optional[Dict[str, _Links]] = Field(
        None, description="Links to the enum domain and enum instance for the API"
    )


class MaritalStatusResponse(BaseModel):
    domainId: Optional[int] = Field(None, description="The <code>domain id</code> of the enum")
    fullId: Optional[int] = Field(None, description="The <code>instance id</code> of the enum")
    name: Optional[str] = Field(None, description="The enum instance name")
    domainName: Optional[str] = Field(None, description="The enum domain name")
    _links: Optional[Dict[str, _Links]] = Field(
        None, description="Links to the enum domain and enum instance for the API"
    )


class NationalityResponse(BaseModel):
    domainId: Optional[int] = Field(None, description="The <code>domain id</code> of the enum")
    fullId: Optional[int] = Field(None, description="The <code>instance id</code> of the enum")
    name: Optional[str] = Field(None, description="The enum instance name")
    domainName: Optional[str] = Field(None, description="The enum domain name")
    _links: Optional[Dict[str, _Links]] = Field(
        None, description="Links to the enum domain and enum instance for the API"
    )


class PartyTypeResponse(BaseModel):
    domainId: Optional[int] = Field(None, description="The <code>domain id</code> of the enum")
    fullId: Optional[int] = Field(None, description="The <code>instance id</code> of the enum")
    name: Optional[str] = Field(None, description="The enum instance name")
    domainName: Optional[str] = Field(None, description="The enum domain name")
    _links: Optional[Dict[str, _Links]] = Field(
        None, description="Links to the enum domain and enum instance for the API"
    )


class TitleResponse(BaseModel):
    domainId: Optional[int] = Field(None, description="The <code>domain id</code> of the enum")
    fullId: Optional[int] = Field(None, description="The <code>instance id</code> of the enum")
    name: Optional[str] = Field(None, description="The enum instance name")
    domainName: Optional[str] = Field(None, description="The enum domain name")
    _links: Optional[Dict[str, _Links]] = Field(
        None, description="Links to the enum domain and enum instance for the API"
    )


class AUFloorLevelTypesRequest(BaseModel):
    name: Optional[str] = Field(None, description="The enum instance name")
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )


class AUPostalTypesRequest(BaseModel):
    name: Optional[str] = Field(None, description="The enum instance name")
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )


class AUStreetSuffixesRequest(BaseModel):
    name: Optional[str] = Field(None, description="The enum instance name")
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )


class CountryRequest(BaseModel):
    name: Optional[str] = Field(None, description="The enum instance name")
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )


class EditAustralianAddressCommand(BaseModel):
    dpId: Optional[int] = Field(
        None,
        description="Referred to as DPID this is an 8-digit Australian post address identifier which uniquely identifies each delivery point to which Australia Post delivers mail. ",
    )
    postalType: Optional[AUPostalTypesRequest] = None
    postalNumber: Optional[str] = Field(None, description="The postal number. ")
    lotNumber: Optional[str] = Field(None, description="The lot number.")
    postalNumberPrefix: Optional[str] = Field(
        None,
        description="This refers to the non-numeric portion preceding the Postal Number. EXAMPLE : PO Box B20 where B is the prefix. ",
    )
    postalNumberSuffix: Optional[str] = Field(
        None,
        description="This refers to the non-numeric portion following the Postal Number. EXAMPLE : PO Box 20A where A is the suffix.",
    )
    buildingName1: Optional[str] = Field(None, description="The name of the building.")
    buildingName2: Optional[str] = Field(None, description="The name of the building continued.")
    floorLevelType: Optional[AUFloorLevelTypesRequest] = None
    floorLevelNumber: Optional[str] = Field(
        None, description="The floorLevelNumber must not be more than {max} characters"
    )
    premiseNoSuffix: Optional[str] = Field(
        None, description="The suffix to apply to the number of the premise."
    )
    premiseNoTo: Optional[int] = Field(
        None,
        description="The high number in a range for the premise. This is used when an address consists of a range of numbers as in 8-10 Lower Pembroke Street where the value 10 would be stored in this field. ",
    )
    premiseNoToSuffix: Optional[str] = Field(
        None, description="The suffix to apply to the number to of the premise. "
    )
    streetSuffix: Optional[AUStreetSuffixesRequest] = None


class GenderRequest(BaseModel):
    name: Optional[str] = Field(None, description="The enum instance name")
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )


class IdentificationNumberTypeRequest(BaseModel):
    name: Optional[str] = Field(None, description="The enum instance name")
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )


class MaritalStatusRequest(BaseModel):
    name: Optional[str] = Field(None, description="The enum instance name")
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )


class NationalityRequest(BaseModel):
    name: Optional[str] = Field(None, description="The enum instance name")
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )


class PartyTypeRequest(BaseModel):
    name: Optional[str] = Field(None, description="The enum instance name")
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )


class AltEmploymentCatResponse(BaseModel):
    domainId: Optional[int] = Field(None, description="The <code>domain id</code> of the enum")
    fullId: Optional[int] = Field(None, description="The <code>instance id</code> of the enum")
    name: Optional[str] = Field(None, description="The enum instance name")
    domainName: Optional[str] = Field(None, description="The enum domain name")
    _links: Optional[Dict[str, _Links]] = Field(
        None, description="Links to the enum domain and enum instance for the API"
    )


class EmpLocationCodeResponse(BaseModel):
    domainId: Optional[int] = Field(None, description="The <code>domain id</code> of the enum")
    fullId: Optional[int] = Field(None, description="The <code>instance id</code> of the enum")
    name: Optional[str] = Field(None, description="The enum instance name")
    domainName: Optional[str] = Field(None, description="The enum domain name")
    _links: Optional[Dict[str, _Links]] = Field(
        None, description="Links to the enum domain and enum instance for the API"
    )


class EmploymentCatResponse(BaseModel):
    domainId: Optional[int] = Field(None, description="The <code>domain id</code> of the enum")
    fullId: Optional[int] = Field(None, description="The <code>instance id</code> of the enum")
    name: Optional[str] = Field(None, description="The enum instance name")
    domainName: Optional[str] = Field(None, description="The enum domain name")
    _links: Optional[Dict[str, _Links]] = Field(
        None, description="Links to the enum domain and enum instance for the API"
    )


class EmploymentStatusResponse(BaseModel):
    domainId: Optional[int] = Field(None, description="The <code>domain id</code> of the enum")
    fullId: Optional[int] = Field(None, description="The <code>instance id</code> of the enum")
    name: Optional[str] = Field(None, description="The enum instance name")
    domainName: Optional[str] = Field(None, description="The enum domain name")
    _links: Optional[Dict[str, _Links]] = Field(
        None, description="Links to the enum domain and enum instance for the API"
    )


class EmploymentTitleResponse(BaseModel):
    domainId: Optional[int] = Field(None, description="The <code>domain id</code> of the enum")
    fullId: Optional[int] = Field(None, description="The <code>instance id</code> of the enum")
    name: Optional[str] = Field(None, description="The enum instance name")
    domainName: Optional[str] = Field(None, description="The enum domain name")
    _links: Optional[Dict[str, _Links]] = Field(
        None, description="Links to the enum domain and enum instance for the API"
    )


class EndPosCodeResponse(BaseModel):
    domainId: Optional[int] = Field(None, description="The <code>domain id</code> of the enum")
    fullId: Optional[int] = Field(None, description="The <code>instance id</code> of the enum")
    name: Optional[str] = Field(None, description="The enum instance name")
    domainName: Optional[str] = Field(None, description="The enum domain name")
    _links: Optional[Dict[str, _Links]] = Field(
        None, description="Links to the enum domain and enum instance for the API"
    )


class JobStrenuousResponse(BaseModel):
    domainId: Optional[int] = Field(None, description="The <code>domain id</code> of the enum")
    fullId: Optional[int] = Field(None, description="The <code>instance id</code> of the enum")
    name: Optional[str] = Field(None, description="The enum instance name")
    domainName: Optional[str] = Field(None, description="The enum domain name")
    _links: Optional[Dict[str, _Links]] = Field(
        None, description="Links to the enum domain and enum instance for the API"
    )


class AltEmploymentCatRequest(BaseModel):
    name: Optional[str] = Field(None, description="The enum instance name")
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )


class EmpLocationCodeRequest(BaseModel):
    name: Optional[str] = Field(None, description="The enum instance name")
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )


class EmploymentCatRequest(BaseModel):
    name: Optional[str] = Field(None, description="The enum instance name")
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )


class EmploymentStatusRequest(BaseModel):
    name: Optional[str] = Field(None, description="The enum instance name")
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )


class EmploymentTitleRequest(BaseModel):
    name: Optional[str] = Field(None, description="The enum instance name")
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )


class EndPosCodeRequest(BaseModel):
    name: Optional[str] = Field(None, description="The enum instance name")
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )


class JobStrenuousRequest(BaseModel):
    name: Optional[str] = Field(None, description="The enum instance name")
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )


class AmountMoneyResponse(BaseModel):
    amountMinorUnits: Optional[int] = Field(
        None,
        description="The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
    )
    currency: Optional[str] = Field(None, description="The currency used in the Money amount")
    scale: Optional[int] = Field(None, description="The scale used in the Money amount")


class EarningsBasisFrequencyResponse(BaseModel):
    domainId: Optional[int] = Field(None, description="The <code>domain id</code> of the enum")
    fullId: Optional[int] = Field(None, description="The <code>instance id</code> of the enum")
    name: Optional[str] = Field(None, description="The enum instance name")
    domainName: Optional[str] = Field(None, description="The enum domain name")
    _links: Optional[Dict[str, _Links]] = Field(
        None, description="Links to the enum domain and enum instance for the API"
    )


class EarningsTypeResponse(BaseModel):
    domainId: Optional[int] = Field(None, description="The <code>domain id</code> of the enum")
    fullId: Optional[int] = Field(None, description="The <code>instance id</code> of the enum")
    name: Optional[str] = Field(None, description="The enum instance name")
    domainName: Optional[str] = Field(None, description="The enum domain name")
    _links: Optional[Dict[str, _Links]] = Field(
        None, description="Links to the enum domain and enum instance for the API"
    )


class StandardHourlyRateMoneyResponse(BaseModel):
    amountMinorUnits: Optional[int] = Field(
        None,
        description="The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
    )
    currency: Optional[str] = Field(None, description="The currency used in the Money amount")
    scale: Optional[int] = Field(None, description="The scale used in the Money amount")


class AmountMoneyRequest(BaseModel):
    amountMinorUnits: Optional[str] = Field(
        None,
        description="The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
    )


class EarningsBasisFrequencyRequest(BaseModel):
    name: Optional[str] = Field(None, description="The enum instance name")
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )


class EarningsTypeRequest(BaseModel):
    name: Optional[str] = Field(None, description="The enum instance name")
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )


class StandardHourlyRateMoneyRequest(BaseModel):
    amountMinorUnits: Optional[str] = Field(
        None,
        description="The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
    )


class EditContractualEarningsCommand(BaseModel):
    totalAmountOverride: Optional[bool] = Field(
        None,
        description="For Weekly and Bi-Weekly frequencies, determines whether earnings were specified using Amount (true) or StandardHours and StandardHourlyRate.",
    )
    standardHourlyRate: Optional[StandardHourlyRateMoneyRequest] = None
    extensions: Optional[Dict[str, Extensions]] = None
    frequency: Optional[EarningsBasisFrequencyRequest] = None
    standardHours: Optional[str] = Field(
        None,
        description="Number of hours in a standard working period. In use for Weekly and Bi-Weekly frequcies only, when TotalAmountOverrride is false",
    )
    earningsType: Optional[EarningsTypeRequest] = None
    effectiveDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    endDate: Optional[date] = Field(None, description="ISO 8601 date format", example="1999-12-31")
    amount: Optional[AmountMoneyRequest] = None


class DayOfWeekResponse(BaseModel):
    domainId: Optional[int] = Field(None, description="The <code>domain id</code> of the enum")
    fullId: Optional[int] = Field(None, description="The <code>instance id</code> of the enum")
    name: Optional[str] = Field(None, description="The enum instance name")
    domainName: Optional[str] = Field(None, description="The enum domain name")
    _links: Optional[Dict[str, _Links]] = Field(
        None, description="Links to the enum domain and enum instance for the API"
    )


class PatternStatusResponse(BaseModel):
    domainId: Optional[int] = Field(None, description="The <code>domain id</code> of the enum")
    fullId: Optional[int] = Field(None, description="The <code>instance id</code> of the enum")
    name: Optional[str] = Field(None, description="The enum instance name")
    domainName: Optional[str] = Field(None, description="The enum domain name")
    _links: Optional[Dict[str, _Links]] = Field(
        None, description="Links to the enum domain and enum instance for the API"
    )


class WorkPatternDayResponse(BaseModel):
    dayOfWeek: Optional[DayOfWeekResponse] = None
    hours: Optional[int] = Field(
        None, description="The number of whole working hours on this day in the work pattern (0-24)"
    )
    minutes: Optional[int] = Field(
        None, description="The number of minutes on this day in the work pattern (0-59)"
    )
    weekNumber: Optional[int] = Field(
        None,
        description="The number of the week in the pattern within which this day occurs (1, 2, 3 or 4)",
    )


class WorkPatternTypeResponse(BaseModel):
    domainId: Optional[int] = Field(None, description="The <code>domain id</code> of the enum")
    fullId: Optional[int] = Field(None, description="The <code>instance id</code> of the enum")
    name: Optional[str] = Field(None, description="The enum instance name")
    domainName: Optional[str] = Field(None, description="The enum domain name")
    _links: Optional[Dict[str, _Links]] = Field(
        None, description="Links to the enum domain and enum instance for the API"
    )


class WorkWeekStartsResponse(BaseModel):
    domainId: Optional[int] = Field(None, description="The <code>domain id</code> of the enum")
    fullId: Optional[int] = Field(None, description="The <code>instance id</code> of the enum")
    name: Optional[str] = Field(None, description="The enum instance name")
    domainName: Optional[str] = Field(None, description="The enum domain name")
    _links: Optional[Dict[str, _Links]] = Field(
        None, description="Links to the enum domain and enum instance for the API"
    )


class DayOfWeekRequest(BaseModel):
    name: Optional[str] = Field(None, description="The enum instance name")
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )


class PatternStatusRequest(BaseModel):
    name: Optional[str] = Field(None, description="The enum instance name")
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )


class WorkPatternTypeRequest(BaseModel):
    name: Optional[str] = Field(None, description="The enum instance name")
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )


class WorkWeekStartsRequest(BaseModel):
    name: Optional[str] = Field(None, description="The enum instance name")
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )


class EditWorkPatternDayCommand(BaseModel):
    dayOfWeek: DayOfWeekRequest
    hours: int = Field(
        ...,
        description="The number of whole working hours on this day in the work pattern (0-24)",
        ge=0.0,
    )
    minutes: int = Field(
        ..., description="The number of minutes on this day in the work pattern (0-59)", ge=0.0
    )
    weekNumber: int = Field(
        ...,
        description="The number of the week in the pattern within which this day occurs (1, 2, 3 or 4)",
        ge=0.0,
    )


class CreateEmailAddressCommand(BaseModel):
    emailAddress: str = Field(..., regex="^(.*)@(.*)$")


class Emails(BaseModel):
    elements: Optional[List[EmailAddressResource]] = None
    totalSize: Optional[int] = Field(
        None,
        description="<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
    )
    hasMoreElements: Optional[bool] = Field(
        None,
        description="<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>",
    )
    meta: Optional[Dict[str, Meta]] = None
    _links: Optional[Dict[str, _Links]] = None


class EditEmailAddressCommand(BaseModel):
    emailAddress: Optional[str] = None


class EndpointPermissionResource(BaseModel):
    id: Optional[str] = None
    name: Optional[str] = Field(None, description="Name of the endpoint")
    enabled: Optional[bool] = Field(
        None, description="If the endpoint is enabled or not for that user"
    )
    _links: Optional[Dict[str, _Links]] = Field(
        None, description="A map of links the user has permission to"
    )


class EndpointPermissionResources(BaseModel):
    elements: Optional[List[EndpointPermissionResource]] = None
    totalSize: Optional[int] = Field(
        None,
        description="<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
    )
    hasMoreElements: Optional[bool] = Field(
        None,
        description="<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>",
    )
    meta: Optional[Dict[str, Meta]] = None
    _links: Optional[Dict[str, _Links]] = None


class AltRoleSchema(BaseModel):
    domainId: Optional[int] = Field(None, description="The <code>domain id</code> of the enum")
    fullId: Optional[int] = Field(None, description="The <code>instance id</code> of the enum")
    name: Optional[str] = Field(None, description="The enum instance name")
    domainName: Optional[str] = Field(None, description="The enum domain name")
    _links: Optional[Dict[str, _Links]] = Field(
        None, description="Links to the enum domain and enum instance for the API"
    )


class AltStatusSchema(BaseModel):
    domainId: Optional[int] = Field(None, description="The <code>domain id</code> of the enum")
    fullId: Optional[int] = Field(None, description="The <code>instance id</code> of the enum")
    name: Optional[str] = Field(None, description="The enum instance name")
    domainName: Optional[str] = Field(None, description="The enum domain name")
    _links: Optional[Dict[str, _Links]] = Field(
        None, description="Links to the enum domain and enum instance for the API"
    )


class GroupClientUser(BaseModel):
    id: Optional[str] = Field(
        None, description="The unique Id used to identify the Group Client User."
    )
    userReferenceIdentifier: Optional[str] = Field(
        None,
        description="This is an additional reference id which can be used to identify a Group Client User.",
    )
    enabled: Optional[bool] = Field(
        None,
        description="An indicator used to determine if this Group Client User is enabled or not. True = enabled / false = disabled.",
    )
    status: Optional[AltStatusSchema] = None
    role: Optional[AltRoleSchema] = None
    nameOfUser: Optional[str] = Field(None, description="The Group Client Users name.")
    _links: Optional[Dict[str, _Links]] = None


class EditGroupClientUserCommand(BaseModel):
    enabled: Optional[bool] = Field(
        None,
        description="An indicator used to determine if this Group Client User is enabled or not. True = enabled / false = disabled.",
    )


class CaseHandlerEmbeddable(BaseModel):
    emailAddress: Optional[str] = Field(None, description="Email Address")
    telephoneNo: Optional[str] = Field(None, description="Telephone")
    name: Optional[str] = Field(None, description="Name")
    id: Optional[str] = Field(None, description="ID used to uniquely identify case handler")


class NotifedByResponse(BaseModel):
    domainId: Optional[int] = Field(None, description="The <code>domain id</code> of the enum")
    fullId: Optional[int] = Field(None, description="The <code>instance id</code> of the enum")
    name: Optional[str] = Field(None, description="The enum instance name")
    domainName: Optional[str] = Field(None, description="The enum domain name")
    _links: Optional[Dict[str, _Links]] = Field(
        None, description="Links to the enum domain and enum instance for the API"
    )


class NotificationReasonResponse(BaseModel):
    domainId: Optional[int] = Field(None, description="The <code>domain id</code> of the enum")
    fullId: Optional[int] = Field(None, description="The <code>instance id</code> of the enum")
    name: Optional[str] = Field(None, description="The enum instance name")
    domainName: Optional[str] = Field(None, description="The enum domain name")
    _links: Optional[Dict[str, _Links]] = Field(
        None, description="Links to the enum domain and enum instance for the API"
    )


class PermissionGroupResource(BaseModel):
    id: Optional[str] = None
    name: Optional[str] = Field(None, description="Name of the endpoint")
    _links: Optional[Dict[str, _Links]] = Field(
        None, description="A map of links the user has permission to"
    )


class PermissionGroupResources(BaseModel):
    elements: Optional[List[PermissionGroupResource]] = None
    totalSize: Optional[int] = Field(
        None,
        description="<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
    )
    hasMoreElements: Optional[bool] = Field(
        None,
        description="<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>",
    )
    meta: Optional[Dict[str, Meta]] = None
    _links: Optional[Dict[str, _Links]] = None


class EnumCommand(BaseModel):
    fullId: Optional[int] = None
    name: Optional[str] = None


class PhoneNumbers(BaseModel):
    elements: Optional[List[PhoneNumberResource]] = None
    totalSize: Optional[int] = Field(
        None,
        description="<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
    )
    hasMoreElements: Optional[bool] = Field(
        None,
        description="<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>",
    )
    meta: Optional[Dict[str, Meta]] = None
    _links: Optional[Dict[str, _Links]] = None


class EditPhoneNumberCommand(BaseModel):
    contactMethod: Optional[EnumCommand] = None
    exDirectory: Optional[bool] = None
    areaCode: Optional[str] = None
    intCode: Optional[str] = None
    telephoneNo: Optional[str] = None
    extension: Optional[str] = None


class CustomerEmbeddable(BaseModel):
    id: Optional[str] = Field(
        None, description="Resource Id of the case for which we want to retrieve the web messages."
    )
    firstName: Optional[str] = Field(None, description="The First Name of the Customer")
    lastName: Optional[str] = Field(None, description="The Last Name of the Customer")


class WebMessageCaseEmbeddable(BaseModel):
    id: Optional[str] = Field(
        None,
        description="Resource Id of the case for which we want to perform action on the web messages.",
    )
    caseReference: Optional[str] = Field(None, description="Business identifier for this case.")
    caseType: Optional[str] = Field(None, description="Specific type of the case")


class WebMessageResource(BaseModel):
    id: Optional[str] = Field(None, description="Resource Id of Web Message")
    subject: Optional[str] = Field(None, description="Subject for WebMessage")
    narrative: Optional[str] = Field(None, description="Narrative for WebMessage")
    contactDateTime: Optional[date] = Field(
        None, description="Timestmp of when the web message was created"
    )
    msgOriginatesFromPortal: Optional[bool] = Field(
        None,
        description="A flag indicating whether the message originates from the customer on the portal or not (in which case the message originating from the insurer)",
    )
    readByGroupClient: Optional[bool] = Field(
        None,
        description="A flag indicating whether the message has been read or not. All msgs which orginate from Portal (i.e. messages from the customer) will be automatically marked as read when created. All messages which do not originate from the portal (from the insurer to the customer) will be marked as read once the customer has read the message",
    )
    rootCase: Optional[WebMessageCaseEmbeddable] = None
    customer: Optional[CustomerEmbeddable] = None
    case: Optional[WebMessageCaseEmbeddable] = None
    _links: Optional[Dict[str, _Links]] = None


class WebMessages(BaseModel):
    elements: Optional[List[WebMessageResource]] = None
    totalSize: Optional[int] = Field(
        None,
        description="<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
    )
    hasMoreElements: Optional[bool] = Field(
        None,
        description="<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>",
    )
    meta: Optional[Dict[str, Meta]] = None
    _links: Optional[Dict[str, _Links]] = None


class CreateWebMessageCommand(BaseModel):
    subject: str = Field(..., description="Subject for WebMessage")
    narrative: str = Field(..., description="Narrative for WebMessage")


class EditWebMessageCommand(BaseModel):
    readByGroupClient: Optional[bool] = Field(
        None, description="Flag to mark first time open details for webMessage"
    )


class DivisionClassLinkEmbeddable(BaseModel):
    divisionId: Optional[str] = Field(None, description="The ID of the selected Division")
    classId: Optional[str] = Field(None, description="The ID of the selected Class")


class GroupPolicyClassEmbeddable(BaseModel):
    id: Optional[str] = Field(None, description="ID used to identify the group policy class")
    name: Optional[str] = Field(None, description="The name of the selected group policy class")


class GroupPolicyDivisionEmbeddable(BaseModel):
    id: Optional[str] = Field(None, description="ID used to identify the group policy division")
    name: Optional[str] = Field(None, description="The name of the selected group policy division")


class GroupPolicyMemberDetail(BaseModel):
    id: Optional[str] = Field(None, description="The claim member details ID.")
    memberNumber: Optional[str] = Field(
        None, description="The Claimant's member number for the group policy"
    )
    policyReference: Optional[str] = Field(None, description="The policy reference")
    divisionClassLinks: Optional[List[DivisionClassLinkEmbeddable]] = Field(
        None,
        description="The list of class and division ids that are linked to the claimant member details for the group policy (sorted by division name and class name).",
    )
    availablePolicyDivisions: Optional[List[GroupPolicyDivisionEmbeddable]] = Field(
        None,
        description="The ids and names of the divisions that are available on the group policy (sorted by name).",
    )
    availablePolicyClasses: Optional[List[GroupPolicyClassEmbeddable]] = Field(
        None,
        description="The ids and names of the classes that are available on the group policy (sorted by name).",
    )
    _links: Optional[Dict[str, _Links]] = None


class GroupPolicyMemberDetails(BaseModel):
    elements: Optional[List[GroupPolicyMemberDetail]] = None
    totalSize: Optional[int] = Field(
        None,
        description="<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
    )
    hasMoreElements: Optional[bool] = Field(
        None,
        description="<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>",
    )
    meta: Optional[Dict[str, Meta]] = None
    _links: Optional[Dict[str, _Links]] = None


class WriteDivisionClassLinkCommand(BaseModel):
    classId: Optional[str] = Field(None, description="The ID of the selected Class")
    divisionId: Optional[str] = Field(None, description="The ID of the selected Division")


class ClientDominantSideResponse(BaseModel):
    domainId: Optional[int] = Field(None, description="The <code>domain id</code> of the enum")
    fullId: Optional[int] = Field(None, description="The <code>instance id</code> of the enum")
    name: Optional[str] = Field(None, description="The enum instance name")
    domainName: Optional[str] = Field(None, description="The enum domain name")
    _links: Optional[Dict[str, _Links]] = Field(
        None, description="Links to the enum domain and enum instance for the API"
    )


class LifeExpectancyResponse(BaseModel):
    domainId: Optional[int] = Field(None, description="The <code>domain id</code> of the enum")
    fullId: Optional[int] = Field(None, description="The <code>instance id</code> of the enum")
    name: Optional[str] = Field(None, description="The enum instance name")
    domainName: Optional[str] = Field(None, description="The enum domain name")
    _links: Optional[Dict[str, _Links]] = Field(
        None, description="Links to the enum domain and enum instance for the API"
    )


class ClientDominantSideRequest(BaseModel):
    name: Optional[str] = Field(None, description="The enum instance name")
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )


class LifeExpectancyRequest(BaseModel):
    name: Optional[str] = Field(None, description="The enum instance name")
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )


class DeliveryTypeResponse(BaseModel):
    domainId: Optional[int] = Field(None, description="The <code>domain id</code> of the enum")
    fullId: Optional[int] = Field(None, description="The <code>instance id</code> of the enum")
    name: Optional[str] = Field(None, description="The enum instance name")
    domainName: Optional[str] = Field(None, description="The enum domain name")
    _links: Optional[Dict[str, _Links]] = Field(
        None, description="Links to the enum domain and enum instance for the API"
    )


class PregnancyDetails(BaseModel):
    actualDeliveryDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    expectedDeliveryDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    pregnancyComplications: Optional[bool] = Field(
        None, description="Indicates whether or not pregnancy complications occurred."
    )
    deliveryType: Optional[str] = Field(
        None, description="Indicates the type of delivery following pregnancy."
    )


class DeliveryTypeRequest(BaseModel):
    name: Optional[str] = Field(None, description="The enum instance name")
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )


class EditPregnancyDetailsCommand(BaseModel):
    pregnancyComplications: Optional[bool] = Field(
        None, description="Indicates whether or not pregnancy complications occurred."
    )
    expectedDeliveryDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    actualDeliveryDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    deliveryType: Optional[DeliveryTypeRequest] = None


class EnumInstanceSummary(BaseModel):
    id: Optional[str] = Field(None, description="Enum instance ID")
    name: Optional[str] = Field(None, description="Enum instance name")
    _links: Optional[Dict[str, _Links]] = Field(
        None,
        description="Links to related objects (in this case: enumInstance)",
        example="{'enumInstance': ''}",
    )


class EnumSubset(BaseModel):
    name: Optional[str] = Field(None, description="Enum subset name")
    instances: Optional[List[EnumInstanceSummary]] = Field(
        None, description="List of the instances that belongs to this Subset "
    )


class EnumSubsetSummary(BaseModel):
    name: Optional[str] = Field(None, description="Enum subset name")


class ErrorModel(BaseModel):
    error: str
    correlationId: Optional[str] = None
    errorDetail: Optional[str] = None
    stacktrace: Optional[str] = None


class UserErrorModel(BaseModel):
    error: str


class CancellationPeriod(BaseModel):
    startDate: date = Field(..., description="ISO 8601 date format", example="1999-12-31")
    endDate: date = Field(..., description="ISO 8601 date format", example="1999-12-31")


class ValidationMessageModel(BaseModel):
    validationMessage: str


class CaseHandler(BaseModel):
    name: Optional[str] = Field(None, description="Full name of the case handler.")
    phoneNumber: Optional[str] = Field(None, description="Phone number of the case handler.")
    emailAddress: Optional[str] = Field(None, description="Email address of the case handler.")


class Employee(BaseModel):
    id: Optional[str] = Field(None, description="Unique identifier for the employee")
    name: Optional[str] = Field(None, description="Name of the employee")


class GroupClientAccommodationDetail(BaseModel):
    accommodationCategory: Optional[str] = Field(
        None, description="The Category that identifies this association."
    )
    accommodationType: Optional[str] = Field(
        None, description="The Type that identifies this accommodation"
    )
    accommodationDescription: Optional[str] = Field(
        None, description="The description of this accommodation."
    )
    source: Optional[str] = Field(
        None,
        description="Has the accommodation been resquested by employee or proposed by employer?",
    )
    createDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    acceptedDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    implementedDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    endDate: Optional[date] = Field(None, description="ISO 8601 date format", example="1999-12-31")


class NotificationCase(BaseModel):
    id: Optional[str] = Field(
        None,
        description="Resource Id of the notification case this accommodation case belongs to if one exists.",
    )
    caseReference: Optional[str] = Field(None, description="Business identifier for this case.")


class EmployeeLeaveBalance(BaseModel):
    approvedTime: Optional[float] = Field(
        None,
        description="Employee total approved leave as per the leave plan calculation for the given period.",
    )
    pendingTime: Optional[float] = Field(
        None,
        description="Employee total pending leave as per the leave plan calculation for the given period.",
    )
    availableBalance: Optional[float] = Field(
        None,
        description="Employee total approximate available leave balance as per the leave plan calculation for the given period.",
    )
    timeBasis: Optional[str] = Field(
        None,
        description="The basis used to record time unit of approved, pending and entitlement. It may be Minutes, Hours, Days, Weeks, Years or Months. This maps to enum TimeUnits(domain id 6757).",
        max_length=10,
        min_length=0,
    )
    availabilityPeriodStartDate: Optional[datetime] = Field(
        None, description="ISO 8601 date time format", example="1999-12-31T23:59:59Z"
    )
    availabilityPeriodEndDate: Optional[datetime] = Field(
        None, description="ISO 8601 date time format", example="1999-12-31T23:59:59Z"
    )
    timeEntitlement: Optional[float] = Field(
        None,
        description="The time that is available to an employee who has met the eligibility requirements as per the leave plan calculation period.",
    )
    timeWithinPeriod: Optional[int] = Field(
        None,
        description="The time frame within which the employee must avail of the entitled leave. For example, an employee may be entitled to 6 weeks leave within 12 months period.",
        le=9999.0,
    )
    timeWithinPeriodBasis: Optional[str] = Field(
        None,
        description="The basis used to record time unit of time within a period. It may be Minutes, Hours, Days, Weeks or Months. This maps to enum LengthBasis(domain id 6758).",
        max_length=10,
        min_length=0,
    )
    notificationMessage: Optional[str] = Field(
        None,
        description="The additional information to the employer about the balance being presented and can explain some reasons to be cautious of the value presented here.The following information message returns as per the leave plan type.<UL><LI><B>Standard leave plan:</B> The approximate balance provides an indication of your balance under this leave plan and is for general information purposes only. This balance considers your leave requests within the highlighted months. We recommend that you submit a leave request for an accurate assessment of available time under each leave plan.</LI><LI><B>Shared leave plan:</B>The approximate balance estimates time left under this leave plan. Other leave requests and leave plan entitlements may affect this plan's balance. We recommend that you submit a leave request for an accurate evaluation of available time.</LI><LI><B>Tracking plans:</B>This leave plan tracks time shared between other leave plans and the approved and pending time is totaled from those plans. The approximate balance is a guide only.</LI><LI><B>Leave plan with versions:</B>The approximate balance is an estimate as this leave plan has different versions that may alter the plan's entitlements. These calculations are based on the version that is effective in the selected month. We recommend that you submit a leave request for an accurate evaluation of available time.</LI><LI><B>Leave plans with reasonable timebank:</B> The approximate balance is not available as this leave plan allows for a reasonable amount of time to be taken rather than a set entitlement. The amount of time available is at the employer's discretion.</LI><LI><B>Leave plans that are no longer serviced by a carrier:</B> The approximate balance is not available because this leave plan is no longer serviced by the employer.</LI></UL>",
    )


class Absence(BaseModel):
    id: Optional[str] = Field(None, description="Unique identifier for the absence case")
    caseReference: Optional[str] = Field(None, description="Case reference related to absence")


class LeavePlan(BaseModel):
    id: Optional[str] = Field(None, description="The unique identifier for the leave plan")
    name: Optional[str] = Field(None, description="Leave plan long name")
    shortName: Optional[str] = Field(None, description="Leave plan short name")
    applicabilityStatus: Optional[str] = Field(
        None, description="Applicability status of leave plan"
    )
    eligibilityStatus: Optional[str] = Field(None, description="Eligibility status of leave plan")
    availabilityStatus: Optional[str] = Field(
        None, description="Result of the evaluation of plan availability within a leave request"
    )
    adjudicationStatus: Optional[str] = Field(None, description="Adjudication status of leave plan")
    evidenceStatus: Optional[str] = Field(
        None, description="Evidence status made on this Selected Leave Plan"
    )
    category: Optional[str] = Field(None, description="Leave plan category")
    calculationPeriodMethod: Optional[str] = Field(
        None, description="Calculation period method of leave plan period."
    )
    timeBankMethod: Optional[str] = Field(
        None,
        description="The time bank method either from the Service Agreement or from the Leave Plan Availability",
    )
    timeWithinPeriod: Optional[int] = Field(
        None, description="Number of time units for the period duration e.g. Weeks, Days"
    )
    timeWithinPeriodBasis: Optional[str] = Field(
        None, description="Units of time used in calculating the time with in period "
    )
    fixedYearStartDay: Optional[int] = Field(
        None, description="Start day for the specified fixed year"
    )
    fixedYearStartMonth: Optional[str] = Field(None, description="Fixed year start month")
    timeEntitlement: Optional[float] = Field(
        None, description="Number of time units for the time entitlement"
    )
    timeEntitlementBasis: Optional[str] = Field(
        None, description="Units of time used in leave plan availability"
    )
    paidLeaveCaseId: Optional[str] = Field(None, description="Paid leave case id")


class LeaveRequest(BaseModel):
    id: Optional[str] = Field(
        None, description="Business Entity OID", example="PE-00012-0000001234"
    )
    reasonName: Optional[str] = Field(None, description="The leave request reason")
    qualifier1: Optional[str] = Field(None, description="The leave request first qualifier")
    qualifier2: Optional[str] = Field(None, description="The leave request second qualifier")
    decisionStatus: Optional[str] = Field(None, description="Leave request decision status")
    approvalReason: Optional[str] = Field(None, description="Reason for approval of a request")
    denialReason: Optional[str] = Field(None, description="Reason for denial of a request")


class Period(BaseModel):
    periodReference: Optional[str] = Field(
        None, description="Business Entity OID", example="PE-00012-0000001234"
    )
    parentPeriodReference: Optional[str] = Field(
        None, description="Reference number for the parent period"
    )
    relatedToEpisodic: Optional[bool] = Field(
        None,
        description="True if this period represents a reported actual for an episodic requested period, false otherwise",
    )
    startDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    endDate: Optional[date] = Field(None, description="ISO 8601 date format", example="1999-12-31")
    balanceDeduction: Optional[float] = Field(
        None,
        description="The amount of time deducted from the time bank in the specified time entitlement basis e.g. number of Weeks, Days etc.",
    )
    timeRequested: Optional[str] = Field(
        None,
        description="The amount of time requested in this period, in the specified time entitlement basis e.g. number of Weeks, Days",
    )
    timeDeducted: Optional[str] = Field(
        None,
        description="The amount of time deducted in this period, in the specified time deducted basis e.g. number of Hours, Days",
    )
    timeDeductedBasis: Optional[str] = Field(
        None, description="The time deducted basis in this period e.g. Hours, Days"
    )
    timeDecisionStatus: Optional[str] = Field(
        None, description="Decision status associated with the period"
    )
    timeDecisionReason: Optional[str] = Field(
        None, description="Decision reason associated with the period"
    )
    type: Optional[str] = Field(None, description="Type of the absence period")
    status: Optional[str] = Field(None, description="Status of the leave request")
    leavePlan: Optional[LeavePlan] = None
    leaveRequest: Optional[LeaveRequest] = None


class ModelEnum(BaseModel):
    domainName: str = Field(..., description="Domain name.", max_length=100, min_length=0)
    instanceValue: str = Field(
        ..., description="Enum instance value.", max_length=100, min_length=0
    )


class Params(BaseModel):
    pass

    class Config:
        extra = Extra.allow


class LinkshdrItem(BaseModel):
    rel: Optional[str] = None
    rels: Optional[List[str]] = None
    uriBuilder: Optional[Dict[str, Any]] = None
    type: Optional[str] = None
    uri: Optional[AnyUrl] = None
    params: Optional[Dict[str, Params]] = None
    title: Optional[str] = None


class EFormSummary(BaseModel):
    eformId: int = Field(..., description="Unique automatically generated Id of an EForm document.")
    eformTypeId: Optional[str] = Field(
        None, description="Business Entity OID", example="PE-00012-0000001234"
    )
    effectiveDateFrom: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    effectiveDateTo: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    eformType: str = Field(
        ...,
        description="The short business description of the document type.",
        max_length=200,
        min_length=0,
    )


class Policy(BaseModel):
    referenceNo: str = Field(
        ...,
        description="Unique alphanumeric policy reference from the relevant policy admin system.",
        max_length=50,
        min_length=0,
    )


class RestrictionsLimitations(BaseModel):
    restrictionEffectiveDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    restrictions: Optional[str] = Field(
        None,
        description="Specifies the disabilities/restrictions experienced by the injured party as a result of the claim.",
    )


class DiagnosisDetails(BaseModel):
    medicalCode: Optional[str] = Field(
        None,
        description="The code ID that specifies a particular diagnosis.",
        max_length=20,
        min_length=0,
    )
    levelIndicator: Optional[str] = Field(
        None,
        description="The injury code level e.g. primary or secondary assigned to the injury in the context of the claim.",
    )
    firstPrimaryCode: Optional[bool] = Field(
        None,
        description="Indicates whether or not this is the first medical code identified with the primary level indicator.",
    )
    description: Optional[str] = Field(
        None, description="A description of the medical code.", max_length=500, min_length=0
    )
    causeGrouping: Optional[str] = Field(
        None,
        description="The name of the medical code group in which this medical code is contained.",
        max_length=500,
        min_length=0,
    )
    groupType: Optional[str] = Field(
        None, description="Specifies the type of the medical code group."
    )
    diagnosisDetailsId: Optional[str] = Field(
        None,
        description="Business Entity OID",
        example="PE-00012-0000001234",
        max_length=10,
        min_length=0,
    )


class NewDiagnosisDetails(BaseModel):
    medicalCode: Optional[str] = Field(
        None,
        description="The code ID that specifies a particular diagnosis.",
        max_length=20,
        min_length=0,
    )
    levelIndicator: Optional[str] = Field(
        None,
        description="The injury code level e.g. primary or secondary assigned to the injury in the context of the claim.",
    )


class GroupClientCustomerPhoneNumber(BaseModel):
    phoneNumberType: Optional[str] = Field(
        None,
        description="The type of phone number (e.g. landline / mobile)",
        max_length=10,
        min_length=0,
    )
    intCode: Optional[str] = Field(
        None, description="international code value", max_length=10, min_length=0
    )
    areaCode: Optional[str] = Field(
        None, description="area code value", max_length=20, min_length=0
    )
    telephoneNo: Optional[str] = Field(
        None, description="telephone No. value", max_length=10, min_length=0
    )


class EFormAttribute(BaseModel):
    name: str = Field(..., description="The name of an EForm attibute.")
    booleanValue: Optional[bool] = Field(
        None,
        description="Boolean value of an EForm attribute, which must be populated if the type attribute is set to boolean.",
    )
    dateValue: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    decimalValue: Optional[float] = Field(
        None,
        description="Decimal value of an EForm attribute, which must be populated if the type attribute is set to decimal.",
    )
    integerValue: Optional[int] = Field(
        None,
        description="Integer value of an EForm attribute, which must be populated if the type attribute is set to integer.",
    )
    stringValue: Optional[str] = Field(
        None,
        description="String value of an EForm attribute, which must be populated if the type attribute is set to string.",
    )
    enumValue: Optional[ModelEnum] = None


class SocialSecurityDecisionResponse(BaseModel):
    socialSecurityDecisionId: str = Field(
        ...,
        description="The unique identifier for the social security",
        max_length=32,
        min_length=0,
    )
    applicationDate: Optional[datetime] = Field(
        None, description="ISO 8601 date time format", example="1999-12-31T23:59:59Z"
    )
    decisionDate: Optional[datetime] = Field(
        None, description="ISO 8601 date time format", example="1999-12-31T23:59:59Z"
    )
    approvalType: Optional[str] = Field(
        None, description="The level of decision made for the social security decision"
    )
    decision: Optional[str] = Field(
        None, description="This is the actual decision made for the social security decision"
    )


class Base64EncodedFileData(BaseModel):
    fileName: str = Field(..., description="The name of the file, without the extension.")
    fileExtension: str = Field(
        ..., description="The extension of the file, without a preceding dot."
    )
    base64EncodedFileContents: str = Field(..., description="The base64 encoded file contents.")
    contentType: Optional[str] = Field(None, description="The MIME type of the file.")
    description: Optional[str] = Field(None, description="A description of the file.")
    fileSizeInBytes: int = Field(..., description="The size in bytes of the file.")
    managedReqId: Optional[int] = Field(
        None, description="The Managed Requirement ID to be associated with the file."
    )


class OutstandingInformationItem(BaseModel):
    sourcePartyName: Optional[str] = Field(
        None, description="Name of the party that is expected to provide the outstanding item."
    )
    uploadCaseNumber: Optional[str] = Field(
        None,
        description="If the outstanding item is required by multiple cases, the upload Case Number is the id of the lowest case in the hierarchy which is the common parent of all such cases; If the outstanding item is required by one case only, the upload Case Number is the id of that case.Given a caseId, different outstanding items can a have different upload Case Number depending on which case(s) requires which outstanding items.",
        max_length=254,
        min_length=0,
    )
    informationType: Optional[str] = Field(
        None,
        description="The type of information item required.The type is intended to be a user-friendly value, that can be exposed on the portal and will mean something to the portal user.",
        max_length=350,
        min_length=0,
    )
    infoReceived: Optional[bool] = Field(
        None,
        description="Indicates whether any information has been received for the outstanding information item.<BR>For instance, a document could be uploaded and linked to an outstanding requirement, in which case the value will be TRUE, however the outstanding requirement will remain OPEN until a back office user validates that the uploaded document is actually what was required.<BR>This flag will always be FALSE for a evidence result which is either pending or received but not satisfied; it will be TRUE for a received evidence result which is received and satisfied.<BR>If the element represents a combination of outstanding requirements and evidence results, the flag will be FALSE if at least one of these elements returns FALSE.",
    )


class OutstandingInformationData(BaseModel):
    informationType: str = Field(..., description="The type of the outstanding item")
    documentId: Optional[str] = Field(
        None, description="Document id to link to outstanding requirement. "
    )


class NotificationDetails(BaseModel):
    notificationReason: Optional[str] = None
    customerId: Optional[str] = None
    description: Optional[str] = None
    lastWorkingDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )


class AccountTransferInfo(BaseModel):
    bankAccountNumber: Optional[str] = Field(
        None, description="The bank account number of an employee"
    )
    bankAccountType: Optional[str] = Field(None, description="The bank account type of an employee")
    bankInstituteName: Optional[str] = Field(
        None, description="The bank institute name of an employee"
    )
    bankBranchSortCode: Optional[str] = Field(
        None, description="The employee bank branch sort code"
    )
    bankCode: Optional[str] = Field(None, description="The bank code of an employee")


class ChequePaymentInfo(BaseModel):
    chequeNumber: Optional[str] = Field(None, description="The cheque number of an employee")


class CaseParticipantsSummary(BaseModel):
    participantId: Optional[int] = Field(None, description="Id of the participant")
    rolename: Optional[str] = Field(
        None,
        description="The role name assigned to the participant on the case",
        max_length=10,
        min_length=0,
    )
    partyName: Optional[str] = Field(
        None,
        description="The name of the party with the participant role on the case",
        max_length=100,
        min_length=0,
    )
    startDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    endDate: Optional[date] = Field(None, description="ISO 8601 date format", example="1999-12-31")
    referenceNo: Optional[str] = Field(
        None,
        description="The reference number of the party with the participant role on the case",
        max_length=40,
        min_length=0,
    )
    sourceSystem: Optional[str] = Field(
        None,
        description="The source system of the party with the participant role on the case",
        max_length=100,
        min_length=0,
    )


class CertificationPeriodDetails(BaseModel):
    periodType: Optional[str] = Field(
        None, description="The period type of the certification period."
    )
    status: Optional[str] = Field(None, description="The status of the certification period.")
    statusReason: Optional[str] = Field(
        None, description=" The selected reason for the status of a certification period."
    )
    periodFromDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    periodToDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    totalPeriodDays: Optional[int] = Field(
        None,
        description="The total days of a certification period for a specific period type.\r\nThis is calculated based on the event FINEOS.claims.benefits.calcDaysInPeriodEvent",
    )
    notes: Optional[str] = Field(None, description="The notes about the certification period.")
    insurerReceivedDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    consultationDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    duration: Optional[int] = Field(
        None, description="The number of days within the certification period."
    )


class CaseStatusHistory(BaseModel):
    status: Optional[str] = Field(
        None, description="The stage in the process that the case was at."
    )
    dateStatusEntered: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    dateStatusDeparted: Optional[str] = Field(
        None,
        description="Formatted date when benefit's underlying process moved out of a step with this phase.",
    )


class Base64EncodedFileDetails(BaseModel):
    fileName: str = Field(..., description="The name of the file, without the extension.")
    fileExtension: str = Field(
        ..., description="The extension of the file, without a preceding dot."
    )
    base64EncodedFileContents: str = Field(..., description="The base64 encoded file contents.")
    contentType: Optional[str] = Field(None, description="The MIME type of the file.")
    description: Optional[str] = Field(None, description="A description of the file.")


class ChequeDetails(BaseModel):
    nameToPrintOnCheck: Optional[str] = Field(
        None,
        description="The name that should be printed on the check",
        max_length=100,
        min_length=0,
    )


class MonthlyBasisEarningAmountsResponse(BaseModel):
    earningsAmount: str = Field(..., description="Money amount format", example="1500.50")
    shiftPay: Optional[str] = Field(None, description="Money amount format", example="1500.50")
    pensionContribution: Optional[str] = Field(
        None, description="Money amount format", example="1500.50"
    )
    bonuses: Optional[str] = Field(None, description="Money amount format", example="1500.50")
    commissions: Optional[str] = Field(None, description="Money amount format", example="1500.50")
    earningsAmountAsWeekly: Optional[str] = Field(
        None, description="Money amount format", example="1500.50"
    )
    totalEarnings: Optional[str] = Field(None, description="Money amount format", example="1500.50")


class WeeklyBasisEarningAmountsResponse(BaseModel):
    totalAmountOverridden: bool = Field(
        ...,
        description="This attribute indicates if the total weekly or bi-weekly amount has been manually overridden.",
    )
    standardHours: Optional[float] = Field(
        None, description="The number of hours in a standard working week or bi-week."
    )
    standardHourRate: Optional[str] = Field(
        None, description="Money amount format", example="1500.50"
    )
    overtimeHours: Optional[float] = Field(
        None, description="Number of overtime hours in a working week or bi-week."
    )
    overtimeHourlyRate: Optional[str] = Field(
        None, description="Money amount format", example="1500.50"
    )
    statutoryValue: Optional[float] = Field(
        None,
        description="Additional weekly or bi-weekly vacation or statutory entitlement amount or percentage of regular hours.",
    )
    statutoryBasis: Optional[str] = Field(
        None,
        description="Additional weekly or bi-weekly vacation or statutory entitlements type. It may be an amount or percentage of regular hour.",
    )
    shiftHours: Optional[float] = Field(
        None, description="Number of shift hours in a working week or bi-week."
    )
    shiftBasis: Optional[str] = Field(
        None,
        description="Basis of weekly or bi-weekly shift earnings - either an additional hourly allowance or an additional amount.",
    )
    shiftAllowance: Optional[str] = Field(
        None, description="Money amount format", example="1500.50"
    )
    totalEarnings: Optional[str] = Field(None, description="Money amount format", example="1500.50")
    standardEarnings: Optional[str] = Field(
        None, description="Money amount format", example="1500.50"
    )
    overtimeEarnings: Optional[str] = Field(
        None, description="Money amount format", example="1500.50"
    )
    statutoryEarnings: Optional[str] = Field(
        None, description="Money amount format", example="1500.50"
    )
    shiftEarnings: Optional[str] = Field(None, description="Money amount format", example="1500.50")


class WeeklyBasisEarningAmountsRequest(BaseModel):
    totalAmountOverridden: bool = Field(
        ...,
        description="This attribute indicates if the total weekly or bi-weekly amount has been manually overridden.",
    )
    standardHours: Optional[float] = Field(
        None, description="The number of hours in a standard working week or bi-week."
    )
    standardHourRate: Optional[str] = Field(
        None, description="Money amount format", example="1500.50"
    )
    overtimeHours: Optional[float] = Field(
        None, description="Number of overtime hours in a working week or bi-week."
    )
    overtimeHourlyRate: Optional[str] = Field(
        None, description="Money amount format", example="1500.50"
    )
    statutoryValue: Optional[float] = Field(
        None,
        description="Additional weekly or bi-weekly vacation or statutory entitlement amount or percentage of regular hours.",
    )
    statutoryBasis: Optional[str] = Field(
        None,
        description="Additional weekly or bi-weekly vacation or statutory entitlements type. It may be an amount or percentage of regular hour.",
    )
    shiftHours: Optional[float] = Field(
        None, description="Number of shift hours in a working week or bi-week."
    )
    shiftBasis: Optional[str] = Field(
        None,
        description="Basis of weekly or bi-weekly shift earnings - either an additional hourly allowance or an additional amount.",
    )
    shiftAllowance: Optional[str] = Field(
        None, description="Money amount format", example="1500.50"
    )
    totalEarnings: Optional[str] = Field(None, description="Money amount format", example="1500.50")


class MonthlyBasisEarningAmountsRequest(BaseModel):
    earningsAmount: str = Field(..., description="Money amount format", example="1500.50")
    shiftPay: Optional[str] = Field(None, description="Money amount format", example="1500.50")
    pensionContribution: Optional[str] = Field(
        None, description="Money amount format", example="1500.50"
    )
    bonuses: Optional[str] = Field(None, description="Money amount format", example="1500.50")
    commissions: Optional[str] = Field(None, description="Money amount format", example="1500.50")


class SocialSecurityBenefitResponse(BaseModel):
    socialSecurityBenefitId: Optional[str] = Field(
        None, description="The unique identification number(oid)."
    )
    authorityConsentDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    benefitAmount: Optional[str] = Field(None, description="Money amount format", example="1500.50")
    claimStatus: Optional[str] = Field(
        None,
        description="The status of the insureds application with the Social Security Administration.",
    )
    awardInformationReceivedDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    disabilityBenefitsEligibleDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    earlyRetirementBenefitsEligibleDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    insuranceEndDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    reimbursementAgreementSignedDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    reimbursementAgreementReceived: Optional[bool] = Field(
        None, description="Indicates that the reimbursement Agreement has been received."
    )


class ActualAbsencePeriodResource(BaseModel):
    id: Optional[str] = Field(None, description="Unique id of the actual time record.")
    actualDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    episodePeriodDuration: Optional[int] = Field(
        None, description="Actual time/duration taken by the employee."
    )
    episodePeriodBasis: Optional[EpisodeDurationBasisResponse] = None
    additionalNotes: Optional[str] = Field(
        None, description="Enter any additional notes about the reported actual time."
    )
    type: Optional[TypeResponse] = None
    status: Optional[StatusResponse] = None
    receivedVia: Optional[ReceivedViaResponse] = None
    reportedBy: Optional[ReportedByResponse] = None
    reportedDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    managerAccepted: Optional[ManagerAcceptedResponse] = None
    reportingPartyName: Optional[str] = Field(
        None,
        description="The name of party that reported the actual associated to this reporting information.",
    )
    _links: Optional[Dict[str, _Links]] = None


class ActualAbsencePeriodResources(BaseModel):
    elements: Optional[List[ActualAbsencePeriodResource]] = None
    totalSize: Optional[int] = Field(
        None,
        description="<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
    )
    hasMoreElements: Optional[bool] = Field(
        None,
        description="<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>",
    )
    meta: Optional[Dict[str, Meta]] = None
    _links: Optional[Dict[str, _Links]] = None


class QuerySortInfo(BaseModel):
    sortStatementsText: Optional[str] = None
    sortOrderItemsList: Optional[List[SortOrderItem]] = None


class EditActualAbsencePeriodCommand(BaseModel):
    type: Optional[AbsencePeriodTypeRequest] = None
    actualDate: str = Field(
        ..., description="Actual date of the absence period.", example="2013-08-18"
    )
    episodePeriodDuration: int = Field(
        ..., description="Actual time/duration taken by the employee.", example=3
    )
    episodePeriodBasis: Optional[EpisodePeriodBasisRequest] = None
    additionalNotes: Optional[str] = Field(
        None,
        description="Enter any additional notes about the reported actual time.",
        example="More detail about the actual time taken.",
        max_length=250,
    )


class CreateActualAbsencePeriodCommand(BaseModel):
    actualDate: str = Field(..., description="Actual date of the absence period.")
    episodePeriodDuration: int = Field(
        ..., description="Actual time/duration taken by the employee.", ge=1.0
    )
    episodePeriodBasis: EpisodePeriodDurationBasisRequest
    additionalNotes: Optional[str] = Field(
        None,
        description="Enter any additional notes about the reported actual time.",
        max_length=250,
        min_length=0,
    )
    type: Optional[CreateAbsencePeriodTypeRequest] = None


class BulkCreateCommandCreateActualAbsencePeriodCommand(BaseModel):
    elements: Optional[List[CreateActualAbsencePeriodCommand]] = None


class AbsenceEmploymentResource(BaseModel):
    id: Optional[str] = Field(None, description="Employment record internal reference.")
    adjustedHireDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    cbaValue: Optional[str] = Field(None, description="Collective bargaining agreement code")
    withinFMLACriteria: Optional[bool] = Field(
        None,
        description="Is the employee working within Federal FMLA defined radius i.e. 50 employees within 75 miles.",
    )
    hoursWorkedPerYear: Optional[int] = Field(
        None, description="Number of hours an employee has worked in the past 12 months."
    )
    keyEmployee: Optional[bool] = Field(
        None, description="Is the employee classified as a Key Employee."
    )
    workingAtHome: Optional[bool] = Field(None, description="Is the employee working at home.")
    employmentType: Optional[EmploymentTypeResponse] = None
    employmentWorkState: Optional[EmploymentWorkStateResponse] = None
    employmentClassification: Optional[EmploymentClassificationResponse] = None
    managerReference: Optional[str] = Field(
        None,
        description="The customer number that uniquely identifies the manager of the employee.",
    )
    managerName: Optional[str] = Field(None, description="The name of the manager of the employee.")
    occupationQualifiers: Optional[List[OccupationQualifiersEmbeddable]] = Field(
        None,
        description="List of occupation qualifier(s) which have been applied to this employment.",
    )
    _links: Optional[Dict[str, _Links]] = None


class ApiError(BaseModel):
    id: Optional[str] = None
    status: Optional[str] = None
    code: Optional[str] = None
    title: Optional[str] = None
    detail: Optional[str] = None
    source: Optional[ErrorSource] = None
    meta: Optional[Dict[str, Meta]] = None
    _links: Optional[Dict[str, _Links]] = None


class CreateAbsenceEmploymentCommand(BaseModel):
    adjustedHireDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    cbaValue: Optional[str] = Field(None, description="Collective bargaining agreement code")
    withinFMLACriteria: Optional[bool] = Field(
        None,
        description="Is the employee working within Federal FMLA defined radius i.e. 50 employees within 75 miles.",
    )
    hoursWorkedPerYear: Optional[int] = Field(
        None, description="Number of hours an employee has worked in the past 12 months."
    )
    keyEmployee: Optional[bool] = Field(
        None, description="Is the employee classified as a Key Employee."
    )
    workingAtHome: Optional[bool] = Field(None, description="Is the employee working at home.")
    employmentType: Optional[EmploymentTypeRequest] = None
    employmentWorkState: Optional[EmploymentWorkStateRequest] = None
    employmentClassification: Optional[EmploymentClassificationRequest] = None
    managerReference: Optional[str] = Field(
        None,
        description="The customer number that uniquely identifies the manager of the employee.",
    )


class EditAbsenceEmploymentCommand(BaseModel):
    withinFMLACriteria: Optional[bool] = Field(
        None,
        description="Is the employee working within Federal FMLA defined radius i.e. 50 employees within 75 miles.",
    )
    adjustedHireDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    cbaValue: Optional[str] = Field(None, description="Collective bargaining agreement code")
    keyEmployee: Optional[bool] = Field(
        None, description="Is the employee classified as a Key Employee."
    )
    workingAtHome: Optional[bool] = Field(None, description="Is the employee working at home.")
    employmentType: Optional[EditEmploymentTypeRequest] = None
    employmentWorkState: Optional[EditEmploymentWorkStateRequest] = None
    employmentClassification: Optional[EditEmploymentClassificationRequest] = None
    managerReference: Optional[str] = Field(
        None,
        description="The customer number that uniquely identifies the manager of the employee.",
    )
    hoursWorkedPerYear: Optional[int] = Field(
        None, description="Number of hours an employee has worked in the past 12 months."
    )


class CommunicationPreferenceResource(BaseModel):
    id: Optional[str] = Field(
        None,
        description="Id of the communication preference, matching the full ID of the contact context enum",
    )
    contactContext: Optional[ContactMethodResponse] = None
    emailAddresses: Optional[List[EmailAddressResource]] = Field(
        None, description="List of email addresses linked to the preference context"
    )
    phoneNumbers: Optional[List[PhoneNumberResource]] = Field(
        None, description="List of phone numbers linked to the preference context"
    )
    _links: Optional[Dict[str, _Links]] = None


class CommunicationPreferences(BaseModel):
    elements: Optional[List[CommunicationPreferenceResource]] = None
    totalSize: Optional[int] = Field(
        None,
        description="<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
    )
    hasMoreElements: Optional[bool] = Field(
        None,
        description="<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>",
    )
    meta: Optional[Dict[str, Meta]] = None
    _links: Optional[Dict[str, _Links]] = None


class AddressEmbeddable(BaseModel):
    premiseNo: Optional[str] = Field(None, description="The premise number i.e. the street number.")
    addressLine1: Optional[str] = Field(None, description="First line of an address.")
    addressLine2: Optional[str] = Field(None, description="Second line of an address.")
    addressLine3: Optional[str] = Field(None, description="Third line of an address.")
    addressLine4: Optional[str] = Field(None, description="Fourth line of an address.")
    addressLine5: Optional[str] = Field(None, description="Fifth line of an address.")
    addressLine6: Optional[str] = Field(None, description="Sixth line of an address.")
    addressLine7: Optional[str] = Field(None, description="Seventh line of an address.")
    postCode: Optional[str] = Field(None, description="International Postcode.")
    country: Optional[CountryResponse] = None
    extensions: Optional[Dict[str, Extensions]] = None
    extraAustralianFields: Optional[AustralianAddressEmbeddable] = None


class CustomerInfo(BaseModel):
    id: Optional[str] = None
    firstName: Optional[str] = Field(None, description="Person's first name")
    lastName: Optional[str] = Field(None, description="Person's last name")
    secondName: Optional[str] = Field(None, description="Person's second name")
    initials: Optional[str] = Field(None, description="Person's middle initials")
    needsInterpreter: Optional[bool] = Field(
        None, description="Indicates if the customer needs an interpreter"
    )
    placeOfBirth: Optional[str] = Field(None, description="Place of Birth")
    dateOfBirth: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    idNumber: Optional[str] = Field(
        None,
        description="ID number of the claimant. The ID number could be something like social security number, or tax identificaiton number. They ID type is indicated by the value of the <code>identificationNumberType</code> field.",
    )
    customerNo: Optional[str] = Field(None, description="Customer number")
    securedClient: Optional[bool] = Field(None, description="Secured client flag")
    staff: Optional[bool] = Field(None, description="Staff flag")
    partyType: Optional[PartyTypeResponse] = None
    gender: Optional[GenderResponse] = None
    maritalStatus: Optional[MaritalStatusResponse] = None
    nationality: Optional[NationalityResponse] = None
    title: Optional[TitleResponse] = None
    identificationNumberType: Optional[IdentificationNumberTypeResponse] = None
    address: Optional[AddressEmbeddable] = None
    extensions: Optional[Dict] = None
    _links: Optional[Dict[str, _Links]] = None


class EditAddressCommand(BaseModel):
    extraAustralianFields: Optional[EditAustralianAddressCommand] = None
    country: Optional[CountryRequest] = None
    premiseNo: Optional[str] = None
    addressLine1: Optional[str] = Field(None, description="First line of an address.")
    addressLine2: Optional[str] = Field(None, description="Second line of an address.")
    addressLine3: Optional[str] = Field(None, description="Third line of an address.")
    addressLine4: Optional[str] = Field(None, description="Fourth line of an address.")
    addressLine5: Optional[str] = Field(None, description="Fifth line of an address.")
    addressLine6: Optional[str] = Field(None, description="Sixth line of an address.")
    addressLine7: Optional[str] = Field(None, description="Seventh line of an address.")
    postCode: Optional[str] = Field(None, description="International Postcode.")


class EditCustomerInfoCommand(BaseModel):
    address: Optional[EditAddressCommand] = None
    initials: Optional[str] = Field(None, description="Person's middle initials")
    needsInterpreter: Optional[bool] = Field(
        None, description="Indicates if the customer needs an interpreter"
    )
    secondName: Optional[str] = Field(None, description="Person's second name")
    placeOfBirth: Optional[str] = Field(None, description="Place of Birth")
    gender: Optional[GenderRequest] = None
    dateOfBirth: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    maritalStatus: Optional[MaritalStatusRequest] = None
    nationality: Optional[NationalityRequest] = None
    idNumber: Optional[str] = Field(
        None,
        description="ID number of the claimant. The ID number could be something like social security number, or tax identificaiton number. They ID type is indicated by the value of the <code>identificationNumberType</code> field.",
    )
    identificationNumberType: Optional[IdentificationNumberTypeRequest] = None
    securedClient: Optional[bool] = Field(None, description="Secured client flag")
    firstName: Optional[str] = Field(None, description="Person's first name")
    lastName: Optional[str] = Field(None, description="Person's last name")
    staff: Optional[bool] = Field(None, description="Staff flag")
    partyType: Optional[PartyTypeRequest] = None


class CustomerOccupation(BaseModel):
    id: Optional[str] = None
    orgUnitName: Optional[str] = Field(
        None,
        description="The name of the organisation unit within the employer organisation structure - reference only field",
    )
    worksiteName: Optional[str] = Field(
        None,
        description="The name of the employer location which the occupation is related to - reference only field",
    )
    workPatternBasis: Optional[str] = Field(
        None, description="Indicates the type of work pattern in use - reference only field"
    )
    altEmploymentCat: Optional[AltEmploymentCatResponse] = None
    daysWorkedPerWeek: Optional[str] = Field(
        None,
        description="The number of days worked per week, which can be specified with partial days",
    )
    employeeIdentifier: Optional[str] = Field(
        None, description="Reference identifier of an employee in respect of its employer"
    )
    empLocationCode: Optional[EmpLocationCodeResponse] = None
    employmentCat: Optional[EmploymentCatResponse] = None
    employmentStatus: Optional[EmploymentStatusResponse] = None
    employmentTitle: Optional[EmploymentTitleResponse] = None
    endPosCode: Optional[EndPosCodeResponse] = None
    endPosReason: Optional[str] = Field(None, description="he reason for job ending")
    hrsWorkedPerWeek: Optional[str] = Field(
        None,
        description="The number of hours worked per week, which can be specified using partial hours",
    )
    jobDesc: Optional[str] = Field(None, description="Job description")
    jobEndDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    jobStartDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    jobStrenuous: Optional[JobStrenuousResponse] = None
    jobTitle: Optional[str] = Field(None, description="Job title")
    occCodeReference: Optional[str] = Field(
        None, description="Occupation Industry Classification Code id"
    )
    occCodeName: Optional[str] = Field(
        None,
        description="The name(s) associated with the specific Occupation Industry Classification Code id",
    )
    overrideDaysWorkedPerWeek: Optional[bool] = Field(
        None, description="Is override days worked per week true or false?"
    )
    remarks: Optional[str] = Field(None, description="Remarks about the Occupation")
    workSchDesc: Optional[str] = Field(None, description="Work schedule description")
    extensions: Optional[Dict[str, Extensions]] = None
    _links: Optional[Dict[str, _Links]] = None


class CustomerOccupations(BaseModel):
    elements: Optional[List[CustomerOccupation]] = None
    totalSize: Optional[int] = Field(
        None,
        description="<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
    )
    hasMoreElements: Optional[bool] = Field(
        None,
        description="<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>",
    )
    meta: Optional[Dict[str, Meta]] = None
    _links: Optional[Dict[str, _Links]] = None


class EditCustomerOccupationCommand(BaseModel):
    altEmploymentCat: Optional[AltEmploymentCatRequest] = None
    jobStartDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    jobEndDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    employeeIdentifier: Optional[str] = Field(
        None, description="Reference identifier of an employee in respect of its employer"
    )
    empLocationCode: Optional[EmpLocationCodeRequest] = None
    employmentCat: Optional[EmploymentCatRequest] = None
    endPosCode: Optional[EndPosCodeRequest] = None
    hrsWorkedPerWeek: Optional[str] = Field(
        None,
        description="The number of hours worked per week, which can be specified using partial hours",
    )
    occCodeReference: Optional[str] = Field(
        None, description="Occupation Industry Classification Code id"
    )
    occCodeName: Optional[str] = Field(
        None,
        description="The name(s) associated with the specific Occupation Industry Classification Code id",
    )
    overrideDaysWorkedPerWeek: Optional[bool] = Field(
        None, description="Is override days worked per week true or false?"
    )
    workSchDesc: Optional[str] = Field(None, description="Work schedule description")
    extensions: Optional[Dict[str, Extensions]] = None
    daysWorkedPerWeek: Optional[str] = Field(
        None,
        description="The number of days worked per week, which can be specified with partial days",
    )
    jobStrenuous: Optional[JobStrenuousRequest] = None
    employmentStatus: Optional[EmploymentStatusRequest] = None
    employmentTitle: Optional[EmploymentTitleRequest] = None
    endPosReason: Optional[str] = Field(None, description="he reason for job ending")
    jobDesc: Optional[str] = Field(None, description="Job description")
    jobTitle: Optional[str] = Field(None, description="Job title")
    remarks: Optional[str] = Field(None, description="Remarks about the Occupation")


class ContractualEarnings(BaseModel):
    id: Optional[str] = None
    amount: Optional[AmountMoneyResponse] = None
    earningsType: Optional[EarningsTypeResponse] = None
    effectiveDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    endDate: Optional[date] = Field(None, description="ISO 8601 date format", example="1999-12-31")
    frequency: Optional[EarningsBasisFrequencyResponse] = None
    standardHours: Optional[str] = Field(
        None,
        description="Number of hours in a standard working period. In use for Weekly and Bi-Weekly frequcies only, when TotalAmountOverrride is false",
    )
    standardHourlyRate: Optional[StandardHourlyRateMoneyResponse] = None
    totalAmountOverride: Optional[bool] = Field(
        None,
        description="For Weekly and Bi-Weekly frequencies, determines whether earnings were specified using Amount (true) or StandardHours and StandardHourlyRate.",
    )
    extensions: Optional[Dict[str, Extensions]] = None
    _links: Optional[Dict[str, _Links]] = None


class CreateContractualEarningsCommand(BaseModel):
    amount: Optional[AmountMoneyRequest] = None
    earningsType: EarningsTypeRequest
    effectiveDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    endDate: Optional[date] = Field(None, description="ISO 8601 date format", example="1999-12-31")
    frequency: Optional[EarningsBasisFrequencyRequest] = None
    standardHours: Optional[str] = Field(
        None,
        description="Number of hours in a standard working period. In use for Weekly and Bi-Weekly frequcies only, when TotalAmountOverrride is false",
    )
    standardHourlyRate: Optional[StandardHourlyRateMoneyRequest] = None
    totalAmountOverride: bool = Field(
        ...,
        description="For Weekly and Bi-Weekly frequencies, determines whether earnings were specified using Amount (true) or StandardHours and StandardHourlyRate.",
    )
    extensions: Optional[Dict[str, Extensions]] = None


class ContractualEarningsList(BaseModel):
    elements: Optional[List[ContractualEarnings]] = None
    totalSize: Optional[int] = Field(
        None,
        description="<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
    )
    hasMoreElements: Optional[bool] = Field(
        None,
        description="<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>",
    )
    meta: Optional[Dict[str, Meta]] = None
    _links: Optional[Dict[str, _Links]] = None


class WeekBasedWorkPattern(BaseModel):
    patternStartDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    patternStatus: Optional[PatternStatusResponse] = None
    workPatternType: Optional[WorkPatternTypeResponse] = None
    workWeekStarts: Optional[WorkWeekStartsResponse] = None
    workPatternDays: Optional[List[WorkPatternDayResponse]] = Field(
        None,
        description="List of days which make up the pattern. There can be 7, 14, 21 or 28 of these.",
    )
    _links: Optional[Dict[str, _Links]] = None


class CreateWorkPatternDayCommand(BaseModel):
    dayOfWeek: DayOfWeekRequest
    hours: int = Field(
        ...,
        description="The number of whole working hours on this day in the work pattern (0-24)",
        ge=0.0,
    )
    minutes: int = Field(
        ..., description="The number of minutes on this day in the work pattern (0-59)", ge=0.0
    )
    weekNumber: int = Field(
        ...,
        description="The number of the week in the pattern within which this day occurs (1, 2, 3 or 4)",
        ge=0.0,
    )


class EditWeekBasedWorkPatternCommand(BaseModel):
    workPatternDays: List[EditWorkPatternDayCommand] = Field(
        ...,
        description="List of days which make up the pattern. There can be 7, 14, 21 or 28 of these.",
    )
    workPatternType: WorkPatternTypeRequest
    workWeekStarts: Optional[WorkWeekStartsRequest] = None
    patternStartDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    patternStatus: Optional[PatternStatusRequest] = None


class AltGroupClientUserListSchema(BaseModel):
    elements: Optional[List[GroupClientUser]] = None
    totalSize: Optional[int] = Field(
        None,
        description="<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
    )
    hasMoreElements: Optional[bool] = Field(
        None,
        description="<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>",
    )
    meta: Optional[Dict[str, Meta]] = None
    _links: Optional[Dict[str, _Links]] = None


class CaseEmbeddable(BaseModel):
    id: Optional[str] = Field(None, description="ID used to identify Case")
    caseType: Optional[str] = Field(None, description="Case type")
    caseNumber: Optional[str] = Field(None, description="Case number")
    status: Optional[str] = Field(None, description="The status of the sub-case.")
    caseHandler: Optional[CaseHandlerEmbeddable] = None


class Notification(BaseModel):
    id: Optional[str] = Field(None, description="An id to uniquely identify the Notification")
    caseNumber: Optional[str] = Field(None, description="The Notification's case number")
    notificationReason: Optional[NotificationReasonResponse] = None
    notificationDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    createdDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    adminGroup: Optional[str] = Field(
        None, description="Administrative group of the notification case."
    )
    status: Optional[str] = Field(None, description="The status of the Notification")
    subCases: Optional[List[CaseEmbeddable]] = Field(
        None, description="Child cases of the Notification Case"
    )
    customer: Optional[CustomerResource] = None
    caseHandler: Optional[CaseHandlerEmbeddable] = None
    notifiedBy: Optional[NotifedByResponse] = None
    _links: Optional[Dict[str, _Links]] = None


class Notifications(BaseModel):
    elements: Optional[List[Notification]] = None
    totalSize: Optional[int] = Field(
        None,
        description="<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
    )
    hasMoreElements: Optional[bool] = Field(
        None,
        description="<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>",
    )
    meta: Optional[Dict[str, Meta]] = None
    _links: Optional[Dict[str, _Links]] = None


class CreatePhoneNumberCommand(BaseModel):
    contactMethod: EnumCommand
    areaCode: Optional[str] = Field(None, max_length=10, min_length=0)
    extension: Optional[str] = Field(None, max_length=10, min_length=0)
    intCode: Optional[str] = Field(None, max_length=10, min_length=0)
    telephoneNo: Optional[str] = Field(None, max_length=20, min_length=0)
    exDirectory: Optional[bool] = None


class EditGroupPolicyMemberDetailCommand(BaseModel):
    divisionClassLinks: Optional[List[WriteDivisionClassLinkCommand]] = Field(
        None,
        description="The list of class and division ids that are linked to the claimant member details for the group policy (sorted by division name and class name).",
    )
    memberNumber: Optional[str] = Field(
        None, description="The Claimant's member number for the group policy"
    )


class EditMedicalDetailsCommand(BaseModel):
    pregnancyIndicator: Optional[bool] = Field(
        None, description="Indicates whether a person is pregnant or not."
    )
    symptomsFirstAppearedDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    lastReceivedDateMedicalInfoDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    lastRequestedDateMedicalInfoDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    extensions: Optional[Dict[str, Extensions]] = Field(
        None,
        description="An object of the extension attributes that contains MedicalDetails (OLClaimMedicalDetails) extension information.",
    )
    lifeExpectancy: Optional[LifeExpectancyRequest] = None
    causeOfInjuryCode: Optional[str] = Field(
        None,
        description="The code ID that specifies the cause of injury. This represents a specific medical code that identifies a particular injury, and is associated with the corresponding claim (using a Code Value Link entity). This must be contained within inverted commas, otherwise the value will be coerced. For example, medical code 10-1 would be coerced into medical code 9.",
    )
    condition: Optional[str] = Field(
        None,
        description="A description of the medical condition of the injured party. Cannot be more than 150 characters.",
    )
    firstDoctorVisitDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    medicalAuthorisationReceivedDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    treatmentPlan: Optional[str] = Field(
        None,
        description="A description of the treatment plan for the injured party. Cannot be more than 256 characters.",
    )
    clientDominantSide: Optional[ClientDominantSideRequest] = None


class EnumDomain(BaseModel):
    id: Optional[str] = Field(None, description="Enum domain ID (unique in the system)")
    name: Optional[str] = Field(None, description="Enum domain name")
    description: Optional[str] = Field(None, description="Description of this domain")
    editable: Optional[bool] = Field(
        None,
        description="Flag whether this domain is allowed to be edited. Domain can be edited from back office system only - No edit domain endpoint exists.",
    )
    alphaSort: Optional[bool] = Field(
        None,
        description="When value is equal to 'true' it indicating that domain instances when presented to user should be sorted alphabetically, 'false' otherwise. This parameter does not influence sort order of instances when returned by this API",
    )
    defaultSort: Optional[bool] = Field(
        None,
        description="When value is equal to 'true' it indicating that default instance should be shown (to user) first in an alphabetically sorted view, 'false' othrwise. This parameter does not influence sort order of instances when returned by this API",
    )
    instances: Optional[List[EnumInstanceSummary]] = Field(
        None, description="List of the instances that belongs to this domain "
    )
    subsets: Optional[List[EnumSubset]] = Field(
        None, description="List of subsets that belongs to this domain"
    )
    _links: Optional[Dict[str, _Links]] = Field(
        None,
        description="Links to related objects (in this case: self and instances)",
        example="{'self': '','instances': ''}",
    )


class EnumDomains(BaseModel):
    elements: Optional[List[EnumDomain]] = None
    totalSize: Optional[int] = Field(
        None,
        description="<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
    )
    hasMoreElements: Optional[bool] = Field(
        None,
        description="<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>",
    )
    meta: Optional[Dict[str, Meta]] = None
    _links: Optional[Dict[str, _Links]] = None


class EnumInstance(BaseModel):
    id: Optional[str] = Field(None, description="Enum instance ID (unique in the domain)")
    name: Optional[str] = Field(None, description="Enum instance name")
    domainId: Optional[int] = Field(
        None, description="Enum Domain ID, corresponds to <code>domainId</code>"
    )
    fullId: Optional[int] = Field(
        None, description="Enum instance fullId, corresponds to <code>TaEnum.fullId</code>"
    )
    domainName: Optional[str] = Field(
        None, description="Name of domain to which this instance belongs to"
    )
    retired: Optional[bool] = Field(
        None,
        description="If <code>true</code> retired Instances only are returned,if <code>false</code>(or not specified) non-retired instances only are returned",
    )
    startDate: Optional[date] = Field(None, description="Date at which the Enum was activated")
    endDate: Optional[date] = Field(
        None,
        description="Date at which the Enum will become inactive (since that date, enum should be considered inactive)",
    )
    dOrder: Optional[int] = Field(
        None,
        description="Denotes the order the Enum resides within all Enum Instances within Domain",
    )
    subsets: Optional[List[EnumSubsetSummary]] = Field(
        None, description="List of subsets to which this instance belongs to"
    )
    _links: Optional[Dict[str, _Links]] = Field(
        None,
        description="Links to related objects (in this case: SELF and DOMAIN)",
        example="{'self': '','domain': ''}",
    )


class EnumInstances(BaseModel):
    elements: Optional[List[EnumInstance]] = None
    totalSize: Optional[int] = Field(
        None,
        description="<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
    )
    hasMoreElements: Optional[bool] = Field(
        None,
        description="<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>",
    )
    meta: Optional[Dict[str, Meta]] = None
    _links: Optional[Dict[str, _Links]] = None


class CancelLeavePeriodsDetails(BaseModel):
    reason: str = Field(
        ...,
        description="Reason for the leave period change request (EnumDomainId=6870). For example, valid reasons for requesting the removal of one or more leave periods are 'Employee Requested Removal' and 'Created in Error'. Valid reasons for requesting the addition of a leave period are 'Add time for identical Absence Reason', 'Add time for different Absence Reason', 'Add time for unknown Absence Reason'",
    )
    additionalNotes: Optional[str] = Field(
        None, description="Additional notes for leave period change request."
    )
    changeRequestPeriods: List[CancellationPeriod] = Field(
        ..., description="List of periods for leave period change request."
    )


class GroupClientAccommodationCase(BaseModel):
    id: Optional[str] = Field(None, description="Unique identifier for the resource.")
    caseReference: Optional[str] = Field(None, description="Business identifier for this case.")
    notificationDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    caseHandler: Optional[CaseHandler] = None
    pregnancyRelated: Optional[str] = Field(
        None,
        description="Identifies whether the accommodation being requested is related to an employee's pregnancy.",
    )
    decisionDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    phase: Optional[str] = Field(
        None,
        description="Current phase in the Interactive Accommodation Process required by the Americans With Disabilities Act (ADA) and configured in the system, for example, 'Assessment'.",
    )
    stage: Optional[str] = Field(
        None,
        description="Current stage in the Interactive Accommodation Process and configured in the system, for example, 'Evaluate Accommodation Options'.",
    )
    closureReasons: Optional[List[str]] = Field(
        None, description="List of reasons given if the case is not being accommodated."
    )
    accommodations: Optional[List[GroupClientAccommodationDetail]] = Field(
        None, description="List of accommodations contained in the case."
    )
    limitations: Optional[List[str]] = Field(
        None,
        description="List of limitations the employee has that they require an accommodation in their job.",
    )
    notificationCase: Optional[NotificationCase] = None
    employee: Optional[Employee] = None


class Decision(BaseModel):
    absence: Optional[Absence] = None
    employee: Optional[Employee] = None
    period: Optional[Period] = None


class PeriodDecisions(BaseModel):
    startDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    endDate: Optional[date] = Field(None, description="ISO 8601 date format", example="1999-12-31")
    decisions: Optional[List[Decision]] = Field(
        None, description="List of Period Decisions for the given absence or employee"
    )


class ExtensionAttribute(BaseModel):
    name: str = Field(
        ..., description="The name of the attribute which extends standard claim set of attributes."
    )
    stringValue: Optional[str] = Field(
        None, description="Value of the class extension attribute of a string type."
    )
    booleanValue: Optional[bool] = Field(
        None, description="Value of the class extension attribute of a boolean type."
    )
    dateOnlyValue: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    decimalValue: Optional[float] = Field(
        None, description="Value of the class extension attribute of a Decimal type."
    )
    enumValue: Optional[ModelEnum] = None
    moneyValue: Optional[str] = Field(
        None, description="Value of the class extension attribute of a Money type."
    )
    integerValue: Optional[int] = Field(
        None, description="Value of the class extension attribute of a string type."
    )


class NotificationClaimSummary(BaseModel):
    claimId: str = Field(
        ..., description="The claim number of the claim", max_length=256, min_length=0
    )
    claimType: str = Field(
        ...,
        description="The name by which the claim type is referred.",
        max_length=50,
        min_length=0,
    )
    creationDate: Optional[datetime] = Field(
        None, description="ISO 8601 date time format", example="1999-12-31T23:59:59Z"
    )
    effectiveDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    customerName: Optional[str] = Field(
        None, description="The customer name of the claim", max_length=256, min_length=0
    )
    policyReferences: Optional[str] = Field(
        None,
        description="The reference(s) to the policy from within the relevant admin system.",
        max_length=50,
        min_length=0,
    )
    description: Optional[str] = Field(
        None,
        description="Description for this case as entered by the user.",
        max_length=2000,
        min_length=0,
    )
    status: Optional[str] = Field(
        None,
        description="This is the stage in the process that the case is currently at.",
        max_length=10,
        min_length=0,
    )
    claimHandler: Optional[str] = Field(
        None, description="The Person that is handling the claim.", max_length=50, min_length=0
    )
    claimHandlerEmailAddress: Optional[str] = Field(
        None, description="The email address of the claim handler.", max_length=40, min_length=0
    )
    claimHandlerPhoneNo: Optional[str] = Field(
        None, description="The phone number of the claim handler.", max_length=20, min_length=0
    )
    notificationDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    caseComplexity: Optional[str] = Field(None, description="Case complexity on Claim")
    stageName: Optional[str] = Field(None, description="The current stage of claim case.")
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain extension information.",
    )


class GroupClientDocument(BaseModel):
    caseId: Optional[str] = None
    rootCaseId: Optional[str] = None
    documentId: int = Field(..., description="The document Id")
    name: str = Field(
        ...,
        description="The short business description of the document type",
        max_length=200,
        min_length=0,
    )
    type: str = Field(
        ...,
        description="The form of the document e.g. image, email, document",
        max_length=100,
        min_length=0,
    )
    fileExtension: Optional[str] = Field(
        None,
        description="The file extension of the document. e.g. .doc for MS Word.",
        max_length=20,
        min_length=0,
    )
    fileName: Optional[str] = Field(
        None,
        description="An external reference to the document. This can be a docid or a path and filename.",
        max_length=400,
        min_length=0,
    )
    originalFilename: Optional[str] = Field(
        None, description="The original attachment filename.", max_length=300, min_length=0
    )
    receivedDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    effectiveFrom: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    effectiveTo: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    description: Optional[str] = Field(
        None,
        description="User solicitied description of this document.",
        max_length=4000,
        min_length=0,
    )
    title: Optional[str] = Field(
        None, description="The title of the document.", max_length=2000, min_length=0
    )
    isRead: Optional[bool] = None
    createdBy: Optional[str] = Field(
        None, description="The User name who created a document.", max_length=60, min_length=0
    )
    dateCreated: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    extensionAttributes: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain document (OCDocumentBase) extension information.",
    )
    status: Optional[str] = Field(None, description="The status of the document.")
    privacyTag: Optional[str] = Field(
        None, description="The privacyTag secure action of the document."
    )
    readForMyOrganisation: Optional[bool] = Field(
        None,
        description="The read status of the document by other group client from same Organisation.",
    )


class CaseContactSummary(BaseModel):
    contactId: Optional[int] = Field(None, description="The ID of the contact")
    date: Optional[date] = Field(None, description="ISO 8601 date format", example="1999-12-31")
    reason: Optional[str] = Field(None, description="The reason for the contact")
    methodOfContact: Optional[str] = Field(
        None, description="The method of contact. E.g. Email, Phone etc."
    )
    direction: Optional[str] = Field(None, description="Whether it is incoming or outgoing contact")
    description: Optional[str] = Field(None, description="The contact description")
    outcome: Optional[str] = Field(
        None, description="The outcome of the contact e.g. Unknown, Sale, No Sale, No Show etc."
    )
    manner: Optional[str] = Field(
        None,
        description="The manner of the person making the contact e.g. Interested, Uninterested etc.",
    )
    customerName: Optional[str] = Field(None, description="The party with whom contact was made.")
    customerRepresentative: Optional[str] = Field(None, description="The customer representative.")
    durationInMinutes: Optional[int] = Field(
        None, description="The duration of the contact in minutes"
    )
    classAttributes: Optional[List[ExtensionAttribute]] = Field(
        None, description="Optional extension properties"
    )


class ClaimSummary(BaseModel):
    claimId: str = Field(
        ..., description="The claim number of the claim", max_length=256, min_length=0
    )
    claimType: str = Field(
        ...,
        description="The name by which the claim type is referred.",
        max_length=50,
        min_length=0,
    )
    creationDate: Optional[datetime] = Field(
        None, description="ISO 8601 date time format", example="1999-12-31T23:59:59Z"
    )
    effectiveDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    customerName: Optional[str] = Field(
        None, description="The customer name of the claim", max_length=256, min_length=0
    )
    policyReferences: Optional[str] = Field(
        None,
        description="The reference(s) to the policy from within the relevant admin system.",
        max_length=50,
        min_length=0,
    )
    description: Optional[str] = Field(
        None,
        description="Description for this case as entered by the user.",
        max_length=2000,
        min_length=0,
    )
    status: Optional[str] = Field(
        None,
        description="This is the stage in the process that the case is currently at.",
        max_length=10,
        min_length=0,
    )
    claimHandler: Optional[str] = Field(
        None, description="The Person that is handling the claim.", max_length=50, min_length=0
    )
    claimHandlerEmailAddress: Optional[str] = Field(
        None, description="The email address of the claim handler.", max_length=40, min_length=0
    )
    claimHandlerPhoneNo: Optional[str] = Field(
        None, description="The phone number of the claim handler.", max_length=20, min_length=0
    )
    notificationDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    caseComplexity: Optional[str] = Field(None, description="Case complexity on Claim")
    stageName: Optional[str] = Field(None, description="The current stage of claim case.")
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain extension information.",
    )
    notificationCaseId: Optional[str] = Field(
        None,
        description="The notification case number of the claim case if applicable.",
        max_length=256,
        min_length=0,
    )


class Address(BaseModel):
    premiseNo: Optional[str] = Field(
        None, description="This is the premise number", max_length=5, min_length=0
    )
    addressLine1: Optional[str] = Field(
        None, description="Address Line 1", max_length=40, min_length=0
    )
    addressLine2: Optional[str] = Field(
        None, description="Address Line 2", max_length=40, min_length=0
    )
    addressLine3: Optional[str] = Field(
        None, description="Address Line 3", max_length=40, min_length=0
    )
    addressLine4: Optional[str] = Field(
        None, description="Address Line 4", max_length=40, min_length=0
    )
    addressLine5: Optional[str] = Field(
        None, description="Address Line 5", max_length=40, min_length=0
    )
    addressLine6: Optional[str] = Field(
        None, description="Address Line 6", max_length=40, min_length=0
    )
    addressLine7: Optional[str] = Field(
        None, description="Address Line 7", max_length=40, min_length=0
    )
    postCode: Optional[str] = Field(
        None, description="International Postcode", max_length=40, min_length=0
    )
    country: str = Field(..., description="Country", max_length=100, min_length=0)
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain claim extension information.",
    )


class ExtendedAddress(BaseModel):
    buildingName1: Optional[str] = Field(
        None, description="The name of the building.", max_length=30, min_length=0
    )
    buildingName2: Optional[str] = Field(
        None, description="The name of the building continued.", max_length=30, min_length=0
    )
    floorLevelType: Optional[str] = Field(
        None, description="Type of floor level description.", max_length=10, min_length=0
    )
    floorLevelNumber: Optional[str] = Field(
        None, description="The number of floor level.", max_length=2, min_length=0
    )
    premiseNoSuffix: Optional[str] = Field(
        None,
        description="The suffix to apply to the number of the premise.",
        max_length=1,
        min_length=0,
    )
    premiseNoTo: Optional[float] = Field(
        None, description="The high number in a range for the premise.", ge=0.0, le=5.0
    )
    premiseNoToSuffix: Optional[str] = Field(
        None,
        description="The suffix to apply to the number to of the premise.",
        max_length=1,
        min_length=0,
    )
    streetSuffix: Optional[str] = Field(
        None, description="The suffix for the street.", max_length=10, min_length=0
    )
    postalType: Optional[str] = Field(
        None,
        description="The postal type - PO Box, Roadside Mail Box etc.",
        max_length=10,
        min_length=0,
    )
    postalNumber: Optional[str] = Field(
        None, description="The postal number.", max_length=11, min_length=0
    )
    lotNumber: Optional[str] = Field(
        None, description="The lot number.", max_length=6, min_length=0
    )
    dpid: Optional[float] = Field(
        None, description="DPID - 8 digit Australian post address identifier.", ge=0.0, le=8.0
    )
    postalNumberPrefix: Optional[str] = Field(
        None,
        description="This refers to the non-numeric portion preceding the Postal Number.",
        max_length=3,
        min_length=0,
    )
    postalNumberSuffix: Optional[str] = Field(
        None,
        description="This refers to the non-numeric portion following the Postal Number.",
        max_length=3,
        min_length=0,
    )
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain claim extension information.",
    )


class GetCustomerResponse(BaseModel):
    customerNumber: str = Field(
        ...,
        description="The unique identifier for persons in the system.",
        max_length=50,
        min_length=0,
    )
    firstName: str = Field(..., description="Person's first name.", max_length=50, min_length=0)
    lastName: str = Field(..., description="Person's last name.", max_length=50, min_length=0)
    dateOfBirth: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    identificationNumber: Optional[str] = Field(
        None, description="ID number of the customer.", max_length=10, min_length=0
    )
    phoneNumber: Optional[GroupClientCustomerPhoneNumber] = None
    emailAddress: Optional[str] = None


class PaymentLineDetails(BaseModel):
    adjustmentId: Optional[str] = Field(
        None, description="Business Entity OID", example="PE-00012-0000001234"
    )
    amount: Optional[str] = Field(
        None, description="Money amount format", example="1500.50", max_length=28, min_length=0
    )
    startDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    endDate: Optional[date] = Field(None, description="ISO 8601 date format", example="1999-12-31")
    calcDetails: Optional[List[str]] = Field(
        None, description="The Calculation Details that explain how each adjustment is calculated. "
    )
    payee: Optional[str] = Field(
        None,
        description="The name of the Payee which the payment adjustment belongs.",
        max_length=100,
        min_length=0,
    )
    adjustmentTypeId: Optional[str] = Field(
        None, description="Business Entity OID", example="PE-00012-0000001234"
    )
    fixedAmountIncreaseInstructionClassExtension: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain OLFixedAmountIncreaseInstruction extension information.",
    )
    adjustmentCalcDetailClassExtension: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain OLAdjustmentCalcDetail extension information.",
    )


class EForm(BaseModel):
    eformType: Optional[str] = Field(
        None, description="Name of the EForm document type", max_length=200, min_length=0
    )
    eformId: int = Field(..., description="Unique automatically generated Id of an EForm document.")
    eformAttributes: Optional[List[EFormAttribute]] = Field(
        None, description="An array of EForm attributes."
    )


class EmailAddress(BaseModel):
    id: int = Field(
        ...,
        description="The id of the contact method (e.g. phone / mobile / emailAddress) ",
        ge=0.0,
        le=10.0,
    )
    preferred: Optional[bool] = None
    emailAddress: Optional[str] = Field(
        None, description="Customers email address.", max_length=120, min_length=0
    )
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain email Address extension information.",
    )


class PhoneNumber(BaseModel):
    id: int = Field(
        ...,
        description="The id of the contact method (e.g. phone / mobile / emailAddress) ",
        ge=0.0,
        le=10.0,
    )
    preferred: Optional[bool] = None
    phoneNumberType: str = Field(
        ...,
        description="The type of phone number (e.g. landline / mobile)",
        max_length=10,
        min_length=0,
    )
    intCode: Optional[str] = Field(
        None, description="international code value", max_length=10, min_length=0
    )
    areaCode: Optional[str] = Field(
        None, description="area code value", max_length=20, min_length=0
    )
    telephoneNo: Optional[str] = Field(
        None, description="telephone No. value", max_length=10, min_length=0
    )
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain phone number (OCPhone) extension information.",
    )


class ManagedRequirementDetails(BaseModel):
    managedReqId: int = Field(..., description="the identifier for this managed requirement.")
    category: str = Field(
        ...,
        description="The category name of the managed requirement.",
        max_length=50,
        min_length=0,
    )
    type: str = Field(
        ...,
        description="The name of the type of the managed requirement.",
        max_length=50,
        min_length=0,
    )
    dateRequested: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    notProceedingWithDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    dateLastFollowedUp: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    followUpDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    description: Optional[str] = Field(
        None,
        description="A text description of the outstanding requirement or information.",
        max_length=250,
        min_length=0,
    )
    status: Optional[str] = Field(
        None,
        description="The current status of this Managed Requirement. ",
        max_length=100,
        min_length=0,
    )
    dateCompleted: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    documentReceived: bool = Field(
        ...,
        description="Indicates that a document has been received for this managed requirement. Returns true if the managed requirement is linked to a document that this user can access,otherwise returns false.",
    )
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain managed requirement (OCManagedRequirement) extension information.",
    )
    creator: str = Field(..., description="the creator for this managed requirement.")
    subjectPartyName: str = Field(
        ..., description="The subject party name of the managed requirement."
    )
    sourceOfInfoPartyName: str = Field(
        ..., description="The source of info party name of the managed requirement."
    )
    creationDate: date = Field(..., description="ISO 8601 date format", example="1999-12-31")
    dateSuppressed: date = Field(..., description="ISO 8601 date format", example="1999-12-31")


class Payment(BaseModel):
    paymentId: Optional[str] = Field(
        None, description="Business Entity OID", example="PE-00012-0000001234"
    )
    benefitCaseNumber: Optional[str] = Field(None, description="The Benefit Case Number.")
    dateInterfaceRecordCreated: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    rootCaseNumber: Optional[str] = None
    benefitCaseTypeName: Optional[str] = None
    benefitRightTypeName: Optional[str] = None
    paymentDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    effectiveDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    periodStartDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    periodEndDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    paymentType: Optional[str] = Field(
        None, description="The payment type e.g. recurring, adhoc etc", max_length=250, min_length=0
    )
    paymentMethod: Optional[str] = Field(
        None,
        description="The method used to transfer the payment e.g. EFT, Hand Typed Check etc.",
        max_length=256,
        min_length=0,
    )
    paymentAmount: Optional[str] = Field(None, description="Money amount format", example="1500.50")
    payeeName: Optional[str] = Field(
        None, description="The party to whom the payment was made", max_length=256, min_length=0
    )
    nominatedPayeeName: Optional[str] = Field(
        None,
        description="The party the payee nominated to receive payment",
        max_length=256,
        min_length=0,
    )
    paymentAddress: Optional[str] = Field(
        None, description="The address the payment was sent to", max_length=256, min_length=0
    )
    accountTransferInfo: Optional[AccountTransferInfo] = None
    chequePaymentInfo: Optional[ChequePaymentInfo] = None
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain payments (OLPaymentEventInterface) extension information.",
    )


class DisabilityClaim(BaseModel):
    claimIncurredDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    eventType: Optional[str] = Field(
        None,
        description="The type of event which occurred which led to the disability claim e.g. Accident or Sickness.",
        max_length=10,
        min_length=0,
    )
    reasonForClaimEffectiveDateChange: Optional[str] = Field(
        None,
        description="Allows a reason to be recorded for a change to the claim's effective date.",
        max_length=10,
        min_length=0,
    )
    claimAdditionalInfo: Optional[str] = Field(
        None,
        description="Additional incident details relevant to the claim.",
        max_length=4000,
        min_length=0,
    )
    disabilityDateFromCustomer: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    accidentDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    notificationDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    workRelated: Optional[bool] = Field(
        None, description="Indicates whether the event was work related or not."
    )
    numberOfDependents: Optional[int] = Field(
        None,
        description="The number of dependents for the Customer relevant to this Claim",
        ge=0.0,
        le=10.0,
    )
    claimType: Optional[str] = Field(
        None,
        description="This field can be used to capture the type of claim. This is a descriptive attribute which can be changed over the life of the claim",
        max_length=10,
        min_length=0,
    )
    source: Optional[str] = Field(
        None,
        description="Describes how the claim was initiated, i.e. on-line, phone call, paper application form, customer portal.",
        max_length=10,
        min_length=0,
    )
    dateSymptomsFirstAppeared: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    expectedReturnToWorkDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    firstDayMissedWork: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    dismembermentOrLoss: Optional[str] = Field(
        None,
        description="Dismemberment/Loss injuries sustained by the customer.",
        max_length=10,
        min_length=0,
    )
    hoursWorked: Optional[float] = Field(
        None, description="Number of hours worked", ge=0.0, le=13.0
    )
    insuredSpouseWorking: Optional[bool] = Field(
        None, description="Indicates if the spouse of the insured is currently working."
    )
    salaryCountNumDays: Optional[int] = Field(
        None,
        description="Salary Continuance Number of Days - Number of days beyond the disability date insured received full pay",
        ge=0.0,
        le=5.0,
    )
    workHistory: Optional[str] = Field(
        None,
        description="This lists the work history of the insured including occupational, job duty as well as when the insured was employed at these jobs.  Used for any/all and LCDD decisions as well as assisting with job  placement strategy development of the vocational consultant.",
        max_length=256,
        min_length=0,
    )
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain claim extension information.",
    )
    employerDateLastWorked: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )


class ReadDisabilityResult(BaseModel):
    claimSummary: Optional[ClaimSummary] = None
    disabilityClaim: Optional[DisabilityClaim] = None
    customerDateOfBirth: Optional[datetime] = Field(
        None, description="ISO 8601 date time format", example="1999-12-31T23:59:59Z"
    )
    claimReopened: Optional[bool] = Field(
        None, description="This value is used to inform the group client if the claim is reopened."
    )


class PersonDetails(BaseModel):
    gender: Optional[str] = Field(
        None, description="The person's gender.", max_length=100, min_length=0
    )
    dateOfBirth: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    maritalStatus: Optional[str] = Field(
        None,
        description="Person's marital status - single / married / etc.",
        max_length=100,
        min_length=0,
    )
    nationality: Optional[str] = Field(
        None, description="Person's nationality.", max_length=100, min_length=0
    )
    needsInterpretor: Optional[bool] = Field(
        None, description="Indicates if the customer needs an interpreter."
    )
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain customer (OCPerson) extension information.",
    )


class ParticipantContactDetails(BaseModel):
    phoneNumbers: Optional[List[PhoneNumber]] = Field(
        None, description="Return list of phone numbers"
    )
    emailAddresses: Optional[List[EmailAddress]] = Field(
        None, description="Return list of email addresses"
    )
    preferredContactMethod: Optional[int] = Field(
        None,
        description="Return the preferred contact method i.e. either the id of the preferred phone number or id of the preferred email address",
    )


class BenefitSummary(BaseModel):
    benefitId: Optional[str] = Field(None, description="The case number of the benefit.")
    benefitCaseType: Optional[str] = Field(
        None, description="The name by which the benefit type is referred."
    )
    creationDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    benefitIncurredDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    customerName: Optional[str] = Field(None, description="The full name of the customer.")
    policyReferences: Optional[str] = Field(
        None, description="The reference(s) to the policy from within the relevant admin system."
    )
    description: Optional[str] = Field(
        None, description="Description for this case as entered by the user."
    )
    status: Optional[str] = Field(
        None, description="This is the stage in the process that the case is currently at."
    )
    benefitHandler: Optional[str] = Field(
        None, description="The person that is handling the benefit."
    )
    benefitHandlerPhoneNo: Optional[str] = Field(
        None, description="The phone number of the benefit handler."
    )
    benefitHandlerEmailAddress: Optional[str] = Field(
        None, description="The email address of the benefit handler."
    )
    benefitRightCategory: Optional[str] = Field(
        None, description="Information about the category of the benefit right."
    )
    stageName: Optional[str] = Field(None, description="The current stage of benefit claim case.")
    extensionAttributes: Optional[List[ExtensionAttribute]] = Field(
        None, description="Extra attributes from extension if any."
    )


class DisabilityBenefit(BaseModel):
    benefitIncurredDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    brokerAuthorisationFlag: Optional[bool] = Field(
        None,
        description="Flag that indicates if the broker is to be included in the correspondence.",
    )
    initialNotificationDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    notificationReceivedDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    overrideClaimIncurredDate: Optional[bool] = Field(
        None,
        description="Indicator which specifies that the benefit level incurred date should be used rather than the claim level incurred date.",
    )
    startDateOfBenefitForClaim: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    sourceOfRequest: Optional[str] = Field(
        None,
        description="The type of source that is requesting the benefit, such as claimant, guardian, or medical officer.",
    )
    earliestDateForClaimPayment: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    employeeContributionPercentage: Optional[float] = Field(
        None, description="Percentage representing the Employee Contribution Percentage."
    )
    isReimbursement: Optional[bool] = Field(
        None, description="Indicates if the benefit is paid as a reimbursement or not."
    )
    lateEnrollmentPeriod: Optional[int] = Field(
        None,
        description="Period after enrolment date when customer has to wait for coverage to become eligible.",
    )
    latestDateForClaimPayment: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    minimumQualifyPeriod: Optional[int] = Field(
        None,
        description="Period of time policy has to be in force before the minimum benefit provision can be applied.",
    )
    employerContributionPercentage: Optional[float] = Field(
        None,
        description="Indicates the percent of the payment that is taxable. Typically used as the Employer contribution.",
    )
    isUnderwritten: Optional[bool] = Field(
        None,
        description="Indicates whether or not the member has been underwritten in order to have additional cover beyond what the group membership offers.",
    )
    policyWaitingPeriod: Optional[int] = Field(
        None,
        description="Period of time that the policy must be in force before the insured qualifies for coverage.",
    )
    benefitType: Optional[str] = Field(
        None,
        description="Type of a benefit right such as Disability Income - STD, Disability Income LTD, Accelerated Death Benefit or Accidental Death Benefit.",
    )
    basisOfMinimumQualifyPeriod: Optional[str] = Field(
        None,
        description="Basis of the period of time policy has to be in force before the minimum benefit provision can be applied (i.e. day, week month or year).",
    )
    basisOfLateEnrollmentPeriod: Optional[str] = Field(
        None,
        description="Basis of the period after enrolment date when customer has to wait for coverage to become eligible (i.e. day, week month or year).",
    )
    basisOfPolicyWaitingPeriod: Optional[str] = Field(
        None,
        description="Basis of the period of time that the policy must be in force before the insured qualifies for coverage (i.e. day, week month or year).",
    )
    amountType: Optional[str] = Field(
        None,
        description="Indicates the basis upon which the benefit is calculated, examples might be fixed amount basis, salary percentage basis or tiered basis.",
    )
    employeeContributionStatus: Optional[str] = Field(
        None,
        description="Field which indicates whether a policy is contributory or non-contributory.",
    )
    accidentEliminationPeriod: Optional[int] = Field(
        None, description="Elimination Period units for accident."
    )
    eliminationPeriod: Optional[int] = Field(None, description="The number of Elimination Days.")
    hospitalEliminationPeriod: Optional[int] = Field(
        None, description="Elimination Period for hospitalisation."
    )
    hospitalizationClauseApplies: Optional[bool] = Field(
        None, description="Indicator which determines whether the Hospitalization clause applies."
    )
    basisOfEliminationPeriod: Optional[str] = Field(
        None, description="Basis for elimination period."
    )
    basisOfAccidentEliminationPeriod: Optional[str] = Field(
        None, description="Basis for elimination period for accident."
    )
    hospitalBasisOfEliminationPeriod: Optional[str] = Field(
        None, description="Basis for elimination period for hospitalisation."
    )
    accidentMaxBenefitPeriod: Optional[int] = Field(
        None,
        description="Number of units in the maximum period for an accident. The maximum length of the period to be paid if the customer remains disabled.",
    )
    hospitalMaxBenefitPeriod: Optional[int] = Field(
        None, description="Number of units in the maximum period for hospitalization."
    )
    maxBenefitPeriod: Optional[int] = Field(
        None,
        description="Number of units in the maximum benefit period. The maximum length of the period to be paid if the claimant remains disabled",
    )
    minBenefitPeriod: Optional[int] = Field(
        None,
        description="Number of units in the minimum benefit period. The minimum length of the period to be paid if the claimant remains disabled.",
    )
    basisOfMinBenefitPeriod: Optional[str] = Field(
        None,
        description="Basis of the minimum benefit period. The minimum length of the period to be paid if the claimant remains disabled.",
    )
    basisOfMaxBenefitPeriod: Optional[str] = Field(
        None,
        description="Basis of the maximum benefit period. The maximum length of the period to be paid if the claimant remains disabled.",
    )
    accidentBasisOfMaxBenefitPeriod: Optional[str] = Field(
        None, description="Basis for the maximum period for an accident."
    )
    hospitalBasisOfMaxBenefitPeriod: Optional[str] = Field(
        None, description="Basis of the maximum period for hospitalization."
    )
    benefitStartDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    benefitEndDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    frequencyAmount: Optional[str] = Field(
        None, description="Money amount format", example="1500.50"
    )
    adviceToPayOverride: Optional[str] = Field(
        None,
        description="The advice provided by the insurer with regard to an individual benefit can be overridden by the employer, either regarding the decision (to pay or not to pay) or the calculated amount.",
    )
    administrationType: Optional[str] = Field(
        None, description="Specify the AdministrationType for the Funding Arrangement."
    )
    serviceLevel: Optional[str] = Field(
        None,
        description='Specify the ServiceLevel for the Funding Arrangement when AdministrationType is "ASO - Advice To Pay"',
    )
    extensionAttributes: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="The array will contain extension attributes from Benefit and Benefit Right objects.",
    )
    expectedResolutionDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    approvedThroughDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    periodType: Optional[str] = Field(
        None,
        description="The type of Benefit Period used to derive the Approved Through Date. Indicates whether the approval is for a fully certified or partially certified period.",
    )
    percentTaxable: Optional[float] = Field(
        None, description="The percent of the payment that is taxable."
    )
    percentageNonTaxable: Optional[float] = Field(
        None, description="The Employee Contribution Percentage"
    )
    employeePremiumTaxation: Optional[str] = Field(
        None, description="The employee portion of the contribution was made pre or post tax."
    )
    employerPremiumTaxation: Optional[str] = Field(
        None, description="The employer portion of the contribution was made pre tax or gross up."
    )


class ReadDisabilityBenefitResult(BaseModel):
    benefitSummary: Optional[BenefitSummary] = None
    disabilityBenefit: Optional[DisabilityBenefit] = None
    certificationPeriods: Optional[List[CertificationPeriodDetails]] = Field(
        None, description="The certification period details of the disability benefit."
    )


class LumpSumBenefit(BaseModel):
    benefitIncurredDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    brokerAuthorisationFlag: Optional[bool] = Field(
        None,
        description="Flag that indicates if the broker is to be included in the correspondence.",
    )
    initialNotificationDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    notificationReceivedDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    overrideClaimIncurredDate: Optional[bool] = Field(
        None,
        description="Indicator which specifies that the benefit level incurred date should be used rather than the claim level incurred date.",
    )
    startDateOfBenefitForClaim: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    sourceOfRequest: Optional[str] = Field(
        None,
        description="The type of source that is requesting the benefit, such as claimant, guardian, or medical officer.",
    )
    effectiveDateForCoverage: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    benefitExpiryDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    isUnderwritten: Optional[bool] = Field(
        None,
        description="Indicates whether or not the member has been underwritten in order to have additional cover beyond what the group membership offers.",
    )
    policyWaitingPeriod: Optional[int] = Field(
        None,
        description="Period of time that the policy must be in force before the insured qualifies for coverage.",
    )
    benefitType: Optional[str] = Field(
        None,
        description="Type of a benefit right such as Disability Income - STD, Disability Income LTD, Accelerated Death Benefit or Accidental Death Benefit.",
    )
    basisOfPolicyWaitingPeriod: Optional[str] = Field(
        None,
        description="Basis of the period of time that the policy must be in force before the insured qualifies for coverage (i.e. day, week month or year).",
    )
    amountType: Optional[str] = Field(
        None,
        description="Indicates the basis upon which the benefit is calculated, examples might be fixed amount basis, salary percentage basis or tiered basis.",
    )
    flatAmount: Optional[str] = Field(None, description="Money amount format", example="1500.50")
    sumInsuredAtIncurredDate: Optional[str] = Field(
        None, description="Money amount format", example="1500.50"
    )
    maximumBenefitExpiryAge: Optional[int] = Field(
        None, description="Maximum Age to be eligible to receive benefit."
    )
    extensionAttributes: Optional[List[ExtensionAttribute]] = Field(
        None, description="Extra attributes from extension if any."
    )


class ReadLumpSumBenefitResult(BaseModel):
    benefitSummary: Optional[BenefitSummary] = None
    lumpSumBenefit: Optional[LumpSumBenefit] = None


class AccountDetails(BaseModel):
    bankCode: Optional[str] = Field(None, description="The Bank Code", max_length=4, min_length=0)
    accountNo: str = Field(
        ..., description="The Account number of the personal account", max_length=256, min_length=0
    )
    accountName: str = Field(
        ..., description="Name of the account holder", max_length=256, min_length=0
    )
    routingNumber: str = Field(
        ..., description="Sort code of the Bank", max_length=256, min_length=0
    )
    accountType: Optional[str] = Field(
        None, description="Account type of the bank", max_length=256, min_length=0
    )
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain claim extension information.",
    )


class EarningsResponse(BaseModel):
    salaryAmountBasis: Optional[str] = Field(
        None, description="Basis for salary amount being used."
    )
    effectiveDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    endDate: Optional[date] = Field(None, description="ISO 8601 date format", example="1999-12-31")
    notes: Optional[str] = Field(
        None, description="Notes relating to the earnings period.", max_length=200, min_length=0
    )
    earningsBasis: str = Field(..., description="The earnings frequency.")
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain Earnings extension information.",
    )
    earningsId: int = Field(
        ..., description="The unique identifier for the earnings record.", ge=0.0, le=32.0
    )
    earningsType: str = Field(
        ...,
        description="The type of earnings record, it could refer to pre-disability, partial or salary.",
    )
    periodInWeeks: int = Field(
        ..., description="Period in weeks between Effective Date and End Date of Earnings record."
    )
    weeklyBasisEarningAmountsResponse: Optional[WeeklyBasisEarningAmountsResponse] = None
    monthlyBasisEarningAmountsResponse: Optional[MonthlyBasisEarningAmountsResponse] = None


class WeeklyEarningsRequest(BaseModel):
    salaryAmountBasis: Optional[str] = Field(
        None, description="Basis for salary amount being used."
    )
    effectiveDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    endDate: Optional[date] = Field(None, description="ISO 8601 date format", example="1999-12-31")
    notes: Optional[str] = Field(
        None, description="Notes relating to the earnings period.", max_length=200, min_length=0
    )
    earningsBasis: str = Field(..., description="The earnings frequency.")
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain Earnings extension information.",
    )
    weeklyBasisEarningAmountsRequest: Optional[WeeklyBasisEarningAmountsRequest] = None


class ReadOccupation(BaseModel):
    dateJobBegan: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    dateJobEnded: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    daysWorkedPerWeek: Optional[float] = Field(
        None, description="The number of days worked per week."
    )
    employer: Optional[str] = Field(None, description="The name of the employer.")
    endPosReason: Optional[str] = Field(None, description="The reason for job ending.")
    hoursWorkedPerWeek: Optional[float] = Field(
        None, description="The number of hours worked per week."
    )
    jobDesc: Optional[str] = Field(None, description="The job description.")
    jobTitle: Optional[str] = Field(None, description="The job title.")
    remarks: Optional[str] = Field(None, description="The occupation remarks.")
    selfEmployed: Optional[bool] = Field(
        None, description="Is occupation considered self-employed?"
    )
    workScheduleDescription: Optional[str] = Field(
        None, description="The work schedule description."
    )
    employmentCategory: Optional[str] = Field(None, description="The employment category.")
    jobStrenuous: Optional[str] = Field(None, description="The job strenuous.")
    endEmploymentReason: Optional[str] = Field(None, description="The code for occupation ending.")
    employmentLocation: Optional[str] = Field(None, description="The employment location code.")
    additionalEmploymentCategory: Optional[str] = Field(
        None, description="The alternate employment category."
    )
    employmentStatus: Optional[str] = Field(None, description="The employment status.")
    employmentTitle: Optional[str] = Field(None, description="The employment title.")
    workPatternBasis: Optional[str] = Field(None, description="The work pattern basis.")
    employeeId: Optional[str] = Field(
        None,
        description="The id of an employee in respect of its employer.",
        max_length=50,
        min_length=0,
    )
    extensionAttributes: Optional[List[ExtensionAttribute]] = Field(
        None, description="The extension attributes."
    )
    primary: Optional[bool] = Field(None, description="Is occupation the primary one?")
    occupationId: Optional[int] = Field(None, description="The occupation ID.")
    codeId: Optional[str] = Field(None, description="The occupation Code ID.")
    codeName: Optional[str] = Field(
        None, description="The name associated with the specific occupation Code ID."
    )
    overrideDaysWorkedPerWeek: Optional[bool] = Field(
        None, description="Is override days worked per week true or false?"
    )


class ClaimOccupation(BaseModel):
    dateJobBegan: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    dateJobEnded: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    daysWorkedPerWeek: Optional[float] = Field(
        None, description="The number of days worked per week."
    )
    employer: Optional[str] = Field(None, description="The name of the employer.")
    endPosReason: Optional[str] = Field(None, description="The reason for job ending.")
    hoursWorkedPerWeek: Optional[float] = Field(
        None, description="The number of hours worked per week."
    )
    jobDesc: Optional[str] = Field(None, description="The job description.")
    jobTitle: Optional[str] = Field(None, description="The job title.")
    remarks: Optional[str] = Field(None, description="The occupation remarks.")
    selfEmployed: Optional[bool] = Field(
        None, description="Is occupation considered self-employed?"
    )
    workScheduleDescription: Optional[str] = Field(
        None, description="The work schedule description."
    )
    employmentCategory: Optional[str] = Field(None, description="The employment category.")
    jobStrenuous: Optional[str] = Field(None, description="The job strenuous.")
    endEmploymentReason: Optional[str] = Field(None, description="The code for occupation ending.")
    employmentLocation: Optional[str] = Field(None, description="The employment location code.")
    additionalEmploymentCategory: Optional[str] = Field(
        None, description="The alternate employment category."
    )
    employmentStatus: Optional[str] = Field(None, description="The employment status.")
    employmentTitle: Optional[str] = Field(None, description="The employment title.")
    workPatternBasis: Optional[str] = Field(None, description="The work pattern basis.")
    employeeId: Optional[str] = Field(
        None,
        description="The id of an employee in respect of its employer.",
        max_length=50,
        min_length=0,
    )
    extensionAttributes: Optional[List[ExtensionAttribute]] = Field(
        None, description="The extension attributes."
    )
    primary: Optional[bool] = Field(None, description="Is occupation the primary one?")


class MonthlyEarningsRequest(BaseModel):
    salaryAmountBasis: Optional[str] = Field(
        None, description="Basis for salary amount being used."
    )
    effectiveDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    endDate: Optional[date] = Field(None, description="ISO 8601 date format", example="1999-12-31")
    notes: Optional[str] = Field(
        None, description="Notes relating to the earnings period.", max_length=200, min_length=0
    )
    earningsBasis: str = Field(..., description="The earnings frequency.")
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain Earnings extension information.",
    )
    monthlyBasisEarningAmountsRequest: Optional[MonthlyBasisEarningAmountsRequest] = None


class MedicalDetailsResponse(BaseModel):
    condition: Optional[str] = Field(
        None, description="A description of the medical condition of the injured party."
    )
    firstDoctorVisitDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    lastReceivedDateMedicalInfo: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    lastRequestedDateMedicalInfo: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    medicalAuthorisationReceivedDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    pregnancyIndicator: Optional[bool] = Field(
        None, description="Indicates whether a person is pregnant or not."
    )
    treatmentPlan: Optional[str] = Field(
        None, description="A description of the treatment plan for the injured party."
    )
    clientDominantSide: Optional[str] = Field(None, description="The claimants dominant side.")
    lifeExpectancy: Optional[str] = Field(
        None,
        description="Projected life expectancy for the injured party based on the current medical information.",
    )
    causeOfInjuryCode: Optional[str] = Field(
        None, description="The code ID that specifies the cause of injury."
    )
    extensionAttributes: Optional[List[ExtensionAttribute]] = Field(
        None, description="Extension attributes."
    )
    symptomsFirstAppeared: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    description: Optional[str] = Field(None, description="Description of the cause of injury code.")


class HospitalisationDetailsResponse(BaseModel):
    startDate: date = Field(..., description="ISO 8601 date format", example="1999-12-31")
    endDate: Optional[date] = Field(None, description="ISO 8601 date format", example="1999-12-31")
    endDateConfirmed: Optional[bool] = Field(
        None, description="The end date confirmation for the hospitalisation period."
    )
    description: Optional[str] = Field(
        None, description="The description of hospitalisation detail.", max_length=256, min_length=0
    )
    hospitalReason: Optional[str] = Field(
        None, description="The hospitalisation reason for the claim period."
    )
    extensionAttributes: Optional[List[ExtensionAttribute]] = None
    hospitalisationDetailId: str = Field(
        ..., description="Business Entity OID", example="PE-00012-0000001234"
    )
    facility: Optional[str] = Field(None, description="The facilitator(hospital) name.")


class HospitalisationDetails(BaseModel):
    startDate: date = Field(..., description="ISO 8601 date format", example="1999-12-31")
    endDate: Optional[date] = Field(None, description="ISO 8601 date format", example="1999-12-31")
    endDateConfirmed: Optional[bool] = Field(
        None, description="The end date confirmation for the hospitalisation period."
    )
    description: Optional[str] = Field(
        None, description="The description of hospitalisation detail.", max_length=256, min_length=0
    )
    hospitalReason: Optional[str] = Field(
        None, description="The hospitalisation reason for the claim period."
    )
    extensionAttributes: Optional[List[ExtensionAttribute]] = None


class IncomeSourceResponse(BaseModel):
    amount: Optional[str] = Field(None, description="Money amount format", example="1500.50")
    startDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    endDate: Optional[date] = Field(None, description="ISO 8601 date format", example="1999-12-31")
    incomeName: str = Field(..., description="Income source name.", max_length=256, min_length=0)
    incomeType: str = Field(..., description="Type of the income source.")
    frequency: Optional[str] = Field(None, description="Frequency of the income.")
    receivedFrom: Optional[str] = Field(
        None, description="Identify from where the other income source was received."
    )
    extensionAttributes: Optional[List[ExtensionAttribute]] = None
    incomeSourceId: Optional[str] = Field(
        None, description="Business Entity OID", example="PE-00012-0000001234"
    )


class IncomeSource(BaseModel):
    amount: Optional[str] = Field(None, description="Money amount format", example="1500.50")
    startDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    endDate: Optional[date] = Field(None, description="ISO 8601 date format", example="1999-12-31")
    incomeName: str = Field(..., description="Income source name.", max_length=256, min_length=0)
    incomeType: str = Field(..., description="Type of the income source.")
    frequency: Optional[str] = Field(None, description="Frequency of the income.")
    receivedFrom: Optional[str] = Field(
        None, description="Identify from where the other income source was received."
    )
    extensionAttributes: Optional[List[ExtensionAttribute]] = None


class ErrorResponse(BaseModel):
    errors: Optional[List[ApiError]] = None


class BulkCreateActualAbsencePeriodCommand(BaseModel):
    elements: Optional[List[CreateActualAbsencePeriodCommand]] = None


class CreateWeekBasedWorkPatternCommand(BaseModel):
    patternStartDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    patternStatus: Optional[PatternStatusRequest] = None
    workPatternType: WorkPatternTypeRequest
    workWeekStarts: Optional[WorkWeekStartsRequest] = None
    workPatternDays: List[CreateWorkPatternDayCommand] = Field(
        ...,
        description="List of days which make up the pattern. There can be 7, 14, 21 or 28 of these.",
    )


class MedicalDetails(BaseModel):
    condition: Optional[str] = Field(
        None, description="A description of the medical condition of the injured party."
    )
    firstDoctorVisitDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    lastReceivedDateMedicalInfo: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    lastRequestedDateMedicalInfo: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    medicalAuthorisationReceivedDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    pregnancyIndicator: Optional[bool] = Field(
        None, description="Indicates whether a person is pregnant or not."
    )
    treatmentPlan: Optional[str] = Field(
        None, description="A description of the treatment plan for the injured party."
    )
    clientDominantSide: Optional[str] = Field(None, description="The claimants dominant side.")
    lifeExpectancy: Optional[str] = Field(
        None,
        description="Projected life expectancy for the injured party based on the current medical information.",
    )
    causeOfInjuryCode: Optional[str] = Field(
        None, description="The code ID that specifies the cause of injury."
    )
    extensionAttributes: Optional[List[ExtensionAttribute]] = Field(
        None, description="Extension attributes."
    )
    symptomsFirstAppeared: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )


class NotificationCaseSummaryForClaims(BaseModel):
    notificationCaseId: Optional[str] = Field(
        None, description="The case number for the notification case."
    )
    createdDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    notificationReason: Optional[str] = Field(
        None,
        description="Notification reason selected during notification case intake.",
        max_length=100,
        min_length=0,
    )
    notificationDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    status: Optional[str] = Field(
        None,
        description="The notification case status his is the current phase of the notification case managing process.",
    )
    accidentDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    multipleConflictingAccidentDates: Optional[bool] = Field(
        None,
        description="Multiple conflicting accident dates found.If true,accidentDate attribute will be empty.",
    )
    expectedDeliveryDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    actualDeliveryDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    dateFirstMissingWork: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    expectedRTWDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    multipleConflictingExpectedRTWDates: Optional[bool] = Field(
        None,
        description="Multiple conflicting expected return to work dates found.If true,expectedRTW attribute will be empty.",
    )
    claims: Optional[List[NotificationClaimSummary]] = Field(
        None, description="The child cases under this notification case."
    )


class CustomerAddress(BaseModel):
    address: Optional[Address] = None
    australianAddress: Optional[ExtendedAddress] = None


class PaymentLine(BaseModel):
    lineType: Optional[str] = Field(
        None,
        description="The name of the payment adjustment e.g. Gross Benefit, Income Tax, Seat Belt etc.",
        max_length=100,
        min_length=0,
    )
    integrationType: Optional[str] = Field(
        None,
        description="For adjustment PaymentLine this records the IntegrationType which may have been recorded for the adjustment",
        max_length=100,
        min_length=0,
    )
    reference: Optional[str] = Field(
        None,
        description="For adjustment PaymentLine this records the Reference which may have been recorded for the adjustment",
        max_length=250,
        min_length=0,
    )
    amount: Optional[str] = Field(
        None, description="Money amount format", example="1500.50", max_length=28, min_length=0
    )
    startDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    endDate: Optional[date] = Field(None, description="ISO 8601 date format", example="1999-12-31")
    paymentLinesDetail: Optional[List[PaymentLineDetails]] = Field(
        None, description="The Payment Lines Details belongs to each payment."
    )


class ContactDetails(BaseModel):
    phoneNumbers: Optional[List[PhoneNumber]] = Field(
        None, description="An array of objects which contain customer phone number details."
    )
    emailAddresses: Optional[List[EmailAddress]] = Field(
        None, description="Email Address of the customer."
    )


class GroupClientCustomer(BaseModel):
    firstName: str = Field(..., description="Person's first name.", max_length=50, min_length=0)
    lastName: str = Field(..., description="Person's last name.", max_length=50, min_length=0)
    secondName: Optional[str] = Field(
        None, description="Person's second name.", max_length=50, min_length=0
    )
    initials: Optional[str] = Field(
        None, description="Person's middle initials.", max_length=10, min_length=0
    )
    needsInterpretor: Optional[bool] = Field(
        None, description="Indicates if the customer needs an interpreter."
    )
    placeOfBirth: Optional[str] = Field(
        None, description="Place of birth.", max_length=50, min_length=0
    )
    gender: Optional[str] = Field(
        None, description="The person's gender.", max_length=100, min_length=0
    )
    dateOfBirth: date = Field(..., description="ISO 8601 date format", example="1999-12-31")
    maritalStatus: Optional[str] = Field(
        None,
        description="Person's marital status - single / married / etc.",
        max_length=100,
        min_length=0,
    )
    nationality: Optional[str] = Field(
        None, description="Person's nationality.", max_length=100, min_length=0
    )
    title: Optional[str] = Field(
        None, description="Person's chosen title e.g. Mr / Mrs etc.", max_length=100, min_length=0
    )
    idNumber: Optional[str] = Field(
        None, description="ID number of the claimant.", max_length=10, min_length=0
    )
    identificationNumberType: Optional[str] = Field(
        None,
        description="The type of identification number the party will have.",
        max_length=100,
        min_length=0,
    )
    securedClient: Optional[bool] = Field(None, description="Secured client flag.")
    staff: Optional[bool] = Field(None, description="Staff flag.")
    partyType: Optional[str] = None
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain customer (OCPerson) extension information.",
    )
    customerAddress: Optional[CustomerAddress] = None
    isDeceased: bool = Field(..., description="True if the person is deceased.")
    dateOfDeath: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    initals: Optional[str] = None


class Participant(BaseModel):
    participantSummary: CaseParticipantsSummary
    personDetails: Optional[PersonDetails] = None
    correspondenceAddress: Optional[Address] = None
    extendedAddress: Optional[ExtendedAddress] = None


class PaymentPreferenceResponse(BaseModel):
    description: Optional[str] = Field(None, description="Description of the Payment Preference")
    effectiveFrom: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    effectiveTo: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    paymentMethod: str = Field(
        ...,
        description="The name of the payment method. This is used to determine whether chequeDetails or accountDetails is displayed",
    )
    isDefault: Optional[bool] = None
    customerAddress: Optional[CustomerAddress] = None
    chequeDetails: Optional[ChequeDetails] = None
    accountDetails: Optional[AccountDetails] = None
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain claim extension information.",
    )
    paymentPreferenceId: str = Field(
        ..., description="The unique identifier for payment preference", max_length=32, min_length=0
    )
    nominatedPayee: Optional[str] = Field(
        None,
        description="The nominated payee for the payment preference",
        max_length=250,
        min_length=0,
    )
    status: Optional[str] = Field(None, description="The status of the payment preference")
    stageName: Optional[str] = Field(
        None, description="The current stage of the payment preference"
    )


class NewPaymentPreference(BaseModel):
    description: Optional[str] = Field(None, description="Description of the Payment Preference")
    effectiveFrom: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    effectiveTo: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    paymentMethod: str = Field(
        ...,
        description="The name of the payment method. This is used to determine whether chequeDetails or accountDetails is displayed",
    )
    isDefault: Optional[bool] = None
    customerAddress: Optional[CustomerAddress] = None
    chequeDetails: Optional[ChequeDetails] = None
    accountDetails: Optional[AccountDetails] = None
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain claim extension information.",
    )
    overridePostalAddress: Optional[bool] = Field(
        None,
        description="Indicates that an override address applies for the payment preference. (i.e. sets the paymentAddressType to override. When false the correspondence address for the payee (or nominated payee) applies.",
    )


class NotificationCaseDetail(BaseModel):
    totalNumberOfRecords: Optional[int] = None
    notificationSummaries: Optional[List[NotificationCaseSummaryForClaims]] = None
    linkshdr: Optional[List[LinkshdrItem]] = None


class Customer(BaseModel):
    firstName: str = Field(..., description="Person's first name.", max_length=50, min_length=0)
    lastName: str = Field(..., description="Person's last name.", max_length=50, min_length=0)
    secondName: Optional[str] = Field(
        None, description="Person's second name.", max_length=50, min_length=0
    )
    initials: Optional[str] = Field(
        None, description="Person's middle initials.", max_length=10, min_length=0
    )
    needsInterpretor: Optional[bool] = Field(
        None, description="Indicates if the customer needs an interpreter."
    )
    placeOfBirth: Optional[str] = Field(
        None, description="Place of birth.", max_length=50, min_length=0
    )
    gender: Optional[str] = Field(
        None, description="The person's gender.", max_length=100, min_length=0
    )
    dateOfBirth: date = Field(..., description="ISO 8601 date format", example="1999-12-31")
    maritalStatus: Optional[str] = Field(
        None,
        description="Person's marital status - single / married / etc.",
        max_length=100,
        min_length=0,
    )
    nationality: Optional[str] = Field(
        None, description="Person's nationality.", max_length=100, min_length=0
    )
    title: Optional[str] = Field(
        None, description="Person's chosen title e.g. Mr / Mrs etc.", max_length=100, min_length=0
    )
    idNumber: Optional[str] = Field(
        None, description="ID number of the claimant.", max_length=10, min_length=0
    )
    identificationNumberType: Optional[str] = Field(
        None,
        description="The type of identification number the party will have.",
        max_length=100,
        min_length=0,
    )
    securedClient: Optional[bool] = Field(None, description="Secured client flag.")
    staff: Optional[bool] = Field(None, description="Staff flag.")
    partyType: Optional[str] = None
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain customer (OCPerson) extension information.",
    )
    customerAddress: Optional[CustomerAddress] = None
    initals: Optional[str] = None


class StartClaimDetails(BaseModel):
    description: Optional[str] = Field(
        None,
        description="Description for this case as entered by the user.",
        max_length=2000,
        min_length=0,
    )
    claimIncurredDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    policies: Optional[List[Policy]] = Field(
        None,
        description="An array of the policy objects with information about policies that will be added to the claim.",
    )
    notificationCaseId: Optional[str] = Field(
        None,
        description="The notification case number of the claim case if applicable.",
        max_length=256,
        min_length=0,
    )
    notificationReason: Optional[str] = Field(
        None,
        description="Notification reason selected during notification case intake.",
        max_length=100,
        min_length=0,
    )
    customerNumber: Optional[str] = Field(
        None,
        description="The customer number to find an existing party or customer of the claim.",
        max_length=50,
        min_length=0,
    )
    customer: Optional[Customer] = None
