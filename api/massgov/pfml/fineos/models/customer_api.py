# generated by datamodel-codegen:
#   filename:  customer_api.cleaned.yaml
#   timestamp: 2020-07-07T13:22:14+00:00

from __future__ import annotations

from datetime import date
from decimal import Decimal
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, confloat, conint, constr


class EnumSubsetSummary(BaseModel):
    name: Optional[str] = Field(None, description="Enum subset name")


class ErrorSource(BaseModel):
    pointer: Optional[str] = None
    parameter: Optional[str] = None


class Direction(Enum):
    ASC = "ASC"
    DESC = "DESC"


class SortOrderItem(BaseModel):
    columnName: Optional[str] = None
    direction: Optional[Direction] = None


class EnumInstanceSummary(BaseModel):
    id: Optional[str] = Field(None, description="Enum instance ID")
    name: Optional[str] = Field(None, description="Enum instance name")
    _links: Optional[Dict[str, Any]] = Field(
        None, description="Links to related objects (in this case: enumInstance)"
    )


class EnumSubset(BaseModel):
    name: Optional[str] = Field(None, description="Enum subset name")
    instances: Optional[List[EnumInstanceSummary]] = Field(
        None, description="List of the instances that belongs to this Subset "
    )


class AbsenceCaseSummary(BaseModel):
    absenceHandler: Optional[constr(min_length=0, max_length=50)] = Field(
        None, description=" The Person handling the absence case"
    )
    absenceHandlerEmailAddress: Optional[constr(min_length=0, max_length=40)] = Field(
        None, description="The phone number of the absence case handler"
    )
    absenceHandlerPhoneNumber: Optional[constr(min_length=0, max_length=20)] = Field(
        None, description="The email address of the absence case handler"
    )
    absenceId: Optional[constr(min_length=0, max_length=254)] = Field(
        None, description="Absence case identifier"
    )
    reason: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="Reason for the absence"
    )
    reasonQualifier1: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="Qualifier 1"
    )
    reasonQualifier2: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="Qualifier 2"
    )
    startDate: Optional[date] = Field(None, description="ISO 8601 date time format")
    endDate: Optional[date] = Field(None, description="ISO 8601 date time format")
    status: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="Value expected to be from is for enum domain CurrentPhase"
    )
    hasFinancialInformation: Optional[bool] = Field(
        None, description="Absence case has financial information"
    )
    createdDate: Optional[date] = Field(None, description="ISO 8601 date time format")
    notificationCaseId: Optional[str] = Field(
        None, description="Notification case id, if applicable for the absence case"
    )


class ErrorModel(BaseModel):
    error: str
    correlationId: Optional[str] = None
    errorDetail: Optional[str] = None
    stacktrace: Optional[str] = None


class UserErrorModel(BaseModel):
    error: str


class EpisodicLeavePeriod(BaseModel):
    startDate: date = Field(..., description="ISO 8601 date format")
    endDate: date = Field(..., description="ISO 8601 date format")
    frequency: Optional[int] = Field(None, description="The Frequency of Episodes")
    frequencyInterval: Optional[int] = Field(
        None, description="Number indicating the episodic frequency interval"
    )
    frequencyIntervalBasis: Optional[str] = Field(
        None,
        description="Frequency interval Basis for e.g. Days, Weeks, Months. This maps to enum TimeUnits(domain id 6757)",
    )
    duration: Optional[int] = Field(None, description="Duration of each individual Episode")
    durationBasis: Optional[str] = Field(
        None,
        description="Duration Basis for e.g. Minutes, Hours, Days. This maps to enum TimeUnits(domain id 6757)",
    )


class ReducedScheduleLeavePeriod(BaseModel):
    startDate: date = Field(..., description="ISO 8601 date format")
    endDate: date = Field(..., description="ISO 8601 date format")
    status: Optional[constr(min_length=0, max_length=100)] = Field(
        None,
        description="The status of this absence period. This maps to enum AbsenceStatus(domain id 6812).",
    )
    mondayOffHours: Optional[int] = Field(None, description="The end date off hours for Monday.")
    mondayOffMinutes: Optional[int] = Field(
        None, description="The end date off minutes for Monday."
    )
    tuesdayOffHours: Optional[int] = Field(None, description="The end date off hours for Tuesday.")
    tuesdayOffMinutes: Optional[int] = Field(
        None, description="The end date off minutes for Tuesday."
    )
    wednesdayOffHours: Optional[int] = Field(
        None, description="The end date off hours for Wednesday."
    )
    wednesdayOffMinutes: Optional[int] = Field(
        None, description="The end date off minutes for Wednesday."
    )
    thursdayOffHours: Optional[int] = Field(
        None, description="The end date off hours for Thursday."
    )
    thursdayOffMinutes: Optional[int] = Field(
        None, description="The end date off minutes for Thursday."
    )
    fridayOffHours: Optional[int] = Field(None, description="The end date off hours for Friday.")
    fridayOffMinutes: Optional[int] = Field(
        None, description="The end date off minutes for Friday."
    )
    saturdayOffHours: Optional[int] = Field(
        None, description="The end date off hours for Saturday."
    )
    saturdayOffMinutes: Optional[int] = Field(
        None, description="The end date off minutes for Saturday."
    )
    sundayOffHours: Optional[int] = Field(None, description="The end date off hours for Sunday.")
    sundayOffMinutes: Optional[int] = Field(
        None, description="The end date off minutes for Sunday."
    )


class TimeOffLeavePeriod(BaseModel):
    startDate: date = Field(..., description="ISO 8601 date format")
    endDate: date = Field(..., description="ISO 8601 date format")
    lastDayWorked: Optional[date] = Field(None, description="ISO 8601 date format")
    expectedReturnToWorkDate: Optional[date] = Field(None, description="ISO 8601 date format")
    startDateFullDay: Optional[bool] = Field(None, description="The start date full day.")
    startDateOffHours: Optional[int] = Field(None, description="The start date off hours.")
    startDateOffMinutes: Optional[int] = Field(None, description="The start date off minutes.")
    endDateOffHours: Optional[int] = Field(None, description="The end date off hours.")
    endDateOffMinutes: Optional[int] = Field(None, description="The end date off minutes.")
    endDateFullDay: Optional[bool] = Field(None, description="The end date full day.")
    status: constr(min_length=0, max_length=100) = Field(
        ...,
        description="The absence status for the absence period. This maps to enum AbsenceStatus(domain id 6812).",
    )


class AbsenceReasonSummary(BaseModel):
    reason: constr(min_length=0, max_length=100) = Field(
        ..., description="The name for the absence reason."
    )
    reasonQualifier1: constr(min_length=0, max_length=100) = Field(
        ..., description="The first qualifier for the absence reason."
    )
    reasonQualifier2: constr(min_length=0, max_length=100) = Field(
        ..., description="The second qualifier for the absence reason."
    )
    coveredPerson: Optional[str] = Field(None, description="Covered person type.")
    askForSecondaryRelationship: Optional[bool] = Field(
        None, description="Specify secondary reason."
    )
    eventType: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="The Event type for the absence reason."
    )
    category: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="The Category for the absence reason."
    )
    allowedGender: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="Gender of the covered person"
    )
    medicalRelated: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="Medical information of  the covered person"
    )
    seriousHealth: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="Indicates whether the condition is serious or not."
    )
    militaryRelated: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="MilitaryRelated information of  the covered person."
    )
    disabilityIntegration: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="Determines if the reason is classed as a disability condition."
    )
    accommodation: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="Determine whether the reason requires a workplace accommodation."
    )
    notificationReason: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="The notification reason associated with this absence reason."
    )


class LimitationDetail(BaseModel):
    limitationType: Optional[str] = Field(
        None, description="Represents a Limitation to be associated to an Accommodation Case."
    )
    id: Optional[constr(min_length=0, max_length=254)] = Field(
        None, description="The unique identifier for this limitation. "
    )


class ModelEnum(BaseModel):
    domainName: constr(min_length=0, max_length=100) = Field(..., description="Domain name.")
    instanceValue: constr(min_length=0, max_length=100) = Field(
        ..., description="Enum instance value."
    )


class NotificationAbsenceCaseSummary(BaseModel):
    absenceHandler: Optional[constr(min_length=0, max_length=50)] = Field(
        None, description=" The Person handling the absence case"
    )
    absenceHandlerEmailAddress: Optional[constr(min_length=0, max_length=40)] = Field(
        None, description="The phone number of the absence case handler"
    )
    absenceHandlerPhoneNumber: Optional[constr(min_length=0, max_length=20)] = Field(
        None, description="The email address of the absence case handler"
    )
    absenceId: Optional[constr(min_length=0, max_length=254)] = Field(
        None, description="Absence case identifier"
    )
    reason: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="Reason for the absence"
    )
    reasonQualifier1: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="Qualifier 1"
    )
    reasonQualifier2: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="Qualifier 2"
    )
    startDate: Optional[date] = Field(None, description="ISO 8601 date time format")
    endDate: Optional[date] = Field(None, description="ISO 8601 date time format")
    status: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="Value expected to be from is for enum domain CurrentPhase"
    )
    hasFinancialInformation: Optional[bool] = Field(
        None, description="Absence case has financial information"
    )
    createdDate: Optional[date] = Field(None, description="ISO 8601 date time format")


class WorkPlaceAccommodationDetail(BaseModel):
    accommodationCategory: Optional[str] = Field(
        None, description="The Category that identifies this association."
    )
    accommodationType: Optional[str] = Field(
        None, description="The Type that identifies this accommodation"
    )
    accommodationDescription: Optional[str] = Field(
        None, description="The description of this accommodation."
    )
    id: Optional[constr(min_length=0, max_length=254)] = Field(
        None, description="The unique identifier for this accommodation"
    )
    creationDate: Optional[date] = Field(None, description="ISO 8601 date format")
    implementDate: Optional[date] = Field(None, description="ISO 8601 date format")
    implementedDate: Optional[date] = Field(None, description="ISO 8601 date format")
    accommodationEndDate: Optional[date] = Field(None, description="ISO 8601 date format")


class Absence(BaseModel):
    id: Optional[str] = Field(None, description="Unique identifier for the absence case")
    caseReference: Optional[str] = Field(None, description="Case reference related to absence")


class Employee(BaseModel):
    id: Optional[str] = Field(None, description="Unique identifier for the employee")
    name: Optional[str] = Field(None, description="Name of the employee")


class LeavePlan(BaseModel):
    id: Optional[str] = Field(None, description="The unique identifier for the leave plan")
    name: Optional[str] = Field(None, description="Leave plan long name")
    shortName: Optional[str] = Field(None, description="Leave plan short name")
    applicabilityStatus: Optional[str] = Field(
        None, description="Applicability status of leave plan"
    )
    eligibilityStatus: Optional[str] = Field(None, description="Eligibility status of leave plan")
    availabilityStatus: Optional[str] = Field(
        None, description="Result of the evaluation of plan availability within a leave request"
    )
    adjudicationStatus: Optional[str] = Field(None, description="Adjudication status of leave plan")
    evidenceStatus: Optional[str] = Field(
        None, description="Evidence status made on this Selected Leave Plan"
    )
    category: Optional[str] = Field(None, description="Leave plan category")
    timeBankMethod: Optional[str] = Field(
        None,
        description="The time bank method either from the Service Agreement or from the Leave Plan Availability",
    )
    timeWithinPeriod: Optional[int] = Field(
        None, description="Number of time units for the period duration e.g. Weeks, Days"
    )
    timeWithinPeriodBasis: Optional[str] = Field(
        None, description="Units of time used in calculating the time with in period "
    )
    fixedYearStartDay: Optional[int] = Field(
        None, description="Start day for the specified fixed year"
    )
    fixedYearStartMonth: Optional[str] = Field(None, description="Fixed year start month")
    timeEntitlement: Optional[float] = Field(
        None, description="Number of time units for the time entitlement"
    )
    timeEntitlementBasis: Optional[str] = Field(
        None, description="Units of time used in leave plan availability"
    )
    paidLeaveCaseId: Optional[str] = Field(None, description="Paid leave case id")


class LeaveRequest(BaseModel):
    id: Optional[str] = Field(None, description="Business Entity OID")
    reasonName: Optional[str] = Field(None, description="The leave request reason")
    qualifier1: Optional[str] = Field(None, description="The leave request first qualifier")
    qualifier2: Optional[str] = Field(None, description="The leave request second qualifier")
    decisionStatus: Optional[str] = Field(None, description="Leave request decision status")
    approvalReason: Optional[str] = Field(None, description="Reason for approval of a request")
    denialReason: Optional[str] = Field(None, description="Reason for denial of a request")


class Period(BaseModel):
    periodReference: Optional[str] = Field(None, description="Business Entity OID")
    parentPeriodReference: Optional[str] = Field(
        None, description="Reference number for the parent period"
    )
    relatedToEpisodic: Optional[bool] = Field(
        None,
        description="True if this period represents a reported actual for an episodic requested period, false otherwise",
    )
    startDate: Optional[date] = Field(None, description="ISO 8601 date format")
    endDate: Optional[date] = Field(None, description="ISO 8601 date format")
    balanceDeduction: Optional[float] = Field(
        None,
        description="The amount of time deducted from the time bank in the specified time entitlement basis e.g. number of Weeks, Days etc.",
    )
    timeRequested: Optional[str] = Field(
        None,
        description="The amount of time requested in this period, in the specified time entitlement basis e.g. number of Weeks, Days",
    )
    timeDecisionStatus: Optional[str] = Field(
        None, description="Decision status associated with the period"
    )
    timeDecisionReason: Optional[str] = Field(
        None, description="Decision reason associated with the period"
    )
    type: Optional[str] = Field(None, description="Type of the absence period")
    status: Optional[str] = Field(None, description="Status of the leave request")
    leavePlan: Optional[LeavePlan] = None
    leaveRequest: Optional[LeaveRequest] = None


class AbsencePeriodDecision(BaseModel):
    periodId: Optional[str] = Field(None, description="Business Entity OID")
    parentPeriodId: Optional[str] = None
    startDate: Optional[date] = Field(None, description="ISO 8601 date format")
    endDate: Optional[date] = Field(None, description="ISO 8601 date format")
    absencePeriodStatus: Optional[str] = Field(None, description="Status of absence period.")
    absencePeriodType: Optional[str] = Field(None, description="Type of absence period.")
    absenceCaseId: Optional[str] = Field(None, description="Absence Case ID.")
    leavePlanId: Optional[str] = Field(None, description="Leave plan ID.")
    leavePlanCategory: Optional[str] = Field(None, description="Category of leave plan.")
    leavePlanName: Optional[str] = Field(None, description="Leave plan name.")
    leavePlanShortName: Optional[str] = Field(None, description="Leave plan short name.")
    timeBankMethod: Optional[str] = Field(
        None, description="Time bank method of leave plan period."
    )
    timeWithinPeriod: Optional[int] = Field(None, description="Time within absence period.")
    timeWithinPeriodBasis: Optional[str] = Field(
        None, description="Time within period basis of absence period."
    )
    fixedYearStartDay: Optional[int] = Field(
        None, description="Fixed year start date of absence period."
    )
    fixedYearStartMonth: Optional[str] = Field(
        None, description="Fixed year start month of absence period."
    )
    timeEntitlement: Optional[float] = Field(
        None, description="Time entitlement of absence period."
    )
    timeEntitlementBasis: Optional[str] = Field(
        None, description="Time entitlement basis of absence period."
    )
    reasonName: Optional[str] = Field(None, description="Reason name of leave plan.")
    qualifier1: Optional[str] = Field(None, description="Leave plan qualifier1.")
    qualifier2: Optional[str] = Field(None, description="Leave plan qualifier2.")
    selectedLeavePlanId: Optional[str] = Field(None, description="Business Entity OID")
    applicabilityStatus: Optional[str] = Field(
        None, description="Applicability status of leave plan."
    )
    eligibilityStatus: Optional[str] = Field(None, description="Eligibility status of leave plan.")
    adjudicationStatus: Optional[str] = Field(
        None, description="Adjudication status of leave plan."
    )
    evidenceStatus: Optional[str] = Field(None, description="Evidence status of leave plan.")
    availabilityStatus: Optional[str] = Field(
        None, description="Availability status of leave plan."
    )
    leaveRequestId: Optional[str] = Field(None, description="Business Entity OID")
    decisionStatus: Optional[str] = Field(None, description="Absence plan decision status.")
    approvalReason: Optional[str] = Field(None, description="Absence plan approval reason.")
    denialReason: Optional[str] = Field(None, description="Absence plan denial status.")
    timeDecisionStatus: Optional[str] = Field(
        None, description="Absence plan time decision status."
    )
    timeDecisionReason: Optional[str] = Field(
        None, description="Absence plan time decision reason."
    )
    balanceDeduction: Optional[float] = Field(
        None, description="Balance deduction value for every decision day included in this period."
    )
    actualForRequestedEpisodic: Optional[bool] = Field(
        None, description="True if this is an Actual Period linked to an Episodic Period."
    )
    timeRequested: Optional[str] = Field(
        None, description="The time requested for Actual Periods linked to an Episodic Period."
    )


class AbsencePeriodDecisions(BaseModel):
    startDate: Optional[date] = Field(None, description="ISO 8601 date format")
    endDate: Optional[date] = Field(None, description="ISO 8601 date format")
    absencePeriodDecisions: Optional[List[AbsencePeriodDecision]] = None


class AbsenceDay(BaseModel):
    date: Optional[date] = Field(None, description="ISO 8601 date format")
    timeRequested: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="The total requested time of absence associated with this day."
    )
    timeRequestedBasis: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="TaEnum<LengthBasis> value"
    )
    decision: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="Decision status of leave request"
    )


class EpisodicLeavePeriodDetail(BaseModel):
    frequency: Optional[int] = Field(None, description="The Frequency of Episodes")
    frequencyInterval: Optional[int] = Field(
        None, description="Number indicating the episodic frequency interval"
    )
    frequencyIntervalBasis: Optional[str] = Field(
        None,
        description="Frequency interval Basis for e.g. Days, Weeks, Months. This maps to enum TimeUnits(domain id 6757)",
    )
    duration: Optional[int] = Field(None, description="Duration of each individual Episode")
    durationBasis: Optional[str] = Field(
        None,
        description="Duration Basis for e.g. Minutes, Hours, Days. This maps to enum TimeUnits(domain id 6757)",
    )


class LeavePlanDetails(BaseModel):
    longName: Optional[constr(min_length=0, max_length=50)] = Field(
        None, description="The long name for the leave plan."
    )
    category: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="The category for this leave plan."
    )
    applicability: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="The applicability status of the Selected Leave Plan."
    )
    eligibility: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="The eligibility status of the Selected Leave Plan."
    )
    decision: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="The availability status of the Selected Leave Plan."
    )


class ReportedReducedScheduleLeavePeriod(BaseModel):
    startDate: date = Field(..., description="ISO 8601 date format")
    endDate: date = Field(..., description="ISO 8601 date format")
    decision: Optional[constr(min_length=0, max_length=100)] = Field(
        None,
        description="Decison status for the absence period. This maps to enum DecisionStatus(domain id 6821).",
    )
    mondayOffHours: Optional[int] = Field(None, description="The end date off hours for Monday.")
    mondayOffMinutes: Optional[int] = Field(
        None, description="The end date off minutes for Monday."
    )
    tuesdayOffHours: Optional[int] = Field(None, description="The end date off hours for Tuesday.")
    tuesdayOffMinutes: Optional[int] = Field(
        None, description="The end date off minutes for Tuesday."
    )
    wednesdayOffHours: Optional[int] = Field(
        None, description="The end date off hours for Wednesday."
    )
    wednesdayOffMinutes: Optional[int] = Field(
        None, description="The end date off minutes for Wednesday."
    )
    thursdayOffHours: Optional[int] = Field(
        None, description="The end date off hours for Thursday."
    )
    thursdayOffMinutes: Optional[int] = Field(
        None, description="The end date off minutes for Thursday."
    )
    fridayOffHours: Optional[int] = Field(None, description="The end date off hours for Friday.")
    fridayOffMinutes: Optional[int] = Field(
        None, description="The end date off minutes for Friday."
    )
    saturdayOffHours: Optional[int] = Field(
        None, description="The end date off hours for Saturday."
    )
    saturdayOffMinutes: Optional[int] = Field(
        None, description="The end date off minutes for Saturday."
    )
    sundayOffHours: Optional[int] = Field(None, description="The end date off hours for Sunday.")
    sundayOffMinutes: Optional[int] = Field(
        None, description="The end date off minutes for Sunday."
    )


class ReportedTimeOffLeavePeriod(BaseModel):
    startDate: date = Field(..., description="ISO 8601 date format")
    endDate: date = Field(..., description="ISO 8601 date format")
    lastDayWorked: Optional[date] = Field(None, description="ISO 8601 date format")
    expectedReturnToWorkDate: Optional[date] = Field(None, description="ISO 8601 date format")
    startDateFullDay: Optional[bool] = Field(None, description="The start date full day.")
    startDateOffHours: Optional[int] = Field(None, description="The start date off hours.")
    startDateOffMinutes: Optional[int] = Field(None, description="The start date off minutes.")
    endDateOffHours: Optional[int] = Field(None, description="The end date off hours.")
    endDateOffMinutes: Optional[int] = Field(None, description="The end date off minutes.")
    endDateFullDay: Optional[bool] = Field(None, description="The end date full day.")
    decision: Optional[constr(min_length=0, max_length=100)] = Field(
        None,
        description="Decison status for the absence period. This maps to enum DecisionStatus(domain id 6821).",
    )


class AbsenceReasonModel(BaseModel):
    reason: constr(min_length=0, max_length=100) = Field(
        ..., description="The name for the absence reason."
    )
    reasonQualifier1: constr(min_length=0, max_length=100) = Field(
        ..., description="The first qualifier for the absence reason."
    )
    reasonQualifier2: constr(min_length=0, max_length=100) = Field(
        ..., description="The second qualifier for the absence reason."
    )


class LeavePlanModel(BaseModel):
    leavePlanId: constr(min_length=0, max_length=35) = Field(
        ..., description="Leave Plan UUID is a mandatory field, it must be specified."
    )
    longName: Optional[constr(min_length=0, max_length=50)] = Field(
        None, description="The long name for the leave plan."
    )
    description: Optional[constr(min_length=0, max_length=3000)] = Field(
        None, description="The description for the leave plan."
    )
    informationLink: Optional[constr(min_length=0, max_length=500)] = Field(
        None,
        description="The link URL for the leave plan. This can contain a link to relevant online document.",
    )
    category: Optional[str] = Field(None, description="The category for this leave plan.")
    group: Optional[str] = Field(None, description="The group for this leave plan.")
    type: Optional[str] = Field(None, description="The type for this leave plan.")
    jobProtection: Optional[str] = Field(
        None, description="Indicates the level of job protection on this leave plan."
    )
    minimumWorkHours: Optional[constr(min_length=0, max_length=9999)] = Field(
        None, description="The minimum hours worked within a period."
    )
    lengthOfService: Optional[str] = Field(None, description="The worked within period basis.")
    entitlement: Optional[constr(min_length=0, max_length=999)] = Field(
        None, description="Number of time units for the Time Entitlement."
    )
    entitlementCalculationPeriod: Optional[str] = Field(
        None,
        description="Concatenated value of DurationValue, DurationBasis, CalculatePeriodMethod, FixedYearStartDay, FixedYearStartMonth.",
    )
    leavePlanAppliesToStates: Optional[bool] = Field(
        None, description="This applies to the leave plan."
    )
    effectiveFromDate: Optional[date] = Field(None, description="ISO 8601 date format")
    effectiveToDate: Optional[date] = Field(None, description="ISO 8601 date format")
    states: Optional[List[str]] = Field(
        None, description="List of work states can be added as states where the plan is applicable."
    )
    otherDetails: Optional[List[str]] = Field(
        None,
        description="Other details if the employer of the logged in user is linked to that plan through their service agreement.",
    )
    absenceReasons: List[AbsenceReasonModel] = Field(
        ..., description="The absence reasons linked to the leave plan."
    )
    statesData: Optional[List[str]] = None


class EmployeeRegistrationStatus(BaseModel):
    registered: Optional[bool] = Field(
        None, description="True if the Employee is registered, false otherwise."
    )


class LeavePlanSummary(BaseModel):
    leavePlanId: constr(min_length=0, max_length=36) = Field(
        ..., description="The Leave Plan UUID."
    )
    name: Optional[constr(min_length=0, max_length=50)] = Field(
        None, description="The long name for the leave plan."
    )
    description: Optional[constr(min_length=0, max_length=3000)] = Field(
        None, description="The description for the leave plan."
    )
    startDate: Optional[date] = Field(None, description="ISO 8601 date format")
    endDate: Optional[date] = Field(None, description="ISO 8601 date format")
    category: Optional[str] = Field(None, description="The category for this leave plan.")
    group: Optional[str] = Field(None, description="The group for this leave plan.")
    type: Optional[str] = Field(None, description="The type for this leave plan.")


class EmploymentDetails(BaseModel):
    employeeId: Optional[str] = Field(None, description="The employee Id.")
    dateOfHire: Optional[date] = Field(None, description="ISO 8601 date format")
    manager: Optional[str] = Field(None, description="The full name of the employee Manager")
    jobTitle: Optional[str] = Field(None, description="The job title")
    department: Optional[str] = Field(None, description="The organisation unit")
    workSite: Optional[str] = Field(None, description="The Worksite from this occupation")
    workCity: Optional[str] = Field(None, description="The work city")
    workState: Optional[str] = Field(None, description="The work state")
    workPattern: Optional[str] = Field(None, description="The work pattern")
    hoursWorkedPerWeek: Optional[float] = Field(
        None, description="The number of hours worked per week"
    )
    hoursWorkedPerYear: Optional[int] = Field(
        None, description="The number of hours worked per year"
    )


class AccommodationCaseSummary(BaseModel):
    accommodationCaseId: Optional[constr(min_length=0, max_length=256)] = Field(
        None, description="The Case Number for the accommodation case"
    )
    status: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="The Accommodation Case current phase."
    )
    notifiedBy: Optional[str] = Field(None, description="The notifier for this accommodation case")
    notificationDate: Optional[date] = Field(None, description="ISO 8601 date format")
    accommodationDecision: Optional[str] = Field(
        None, description="The decision made on this accommodation case"
    )
    decisionDate: Optional[date] = Field(None, description="ISO 8601 date format")
    pregnancyRelated: Optional[str] = Field(
        None, description="The date a decision was made on this accommodation case"
    )
    caseHandler: Optional[constr(min_length=0, max_length=50)] = Field(
        None, description="The Person handling the accommodation case"
    )
    caseHandlerPhoneNumber: Optional[constr(min_length=0, max_length=20)] = Field(
        None, description="The phone number of the accommodation case handler "
    )
    caseHandlerEmailAddress: Optional[constr(min_length=0, max_length=40)] = Field(
        None, description="The email address of the accommodation case handler "
    )
    workplaceAccommodationDetails: Optional[List[WorkPlaceAccommodationDetail]] = Field(
        None, description="List of Accommodations for this accommodation case"
    )
    limitations: Optional[List[LimitationDetail]] = Field(
        None, description="List of Limitation for this Accommodation Case."
    )
    additionalNotes: Optional[constr(min_length=0, max_length=20000)] = Field(
        None, description="Additional notes for the accommodation."
    )
    notificationCaseId: Optional[constr(min_length=0, max_length=254)] = Field(
        None, description="Notification case id, if applicable for the accommodation case"
    )
    notificationReason: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="Notification Reason selected during Notification case intake."
    )


class Limitation(BaseModel):
    limitationType: Optional[str] = Field(
        None, description="Represents a Limitation to be associated to an Accommodation Case."
    )


class WorkPlaceAccommodation(BaseModel):
    accommodationCategory: Optional[str] = Field(
        None, description="The Category that identifies this association."
    )
    accommodationType: Optional[str] = Field(
        None, description="The Type that identifies this accommodation"
    )
    accommodationDescription: Optional[str] = Field(
        None, description="The description of this accommodation."
    )


class Attribute(BaseModel):
    fieldName: str = Field(..., description="The name of an attribute.")
    booleanValue: Optional[bool] = Field(None, description="Boolean value of an attribute.")
    dateValue: Optional[date] = Field(None, description="ISO 8601 date format")
    decimalValue: Optional[float] = Field(None, description="Decimal value of an attribute.")
    integerValue: Optional[int] = Field(None, description="Integer value of an attribute.")
    stringValue: Optional[str] = Field(None, description="String value of an attribute.")
    enumValue: Optional[ModelEnum] = None


class EmployeeLeaveBalance(BaseModel):
    approvedTime: Optional[float] = Field(
        None,
        description="Employee total approved leave as per the leave plan for the given period.",
    )
    pendingTime: Optional[float] = Field(
        None, description="Employee total pending leave as per the leave plan for the given period."
    )
    availableBalance: Optional[float] = Field(
        None,
        description="Employee total approximate available leave balance as per the leave plan for the given period.",
    )
    timeBasis: Optional[str] = Field(
        None,
        description="The basis use to record Time Unit of approved, pending and entitlement.It may be Minues, Hours, Days, Weeks or Months.",
    )
    availabilityPeriodStartDate: Optional[date] = Field(
        None, description="ISO 8601 date time format"
    )
    availabilityPeriodEndDate: Optional[date] = Field(None, description="ISO 8601 date time format")
    timeEntitlement: Optional[float] = Field(
        None,
        description="The time that is available to an employee who has met the eligibility requirements as per the leave plan.",
    )
    timeWithinPeriod: Optional[conint(ge=0, le=9999)] = Field(
        None,
        description="Specify the time frame within which the employee must avail of the entitled leave. For example, an employee may be entitled to 6 weeks leave within a 12-month period.",
    )
    timeWithinPeriodBasis: Optional[str] = Field(
        None,
        description="The basis use to record Time Unit of Time Within Period. It may be Minues, Hours, Days, Weeks or Months.",
    )
    notificationMessage: Optional[str] = Field(
        None,
        description="The notification message gives additional information to the employer about the balance being presented and can explain some reasons to be cautious of the value presented here.",
    )


class EmployeeSummaryForManager(BaseModel):
    firstName: Optional[str] = Field(None, description="First names of a person.")
    lastName: Optional[str] = Field(None, description="The person's lastName.")
    initials: Optional[str] = Field(None, description="The person's middle initials.")
    employeeId: Optional[str] = Field(None, description="The employment id of the employee.")


class PaginatedEmployeeSearchResults(BaseModel):
    totalNumberOfRecords: Optional[int] = None
    employees: Optional[List[EmployeeSummaryForManager]] = None


class SupervisedAbsenceDay(BaseModel):
    date: Optional[date] = Field(None, description="ISO 8601 date format")
    timeRequested: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="The total requested time of absence associated with this day."
    )
    timeRequestedBasis: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="TaEnum<LengthBasis> value"
    )
    decision: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="Decision status of leave request"
    )


class SupervisedAbsencePeriod(BaseModel):
    id: Optional[str] = Field(None, description="Business Entity OID")
    reason: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="The name for the absence reason."
    )
    reasonQualifier1: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="The first qualifier for the absence reason."
    )
    reasonQualifier2: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="The second qualifier for the absence reason."
    )
    startDate: Optional[date] = Field(None, description="ISO 8601 date format")
    endDate: Optional[date] = Field(None, description="ISO 8601 date format")
    expectedReturnToWorkDate: Optional[date] = Field(None, description="ISO 8601 date format")
    status: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="The status for this absence period."
    )
    requestStatus: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="The status of the leave request."
    )
    absenceType: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="The absenceType for the absence reason."
    )
    episodicLeavePeriodDetail: Optional[EpisodicLeavePeriodDetail] = None


class SupervisedReducedScheduleLeavePeriod(BaseModel):
    startDate: date = Field(..., description="ISO 8601 date format")
    endDate: date = Field(..., description="ISO 8601 date format")
    status: Optional[constr(min_length=0, max_length=100)] = Field(
        None,
        description="The status of this absence period. This maps to enum AbsenceStatus(domain id 6812).",
    )
    mondayOffHours: Optional[int] = Field(None, description="The end date off hours for Monday.")
    mondayOffMinutes: Optional[int] = Field(
        None, description="The end date off minutes for Monday."
    )
    tuesdayOffHours: Optional[int] = Field(None, description="The end date off hours for Tuesday.")
    tuesdayOffMinutes: Optional[int] = Field(
        None, description="The end date off minutes for Tuesday."
    )
    wednesdayOffHours: Optional[int] = Field(
        None, description="The end date off hours for Wednesday."
    )
    wednesdayOffMinutes: Optional[int] = Field(
        None, description="The end date off minutes for Wednesday."
    )
    thursdayOffHours: Optional[int] = Field(
        None, description="The end date off hours for Thursday."
    )
    thursdayOffMinutes: Optional[int] = Field(
        None, description="The end date off minutes for Thursday."
    )
    fridayOffHours: Optional[int] = Field(None, description="The end date off hours for Friday.")
    fridayOffMinutes: Optional[int] = Field(
        None, description="The end date off minutes for Friday."
    )
    saturdayOffHours: Optional[int] = Field(
        None, description="The end date off hours for Saturday."
    )
    saturdayOffMinutes: Optional[int] = Field(
        None, description="The end date off minutes for Saturday."
    )
    sundayOffHours: Optional[int] = Field(None, description="The end date off hours for Sunday.")
    sundayOffMinutes: Optional[int] = Field(
        None, description="The end date off minutes for Sunday."
    )


class SupervisedTimeOffLeavePeriod(BaseModel):
    startDate: date = Field(..., description="ISO 8601 date format")
    endDate: date = Field(..., description="ISO 8601 date format")
    lastDayWorked: Optional[date] = Field(None, description="ISO 8601 date format")
    expectedReturnToWorkDate: Optional[date] = Field(None, description="ISO 8601 date format")
    startDateFullDay: Optional[bool] = Field(None, description="The start date full day.")
    startDateOffHours: Optional[int] = Field(None, description="The start date off hours.")
    startDateOffMinutes: Optional[int] = Field(None, description="The start date off minutes.")
    endDateOffHours: Optional[int] = Field(None, description="The end date off hours.")
    endDateOffMinutes: Optional[int] = Field(None, description="The end date off minutes.")
    endDateFullDay: Optional[bool] = Field(None, description="The end date full day.")
    decision: Optional[constr(min_length=0, max_length=100)] = Field(
        None,
        description="Decison status for the absence period. This maps to enum DecisionStatus(domain id 6821).",
    )


class SupervisedAbsenceSummary(BaseModel):
    absenceHandler: Optional[constr(min_length=0, max_length=50)] = Field(
        None, description=" The Person handling the absence case"
    )
    absenceHandlerEmailAddress: Optional[constr(min_length=0, max_length=40)] = Field(
        None, description="The phone number of the absence case handler"
    )
    absenceHandlerPhoneNumber: Optional[constr(min_length=0, max_length=20)] = Field(
        None, description="The email address of the absence case handler"
    )
    absenceId: Optional[constr(min_length=0, max_length=254)] = Field(
        None, description="Absence case identifier"
    )
    reason: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="Reason for the absence"
    )
    reasonQualifier1: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="Qualifier 1"
    )
    reasonQualifier2: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="Qualifier 2"
    )
    startDate: Optional[date] = Field(None, description="ISO 8601 date time format")
    endDate: Optional[date] = Field(None, description="ISO 8601 date time format")
    status: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="Value expected to be from is for enum domain CurrentPhase"
    )
    hasFinancialInformation: Optional[bool] = Field(
        None, description="Absence case has financial information"
    )
    createdDate: Optional[date] = Field(None, description="ISO 8601 date time format")
    notificationCaseId: Optional[str] = Field(
        None, description="Notification case id, if applicable for the absence case"
    )
    member: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="Full name of the employee"
    )
    memberId: Optional[constr(min_length=0, max_length=50)] = Field(
        None, description="The id of an employee in respect of its employer."
    )


class EFormAttribute(BaseModel):
    name: str = Field(..., description="The name of an EForm attibute.")
    booleanValue: Optional[bool] = Field(
        None,
        description="Boolean value of an EForm attribute, which must be populated if the type attribute is set to boolean.",
    )
    dateValue: Optional[date] = Field(None, description="ISO 8601 date format")
    decimalValue: Optional[float] = Field(
        None,
        description="Decimal value of an EForm attribute, which must be populated if the type attribute is set to decimal.",
    )
    integerValue: Optional[int] = Field(
        None,
        description="Integer value of an EForm attribute, which must be populated if the type attribute is set to integer.",
    )
    stringValue: Optional[str] = Field(
        None,
        description="String value of an EForm attribute, which must be populated if the type attribute is set to string.",
    )
    enumValue: Optional[ModelEnum] = None


class SocialSecurityBenefitResponse(BaseModel):
    socialSecurityBenefitId: Optional[str] = Field(
        None, description="The unique identification number(oid)."
    )
    authorityConsentDate: Optional[date] = Field(None, description="ISO 8601 date format")
    benefitAmount: Optional[Decimal] = Field(None, description="Money amount format")
    claimStatus: Optional[str] = Field(
        None,
        description="The status of the insureds application with the Social Security Administration.",
    )
    awardInformationReceivedDate: Optional[date] = Field(None, description="ISO 8601 date format")
    disabilityBenefitsEligibleDate: Optional[date] = Field(None, description="ISO 8601 date format")
    earlyRetirementBenefitsEligibleDate: Optional[date] = Field(
        None, description="ISO 8601 date format"
    )
    insuranceEndDate: Optional[date] = Field(None, description="ISO 8601 date format")
    reimbursementAgreementSignedDate: Optional[date] = Field(
        None, description="ISO 8601 date format"
    )
    reimbursementAgreementReceived: Optional[bool] = Field(
        None, description="Indicates that the reimbursement Agreement has been received."
    )


class SocialSecurityDecisionResponse(BaseModel):
    socialSecurityDecisionId: constr(min_length=0, max_length=32) = Field(
        ..., description="The unique identifier for the social security"
    )
    applicationDate: Optional[date] = Field(None, description="ISO 8601 date time format")
    decisionDate: Optional[date] = Field(None, description="ISO 8601 date time format")
    approvalType: Optional[str] = Field(
        None, description="The level of decision made for the social security decision"
    )
    decision: Optional[str] = Field(
        None, description="This is the actual decision made for the social security decision"
    )


class DiagnosisDetails(BaseModel):
    medicalCode: Optional[constr(min_length=0, max_length=20)] = Field(
        None, description="The code ID that specifies a particular diagnosis."
    )
    levelIndicator: Optional[str] = Field(
        None,
        description="The injury code level e.g. primary or secondary assigned to the injury in the context of the claim.",
    )
    firstPrimaryCode: Optional[bool] = Field(
        None,
        description="Indicates whether or not this is the first medical code identified with the primary level indicator.",
    )
    description: Optional[constr(min_length=0, max_length=500)] = Field(
        None, description="A description of the medical code."
    )
    causeGrouping: Optional[constr(min_length=0, max_length=500)] = Field(
        None,
        description="The name of the medical code group in which this medical code is contained.",
    )
    groupType: Optional[str] = Field(
        None, description="Specifies the type of the medical code group."
    )
    diagnosisDetailsId: Optional[constr(min_length=0, max_length=10)] = Field(
        None, description="Business Entity OID"
    )


class ValidationMessageModel(BaseModel):
    validationMessage: str


class ApprovalOrders(BaseModel):
    approvalOrderId: constr(min_length=0, max_length=50) = Field(
        ..., description="Approval Order Id"
    )
    benefitCaseNumber: constr(min_length=0, max_length=50) = Field(
        ..., description="Benefit Number"
    )
    referenceNumber: constr(min_length=0, max_length=50) = Field(
        ..., description="Reference Number"
    )
    description: constr(min_length=0, max_length=2000) = Field(..., description="Description")
    overallMaximumAmount: Decimal = Field(..., description="Money amount format")
    status: constr(min_length=0, max_length=50) = Field(..., description="Status")
    statusEffectiveDate: date = Field(..., description="ISO 8601 date format")
    providerName: constr(min_length=0, max_length=50) = Field(..., description="Provider Name")
    vendorName: constr(min_length=0, max_length=50) = Field(..., description="Vendor Name")
    facilityName: constr(min_length=0, max_length=50) = Field(..., description="Faclity Name")


class ApprovalOrderDecisions(BaseModel):
    approvalDecisionId: constr(min_length=0, max_length=50) = Field(
        ..., description="Approval Order Decision Id"
    )
    serviceCode: constr(min_length=0, max_length=50) = Field(..., description="Service Code")
    serviceDescription: constr(min_length=0, max_length=2000) = Field(
        ..., description="Service Description"
    )
    usageBasis: constr(min_length=0, max_length=50) = Field(..., description="Usage Basis")
    periodStartDate: date = Field(..., description="ISO 8601 date format")
    periodEndDate: date = Field(..., description="ISO 8601 date format")
    decisionStatus: constr(min_length=0, max_length=50) = Field(..., description="Decision Status")
    decisionReason: constr(min_length=0, max_length=100) = Field(..., description="Decision Reason")
    amount: Decimal = Field(..., description="Money amount format")
    amountUsed: Decimal = Field(..., description="Money amount format")
    remainingAmount: Decimal = Field(..., description="Money amount format")
    limitInUnits: float = Field(..., description="Limit in Units")
    ratePerUnit: Decimal = Field(..., description="Money amount format")
    unitsUsed: int = Field(..., description="Units used")
    remainingUnits: float = Field(..., description="Remaining Units")


class Base64EncodedFileData(BaseModel):
    fileName: str = Field(..., description="The name of the file, without the extension.")
    fileExtension: str = Field(
        ..., description="The extension of the file, without a preceding dot."
    )
    base64EncodedFileContents: str = Field(..., description="The base64 encoded file contents.")
    contentType: Optional[str] = Field(None, description="The MIME type of the file.")
    fileSizeInBytes: int = Field(..., description="The size in bytes of the file.")
    description: Optional[str] = Field(None, description="A description of the file.")
    managedReqId: Optional[int] = Field(
        None, description="The Managed Requirement ID to be associated with the file."
    )


class WorkPatternDay(BaseModel):
    dayOfWeek: str = Field(..., description="The day of the week.")
    weekNumber: int = Field(
        ...,
        description="The number of the week in the pattern within which this day occurs (1, 2, 3 or 4)",
    )
    hours: int = Field(
        ..., description="The number of whole working hours on this day in the work pattern."
    )
    minutes: int = Field(..., description="The number of minutes on this day in the work pattern.")


class OutstandingSupportingEvidence(BaseModel):
    rootCaseId: Optional[constr(min_length=0, max_length=254)] = Field(
        None,
        description="The root case id is the id of the last case retrieved following all parent relationships starting from the case holding the supporting evidence elements. Given a case Id, all supporting evidence elements share the same root case.",
    )
    uploadCaseNumber: Optional[constr(min_length=0, max_length=254)] = Field(
        None,
        description="If the supporting evidence element is requested by multiple cases, the upload Case Number is the id of the lowest case in the hierarchy which is the common parent of all such cases; If the supporting evidence element is requested by one case only, the upload Case Number is the id of that case. Given a caseId, different supporting evidence elements can a have different upload Case Number depending on which case(s) requests which supporting evidence.",
    )
    name: Optional[constr(min_length=0, max_length=350)] = Field(
        None,
        description="The name of the document type representing the document that can satisfy the supporting evidence.",
    )
    docReceived: Optional[bool] = Field(
        None,
        description="Indicates whether a document has been received for the outstanding supporting evidence.<BR>For instance, a document could be uploaded and linked to an outstanding requirement, however the outstanding requirement will remain OPEN until a back office user validates that the uploaded document is actually what was required.<BR>This flag will always be FALSE for a evidence result which is either pending or received but not satisfied; it will be TRUE for a received evidence result which is received and satisfied.<BR>If the element represents a combination of outstanding requirements and evidence results, the flag will be FALSE if at least one of these elements returns FALSE.",
    )
    source: Optional[str] = Field(
        None,
        description="The name of the party who is expected to provide the document. <BR>If the record returned represents an Outstanding Requirement, the source is the name of the party indicated as the source for that requirement, including the title if available. <BR>If the record returned represents an Evidence, the source is the Employee name, including the title if available. <BR>If the record returned represents both an Outstanding Requirement and an Evidence (because the same document would satisfy both) and the source names differ, then the source name from the Outstanding Requirement is returned. <BR>If the record returned represents two Outstanding Requirements (because the same document would satisfy both) and the source names differ, then the source name is randomly picked from one of them.",
    )


class EmployerQuestion(BaseModel):
    questionId: str = Field(
        ...,
        description="The id of the employer question. Must be unique for all employer questions of one category.",
    )
    questionText: str = Field(
        ..., description="The configured employer question text for the question id."
    )
    questionType: str = Field(
        ...,
        description="The type of the employer question. Enum Field Data Types (domainId 107) instance name value.\r\nCan be one of the following: String, Integer, Date, Float, Boolean and Enum.",
    )
    questionEnumDomainName: Optional[str] = Field(
        None, description="Optional: Domain name of the enum, if the questionType is Enum."
    )
    mandatory: Optional[bool] = Field(
        None, description="Optional: Specifies if the employer question answer is mandatory."
    )
    employerName: str = Field(
        ...,
        description="The name of the employer on the case for which employer questions are returned, either person full name or organisation name.",
    )
    category: str = Field(
        ...,
        description="The category of the employer question requested. Enum InstructionsQuestionsCategory (domainId 234) instance name value",
    )


class EmployerQuestions(BaseModel):
    elements: List[EmployerQuestion] = Field(
        ...,
        description="An array of employer questions stored in the EmployerQuestion structure belonging to the given category of ER questions.",
    )


class EmployerQuestionAnswer(BaseModel):
    question: EmployerQuestion
    answer: EFormAttribute


class EmployerQuestionAnswers(BaseModel):
    elements: List[EmployerQuestionAnswer] = Field(
        ...,
        description="An array of questions and answers to employer questions belonging to the given category of ER questions.",
    )


class EmployeeAnswers(BaseModel):
    category: Optional[str] = Field(
        None,
        description="The category of the employer questions answered. Enum InstructionsQuestionsCategory (domainId 234) instance name value",
    )
    answers: Optional[List[EFormAttribute]] = Field(None, description="Get Answers if any exist.")


class EFormSummary(BaseModel):
    eformId: int = Field(..., description="Unique automatically generated Id of an EForm document.")
    eformTypeId: Optional[str] = Field(None, description="Business Entity OID")
    effectiveDateFrom: Optional[date] = Field(None, description="ISO 8601 date format")
    effectiveDateTo: Optional[date] = Field(None, description="ISO 8601 date format")
    eformType: constr(min_length=0, max_length=200) = Field(
        ..., description="The short business description of the document type."
    )


class AccountTransferInfo(BaseModel):
    bankAccountNumber: Optional[str] = Field(
        None, description="The bank account number of an employee"
    )
    bankAccountType: Optional[str] = Field(None, description="The bank account type of an employee")
    bankInstituteName: Optional[str] = Field(
        None, description="The bank institute name of an employee"
    )
    bankBranchSortCode: Optional[str] = Field(
        None, description="The employee bank branch sort code"
    )
    bankCode: Optional[str] = Field(None, description="The bank code of an employee")


class ChequePaymentInfo(BaseModel):
    chequeNumber: Optional[str] = Field(None, description="The cheque number of an employee")


class Policy(BaseModel):
    referenceNo: constr(min_length=0, max_length=50) = Field(
        ...,
        description="Unique alphanumeric policy reference from the relevant policy admin system.",
    )


class StartClaim(BaseModel):
    description: Optional[constr(min_length=0, max_length=2000)] = Field(
        None, description="Description for this case as entered by the user."
    )
    claimIncurredDate: Optional[date] = Field(None, description="ISO 8601 date format")
    policies: Optional[List[Policy]] = Field(
        None,
        description="An array of the policy objects with information about policies that will be added to the claim.",
    )
    notificationCaseId: Optional[constr(min_length=0, max_length=256)] = Field(
        None, description="The notification case number of the claim case if applicable."
    )
    notificationReason: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="Notification reason selected during notification case intake."
    )


class EnumSubsetInfo(BaseModel):
    name: Optional[str] = None
    description: Optional[str] = None
    editable: Optional[bool] = None


class TaEnumTaEnumType(BaseModel):
    name: Optional[str] = None
    domainDescription: Optional[str] = None
    domainName: Optional[str] = None
    domainId: Optional[int] = None
    dorder: Optional[int] = None
    fullId: Optional[int] = None
    startDate: Optional[date] = Field(None, description="ISO 8601 date time format")
    endDate: Optional[date] = Field(None, description="ISO 8601 date time format")
    retired: Optional[bool] = None
    editable: Optional[bool] = None
    alphaSort: Optional[bool] = None
    defaultFirst: Optional[bool] = None
    subsets: Optional[List[str]] = None
    active: Optional[bool] = None
    subsetInfo: Optional[List[EnumSubsetInfo]] = None
    nameAttribute: Optional[str] = None
    id: Optional[int] = None


class WebMessageId(BaseModel):
    messageId: Optional[int] = Field(None, description="Message Id")


class CaseParticipantsSummary(BaseModel):
    participantId: Optional[int] = Field(None, description="Id of the participant")
    rolename: Optional[constr(min_length=0, max_length=10)] = Field(
        None, description="The role name assigned to the participant on the case"
    )
    partyName: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="The name of the party with the participant role on the case"
    )
    startDate: Optional[date] = Field(None, description="ISO 8601 date format")
    endDate: Optional[date] = Field(None, description="ISO 8601 date format")
    referenceNo: Optional[constr(min_length=0, max_length=40)] = Field(
        None, description="The reference number of the party with the participant role on the case"
    )
    sourceSystem: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="The source system of the party with the participant role on the case"
    )


class CaseStatusHistory(BaseModel):
    status: Optional[str] = Field(
        None, description="The stage in the process that the case was at."
    )
    dateStatusEntered: Optional[date] = Field(None, description="ISO 8601 date format")
    dateStatusDeparted: Optional[str] = Field(
        None,
        description="Formatted date when benefit's underlying process moved out of a step with this phase.",
    )


class ChequeDetails(BaseModel):
    nameToPrintOnCheck: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="The name that should be printed on the check"
    )


class MonthlyBasisEarningAmountsResponse(BaseModel):
    earningsAmount: Decimal = Field(..., description="Money amount format")
    shiftPay: Optional[Decimal] = Field(None, description="Money amount format")
    pensionContribution: Optional[Decimal] = Field(None, description="Money amount format")
    bonuses: Optional[Decimal] = Field(None, description="Money amount format")
    commissions: Optional[Decimal] = Field(None, description="Money amount format")
    earningsAmountAsWeekly: Optional[Decimal] = Field(None, description="Money amount format")
    totalEarnings: Optional[Decimal] = Field(None, description="Money amount format")


class WeeklyBasisEarningAmountsResponse(BaseModel):
    totalAmountOverridden: bool = Field(
        ...,
        description="This attribute indicates if the total weekly or bi-weekly amount has been manually overridden.",
    )
    standardHours: Optional[float] = Field(
        None, description="The number of hours in a standard working week or bi-week."
    )
    standardHourRate: Optional[Decimal] = Field(None, description="Money amount format")
    overtimeHours: Optional[float] = Field(
        None, description="Number of overtime hours in a working week or bi-week."
    )
    overtimeHourlyRate: Optional[Decimal] = Field(None, description="Money amount format")
    statutoryValue: Optional[float] = Field(
        None,
        description="Additional weekly or bi-weekly vacation or statutory entitlement amount or percentage of regular hours.",
    )
    statutoryBasis: Optional[str] = Field(
        None,
        description="Additional weekly or bi-weekly vacation or statutory entitlements type. It may be an amount or percentage of regular hour.",
    )
    shiftHours: Optional[float] = Field(
        None, description="Number of shift hours in a working week or bi-week."
    )
    shiftBasis: Optional[str] = Field(
        None,
        description="Basis of weekly or bi-weekly shift earnings - either an additional hourly allowance or an additional amount.",
    )
    shiftAllowance: Optional[Decimal] = Field(None, description="Money amount format")
    totalEarnings: Optional[Decimal] = Field(None, description="Money amount format")
    standardEarnings: Optional[Decimal] = Field(None, description="Money amount format")
    overtimeEarnings: Optional[Decimal] = Field(None, description="Money amount format")
    statutoryEarnings: Optional[Decimal] = Field(None, description="Money amount format")
    shiftEarnings: Optional[Decimal] = Field(None, description="Money amount format")


class WeeklyBasisEarningAmountsRequest(BaseModel):
    totalAmountOverridden: bool = Field(
        ...,
        description="This attribute indicates if the total weekly or bi-weekly amount has been manually overridden.",
    )
    standardHours: Optional[float] = Field(
        None, description="The number of hours in a standard working week or bi-week."
    )
    standardHourRate: Optional[Decimal] = Field(None, description="Money amount format")
    overtimeHours: Optional[float] = Field(
        None, description="Number of overtime hours in a working week or bi-week."
    )
    overtimeHourlyRate: Optional[Decimal] = Field(None, description="Money amount format")
    statutoryValue: Optional[float] = Field(
        None,
        description="Additional weekly or bi-weekly vacation or statutory entitlement amount or percentage of regular hours.",
    )
    statutoryBasis: Optional[str] = Field(
        None,
        description="Additional weekly or bi-weekly vacation or statutory entitlements type. It may be an amount or percentage of regular hour.",
    )
    shiftHours: Optional[float] = Field(
        None, description="Number of shift hours in a working week or bi-week."
    )
    shiftBasis: Optional[str] = Field(
        None,
        description="Basis of weekly or bi-weekly shift earnings - either an additional hourly allowance or an additional amount.",
    )
    shiftAllowance: Optional[Decimal] = Field(None, description="Money amount format")
    totalEarnings: Optional[Decimal] = Field(None, description="Money amount format")


class MonthlyBasisEarningAmountsRequest(BaseModel):
    earningsAmount: Decimal = Field(..., description="Money amount format")
    shiftPay: Optional[Decimal] = Field(None, description="Money amount format")
    pensionContribution: Optional[Decimal] = Field(None, description="Money amount format")
    bonuses: Optional[Decimal] = Field(None, description="Money amount format")
    commissions: Optional[Decimal] = Field(None, description="Money amount format")


class PregnancyDetails(BaseModel):
    actualDeliveryDate: Optional[date] = Field(None, description="ISO 8601 date format")
    expectedDeliveryDate: Optional[date] = Field(None, description="ISO 8601 date format")
    pregnancyComplications: Optional[bool] = Field(
        None, description="Indicates whether or not pregnancy complications occurred."
    )
    deliveryType: Optional[str] = Field(
        None, description="Indicates the type of delivery following pregnancy."
    )


class RestrictionsLimitations(BaseModel):
    restrictionEffectiveDate: Optional[date] = Field(None, description="ISO 8601 date format")
    restrictions: Optional[str] = Field(
        None,
        description="Specifies the disabilities/restrictions experienced by the injured party as a result of the claim.",
    )


class NewDiagnosisDetails(BaseModel):
    medicalCode: Optional[constr(min_length=0, max_length=20)] = Field(
        None, description="The code ID that specifies a particular diagnosis."
    )
    levelIndicator: Optional[str] = Field(
        None,
        description="The injury code level e.g. primary or secondary assigned to the injury in the context of the claim.",
    )


class CustomerSummary(BaseModel):
    customerNo: constr(min_length=0, max_length=256) = Field(..., description="The Customer number")
    firstName: constr(min_length=0, max_length=256) = Field(
        ..., description="The First Name of the Customer"
    )
    lastName: constr(min_length=0, max_length=256) = Field(
        ..., description="The Last Name of the Customer"
    )
    dateOfBirth: constr(min_length=0, max_length=256) = Field(
        ..., description="The Date Of Birth of the Customer"
    )


class RegistrationResponse(BaseModel):
    registered: Optional[bool] = Field(
        None, description="True if the customer is registered, false otherwise."
    )


class EnumInstance(BaseModel):
    id: Optional[str] = Field(None, description="Enum instance ID (unique in the domain)")
    name: Optional[str] = Field(None, description="Enum instance name")
    domainId: Optional[int] = Field(
        None, description="Enum Domain ID, corresponds to <code>domainId</code>"
    )
    fullId: Optional[int] = Field(
        None, description="Enum instance fullId, corresponds to <code>TaEnum.fullId</code>"
    )
    domainName: Optional[str] = Field(
        None, description="Name of domain to which this instance belongs to"
    )
    retired: Optional[bool] = Field(
        None,
        description="If <code>true</code> retired Instances only are returned,if <code>false</code>(or not specified) non-retired instances only are returned",
    )
    startDate: Optional[date] = Field(None, description="Date at which the Enum was activated")
    endDate: Optional[date] = Field(
        None,
        description="Date at which the Enum will become inactive (since that date, enum should be considered inactive)",
    )
    dOrder: Optional[int] = Field(
        None,
        description="Denotes the order the Enum resides within all Enum Instances within Domain",
    )
    subsets: Optional[List[EnumSubsetSummary]] = Field(
        None, description="List of subsets to which this instance belongs to"
    )
    _links: Optional[Dict[str, Any]] = Field(
        None, description="Links to related objects (in this case: SELF and DOMAIN)"
    )


class ApiError(BaseModel):
    id: Optional[str] = None
    status: Optional[str] = None
    code: Optional[str] = None
    title: Optional[str] = None
    detail: Optional[str] = None
    source: Optional[ErrorSource] = None
    meta: Optional[Dict[str, Any]] = None
    _links: Optional[Dict[str, Any]] = None


class ErrorResponse(BaseModel):
    errors: Optional[List[ApiError]] = None


class EnumInstances(BaseModel):
    elements: Optional[List[EnumInstance]] = None
    totalSize: Optional[int] = None
    meta: Optional[Dict[str, Any]] = None
    _links: Optional[Dict[str, Any]] = None


class QuerySortInfo(BaseModel):
    sortStatementsText: Optional[str] = None
    sortOrderItemsList: Optional[List[SortOrderItem]] = None


class EnumDomain(BaseModel):
    id: Optional[str] = Field(None, description="Enum domain ID (unique in the system)")
    name: Optional[str] = Field(None, description="Enum domain name")
    description: Optional[str] = Field(None, description="Description of this domain")
    editable: Optional[bool] = Field(
        None,
        description="Flag whether this domain is allowed to be edited. Domain can be edited from back office system only - No edit domain endpoint exists.",
    )
    alphaSort: Optional[bool] = Field(
        None,
        description="When value is equal to 'true' it indicating that domain instances when presented to user should be sorted alphabetically, 'false' otherwise. This parameter does not influence sort order of instances when returned by this API",
    )
    defaultSort: Optional[bool] = Field(
        None,
        description="When value is equal to 'true' it indicating that default instance should be shown (to user) first in an alphabetically sorted view, 'false' othrwise. This parameter does not influence sort order of instances when returned by this API",
    )
    instances: Optional[List[EnumInstanceSummary]] = Field(
        None, description="List of the instances that belongs to this domain "
    )
    subsets: Optional[List[EnumSubset]] = Field(
        None, description="List of subsets that belongs to this domain"
    )
    _links: Optional[Dict[str, Any]] = Field(
        None, description="Links to related objects (in this case: self and instances)"
    )


class EnumDomains(BaseModel):
    elements: Optional[List[EnumDomain]] = None
    totalSize: Optional[int] = None
    meta: Optional[Dict[str, Any]] = None
    _links: Optional[Dict[str, Any]] = None


class AbsenceCase(BaseModel):
    additionalComments: Optional[constr(min_length=0, max_length=2000)] = Field(
        None, description="Description for this case as entered by the user."
    )
    intakeSource: constr(min_length=0, max_length=100) = Field(
        ..., description="The source of the intake process."
    )
    notifiedBy: constr(min_length=0, max_length=100) = Field(
        ..., description="The notifier for this absence case."
    )
    reason: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="The absence reason."
    )
    reasonQualifier1: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="The qualifier1 for the absence reason."
    )
    reasonQualifier2: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="The qualifier2 for the absence reason."
    )
    reducedScheduleLeavePeriods: Optional[List[ReducedScheduleLeavePeriod]] = None
    timeOffLeavePeriods: Optional[List[TimeOffLeavePeriod]] = None
    episodicLeavePeriods: Optional[List[EpisodicLeavePeriod]] = None
    notificationCaseId: Optional[constr(min_length=0, max_length=254)] = Field(
        None,
        description="An existing Notification Case Id. If empty a new parent Notification may be created depending on how the Notification case type is configured.",
    )
    notificationReason: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="Notification Reason selected during Notification case intake."
    )
    primaryRelationship: Optional[str] = Field(
        None, description="The name of the primary relationship."
    )
    primaryRelQualifier1: Optional[str] = Field(
        None, description="The qualifier1 of the primary relationship."
    )
    primaryRelQualifier2: Optional[str] = Field(
        None, description="The qualifier2 of the primary relationship."
    )
    secondaryRelationship: Optional[str] = Field(
        None, description="The name of the secondary relationship."
    )
    secondaryRelQualifier1: Optional[str] = Field(
        None, description="The qualifier1 of the secondary relationship."
    )
    secondaryRelQualifier2: Optional[str] = Field(
        None, description="The qualifier2 of the secondary relationship."
    )
    employerNotified: Optional[bool] = Field(
        None,
        description="Indicates whether the employer has been notified about the leave request.",
    )
    employerNotificationDate: Optional[date] = Field(None, description="ISO 8601 date format")
    employerNotificationMethod: Optional[str] = Field(
        None,
        description="The method used to notify the employer about the leave request. Only relevant if the employer has been notified (valid if the employer has been notified).e.g. Other, By Telephone, In Person and In Writing. This maps to enum NotificationMethod(domain id 2547).",
    )


class ExtensionAttribute(BaseModel):
    name: str = Field(
        ..., description="The name of the attribute which extends standard claim set of attributes."
    )
    stringValue: Optional[str] = Field(
        None, description="Value of the class extension attribute of a string type."
    )
    booleanValue: Optional[bool] = Field(
        None, description="Value of the class extension attribute of a boolean type."
    )
    dateOnlyValue: Optional[date] = Field(None, description="ISO 8601 date format")
    decimalValue: Optional[float] = Field(
        None, description="Value of the class extension attribute of a Decimal type."
    )
    enumValue: Optional[ModelEnum] = None
    moneyValue: Optional[str] = Field(
        None, description="Value of the class extension attribute of a Money type."
    )
    integerValue: Optional[int] = Field(
        None, description="Value of the class extension attribute of a string type."
    )


class NotificationAccommodationCaseSummary(BaseModel):
    accommodationCaseId: Optional[constr(min_length=0, max_length=256)] = Field(
        None, description="The Case Number for the accommodation case"
    )
    status: Optional[str] = Field(None, description="The Accommodation Case current phase.")
    notifiedBy: Optional[str] = Field(None, description="The notifier for this accommodation case")
    notificationDate: Optional[date] = Field(None, description="ISO 8601 date format")
    accommodationDecision: Optional[str] = Field(
        None, description="The decision made on this accommodation case"
    )
    decisionDate: Optional[date] = Field(None, description="ISO 8601 date format")
    pregnancyRelated: Optional[str] = Field(
        None, description="The date a decision was made on this accommodation case"
    )
    caseHandler: Optional[constr(min_length=0, max_length=50)] = Field(
        None, description="The Person handling the accommodation case"
    )
    caseHandlerPhoneNumber: Optional[constr(min_length=0, max_length=20)] = Field(
        None, description="The phone number of the accommodation case handler "
    )
    caseHandlerEmailAddress: Optional[constr(min_length=0, max_length=20)] = Field(
        None, description="The email address of the accommodation case handler "
    )
    workplaceAccommodations: Optional[List[WorkPlaceAccommodationDetail]] = Field(
        None, description="List of Accommodations for this accommodation case"
    )
    limitations: Optional[List[LimitationDetail]] = Field(
        None, description="Represents a Limitation to be associated to an Accommodation Case."
    )


class NotificationClaimSummary(BaseModel):
    claimId: constr(min_length=0, max_length=256) = Field(
        ..., description="The claim number of the claim"
    )
    claimType: constr(min_length=0, max_length=50) = Field(
        ..., description="The name by which the claim type is referred."
    )
    creationDate: Optional[date] = Field(None, description="ISO 8601 date time format")
    effectiveDate: Optional[date] = Field(None, description="ISO 8601 date format")
    customerName: Optional[constr(min_length=0, max_length=256)] = Field(
        None, description="The customer name of the claim"
    )
    policyReferences: Optional[constr(min_length=0, max_length=50)] = Field(
        None, description="The reference(s) to the policy from within the relevant admin system."
    )
    description: Optional[constr(min_length=0, max_length=2000)] = Field(
        None, description="Description for this case as entered by the user."
    )
    status: Optional[constr(min_length=0, max_length=10)] = Field(
        None, description="This is the stage in the process that the case is currently at."
    )
    claimHandler: Optional[constr(min_length=0, max_length=50)] = Field(
        None, description="The Person that is handling the claim."
    )
    claimHandlerEmailAddress: Optional[constr(min_length=0, max_length=40)] = Field(
        None, description="The email address of the claim handler."
    )
    claimHandlerPhoneNo: Optional[constr(min_length=0, max_length=20)] = Field(
        None, description="The phone number of the claim handler."
    )
    notificationDate: Optional[date] = Field(None, description="ISO 8601 date format")
    caseComplexity: Optional[str] = Field(None, description="Case complexity on Claim")
    stageName: Optional[str] = Field(None, description="The current stage of claim case.")
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain extension information.",
    )


class Decision(BaseModel):
    absence: Optional[Absence] = None
    employee: Optional[Employee] = None
    period: Optional[Period] = None


class PeriodDecisions(BaseModel):
    startDate: Optional[date] = Field(None, description="ISO 8601 date format")
    endDate: Optional[date] = Field(None, description="ISO 8601 date format")
    decisions: Optional[List[Decision]] = Field(
        None, description="List of Period Decisions for the given absence or employee"
    )


class AbsencePeriod(BaseModel):
    id: Optional[str] = Field(None, description="Business Entity OID")
    reason: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="The name for the absence reason."
    )
    reasonQualifier1: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="The first qualifier for the absence reason."
    )
    reasonQualifier2: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="The second qualifier for the absence reason."
    )
    startDate: Optional[date] = Field(None, description="ISO 8601 date format")
    endDate: Optional[date] = Field(None, description="ISO 8601 date format")
    expectedReturnToWorkDate: Optional[date] = Field(None, description="ISO 8601 date format")
    status: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="The status for this absence period."
    )
    requestStatus: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="The status of the leave request."
    )
    absenceType: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="The absenceType for the absence reason."
    )
    episodicLeavePeriodDetail: Optional[EpisodicLeavePeriodDetail] = None


class AccommodationCase(BaseModel):
    notificationCaseId: Optional[constr(min_length=0, max_length=254)] = Field(
        None,
        description="Notification case id of the case to which the accommodation should be added as a child case.  ",
    )
    notificationReason: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="Notification Reason selected during Notification case intake."
    )
    additionalNotes: Optional[constr(min_length=0, max_length=20000)] = Field(
        None, description="Additional notes for this accommodation."
    )
    pregnancyRelated: str = Field(
        ...,
        description="Identifies whether the accommodation being requested is related to an employee\x92s pregnancy. This is a statutory requirement in certain states and is captured so as it can be reported upon where required. ",
    )
    workPlaceAccommodations: Optional[List[WorkPlaceAccommodation]] = Field(
        None, description="List of Accommodations for this accommodation case."
    )
    limitations: Optional[List[Limitation]] = Field(
        None, description="Represents a Limitation to be associated to an Accommodation Case."
    )


class AdditionalInformation(BaseModel):
    reflexiveQuestionLevel: str = Field(..., description="The reflexive question level.")
    reflexiveQuestionDetails: Optional[List[Attribute]] = None


class SupervisedAbsenceDetails(BaseModel):
    absenceId: Optional[constr(min_length=0, max_length=254)] = Field(
        None, description="The case number of this absence case."
    )
    creationDate: Optional[date] = Field(None, description="ISO 8601 date time format")
    lastUpdatedDate: Optional[date] = Field(None, description="ISO 8601 date time format")
    status: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="The status for this absence case."
    )
    notifiedBy: Optional[constr(min_length=0, max_length=254)] = Field(
        None, description="The notifier for this absence case."
    )
    notificationDate: Optional[date] = Field(None, description="ISO 8601 date format")
    member: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="Full name of the employee for whom the absence case was created."
    )
    memberId: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="The id of an employee in respect of its employer."
    )
    absencePeriods: Optional[List[SupervisedAbsencePeriod]] = Field(
        None, description="The absence periods for this absence case."
    )
    absenceDays: Optional[List[SupervisedAbsenceDay]] = Field(
        None, description="The absence days for this absence case."
    )
    reportedTimeOff: Optional[List[SupervisedTimeOffLeavePeriod]] = Field(
        None, description="The list of supervised time off leave periods."
    )
    reportedReducedSchedule: Optional[List[SupervisedReducedScheduleLeavePeriod]] = Field(
        None, description="The list of supervised reduced schedule leave periods."
    )


class NotificationCaseSummaryForAbsenceTypes(BaseModel):
    notificationCaseId: Optional[str] = Field(
        None, description="The case number for the notification case."
    )
    createdDate: Optional[date] = Field(None, description="ISO 8601 date format")
    notificationReason: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="Notification reason selected during notification case intake."
    )
    notificationDate: Optional[date] = Field(None, description="ISO 8601 date format")
    status: Optional[str] = Field(
        None,
        description="The notification case status his is the current phase of the notification case managing process.",
    )
    accidentDate: Optional[date] = Field(None, description="ISO 8601 date format")
    multipleConflictingAccidentDates: Optional[bool] = Field(
        None,
        description="Multiple conflicting accident dates found.If true,accidentDate attribute will be empty.",
    )
    expectedDeliveryDate: Optional[date] = Field(None, description="ISO 8601 date format")
    actualDeliveryDate: Optional[date] = Field(None, description="ISO 8601 date format")
    dateFirstMissingWork: Optional[date] = Field(None, description="ISO 8601 date format")
    expectedRTWDate: Optional[date] = Field(None, description="ISO 8601 date format")
    multipleConflictingExpectedRTWDates: Optional[bool] = Field(
        None,
        description="Multiple conflicting expected return to work dates found.If true,expectedRTW attribute will be empty.",
    )
    accommodations: Optional[List[NotificationAccommodationCaseSummary]] = Field(
        None, description="The accommodation child cases under this notification case."
    )
    absences: Optional[List[NotificationAbsenceCaseSummary]] = Field(
        None, description="The absence child cases under this notification case."
    )


class PaginatedSupervisedAbsences(BaseModel):
    totalNumberOfRecords: Optional[int] = None
    absences: Optional[List[SupervisedAbsenceSummary]] = None


class EForm(BaseModel):
    eformType: Optional[constr(min_length=0, max_length=200)] = Field(
        None, description="Name of the EForm document type"
    )
    eformId: int = Field(..., description="Unique automatically generated Id of an EForm document.")
    eformAttributes: Optional[List[EFormAttribute]] = Field(
        None, description="An array of EForm attributes."
    )


class MedicalDetailsResponse(BaseModel):
    condition: Optional[str] = Field(
        None, description="A description of the medical condition of the injured party."
    )
    firstDoctorVisitDate: Optional[date] = Field(None, description="ISO 8601 date format")
    lastReceivedDateMedicalInfo: Optional[date] = Field(None, description="ISO 8601 date format")
    lastRequestedDateMedicalInfo: Optional[date] = Field(None, description="ISO 8601 date format")
    medicalAuthorisationReceivedDate: Optional[date] = Field(
        None, description="ISO 8601 date format"
    )
    pregnancyIndicator: Optional[bool] = Field(
        None, description="Indicates whether a person is pregnant or not."
    )
    treatmentPlan: Optional[str] = Field(
        None, description="A description of the treatment plan for the injured party."
    )
    clientDominantSide: Optional[str] = Field(None, description="The claimants dominant side.")
    lifeExpectancy: Optional[str] = Field(
        None,
        description="Projected life expectancy for the injured party based on the current medical information.",
    )
    causeOfInjuryCode: Optional[str] = Field(
        None, description="The code ID that specifies the cause of injury."
    )
    extensionAttributes: Optional[List[ExtensionAttribute]] = Field(
        None, description="Extension attributes."
    )
    symptomsFirstAppeared: Optional[date] = Field(None, description="ISO 8601 date format")
    description: Optional[str] = Field(None, description="Description of the cause of injury code.")


class HospitalisationDetailsResponse(BaseModel):
    startDate: date = Field(..., description="ISO 8601 date format")
    endDate: Optional[date] = Field(None, description="ISO 8601 date format")
    endDateConfirmed: Optional[bool] = Field(
        None, description="The end date confirmation for the hospitalisation period."
    )
    description: Optional[constr(min_length=0, max_length=256)] = Field(
        None, description="The description of hospitalisation detail."
    )
    hospitalReason: Optional[str] = Field(
        None, description="The hospitalisation reason for the claim period."
    )
    extensionAttributes: Optional[List[ExtensionAttribute]] = None
    hospitalisationDetailId: str = Field(..., description="Business Entity OID")
    facility: Optional[str] = Field(None, description="The facilitator(hospital) name.")


class HospitalisationDetails(BaseModel):
    startDate: date = Field(..., description="ISO 8601 date format")
    endDate: Optional[date] = Field(None, description="ISO 8601 date format")
    endDateConfirmed: Optional[bool] = Field(
        None, description="The end date confirmation for the hospitalisation period."
    )
    description: Optional[constr(min_length=0, max_length=256)] = Field(
        None, description="The description of hospitalisation detail."
    )
    hospitalReason: Optional[str] = Field(
        None, description="The hospitalisation reason for the claim period."
    )
    extensionAttributes: Optional[List[ExtensionAttribute]] = None


class IncomeSourceResponse(BaseModel):
    amount: Optional[Decimal] = Field(None, description="Money amount format")
    startDate: Optional[date] = Field(None, description="ISO 8601 date format")
    endDate: Optional[date] = Field(None, description="ISO 8601 date format")
    incomeName: constr(min_length=0, max_length=256) = Field(..., description="Income source name.")
    incomeType: str = Field(..., description="Type of the income source.")
    frequency: Optional[str] = Field(None, description="Frequency of the income.")
    receivedFrom: Optional[str] = Field(
        None, description="Identify from where the other income source was received."
    )
    extensionAttributes: Optional[List[ExtensionAttribute]] = None
    incomeSourceId: Optional[str] = Field(None, description="Business Entity OID")


class IncomeSource(BaseModel):
    amount: Optional[Decimal] = Field(None, description="Money amount format")
    startDate: Optional[date] = Field(None, description="ISO 8601 date format")
    endDate: Optional[date] = Field(None, description="ISO 8601 date format")
    incomeName: constr(min_length=0, max_length=256) = Field(..., description="Income source name.")
    incomeType: str = Field(..., description="Type of the income source.")
    frequency: Optional[str] = Field(None, description="Frequency of the income.")
    receivedFrom: Optional[str] = Field(
        None, description="Identify from where the other income source was received."
    )
    extensionAttributes: Optional[List[ExtensionAttribute]] = None


class Document(BaseModel):
    caseId: Optional[str] = None
    rootCaseId: Optional[str] = None
    documentId: int = Field(..., description="The document Id")
    name: constr(min_length=0, max_length=200) = Field(
        ..., description="The short business description of the document type"
    )
    type: constr(min_length=0, max_length=100) = Field(
        ..., description="The form of the document e.g. image, email, document"
    )
    fileExtension: Optional[constr(min_length=0, max_length=20)] = Field(
        None, description="The file extension of the document. e.g. .doc for MS Word."
    )
    fileName: Optional[constr(min_length=0, max_length=400)] = Field(
        None,
        description="An external reference to the document. This can be a docid or a path and filename.",
    )
    originalFilename: Optional[constr(min_length=0, max_length=300)] = Field(
        None, description="The original attachment filename."
    )
    receivedDate: Optional[date] = Field(None, description="ISO 8601 date format")
    effectiveFrom: Optional[date] = Field(None, description="ISO 8601 date format")
    effectiveTo: Optional[date] = Field(None, description="ISO 8601 date format")
    description: Optional[constr(min_length=0, max_length=4000)] = Field(
        None, description="User solicitied description of this document."
    )
    title: Optional[constr(min_length=0, max_length=2000)] = Field(
        None, description="The title of the document."
    )
    isRead: Optional[bool] = None
    extensionAttributes: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain document (OCDocumentBase) extension information.",
    )


class ReadCustomerOccupation(BaseModel):
    dateJobBegan: Optional[date] = Field(None, description="ISO 8601 date format")
    dateJobEnded: Optional[date] = Field(None, description="ISO 8601 date format")
    daysWorkedPerWeek: Optional[float] = Field(
        None, description="The number of days worked per week."
    )
    employer: Optional[str] = Field(None, description="The name of the employer.")
    endPosReason: Optional[str] = Field(None, description="The reason for job ending.")
    hoursWorkedPerWeek: Optional[float] = Field(
        None, description="The number of hours worked per week."
    )
    jobDesc: Optional[str] = Field(None, description="The job description.")
    jobTitle: Optional[str] = Field(None, description="The job title.")
    remarks: Optional[str] = Field(None, description="The occupation remarks.")
    selfEmployed: Optional[bool] = Field(
        None, description="Is occupation considered self-employed?"
    )
    workScheduleDescription: Optional[str] = Field(
        None, description="The work schedule description."
    )
    employmentCategory: Optional[str] = Field(None, description="The employment category.")
    jobStrenuous: Optional[str] = Field(None, description="The job strenuous.")
    endEmploymentReason: Optional[str] = Field(None, description="The code for occupation ending.")
    employmentLocation: Optional[str] = Field(None, description="The employment location code.")
    additionalEmploymentCategory: Optional[str] = Field(
        None, description="The alternate employment category."
    )
    employmentStatus: Optional[str] = Field(None, description="The employment status.")
    employmentTitle: Optional[str] = Field(None, description="The employment title.")
    workPatternBasis: Optional[str] = Field(None, description="The work pattern basis.")
    employeeId: Optional[constr(min_length=0, max_length=50)] = Field(
        None, description="The id of an employee in respect of its employer."
    )
    extensionAttributes: Optional[List[ExtensionAttribute]] = Field(
        None, description="The extension attributes."
    )
    occupationId: Optional[int] = Field(None, description="The occupation ID.")
    codeId: Optional[str] = Field(None, description="The occupation Code ID.")
    codeName: Optional[str] = Field(
        None, description="The name associated with the specific occupation Code ID."
    )
    overrideDaysWorkedPerWeek: Optional[bool] = Field(
        None, description="Is override days worked per week true or false?"
    )


class WeekBasedWorkPattern(BaseModel):
    workPatternType: str = Field(
        ...,
        description="The Work Pattern Type, which can be any of the following: Fixed, 2 weeks Rotating, 3 weeks Rotating, 4 weeks Rotating. The Unknown, Variable and Weekly Work Pattern values will not be supported",
    )
    workWeekStarts: Optional[str] = Field(
        None, description="The day of the week on which the work week starts."
    )
    patternStartDate: Optional[date] = Field(None, description="ISO 8601 date format")
    patternStatus: Optional[str] = Field(
        None,
        description="Indicates whether the pattern is estimated by the Employee or confirmed by the Employer.",
    )
    workPatternDays: List[WorkPatternDay] = Field(
        ...,
        description="List of days which make up the pattern. There can be 7, 14, 21 or 28 of these.",
    )


class ClaimSummary(BaseModel):
    claimId: constr(min_length=0, max_length=256) = Field(
        ..., description="The claim number of the claim"
    )
    claimType: constr(min_length=0, max_length=50) = Field(
        ..., description="The name by which the claim type is referred."
    )
    creationDate: Optional[date] = Field(None, description="ISO 8601 date time format")
    effectiveDate: Optional[date] = Field(None, description="ISO 8601 date format")
    customerName: Optional[constr(min_length=0, max_length=256)] = Field(
        None, description="The customer name of the claim"
    )
    policyReferences: Optional[constr(min_length=0, max_length=50)] = Field(
        None, description="The reference(s) to the policy from within the relevant admin system."
    )
    description: Optional[constr(min_length=0, max_length=2000)] = Field(
        None, description="Description for this case as entered by the user."
    )
    status: Optional[constr(min_length=0, max_length=10)] = Field(
        None, description="This is the stage in the process that the case is currently at."
    )
    claimHandler: Optional[constr(min_length=0, max_length=50)] = Field(
        None, description="The Person that is handling the claim."
    )
    claimHandlerEmailAddress: Optional[constr(min_length=0, max_length=40)] = Field(
        None, description="The email address of the claim handler."
    )
    claimHandlerPhoneNo: Optional[constr(min_length=0, max_length=20)] = Field(
        None, description="The phone number of the claim handler."
    )
    notificationDate: Optional[date] = Field(None, description="ISO 8601 date format")
    caseComplexity: Optional[str] = Field(None, description="Case complexity on Claim")
    stageName: Optional[str] = Field(None, description="The current stage of claim case.")
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain extension information.",
    )
    notificationCaseId: Optional[constr(min_length=0, max_length=256)] = Field(
        None, description="The notification case number of the claim case if applicable."
    )


class NotificationCaseSummaryForClaims(BaseModel):
    notificationCaseId: Optional[str] = Field(
        None, description="The case number for the notification case."
    )
    createdDate: Optional[date] = Field(None, description="ISO 8601 date format")
    notificationReason: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="Notification reason selected during notification case intake."
    )
    notificationDate: Optional[date] = Field(None, description="ISO 8601 date format")
    status: Optional[str] = Field(
        None,
        description="The notification case status his is the current phase of the notification case managing process.",
    )
    accidentDate: Optional[date] = Field(None, description="ISO 8601 date format")
    multipleConflictingAccidentDates: Optional[bool] = Field(
        None,
        description="Multiple conflicting accident dates found.If true,accidentDate attribute will be empty.",
    )
    expectedDeliveryDate: Optional[date] = Field(None, description="ISO 8601 date format")
    actualDeliveryDate: Optional[date] = Field(None, description="ISO 8601 date format")
    dateFirstMissingWork: Optional[date] = Field(None, description="ISO 8601 date format")
    expectedRTWDate: Optional[date] = Field(None, description="ISO 8601 date format")
    multipleConflictingExpectedRTWDates: Optional[bool] = Field(
        None,
        description="Multiple conflicting expected return to work dates found.If true,expectedRTW attribute will be empty.",
    )
    claims: Optional[List[NotificationClaimSummary]] = Field(
        None, description="The child cases under this notification case."
    )


class ReadOccupation(BaseModel):
    dateJobBegan: Optional[date] = Field(None, description="ISO 8601 date format")
    dateJobEnded: Optional[date] = Field(None, description="ISO 8601 date format")
    daysWorkedPerWeek: Optional[float] = Field(
        None, description="The number of days worked per week."
    )
    employer: Optional[str] = Field(None, description="The name of the employer.")
    endPosReason: Optional[str] = Field(None, description="The reason for job ending.")
    hoursWorkedPerWeek: Optional[float] = Field(
        None, description="The number of hours worked per week."
    )
    jobDesc: Optional[str] = Field(None, description="The job description.")
    jobTitle: Optional[str] = Field(None, description="The job title.")
    remarks: Optional[str] = Field(None, description="The occupation remarks.")
    selfEmployed: Optional[bool] = Field(
        None, description="Is occupation considered self-employed?"
    )
    workScheduleDescription: Optional[str] = Field(
        None, description="The work schedule description."
    )
    employmentCategory: Optional[str] = Field(None, description="The employment category.")
    jobStrenuous: Optional[str] = Field(None, description="The job strenuous.")
    endEmploymentReason: Optional[str] = Field(None, description="The code for occupation ending.")
    employmentLocation: Optional[str] = Field(None, description="The employment location code.")
    additionalEmploymentCategory: Optional[str] = Field(
        None, description="The alternate employment category."
    )
    employmentStatus: Optional[str] = Field(None, description="The employment status.")
    employmentTitle: Optional[str] = Field(None, description="The employment title.")
    workPatternBasis: Optional[str] = Field(None, description="The work pattern basis.")
    employeeId: Optional[constr(min_length=0, max_length=50)] = Field(
        None, description="The id of an employee in respect of its employer."
    )
    extensionAttributes: Optional[List[ExtensionAttribute]] = Field(
        None, description="The extension attributes."
    )
    primary: Optional[bool] = Field(None, description="Is occupation the primary one?")
    occupationId: Optional[int] = Field(None, description="The occupation ID.")
    codeId: Optional[str] = Field(None, description="The occupation Code ID.")
    codeName: Optional[str] = Field(
        None, description="The name associated with the specific occupation Code ID."
    )
    overrideDaysWorkedPerWeek: Optional[bool] = Field(
        None, description="Is override days worked per week true or false?"
    )


class Payment(BaseModel):
    paymentId: Optional[str] = Field(None, description="Business Entity OID")
    benefitCaseNumber: Optional[str] = Field(None, description="The Benefit Case Number.")
    dateInterfaceRecordCreated: Optional[date] = Field(None, description="ISO 8601 date format")
    rootCaseNumber: Optional[str] = None
    benefitCaseTypeName: Optional[str] = None
    benefitRightTypeName: Optional[str] = None
    paymentDate: Optional[date] = Field(None, description="ISO 8601 date format")
    effectiveDate: Optional[date] = Field(None, description="ISO 8601 date format")
    periodStartDate: Optional[date] = Field(None, description="ISO 8601 date format")
    periodEndDate: Optional[date] = Field(None, description="ISO 8601 date format")
    paymentType: Optional[constr(min_length=0, max_length=250)] = Field(
        None, description="The payment type e.g. recurring, adhoc etc"
    )
    paymentMethod: Optional[constr(min_length=0, max_length=256)] = Field(
        None, description="The method used to transfer the payment e.g. EFT, Hand Typed Check etc."
    )
    paymentAmount: Optional[Decimal] = Field(None, description="Money amount format")
    payeeName: Optional[constr(min_length=0, max_length=256)] = Field(
        None, description="The party to whom the payment was made"
    )
    nominatedPayeeName: Optional[constr(min_length=0, max_length=256)] = Field(
        None, description="The party the payee nominated to receive payment"
    )
    paymentAddress: Optional[constr(min_length=0, max_length=256)] = Field(
        None, description="The address the payment was sent to"
    )
    accountTransferInfo: Optional[AccountTransferInfo] = None
    chequePaymentInfo: Optional[ChequePaymentInfo] = None
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain payments (OLPaymentEventInterface) extension information.",
    )


class EmailAddress(BaseModel):
    id: conint(ge=0, le=10) = Field(
        ..., description="The id of the contact method (e.g. phone / mobile / emailAddress) "
    )
    preferred: Optional[bool] = None
    emailAddress: Optional[constr(min_length=0, max_length=120)] = Field(
        None, description="Customers email address."
    )
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain email Address extension information.",
    )


class PhoneNumber(BaseModel):
    id: conint(ge=0, le=10) = Field(
        ..., description="The id of the contact method (e.g. phone / mobile / emailAddress) "
    )
    preferred: Optional[bool] = None
    phoneNumberType: constr(min_length=0, max_length=10) = Field(
        ..., description="The type of phone number (e.g. landline / mobile)"
    )
    intCode: Optional[constr(min_length=0, max_length=10)] = Field(
        None, description="international code value"
    )
    areaCode: Optional[constr(min_length=0, max_length=20)] = Field(
        None, description="area code value"
    )
    telephoneNo: Optional[constr(min_length=0, max_length=10)] = Field(
        None, description="telephone No. value"
    )
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain phone number (OCPhone) extension information.",
    )


class Address(BaseModel):
    premiseNo: Optional[constr(min_length=0, max_length=5)] = Field(
        None, description="This is the premise number"
    )
    addressLine1: Optional[constr(min_length=0, max_length=40)] = Field(
        None, description="Address Line 1"
    )
    addressLine2: Optional[constr(min_length=0, max_length=40)] = Field(
        None, description="Address Line 2"
    )
    addressLine3: Optional[constr(min_length=0, max_length=40)] = Field(
        None, description="Address Line 3"
    )
    addressLine4: Optional[constr(min_length=0, max_length=40)] = Field(
        None, description="Address Line 4"
    )
    addressLine5: Optional[constr(min_length=0, max_length=40)] = Field(
        None, description="Address Line 5"
    )
    addressLine6: Optional[constr(min_length=0, max_length=40)] = Field(
        None, description="Address Line 6"
    )
    addressLine7: Optional[constr(min_length=0, max_length=40)] = Field(
        None, description="Address Line 7"
    )
    postCode: Optional[constr(min_length=0, max_length=40)] = Field(
        None, description="International Postcode"
    )
    country: constr(min_length=0, max_length=100) = Field(..., description="Country")
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain claim extension information.",
    )


class ExtendedAddress(BaseModel):
    buildingName1: Optional[constr(min_length=0, max_length=30)] = Field(
        None, description="The name of the building."
    )
    buildingName2: Optional[constr(min_length=0, max_length=30)] = Field(
        None, description="The name of the building continued."
    )
    floorLevelType: Optional[constr(min_length=0, max_length=10)] = Field(
        None, description="Type of floor level description."
    )
    floorLevelNumber: Optional[constr(min_length=0, max_length=2)] = Field(
        None, description="The number of floor level."
    )
    premiseNoSuffix: Optional[constr(min_length=0, max_length=1)] = Field(
        None, description="The suffix to apply to the number of the premise."
    )
    premiseNoTo: Optional[confloat(ge=0.0, le=5.0)] = Field(
        None, description="The high number in a range for the premise."
    )
    premiseNoToSuffix: Optional[constr(min_length=0, max_length=1)] = Field(
        None, description="The suffix to apply to the number to of the premise."
    )
    streetSuffix: Optional[constr(min_length=0, max_length=10)] = Field(
        None, description="The suffix for the street."
    )
    postalType: Optional[constr(min_length=0, max_length=10)] = Field(
        None, description="The postal type - PO Box, Roadside Mail Box etc."
    )
    postalNumber: Optional[constr(min_length=0, max_length=11)] = Field(
        None, description="The postal number."
    )
    lotNumber: Optional[constr(min_length=0, max_length=6)] = Field(
        None, description="The lot number."
    )
    dpid: Optional[confloat(ge=0.0, le=8.0)] = Field(
        None, description="DPID - 8 digit Australian post address identifier."
    )
    postalNumberPrefix: Optional[constr(min_length=0, max_length=3)] = Field(
        None, description="This refers to the non-numeric portion preceding the Postal Number."
    )
    postalNumberSuffix: Optional[constr(min_length=0, max_length=3)] = Field(
        None, description="This refers to the non-numeric portion following the Postal Number."
    )
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain claim extension information.",
    )


class DisabilityClaim(BaseModel):
    claimIncurredDate: Optional[date] = Field(None, description="ISO 8601 date format")
    eventType: Optional[constr(min_length=0, max_length=10)] = Field(
        None,
        description="The type of event which occurred which led to the disability claim e.g. Accident or Sickness.",
    )
    reasonForClaimEffectiveDateChange: Optional[constr(min_length=0, max_length=10)] = Field(
        None,
        description="Allows a reason to be recorded for a change to the claim's effective date.",
    )
    claimAdditionalInfo: Optional[constr(min_length=0, max_length=4000)] = Field(
        None, description="Additional incident details relevant to the claim."
    )
    disabilityDateFromCustomer: Optional[date] = Field(None, description="ISO 8601 date format")
    accidentDate: Optional[date] = Field(None, description="ISO 8601 date format")
    notificationDate: Optional[date] = Field(None, description="ISO 8601 date format")
    workRelated: Optional[bool] = Field(
        None, description="Indicates whether the event was work related or not."
    )
    numberOfDependents: Optional[conint(ge=0, le=10)] = Field(
        None, description="The number of dependents for the Customer relevant to this Claim"
    )
    claimType: Optional[constr(min_length=0, max_length=10)] = Field(
        None,
        description="This field can be used to capture the type of claim. This is a descriptive attribute which can be changed over the life of the claim",
    )
    source: Optional[constr(min_length=0, max_length=10)] = Field(
        None,
        description="Describes how the claim was initiated, i.e. on-line, phone call, paper application form, customer portal.",
    )
    dateSymptomsFirstAppeared: Optional[date] = Field(None, description="ISO 8601 date format")
    expectedReturnToWorkDate: Optional[date] = Field(None, description="ISO 8601 date format")
    firstDayMissedWork: Optional[date] = Field(None, description="ISO 8601 date format")
    dismembermentOrLoss: Optional[constr(min_length=0, max_length=10)] = Field(
        None, description="Dismemberment/Loss injuries sustained by the customer."
    )
    hoursWorked: Optional[confloat(ge=0.0, le=13.0)] = Field(
        None, description="Number of hours worked"
    )
    insuredSpouseWorking: Optional[bool] = Field(
        None, description="Indicates if the spouse of the insured is currently working."
    )
    salaryCountNumDays: Optional[conint(ge=0, le=5)] = Field(
        None,
        description="Salary Continuance Number of Days - Number of days beyond the disability date insured received full pay",
    )
    workHistory: Optional[constr(min_length=0, max_length=256)] = Field(
        None,
        description="This lists the work history of the insured including occupational, job duty as well as when the insured was employed at these jobs.  Used for any/all and LCDD decisions as well as assisting with job  placement strategy development of the vocational consultant.",
    )
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain claim extension information.",
    )
    description: Optional[constr(min_length=0, max_length=2000)] = Field(
        None, description="Description for this case as entered by the user."
    )
    employeeDateLastWorked: Optional[date] = Field(None, description="ISO 8601 date format")


class ReadDisabilityResult(BaseModel):
    claimSummary: Optional[ClaimSummary] = None
    disabilityClaim: Optional[DisabilityClaim] = None


class PaymentLineDetails(BaseModel):
    adjustmentId: Optional[str] = Field(None, description="Business Entity OID")
    amount: Optional[Decimal] = Field(None, description="Money amount format")
    startDate: Optional[date] = Field(None, description="ISO 8601 date format")
    endDate: Optional[date] = Field(None, description="ISO 8601 date format")
    calcDetails: Optional[List[str]] = Field(
        None, description="The Calculation Details that explain how each adjustment is calculated. "
    )
    payee: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="The name of the Payee which the payment adjustment belongs."
    )
    adjustmentTypeId: Optional[str] = Field(None, description="Business Entity OID")
    fixedAmountIncreaseInstructionClassExtension: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain OLFixedAmountIncreaseInstruction extension information.",
    )
    adjustmentCalcDetailClassExtension: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain OLAdjustmentCalcDetail extension information.",
    )


class ClaimOccupation(BaseModel):
    dateJobBegan: Optional[date] = Field(None, description="ISO 8601 date format")
    dateJobEnded: Optional[date] = Field(None, description="ISO 8601 date format")
    daysWorkedPerWeek: Optional[float] = Field(
        None, description="The number of days worked per week."
    )
    employer: Optional[str] = Field(None, description="The name of the employer.")
    endPosReason: Optional[str] = Field(None, description="The reason for job ending.")
    hoursWorkedPerWeek: Optional[float] = Field(
        None, description="The number of hours worked per week."
    )
    jobDesc: Optional[str] = Field(None, description="The job description.")
    jobTitle: Optional[str] = Field(None, description="The job title.")
    remarks: Optional[str] = Field(None, description="The occupation remarks.")
    selfEmployed: Optional[bool] = Field(
        None, description="Is occupation considered self-employed?"
    )
    workScheduleDescription: Optional[str] = Field(
        None, description="The work schedule description."
    )
    employmentCategory: Optional[str] = Field(None, description="The employment category.")
    jobStrenuous: Optional[str] = Field(None, description="The job strenuous.")
    endEmploymentReason: Optional[str] = Field(None, description="The code for occupation ending.")
    employmentLocation: Optional[str] = Field(None, description="The employment location code.")
    additionalEmploymentCategory: Optional[str] = Field(
        None, description="The alternate employment category."
    )
    employmentStatus: Optional[str] = Field(None, description="The employment status.")
    employmentTitle: Optional[str] = Field(None, description="The employment title.")
    workPatternBasis: Optional[str] = Field(None, description="The work pattern basis.")
    employeeId: Optional[constr(min_length=0, max_length=50)] = Field(
        None, description="The id of an employee in respect of its employer."
    )
    extensionAttributes: Optional[List[ExtensionAttribute]] = Field(
        None, description="The extension attributes."
    )
    primary: Optional[bool] = Field(None, description="Is occupation the primary one?")


class ManagedRequirementSummary(BaseModel):
    managedReqId: int = Field(..., description="the identifier for this managed requirement.")
    category: constr(min_length=0, max_length=50) = Field(
        ..., description="The category name of the managed requirement."
    )
    type: constr(min_length=0, max_length=50) = Field(
        ..., description="The name of the type of the managed requirement."
    )
    dateRequested: Optional[date] = Field(None, description="ISO 8601 date format")
    notProceedingWithDate: Optional[date] = Field(None, description="ISO 8601 date format")
    dateLastFollowedUp: Optional[date] = Field(None, description="ISO 8601 date format")
    followUpDate: Optional[date] = Field(None, description="ISO 8601 date format")
    description: Optional[constr(min_length=0, max_length=250)] = Field(
        None, description="A text description of the outstanding requirement or information."
    )
    status: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="The current status of this Managed Requirement. "
    )
    dateCompleted: Optional[date] = Field(None, description="ISO 8601 date format")
    documentReceived: bool = Field(
        ...,
        description="Indicates that a document has been received for this managed requirement. Returns true if the managed requirement is linked to a document that this user can access,otherwise returns false.",
    )
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain managed requirement (OCManagedRequirement) extension information.",
    )


class NextPaymentLine(BaseModel):
    lineType: Optional[constr(min_length=0, max_length=100)] = Field(
        None,
        description="The name of the payment adjustment e.g. Gross Benefit, Income Tax, Seat Belt etc.",
    )
    amount: Optional[constr(min_length=0, max_length=28)] = Field(
        None, description="The amount of the adjustment"
    )
    sequenceNumber: Optional[int] = Field(
        None,
        description="The adjustment sequence number. Adjustments are applied in ascending order",
    )
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain payments (OLPaymentLine) extension information.",
    )


class TaEnum(BaseModel):
    name: Optional[str] = None
    domainDescription: Optional[str] = None
    domainName: Optional[str] = None
    domainId: Optional[int] = None
    dorder: Optional[int] = None
    fullId: Optional[int] = None
    startDate: Optional[date] = Field(None, description="ISO 8601 date time format")
    endDate: Optional[date] = Field(None, description="ISO 8601 date time format")
    retired: Optional[bool] = None
    editable: Optional[bool] = None
    alphaSort: Optional[bool] = None
    defaultFirst: Optional[bool] = None
    subsets: Optional[List[str]] = None
    active: Optional[bool] = None
    subsetInfo: Optional[List[EnumSubsetInfo]] = None
    nameAttribute: Optional[str] = None
    typedInstances: Optional[List[TaEnumTaEnumType]] = None
    id: Optional[int] = None


class TaEnumCurrencyType(BaseModel):
    name: Optional[str] = None
    domainDescription: Optional[str] = None
    domainName: Optional[str] = None
    domainId: Optional[int] = None
    dorder: Optional[int] = None
    fullId: Optional[int] = None
    startDate: Optional[date] = Field(None, description="ISO 8601 date time format")
    endDate: Optional[date] = Field(None, description="ISO 8601 date time format")
    retired: Optional[bool] = None
    editable: Optional[bool] = None
    alphaSort: Optional[bool] = None
    defaultFirst: Optional[bool] = None
    instances: Optional[List[TaEnum]] = None
    subsets: Optional[List[str]] = None
    active: Optional[bool] = None
    subsetInfo: Optional[List[EnumSubsetInfo]] = None
    nameAttribute: Optional[str] = None
    typedInstances: Optional[List[TaEnumCurrencyType]] = None
    id: Optional[int] = None


class WebMessage(BaseModel):
    subject: constr(min_length=0, max_length=200) = Field(..., description="Subject of the message")
    narrative: constr(min_length=0, max_length=4000) = Field(
        ..., description="The web message text"
    )
    caseId: Optional[constr(min_length=0, max_length=254)] = Field(
        None, description="The case the web message is associated to (if any)"
    )
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain web message information.",
    )
    messageId: Optional[int] = Field(None, description="Message Id")
    contactTime: Optional[date] = Field(None, description="ISO 8601 date time format")
    msgOriginatesFromPortal: Optional[bool] = Field(
        None,
        description="A flag indicating whether the message originates from the customer on the portal or not (in which case the message originating from the insurer)",
    )
    read: Optional[bool] = Field(
        None,
        description="A flag indicating whether the message has been read or not. All msgs which orginate from Portal (i.e. messages from the customer) will be automatically marked as read when created. All messages which do not originate from the portal (from the insurer to the customer) will be marked as read once the customer has read the message",
    )
    isRead: Optional[bool] = None


class WebMessageSummary(BaseModel):
    unReadMessages: Optional[int] = Field(None, description="The number of un-read web messages")
    webMessages: Optional[List[WebMessage]] = Field(
        None, description="The list of web messages belonging to the customer"
    )


class NewWebMessage(BaseModel):
    subject: constr(min_length=0, max_length=200) = Field(..., description="Subject of the message")
    narrative: constr(min_length=0, max_length=4000) = Field(
        ..., description="The web message text"
    )
    caseId: Optional[constr(min_length=0, max_length=254)] = Field(
        None, description="The case the web message is associated to (if any)"
    )
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain web message information.",
    )


class PersonDetails(BaseModel):
    gender: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="The person's gender."
    )
    dateOfBirth: Optional[date] = Field(None, description="ISO 8601 date format")
    maritalStatus: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="Person's marital status - single / married / etc."
    )
    nationality: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="Person's nationality."
    )
    needsInterpretor: Optional[bool] = Field(
        None, description="Indicates if the customer needs an interpreter."
    )
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain customer (OCPerson) extension information.",
    )


class ParticipantContactDetails(BaseModel):
    phoneNumbers: Optional[List[PhoneNumber]] = Field(
        None, description="Return list of phone numbers"
    )
    emailAddresses: Optional[List[EmailAddress]] = Field(
        None, description="Return list of email addresses"
    )
    preferredContactMethod: Optional[int] = Field(
        None,
        description="Return the preferred contact method i.e. either the id of the preferred phone number or id of the preferred email address",
    )


class BenefitSummary(BaseModel):
    benefitId: Optional[str] = Field(None, description="The case number of the benefit.")
    benefitCaseType: Optional[str] = Field(
        None, description="The name by which the benefit type is referred."
    )
    creationDate: Optional[date] = Field(None, description="ISO 8601 date format")
    benefitIncurredDate: Optional[date] = Field(None, description="ISO 8601 date format")
    customerName: Optional[str] = Field(None, description="The full name of the customer.")
    policyReferences: Optional[str] = Field(
        None, description="The reference(s) to the policy from within the relevant admin system."
    )
    description: Optional[str] = Field(
        None, description="Description for this case as entered by the user."
    )
    status: Optional[str] = Field(
        None, description="This is the stage in the process that the case is currently at."
    )
    benefitHandler: Optional[str] = Field(
        None, description="The person that is handling the benefit."
    )
    benefitHandlerPhoneNo: Optional[str] = Field(
        None, description="The phone number of the benefit handler."
    )
    benefitHandlerEmailAddress: Optional[str] = Field(
        None, description="The email address of the benefit handler."
    )
    benefitRightCategory: Optional[str] = Field(
        None, description="Information about the category of the benefit right."
    )
    stageName: Optional[str] = Field(None, description="The current stage of benefit claim case.")
    extensionAttributes: Optional[List[ExtensionAttribute]] = Field(
        None, description="Extra attributes from extension if any."
    )


class DisabilityBenefit(BaseModel):
    benefitIncurredDate: Optional[date] = Field(None, description="ISO 8601 date format")
    brokerAuthorisationFlag: Optional[bool] = Field(
        None,
        description="Flag that indicates if the broker is to be included in the correspondence.",
    )
    initialNotificationDate: Optional[date] = Field(None, description="ISO 8601 date format")
    notificationReceivedDate: Optional[date] = Field(None, description="ISO 8601 date format")
    overrideClaimIncurredDate: Optional[bool] = Field(
        None,
        description="Indicator which specifies that the benefit level incurred date should be used rather than the claim level incurred date.",
    )
    startDateOfBenefitForClaim: Optional[date] = Field(None, description="ISO 8601 date format")
    sourceOfRequest: Optional[str] = Field(
        None,
        description="The type of source that is requesting the benefit, such as claimant, guardian, or medical officer.",
    )
    earliestDateForClaimPayment: Optional[date] = Field(None, description="ISO 8601 date format")
    employeeContributionPercentage: Optional[float] = Field(
        None, description="Percentage representing the Employee Contribution Percentage."
    )
    isReimbursement: Optional[bool] = Field(
        None, description="Indicates if the benefit is paid as a reimbursement or not."
    )
    lateEnrollmentPeriod: Optional[int] = Field(
        None,
        description="Period after enrolment date when customer has to wait for coverage to become eligible.",
    )
    latestDateForClaimPayment: Optional[date] = Field(None, description="ISO 8601 date format")
    minimumQualifyPeriod: Optional[int] = Field(
        None,
        description="Period of time policy has to be in force before the minimum benefit provision can be applied.",
    )
    employerContributionPercentage: Optional[float] = Field(
        None,
        description="Indicates the percent of the payment that is taxable. Typically used as the Employer contribution.",
    )
    isUnderwritten: Optional[bool] = Field(
        None,
        description="Indicates whether or not the member has been underwritten in order to have additional cover beyond what the group membership offers.",
    )
    policyWaitingPeriod: Optional[int] = Field(
        None,
        description="Period of time that the policy must be in force before the insured qualifies for coverage.",
    )
    benefitType: Optional[str] = Field(
        None,
        description="Type of a benefit right such as Disability Income - STD, Disability Income LTD, Accelerated Death Benefit or Accidental Death Benefit.",
    )
    basisOfMinimumQualifyPeriod: Optional[str] = Field(
        None,
        description="Basis of the period of time policy has to be in force before the minimum benefit provision can be applied (i.e. day, week month or year).",
    )
    basisOfLateEnrollmentPeriod: Optional[str] = Field(
        None,
        description="Basis of the period after enrolment date when customer has to wait for coverage to become eligible (i.e. day, week month or year).",
    )
    basisOfPolicyWaitingPeriod: Optional[str] = Field(
        None,
        description="Basis of the period of time that the policy must be in force before the insured qualifies for coverage (i.e. day, week month or year).",
    )
    amountType: Optional[str] = Field(
        None,
        description="Indicates the basis upon which the benefit is calculated, examples might be fixed amount basis, salary percentage basis or tiered basis.",
    )
    employeeContributionStatus: Optional[str] = Field(
        None,
        description="Field which indicates whether a policy is contributory or non-contributory.",
    )
    accidentEliminationPeriod: Optional[int] = Field(
        None, description="Elimination Period units for accident."
    )
    eliminationPeriod: Optional[int] = Field(None, description="The number of Elimination Days.")
    hospitalEliminationPeriod: Optional[int] = Field(
        None, description="Elimination Period for hospitalisation."
    )
    hospitalizationClauseApplies: Optional[bool] = Field(
        None, description="Indicator which determines whether the Hospitalization clause applies."
    )
    basisOfEliminationPeriod: Optional[str] = Field(
        None, description="Basis for elimination period."
    )
    basisOfAccidentEliminationPeriod: Optional[str] = Field(
        None, description="Basis for elimination period for accident."
    )
    hospitalBasisOfEliminationPeriod: Optional[str] = Field(
        None, description="Basis for elimination period for hospitalisation."
    )
    accidentMaxBenefitPeriod: Optional[int] = Field(
        None,
        description="Number of units in the maximum period for an accident. The maximum length of the period to be paid if the customer remains disabled.",
    )
    hospitalMaxBenefitPeriod: Optional[int] = Field(
        None, description="Number of units in the maximum period for hospitalization."
    )
    maxBenefitPeriod: Optional[int] = Field(
        None,
        description="Number of units in the maximum benefit period. The maximum length of the period to be paid if the claimant remains disabled",
    )
    minBenefitPeriod: Optional[int] = Field(
        None,
        description="Number of units in the minimum benefit period. The minimum length of the period to be paid if the claimant remains disabled.",
    )
    basisOfMinBenefitPeriod: Optional[str] = Field(
        None,
        description="Basis of the minimum benefit period. The minimum length of the period to be paid if the claimant remains disabled.",
    )
    basisOfMaxBenefitPeriod: Optional[str] = Field(
        None,
        description="Basis of the maximum benefit period. The maximum length of the period to be paid if the claimant remains disabled.",
    )
    accidentBasisOfMaxBenefitPeriod: Optional[str] = Field(
        None, description="Basis for the maximum period for an accident."
    )
    hospitalBasisOfMaxBenefitPeriod: Optional[str] = Field(
        None, description="Basis of the maximum period for hospitalization."
    )
    benefitStartDate: Optional[date] = Field(None, description="ISO 8601 date format")
    benefitEndDate: Optional[date] = Field(None, description="ISO 8601 date format")
    frequencyAmount: Optional[Decimal] = Field(None, description="Money amount format")
    adviceToPayOverride: Optional[str] = Field(
        None,
        description="The advice provided by the insurer with regard to an individual benefit can be overridden by the employer, either regarding the decision (to pay or not to pay) or the calculated amount.",
    )
    checkCutting: Optional[str] = Field(
        None,
        description="Specify if the insurer may be the one cutting the checks, or the employer might prefer doing it themselves.",
    )
    adviceToPay: Optional[bool] = Field(
        None,
        description="Specify that the benefit is under a service level of advice to pay, that is the insurance carrier providing the service making the decision to approve or deny the paid benefit.",
    )
    extensionAttributes: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="The array will contain extension attributes from Benefit and Benefit Right objects.",
    )
    expectedResolutionDate: Optional[date] = Field(None, description="ISO 8601 date format")
    approvedThroughDate: Optional[date] = Field(None, description="ISO 8601 date format")
    periodType: Optional[str] = Field(
        None,
        description="The type of Benefit Period used to derive the Approved Through Date. Indicates whether the approval is for a fully certified or partially certified period.",
    )


class ReadDisabilityBenefitResult(BaseModel):
    benefitSummary: Optional[BenefitSummary] = None
    disabilityBenefit: Optional[DisabilityBenefit] = None


class LumpSumBenefit(BaseModel):
    benefitIncurredDate: Optional[date] = Field(None, description="ISO 8601 date format")
    brokerAuthorisationFlag: Optional[bool] = Field(
        None,
        description="Flag that indicates if the broker is to be included in the correspondence.",
    )
    initialNotificationDate: Optional[date] = Field(None, description="ISO 8601 date format")
    notificationReceivedDate: Optional[date] = Field(None, description="ISO 8601 date format")
    overrideClaimIncurredDate: Optional[bool] = Field(
        None,
        description="Indicator which specifies that the benefit level incurred date should be used rather than the claim level incurred date.",
    )
    startDateOfBenefitForClaim: Optional[date] = Field(None, description="ISO 8601 date format")
    sourceOfRequest: Optional[str] = Field(
        None,
        description="The type of source that is requesting the benefit, such as claimant, guardian, or medical officer.",
    )
    effectiveDateForCoverage: Optional[date] = Field(None, description="ISO 8601 date format")
    benefitExpiryDate: Optional[date] = Field(None, description="ISO 8601 date format")
    isUnderwritten: Optional[bool] = Field(
        None,
        description="Indicates whether or not the member has been underwritten in order to have additional cover beyond what the group membership offers.",
    )
    policyWaitingPeriod: Optional[int] = Field(
        None,
        description="Period of time that the policy must be in force before the insured qualifies for coverage.",
    )
    benefitType: Optional[str] = Field(
        None,
        description="Type of a benefit right such as Disability Income - STD, Disability Income LTD, Accelerated Death Benefit or Accidental Death Benefit.",
    )
    basisOfPolicyWaitingPeriod: Optional[str] = Field(
        None,
        description="Basis of the period of time that the policy must be in force before the insured qualifies for coverage (i.e. day, week month or year).",
    )
    amountType: Optional[str] = Field(
        None,
        description="Indicates the basis upon which the benefit is calculated, examples might be fixed amount basis, salary percentage basis or tiered basis.",
    )
    flatAmount: Optional[Decimal] = Field(None, description="Money amount format")
    sumInsuredAtIncurredDate: Optional[Decimal] = Field(None, description="Money amount format")
    maximumBenefitExpiryAge: Optional[int] = Field(
        None, description="Maximum Age to be eligible to receive benefit."
    )
    extensionAttributes: Optional[List[ExtensionAttribute]] = Field(
        None, description="Extra attributes from extension if any."
    )


class ReadLumpSumBenefitResult(BaseModel):
    benefitSummary: Optional[BenefitSummary] = None
    lumpSumBenefit: Optional[LumpSumBenefit] = None


class AccountDetails(BaseModel):
    bankCode: Optional[constr(min_length=0, max_length=4)] = Field(
        None, description="The Bank Code"
    )
    accountNo: constr(min_length=0, max_length=256) = Field(
        ..., description="The Account number of the personal account"
    )
    accountName: constr(min_length=0, max_length=256) = Field(
        ..., description="Name of the account holder"
    )
    routingNumber: constr(min_length=0, max_length=256) = Field(
        ..., description="Sort code of the Bank"
    )
    accountType: Optional[constr(min_length=0, max_length=256)] = Field(
        None, description="Account type of the bank"
    )
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain claim extension information.",
    )


class EarningsResponse(BaseModel):
    salaryAmountBasis: Optional[str] = Field(
        None, description="Basis for salary amount being used."
    )
    effectiveDate: Optional[date] = Field(None, description="ISO 8601 date format")
    endDate: Optional[date] = Field(None, description="ISO 8601 date format")
    notes: Optional[constr(min_length=0, max_length=200)] = Field(
        None, description="Notes relating to the earnings period."
    )
    earningsBasis: str = Field(..., description="The earnings frequency.")
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain Earnings extension information.",
    )
    earningsId: conint(ge=0, le=32) = Field(
        ..., description="The unique identifier for the earnings record."
    )
    earningsType: str = Field(
        ...,
        description="The type of earnings record, it could refer to pre-disability, partial or salary.",
    )
    periodInWeeks: int = Field(
        ..., description="Period in weeks between Effective Date and End Date of Earnings record."
    )
    weeklyBasisEarningAmountsResponse: Optional[WeeklyBasisEarningAmountsResponse] = None
    monthlyBasisEarningAmountsResponse: Optional[MonthlyBasisEarningAmountsResponse] = None


class WeeklyEarningsRequest(BaseModel):
    salaryAmountBasis: Optional[str] = Field(
        None, description="Basis for salary amount being used."
    )
    effectiveDate: Optional[date] = Field(None, description="ISO 8601 date format")
    endDate: Optional[date] = Field(None, description="ISO 8601 date format")
    notes: Optional[constr(min_length=0, max_length=200)] = Field(
        None, description="Notes relating to the earnings period."
    )
    earningsBasis: str = Field(..., description="The earnings frequency.")
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain Earnings extension information.",
    )
    weeklyBasisEarningAmountsRequest: Optional[WeeklyBasisEarningAmountsRequest] = None


class MonthlyEarningsRequest(BaseModel):
    salaryAmountBasis: Optional[str] = Field(
        None, description="Basis for salary amount being used."
    )
    effectiveDate: Optional[date] = Field(None, description="ISO 8601 date format")
    endDate: Optional[date] = Field(None, description="ISO 8601 date format")
    notes: Optional[constr(min_length=0, max_length=200)] = Field(
        None, description="Notes relating to the earnings period."
    )
    earningsBasis: str = Field(..., description="The earnings frequency.")
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain Earnings extension information.",
    )
    monthlyBasisEarningAmountsRequest: Optional[MonthlyBasisEarningAmountsRequest] = None


class TaxTypeDetails(BaseModel):
    effectiveDate: Optional[date] = Field(None, description="ISO 8601 date format")
    taxType: str = Field(
        ..., description="The specifies the type of tax, e.g. Federal Income Tax, State Income Tax."
    )
    taxCode: str = Field(..., description="The specifies a code for a subcategory of tax type.")
    percentageRate: Optional[float] = Field(None, description="A percentage rate for tax record.")
    filingMaritalStatus: Optional[str] = Field(
        None, description="The marital status filed for tax purposes."
    )
    additionalWithholdAmount: Optional[Decimal] = Field(None, description="Money amount format")
    numberExemptions: Optional[int] = Field(
        None, description="The tax exemptions e.g. number of exemptions accumulated."
    )
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain claim extension information.",
    )


class FuturePaymentDetail(BaseModel):
    periodStartDate: Optional[date] = Field(None, description="ISO 8601 date format")
    periodEndDate: Optional[date] = Field(None, description="ISO 8601 date format")
    amount: Optional[Decimal] = Field(None, description="Money amount format")
    type: Optional[str] = Field(None, description="The type of the future payment detail.")
    integrationType: Optional[str] = Field(
        None, description="The integration type of the future payment detail."
    )
    reference: Optional[str] = Field(
        None, description="This gives the reference value of the future payment detail."
    )
    calcDetails: Optional[List[str]] = Field(
        None, description="The Calculation Details that explain how each adjustment is calculated. "
    )
    sequenceNumber: Optional[int] = Field(
        None, description="The sequence number of the future payment detail. "
    )
    useTOCalc: Optional[str] = Field(
        None,
        description="The Calculation that explain how each future payment detail is calculated. ",
    )
    payee: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="The name of the Payee which the future payment detail belongs."
    )
    adjustmentClassExtension: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain OLFixedAmountIncreaseInstruction extension information.",
    )
    calcDetailsClassExtension: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain OLAdjustmentCalcDetail extension information.",
    )
    adjustmentTypeId: Optional[str] = Field(None, description="Business Entity OID")


class TaxTypeDetailsResponse(BaseModel):
    effectiveDate: Optional[date] = Field(None, description="ISO 8601 date format")
    taxType: str = Field(
        ..., description="The specifies the type of tax, e.g. Federal Income Tax, State Income Tax."
    )
    taxCode: str = Field(..., description="The specifies a code for a subcategory of tax type.")
    percentageRate: Optional[float] = Field(None, description="A percentage rate for tax record.")
    filingMaritalStatus: Optional[str] = Field(
        None, description="The marital status filed for tax purposes."
    )
    additionalWithholdAmount: Optional[Decimal] = Field(None, description="Money amount format")
    numberExemptions: Optional[int] = Field(
        None, description="The tax exemptions e.g. number of exemptions accumulated."
    )
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain claim extension information.",
    )
    taxTypeDetailsId: str = Field(..., description="The id of the tax type details.")


class MedicalDetails(BaseModel):
    condition: Optional[str] = Field(
        None, description="A description of the medical condition of the injured party."
    )
    firstDoctorVisitDate: Optional[date] = Field(None, description="ISO 8601 date format")
    lastReceivedDateMedicalInfo: Optional[date] = Field(None, description="ISO 8601 date format")
    lastRequestedDateMedicalInfo: Optional[date] = Field(None, description="ISO 8601 date format")
    medicalAuthorisationReceivedDate: Optional[date] = Field(
        None, description="ISO 8601 date format"
    )
    pregnancyIndicator: Optional[bool] = Field(
        None, description="Indicates whether a person is pregnant or not."
    )
    treatmentPlan: Optional[str] = Field(
        None, description="A description of the treatment plan for the injured party."
    )
    clientDominantSide: Optional[str] = Field(None, description="The claimants dominant side.")
    lifeExpectancy: Optional[str] = Field(
        None,
        description="Projected life expectancy for the injured party based on the current medical information.",
    )
    causeOfInjuryCode: Optional[str] = Field(
        None, description="The code ID that specifies the cause of injury."
    )
    extensionAttributes: Optional[List[ExtensionAttribute]] = Field(
        None, description="Extension attributes."
    )
    symptomsFirstAppeared: Optional[date] = Field(None, description="ISO 8601 date format")


class NotificationCaseSummary(BaseModel):
    notificationCaseId: Optional[str] = Field(
        None, description="The case number for the notification case."
    )
    createdDate: Optional[date] = Field(None, description="ISO 8601 date format")
    notificationReason: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="Notification reason selected during notification case intake."
    )
    notificationDate: Optional[date] = Field(None, description="ISO 8601 date format")
    status: Optional[str] = Field(
        None,
        description="The notification case status his is the current phase of the notification case managing process.",
    )
    accidentDate: Optional[date] = Field(None, description="ISO 8601 date format")
    multipleConflictingAccidentDates: Optional[bool] = Field(
        None,
        description="Multiple conflicting accident dates found.If true,accidentDate attribute will be empty.",
    )
    expectedDeliveryDate: Optional[date] = Field(None, description="ISO 8601 date format")
    actualDeliveryDate: Optional[date] = Field(None, description="ISO 8601 date format")
    dateFirstMissingWork: Optional[date] = Field(None, description="ISO 8601 date format")
    expectedRTWDate: Optional[date] = Field(None, description="ISO 8601 date format")
    multipleConflictingExpectedRTWDates: Optional[bool] = Field(
        None,
        description="Multiple conflicting expected return to work dates found.If true,expectedRTW attribute will be empty.",
    )
    absences: Optional[List[NotificationAbsenceCaseSummary]] = Field(
        None, description="The child absence cases under this notification case."
    )
    claims: Optional[List[NotificationClaimSummary]] = Field(
        None, description="The child cases under this notification case."
    )
    accommodations: Optional[List[NotificationAccommodationCaseSummary]] = Field(
        None, description="The child cases under this notification case."
    )


class AbsenceDetails(BaseModel):
    absenceId: Optional[constr(min_length=0, max_length=254)] = Field(
        None, description="The case number of this absence case."
    )
    creationDate: Optional[date] = Field(None, description="ISO 8601 date time format")
    lastUpdatedDate: Optional[date] = Field(None, description="ISO 8601 date time format")
    status: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="The status for this absence case."
    )
    notifiedBy: Optional[constr(min_length=0, max_length=254)] = Field(
        None, description="The notifier for this absence case."
    )
    notificationDate: Optional[date] = Field(None, description="ISO 8601 date format")
    absencePeriods: Optional[List[AbsencePeriod]] = Field(
        None, description="The absence periods for this absence case."
    )
    absenceDays: Optional[List[AbsenceDay]] = Field(
        None, description="The absence days for this absence case."
    )
    reportedTimeOff: Optional[List[ReportedTimeOffLeavePeriod]] = Field(
        None, description="The list of time off leave periods."
    )
    reportedReducedSchedule: Optional[List[ReportedReducedScheduleLeavePeriod]] = Field(
        None, description="The list of reduced scheduled leave periods."
    )
    selectedLeavePlans: Optional[List[LeavePlanDetails]] = Field(
        None, description="The selected leave plans for this absence case."
    )
    financialCaseIds: Optional[List[str]] = Field(
        None, description="The values of the financial case Ids on this absence case."
    )


class ContactDetails(BaseModel):
    phoneNumbers: Optional[List[PhoneNumber]] = Field(
        None, description="An array of objects which contain customer phone number details."
    )
    emailAddresses: Optional[List[EmailAddress]] = Field(
        None, description="Email Address of the customer."
    )


class CustomerAddress(BaseModel):
    address: Address
    australianAddress: Optional[ExtendedAddress] = None


class PaymentLine(BaseModel):
    lineType: Optional[constr(min_length=0, max_length=100)] = Field(
        None,
        description="The name of the payment adjustment e.g. Gross Benefit, Income Tax, Seat Belt etc.",
    )
    integrationType: Optional[constr(min_length=0, max_length=100)] = Field(
        None,
        description="For adjustment PaymentLine this records the IntegrationType which may have been recorded for the adjustment",
    )
    reference: Optional[constr(min_length=0, max_length=250)] = Field(
        None,
        description="For adjustment PaymentLine this records the Reference which may have been recorded for the adjustment",
    )
    amount: Optional[Decimal] = Field(None, description="Money amount format")
    startDate: Optional[date] = Field(None, description="ISO 8601 date format")
    endDate: Optional[date] = Field(None, description="ISO 8601 date format")
    paymentLinesDetail: Optional[List[PaymentLineDetails]] = Field(
        None, description="The Payment Lines Details belongs to each payment."
    )


class Money(BaseModel):
    amount: Optional[float] = None
    currency: Optional[TaEnumCurrencyType] = None
    currencyCode: Optional[str] = None
    negative: Optional[bool] = None
    positive: Optional[bool] = None
    zero: Optional[bool] = None
    greaterEqualZero: Optional[bool] = None


class NextPayment(BaseModel):
    nextPaymentDate: Optional[date] = Field(None, description="ISO 8601 date format")
    nextPeriodStartDate: Optional[date] = Field(None, description="ISO 8601 date format")
    nextPeriodEndDate: Optional[date] = Field(None, description="ISO 8601 date format")
    nextPaymentAmount: Optional[Money] = None
    claimId: Optional[str] = Field(None, description="The claim the payment relates to")
    nextPaymentLines: Optional[List[NextPaymentLine]] = Field(
        None, description="The estimated payment lines comprising the next estimated payment amount"
    )


class Participant(BaseModel):
    participantSummary: CaseParticipantsSummary
    personDetails: Optional[PersonDetails] = None
    correspondenceAddress: Optional[Address] = None
    extendedAddress: Optional[ExtendedAddress] = None


class PaymentPreferenceResponse(BaseModel):
    description: Optional[str] = Field(None, description="Description of the Payment Preference")
    effectiveFrom: Optional[date] = Field(None, description="ISO 8601 date format")
    effectiveTo: Optional[date] = Field(None, description="ISO 8601 date format")
    paymentMethod: str = Field(
        ...,
        description="The name of the payment method. This is used to determine whether chequeDetails or accountDetails is displayed",
    )
    isDefault: Optional[bool] = None
    customerAddress: Optional[CustomerAddress] = None
    chequeDetails: Optional[ChequeDetails] = None
    accountDetails: Optional[AccountDetails] = None
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain claim extension information.",
    )
    paymentPreferenceId: constr(min_length=0, max_length=32) = Field(
        ..., description="The unique identifier for payment preference"
    )
    nominatedPayee: Optional[constr(min_length=0, max_length=250)] = Field(
        None, description="The nominated payee for the payment preference"
    )
    status: Optional[str] = Field(None, description="The status of the payment preference")
    stageName: Optional[str] = Field(
        None, description="The current stage of the payment preference"
    )


class NewPaymentPreference(BaseModel):
    description: Optional[str] = Field(None, description="Description of the Payment Preference")
    effectiveFrom: Optional[date] = Field(None, description="ISO 8601 date format")
    effectiveTo: Optional[date] = Field(None, description="ISO 8601 date format")
    paymentMethod: str = Field(
        ...,
        description="The name of the payment method. This is used to determine whether chequeDetails or accountDetails is displayed",
    )
    isDefault: Optional[bool] = None
    customerAddress: Optional[CustomerAddress] = None
    chequeDetails: Optional[ChequeDetails] = None
    accountDetails: Optional[AccountDetails] = None
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain claim extension information.",
    )
    overridePostalAddress: Optional[bool] = Field(
        None,
        description="Indicates that an override address applies for the payment preference. (i.e. sets the paymentAddressType to override. When false the correspondence address for the payee (or nominated payee) applies.",
    )


class MainPayeeDetails(BaseModel):
    participantId: Optional[int] = Field(None, description="Id of the participant")
    rolename: Optional[constr(min_length=0, max_length=10)] = Field(
        None, description="The role name assigned to the participant on the case"
    )
    partyName: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="The name of the party with the participant role on the case"
    )
    startDate: Optional[date] = Field(None, description="ISO 8601 date format")
    endDate: Optional[date] = Field(None, description="ISO 8601 date format")
    referenceNo: Optional[constr(min_length=0, max_length=40)] = Field(
        None, description="The reference number of the party with the participant role on the case"
    )
    sourceSystem: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="The source system of the party with the participant role on the case"
    )
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain claim extension information",
    )
    paymentPreference: Optional[PaymentPreferenceResponse] = None
    taxTypeDetails: Optional[List[TaxTypeDetails]] = Field(
        None, description="Gets the list of tax details of main payee on benefit."
    )


class FuturePayment(BaseModel):
    dueEventId: Optional[str] = Field(None, description="Business Entity OID")
    processingDate: Optional[date] = Field(None, description="ISO 8601 date format")
    benefitId: Optional[str] = None
    effectiveDate: Optional[date] = Field(None, description="ISO 8601 date format")
    periodStartDate: Optional[date] = Field(None, description="ISO 8601 date format")
    periodEndDate: Optional[date] = Field(None, description="ISO 8601 date format")
    grossAmount: Optional[Decimal] = Field(None, description="Money amount format")
    netAmount: Optional[Decimal] = Field(None, description="Money amount format")
    balancingAmount: Optional[Decimal] = Field(None, description="Money amount format")
    netPaymentAmount: Optional[Decimal] = Field(None, description="Money amount format")
    futurePaymentDetails: Optional[List[FuturePaymentDetail]] = Field(
        None, description="This list return the recurring future payment details list."
    )


class Customer(BaseModel):
    firstName: constr(min_length=0, max_length=50) = Field(..., description="Person's first name.")
    lastName: constr(min_length=0, max_length=50) = Field(..., description="Person's last name.")
    secondName: Optional[constr(min_length=0, max_length=50)] = Field(
        None, description="Person's second name."
    )
    initials: Optional[constr(min_length=0, max_length=10)] = Field(
        None, description="Person's middle initials."
    )
    needsInterpretor: Optional[bool] = Field(
        None, description="Indicates if the customer needs an interpreter."
    )
    placeOfBirth: Optional[constr(min_length=0, max_length=50)] = Field(
        None, description="Place of birth."
    )
    gender: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="The person's gender."
    )
    dateOfBirth: date = Field(..., description="ISO 8601 date format")
    maritalStatus: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="Person's marital status - single / married / etc."
    )
    nationality: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="Person's nationality."
    )
    title: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="Person's chosen title e.g. Mr / Mrs etc."
    )
    idNumber: Optional[constr(min_length=0, max_length=10)] = Field(
        None, description="ID number of the claimant."
    )
    identificationNumberType: Optional[constr(min_length=0, max_length=100)] = Field(
        None, description="The type of identification number the party will have."
    )
    securedClient: Optional[bool] = Field(None, description="Secured client flag.")
    staff: Optional[bool] = Field(None, description="Staff flag.")
    partyType: Optional[str] = None
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain customer (OCPerson) extension information.",
    )
    customerAddress: Optional[CustomerAddress] = None
    initals: Optional[str] = None


TaEnumCurrencyType.update_forward_refs()
