# generated by datamodel-codegen:
#   filename:  spec.cleaned.json
#   timestamp: 2022-03-17T15:37:18+00:00

from __future__ import annotations

from datetime import date, datetime
from decimal import Decimal
from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import Field

from massgov.pfml.util.pydantic import PydanticBaseModelEmptyStrIsNone


class AUFloorLevelTypesRequest(PydanticBaseModelEmptyStrIsNone):
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )
    name: Optional[str] = Field(None, description="The enum instance name")


class AUPostalTypesRequest(PydanticBaseModelEmptyStrIsNone):
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )
    name: Optional[str] = Field(None, description="The enum instance name")


class AUStreetSuffixesRequest(PydanticBaseModelEmptyStrIsNone):
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )
    name: Optional[str] = Field(None, description="The enum instance name")


class Absence(PydanticBaseModelEmptyStrIsNone):
    caseReference: Optional[str] = Field(None, description="Case reference related to absence")
    id: Optional[str] = Field(None, description="Unique identifier for the absence case")


class AbsenceCaseSummary(PydanticBaseModelEmptyStrIsNone):
    absenceHandler: Optional[str] = Field(
        None, description=" The Person handling the absence case", max_length=50, min_length=0
    )
    absenceHandlerEmailAddress: Optional[str] = Field(
        None,
        description="The phone number of the absence case handler",
        max_length=40,
        min_length=0,
    )
    absenceHandlerPhoneNumber: Optional[str] = Field(
        None,
        description="The email address of the absence case handler",
        max_length=20,
        min_length=0,
    )
    absenceId: Optional[str] = Field(
        None, description="Absence case identifier", max_length=254, min_length=0
    )
    createdDate: Optional[datetime] = Field(
        None, description="ISO 8601 date time format", example="1999-12-31T23:59:59Z"
    )
    endDate: Optional[datetime] = Field(
        None, description="ISO 8601 date time format", example="1999-12-31T23:59:59Z"
    )
    hasFinancialInformation: Optional[bool] = Field(
        None, description="Absence case has financial information"
    )
    notificationCaseId: Optional[str] = Field(
        None, description="Notification case id, if applicable for the absence case"
    )
    reason: Optional[str] = Field(
        None, description="Reason for the absence", max_length=100, min_length=0
    )
    reasonQualifier1: Optional[str] = Field(
        None, description="Qualifier 1", max_length=100, min_length=0
    )
    reasonQualifier2: Optional[str] = Field(
        None, description="Qualifier 2", max_length=100, min_length=0
    )
    startDate: Optional[datetime] = Field(
        None, description="ISO 8601 date time format", example="1999-12-31T23:59:59Z"
    )
    status: Optional[str] = Field(
        None,
        description="Value expected to be from is for enum domain CurrentPhase",
        max_length=100,
        min_length=0,
    )


class AbsenceDay(PydanticBaseModelEmptyStrIsNone):
    date: Optional[date] = Field(None, description="ISO 8601 date format", example="1999-12-31")
    decision: Optional[str] = Field(
        None, description="Decision status of leave request", max_length=100, min_length=0
    )
    timeDeducted: Optional[str] = Field(
        None,
        description="The total deducted time of absence associated with this day.",
        max_length=100,
        min_length=0,
    )
    timeDeductedBasis: Optional[str] = Field(
        None, description="TaEnum<LengthBasis> value", max_length=100, min_length=0
    )
    timeRequested: Optional[str] = Field(
        None,
        description="The total requested time of absence associated with this day.",
        max_length=100,
        min_length=0,
    )
    timeRequestedBasis: Optional[str] = Field(
        None, description="TaEnum<LengthBasis> value", max_length=100, min_length=0
    )


class AbsencePeriodDecision(PydanticBaseModelEmptyStrIsNone):
    absenceCaseId: Optional[str] = Field(None, description="Absence Case ID.")
    absencePeriodStatus: Optional[str] = Field(None, description="Status of absence period.")
    absencePeriodType: Optional[str] = Field(None, description="Type of absence period.")
    actualForRequestedEpisodic: Optional[bool] = Field(
        None, description="True if this is an Actual Period linked to an Episodic Period."
    )
    adjudicationStatus: Optional[str] = Field(
        None, description="Adjudication status of leave plan."
    )
    applicabilityStatus: Optional[str] = Field(
        None, description="Applicability status of leave plan."
    )
    approvalReason: Optional[str] = Field(None, description="Absence plan approval reason.")
    availabilityPeriodMethod: Optional[str] = Field(
        None, description="Availability period method of leave plan period."
    )
    availabilityStatus: Optional[str] = Field(
        None, description="Availability status of leave plan."
    )
    balanceDeduction: Optional[float] = Field(
        None, description="Balance deduction value for every decision day included in this period."
    )
    decisionStatus: Optional[str] = Field(None, description="Absence plan decision status.")
    denialReason: Optional[str] = Field(None, description="Absence plan denial status.")
    eligibilityStatus: Optional[str] = Field(None, description="Eligibility status of leave plan.")
    endDate: Optional[date] = Field(None, description="ISO 8601 date format", example="1999-12-31")
    evidenceStatus: Optional[str] = Field(None, description="Evidence status of leave plan.")
    fixedYearStartDay: Optional[int] = Field(
        None, description="Fixed year start date of absence period."
    )
    fixedYearStartMonth: Optional[str] = Field(
        None, description="Fixed year start month of absence period."
    )
    leavePlanCategory: Optional[str] = Field(None, description="Category of leave plan.")
    leavePlanId: Optional[str] = Field(None, description="Leave plan ID.")
    leavePlanName: Optional[str] = Field(None, description="Leave plan name.")
    leavePlanShortName: Optional[str] = Field(None, description="Leave plan short name.")
    leaveRequestId: Optional[str] = Field(
        None, description="Business Entity OID", example="PE-00012-0000001234"
    )
    parentPeriodId: Optional[str] = None
    periodId: Optional[str] = Field(
        None, description="Business Entity OID", example="PE-00012-0000001234"
    )
    qualifier1: Optional[str] = Field(None, description="Leave plan qualifier1.")
    qualifier2: Optional[str] = Field(None, description="Leave plan qualifier2.")
    reasonName: Optional[str] = Field(None, description="Reason name of leave plan.")
    startDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    timeBankMethod: Optional[str] = Field(
        None, description="Time bank method of leave plan period."
    )
    timeDecisionReason: Optional[str] = Field(
        None, description="Absence plan time decision reason."
    )
    timeDecisionStatus: Optional[str] = Field(
        None, description="Absence plan time decision status."
    )
    timeDeducted: Optional[str] = Field(
        None, description="The total deducted time of absence associated with the decision day."
    )
    timeDeductedBasis: Optional[str] = Field(
        None,
        description="the time deducted Basis used for the total deducted time of absence associated with the decision day.e.g.minutes,hours,days",
    )
    timeEntitlement: Optional[float] = Field(
        None, description="Time entitlement of absence period."
    )
    timeEntitlementBasis: Optional[str] = Field(
        None, description="Time entitlement basis of absence period."
    )
    timeRequested: Optional[str] = Field(
        None, description="The time requested for Actual Periods linked to an Episodic Period."
    )
    timeWithinPeriod: Optional[int] = Field(None, description="Time within absence period.")
    timeWithinPeriodBasis: Optional[str] = Field(
        None, description="Time within period basis of absence period."
    )


class AbsencePeriodDecisions(PydanticBaseModelEmptyStrIsNone):
    absencePeriodDecisions: Optional[List[AbsencePeriodDecision]] = None
    endDate: Optional[date] = Field(None, description="ISO 8601 date format", example="1999-12-31")
    startDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )


class AbsenceReasonModel(PydanticBaseModelEmptyStrIsNone):
    reason: str = Field(
        ..., description="The name for the absence reason.", max_length=100, min_length=0
    )
    reasonQualifier1: str = Field(
        ..., description="The first qualifier for the absence reason.", max_length=100, min_length=0
    )
    reasonQualifier2: str = Field(
        ...,
        description="The second qualifier for the absence reason.",
        max_length=100,
        min_length=0,
    )


class AbsenceReasonSummary(PydanticBaseModelEmptyStrIsNone):
    accommodation: Optional[str] = Field(
        None,
        description="Determine whether the reason requires a workplace accommodation.",
        max_length=100,
        min_length=0,
    )
    allowedGender: Optional[str] = Field(
        None, description="Gender of the covered person", max_length=100, min_length=0
    )
    askForSecondaryRelationship: Optional[bool] = Field(
        None, description="Specify secondary reason."
    )
    category: Optional[str] = Field(
        None, description="The Category for the absence reason.", max_length=100, min_length=0
    )
    coveredPerson: Optional[str] = Field(None, description="Covered person type.")
    disabilityIntegration: Optional[str] = Field(
        None,
        description="Determines if the reason is classed as a disability condition.",
        max_length=100,
        min_length=0,
    )
    eventType: Optional[str] = Field(
        None, description="The Event type for the absence reason.", max_length=100, min_length=0
    )
    medicalRelated: Optional[str] = Field(
        None, description="Medical information of  the covered person", max_length=100, min_length=0
    )
    militaryRelated: Optional[str] = Field(
        None,
        description="MilitaryRelated information of  the covered person.",
        max_length=100,
        min_length=0,
    )
    notificationReason: Optional[str] = Field(
        None,
        description="The notification reason associated with this absence reason.",
        max_length=100,
        min_length=0,
    )
    reason: str = Field(
        ..., description="The name for the absence reason.", max_length=100, min_length=0
    )
    reasonQualifier1: str = Field(
        ..., description="The first qualifier for the absence reason.", max_length=100, min_length=0
    )
    reasonQualifier2: str = Field(
        ...,
        description="The second qualifier for the absence reason.",
        max_length=100,
        min_length=0,
    )
    seriousHealth: Optional[str] = Field(
        None,
        description="Indicates whether the condition is serious or not.",
        max_length=100,
        min_length=0,
    )


class AccountTransferInfo(PydanticBaseModelEmptyStrIsNone):
    bankAccountNumber: Optional[str] = Field(
        None, description="The bank account number of an employee"
    )
    bankAccountType: Optional[str] = Field(None, description="The bank account type of an employee")
    bankBranchSortCode: Optional[str] = Field(
        None, description="The employee bank branch sort code"
    )
    bankCode: Optional[str] = Field(None, description="The bank code of an employee")
    bankInstituteName: Optional[str] = Field(
        None, description="The bank institute name of an employee"
    )


class AccountTypeRequest(PydanticBaseModelEmptyStrIsNone):
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )
    name: Optional[str] = Field(None, description="The enum instance name")


class ActualEarningsTypeRequest(PydanticBaseModelEmptyStrIsNone):
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )
    name: Optional[str] = Field(None, description="The enum instance name")


class AdditionalWithholdAmountMoneyRequest(PydanticBaseModelEmptyStrIsNone):
    amountMinorUnits: Optional[str] = Field(
        None,
        description="The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
    )


class AdditionalWithholdAmountMoneyResponse(PydanticBaseModelEmptyStrIsNone):
    amountMinorUnits: Optional[int] = Field(
        None,
        description="The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
    )
    currency: Optional[str] = Field(None, description="The currency used in the Money amount")
    scale: Optional[int] = Field(None, description="The scale used in the Money amount")


class ApprovalOrderDecisions(PydanticBaseModelEmptyStrIsNone):
    amount: Decimal = Field(..., description="Money amount format", example="1500.50")
    amountUsed: Decimal = Field(..., description="Money amount format", example="1500.50")
    approvalDecisionId: str = Field(
        ..., description="Approval Order Decision Id", max_length=50, min_length=0
    )
    decisionReason: str = Field(..., description="Decision Reason", max_length=100, min_length=0)
    decisionStatus: str = Field(..., description="Decision Status", max_length=50, min_length=0)
    limitInUnits: float = Field(..., description="Limit in Units")
    periodEndDate: date = Field(..., description="ISO 8601 date format", example="1999-12-31")
    periodStartDate: date = Field(..., description="ISO 8601 date format", example="1999-12-31")
    ratePerUnit: Decimal = Field(..., description="Money amount format", example="1500.50")
    remainingAmount: Decimal = Field(..., description="Money amount format", example="1500.50")
    remainingUnits: float = Field(..., description="Remaining Units")
    serviceCode: str = Field(..., description="Service Code", max_length=50, min_length=0)
    serviceDescription: str = Field(
        ..., description="Service Description", max_length=2000, min_length=0
    )
    unitsUsed: int = Field(..., description="Units used")
    usageBasis: str = Field(..., description="Usage Basis", max_length=50, min_length=0)


class ApprovalOrders(PydanticBaseModelEmptyStrIsNone):
    approvalOrderId: str = Field(..., description="Approval Order Id", max_length=50, min_length=0)
    benefitCaseNumber: str = Field(..., description="Benefit Number", max_length=50, min_length=0)
    description: str = Field(..., description="Description", max_length=2000, min_length=0)
    facilityName: str = Field(..., description="Faclity Name", max_length=50, min_length=0)
    overallMaximumAmount: Decimal = Field(..., description="Money amount format", example="1500.50")
    providerName: str = Field(..., description="Provider Name", max_length=50, min_length=0)
    referenceNumber: str = Field(..., description="Reference Number", max_length=50, min_length=0)
    status: str = Field(..., description="Status", max_length=50, min_length=0)
    statusEffectiveDate: date = Field(..., description="ISO 8601 date format", example="1999-12-31")
    vendorName: str = Field(..., description="Vendor Name", max_length=50, min_length=0)


class Base64EncodedFileData(PydanticBaseModelEmptyStrIsNone):
    base64EncodedFileContents: str = Field(..., description="The base64 encoded file contents.")
    contentType: Optional[str] = Field(None, description="The MIME type of the file.")
    description: Optional[str] = Field(None, description="A description of the file.")
    fileExtension: str = Field(
        ..., description="The extension of the file, without a preceding dot."
    )
    fileName: str = Field(..., description="The name of the file, without the extension.")
    fileSizeInBytes: int = Field(..., description="The size in bytes of the file.")
    managedReqId: Optional[int] = Field(
        None, description="The Managed Requirement ID to be associated with the file."
    )


class Base64EncodedFileDetails(PydanticBaseModelEmptyStrIsNone):
    base64EncodedFileContents: str = Field(..., description="The base64 encoded file contents.")
    contentType: Optional[str] = Field(None, description="The MIME type of the file.")
    description: Optional[str] = Field(None, description="A description of the file.")
    fileExtension: str = Field(
        ..., description="The extension of the file, without a preceding dot."
    )
    fileName: str = Field(..., description="The name of the file, without the extension.")


class CaseHandlerEmbeddable(PydanticBaseModelEmptyStrIsNone):
    emailAddress: Optional[str] = Field(None, description="Email address of the case handler.")
    id: Optional[str] = Field(None, description="ID used to uniquely identify case handler.")
    name: Optional[str] = Field(None, description="Full name of the case handler.")
    phoneNumber: Optional[str] = Field(None, description="Phone number of the case handler.")


class CaseParticipantsSummary(PydanticBaseModelEmptyStrIsNone):
    endDate: Optional[date] = Field(None, description="ISO 8601 date format", example="1999-12-31")
    participantId: Optional[int] = Field(None, description="Id of the participant")
    partyName: Optional[str] = Field(
        None,
        description="The name of the party with the participant role on the case",
        max_length=100,
        min_length=0,
    )
    referenceNo: Optional[str] = Field(
        None,
        description="The reference number of the party with the participant role on the case",
        max_length=40,
        min_length=0,
    )
    rolename: Optional[str] = Field(
        None,
        description="The role name assigned to the participant on the case",
        max_length=10,
        min_length=0,
    )
    sourceSystem: Optional[str] = Field(
        None,
        description="The source system of the party with the participant role on the case",
        max_length=100,
        min_length=0,
    )
    startDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )


class CaseStatusHistory(PydanticBaseModelEmptyStrIsNone):
    dateStatusDeparted: Optional[str] = Field(
        None,
        description="Formatted date when benefit's underlying process moved out of a step with this phase.",
    )
    dateStatusEntered: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    status: Optional[str] = Field(
        None, description="The stage in the process that the case was at."
    )


class CertificationPeriodDetails(PydanticBaseModelEmptyStrIsNone):
    consultationDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    duration: Optional[int] = Field(
        None, description="The number of days within the certification period."
    )
    insurerReceivedDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    notes: Optional[str] = Field(None, description="The notes about the certification period.")
    periodFromDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    periodToDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    periodType: Optional[str] = Field(
        None, description="The period type of the certification period."
    )
    status: Optional[str] = Field(None, description="The status of the certification period.")
    statusReason: Optional[str] = Field(
        None, description=" The selected reason for the status of a certification period."
    )
    totalPeriodDays: Optional[int] = Field(
        None,
        description="The total days of a certification period for a specific period type.\r\nThis is calculated based on the event FINEOS.claims.benefits.calcDaysInPeriodEvent",
    )


class ChangeRequestPeriod(PydanticBaseModelEmptyStrIsNone):
    endDate: Optional[date] = Field(None, description="ISO 8601 date format", example="1999-12-31")
    startDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )


class ChangeRequestPeriodCommand(PydanticBaseModelEmptyStrIsNone):
    endDate: Optional[date] = Field(None, description="ISO 8601 date format", example="1999-12-31")
    startDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )


class ChequeDetailEmbeddable(PydanticBaseModelEmptyStrIsNone):
    nameToPrintOnCheck: Optional[str] = Field(
        None,
        description="This is the name that displays on the payee's check. For example, the payee's name, or if there is a nominated payee, In the Estate of followed by the nominated payee's name.",
    )


class ChequeDetails(PydanticBaseModelEmptyStrIsNone):
    nameToPrintOnCheck: Optional[str] = Field(
        None,
        description="The name that should be printed on the check",
        max_length=100,
        min_length=0,
    )


class ChequePaymentInfo(PydanticBaseModelEmptyStrIsNone):
    chequeNumber: Optional[str] = Field(None, description="The cheque number of an employee")


class CountryRequest(PydanticBaseModelEmptyStrIsNone):
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )
    name: Optional[str] = Field(None, description="The enum instance name")


class CreateAbsencePeriodTypeRequest(PydanticBaseModelEmptyStrIsNone):
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )
    name: Optional[str] = Field(None, description="The enum instance name")


class CreateAccountDetailCommand(PydanticBaseModelEmptyStrIsNone):
    accountName: str = Field(..., description="Name of the account holder", max_length=256)
    accountNo: str = Field(
        ..., description="The Account number of the personal account", max_length=256
    )
    accountType: Optional[AccountTypeRequest] = None
    bankCode: Optional[str] = Field(None, description="The Bank Code", max_length=4)
    extensions: Optional[Dict[str, Any]] = None
    routingNumber: str = Field(..., description="Sort code of the Bank", max_length=256)


class CreateAustralianAddressCommand(PydanticBaseModelEmptyStrIsNone):
    buildingName1: Optional[str] = Field(
        None, description="The name of the building.", max_length=30
    )
    buildingName2: Optional[str] = Field(
        None, description="The name of the building continued.", max_length=30
    )
    dpId: Optional[int] = Field(
        None,
        description="Referred to as DPID this is an 8-digit Australian post address identifier which uniquely identifies each delivery point to which Australia Post delivers mail. ",
    )
    extensions: Optional[Dict[str, Any]] = None
    floorLevelNumber: Optional[str] = Field(
        None,
        description="The floorLevelNumber must not be more than {max} characters",
        max_length=2,
    )
    floorLevelType: AUFloorLevelTypesRequest
    lotNumber: Optional[str] = Field(None, description="The lot number.", max_length=6)
    postalNumber: Optional[str] = Field(None, description="The postal number. ", max_length=6)
    postalNumberPrefix: Optional[str] = Field(
        None,
        description="This refers to the non-numeric portion preceding the Postal Number. EXAMPLE : PO Box B20 where B is the prefix. ",
        max_length=3,
    )
    postalNumberSuffix: Optional[str] = Field(
        None,
        description="This refers to the non-numeric portion following the Postal Number. EXAMPLE : PO Box 20A where A is the suffix.",
        max_length=3,
    )
    postalType: AUPostalTypesRequest
    premiseNoSuffix: Optional[str] = Field(
        None, description="The suffix to apply to the number of the premise.", max_length=1
    )
    premiseNoTo: Optional[int] = Field(
        None,
        description="The high number in a range for the premise. This is used when an address consists of a range of numbers as in 8-10 Lower Pembroke Street where the value 10 would be stored in this field. ",
    )
    premiseNoToSuffix: Optional[str] = Field(
        None, description="The suffix to apply to the number to of the premise. ", max_length=1
    )
    streetSuffix: AUStreetSuffixesRequest


class CreateChequeDetailCommand(PydanticBaseModelEmptyStrIsNone):
    nameToPrintOnCheck: Optional[str] = Field(
        None,
        description="This is the name that displays on the payee's check. For example, the payee's name, or if there is a nominated payee, In the Estate of followed by the nominated payee's name.",
        max_length=100,
    )


class CreditEarningsMoneyRequest(PydanticBaseModelEmptyStrIsNone):
    amountMinorUnits: Optional[str] = Field(
        None,
        description="The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
    )


class CreditEarningsMoneyResponse(PydanticBaseModelEmptyStrIsNone):
    amountMinorUnits: Optional[int] = Field(
        None,
        description="The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
    )
    currency: Optional[str] = Field(None, description="The currency used in the Money amount")
    scale: Optional[int] = Field(None, description="The scale used in the Money amount")


class CustomerSummaryDetails(PydanticBaseModelEmptyStrIsNone):
    customerNo: str = Field(..., description="The Customer number", max_length=256, min_length=0)
    dateOfBirth: str = Field(
        ..., description="The Date Of Birth of the Customer", max_length=256, min_length=0
    )
    firstName: str = Field(
        ..., description="The First Name of the Customer", max_length=256, min_length=0
    )
    lastName: str = Field(
        ..., description="The Last Name of the Customer", max_length=256, min_length=0
    )


class DependentDeductionsMoneyRequest(PydanticBaseModelEmptyStrIsNone):
    amountMinorUnits: Optional[str] = Field(
        None,
        description="The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
    )


class DependentDeductionsMoneyResponse(PydanticBaseModelEmptyStrIsNone):
    amountMinorUnits: Optional[int] = Field(
        None,
        description="The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
    )
    currency: Optional[str] = Field(None, description="The currency used in the Money amount")
    scale: Optional[int] = Field(None, description="The scale used in the Money amount")


class DiagnosisDetails(PydanticBaseModelEmptyStrIsNone):
    causeGrouping: Optional[str] = Field(
        None,
        description="The name of the medical code group in which this medical code is contained.",
        max_length=500,
        min_length=0,
    )
    description: Optional[str] = Field(
        None, description="A description of the medical code.", max_length=500, min_length=0
    )
    diagnosisDetailsId: Optional[str] = Field(
        None,
        description="Business Entity OID",
        example="PE-00012-0000001234",
        max_length=10,
        min_length=0,
    )
    firstPrimaryCode: Optional[bool] = Field(
        None,
        description="Indicates whether or not this is the first medical code identified with the primary level indicator.",
    )
    groupType: Optional[str] = Field(
        None, description="Specifies the type of the medical code group."
    )
    levelIndicator: Optional[str] = Field(
        None,
        description="The injury code level e.g. primary or secondary assigned to the injury in the context of the claim.",
    )
    medicalCode: Optional[str] = Field(
        None,
        description="The code ID that specifies a particular diagnosis.",
        max_length=20,
        min_length=0,
    )


class DocumentGroup(PydanticBaseModelEmptyStrIsNone):
    description: Optional[str] = Field(
        None, description="The document group description.", max_length=200, min_length=0
    )
    name: Optional[str] = Field(
        None, description="The document group name.", max_length=100, min_length=0
    )


class DocumentSummary(PydanticBaseModelEmptyStrIsNone):
    documentGroups: Optional[List[DocumentGroup]] = Field(
        None, description="Document groups containing the document."
    )
    documentId: Optional[int] = Field(None, description="The document ID.")
    fileExtension: Optional[str] = Field(
        None, description="The document file extension.", max_length=100, min_length=0
    )
    fileName: Optional[str] = Field(
        None, description="The document file name.", max_length=100, min_length=0
    )


class EFormSummary(PydanticBaseModelEmptyStrIsNone):
    effectiveDateFrom: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    effectiveDateTo: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    eformId: int = Field(..., description="Unique automatically generated Id of an EForm document.")
    eformType: str = Field(
        ...,
        description="The short business description of the document type.",
        max_length=200,
        min_length=0,
    )
    eformTypeId: Optional[str] = Field(
        None, description="Business Entity OID", example="PE-00012-0000001234"
    )


class EarningsCreditReasonRequest(PydanticBaseModelEmptyStrIsNone):
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )
    name: Optional[str] = Field(None, description="The enum instance name")


class EditAccountDetailCommand(PydanticBaseModelEmptyStrIsNone):
    accountName: Optional[str] = Field(None, description="Name of the account holder")
    accountNo: Optional[str] = Field(None, description="The Account number of the personal account")
    accountType: Optional[AccountTypeRequest] = None
    bankCode: Optional[str] = Field(None, description="The Bank Code")
    routingNumber: Optional[str] = Field(None, description="Sort code of the Bank")


class EditAdditionalWithholdAmountMoneyRequest(PydanticBaseModelEmptyStrIsNone):
    amountMinorUnits: Optional[str] = Field(
        None,
        description="The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
    )


class EditChequeDetailCommand(PydanticBaseModelEmptyStrIsNone):
    nameToPrintOnCheck: Optional[str] = Field(
        None,
        description="This is the name that displays on the payee's check. For example, the payee's name, or if there is a nominated payee, In the Estate of followed by the nominated payee's name.",
    )


class EditDependentDeductionsMoneyRequest(PydanticBaseModelEmptyStrIsNone):
    amountMinorUnits: Optional[str] = Field(
        None,
        description="The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
    )


class EditExtraPayTaxRateRequest(PydanticBaseModelEmptyStrIsNone):
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )
    name: Optional[str] = Field(None, description="The enum instance name")


class EditFilingMaritalStatusRequest(PydanticBaseModelEmptyStrIsNone):
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )
    name: Optional[str] = Field(None, description="The enum instance name")


class EditKiwiSaverStatusRequest(PydanticBaseModelEmptyStrIsNone):
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )
    name: Optional[str] = Field(None, description="The enum instance name")


class EditLevyExemptionRequest(PydanticBaseModelEmptyStrIsNone):
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )
    name: Optional[str] = Field(None, description="The enum instance name")


class EditMaritalRelationshipStatusRequest(PydanticBaseModelEmptyStrIsNone):
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )
    name: Optional[str] = Field(None, description="The enum instance name")


class EditMedicareLevySurchargeRequest(PydanticBaseModelEmptyStrIsNone):
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )
    name: Optional[str] = Field(None, description="The enum instance name")


class EditNonStdDeductionsMoneyRequest(PydanticBaseModelEmptyStrIsNone):
    amountMinorUnits: Optional[str] = Field(
        None,
        description="The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
    )


class EditOtherIncomeMoneyRequest(PydanticBaseModelEmptyStrIsNone):
    amountMinorUnits: Optional[str] = Field(
        None,
        description="The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
    )


class EditPaymentPreferenceAustralianAddressCommand(PydanticBaseModelEmptyStrIsNone):
    buildingName1: Optional[str] = Field(None, description="The name of the building.")
    buildingName2: Optional[str] = Field(None, description="The name of the building continued.")
    dpId: Optional[int] = Field(
        None,
        description="Referred to as DPID this is an 8-digit Australian post address identifier which uniquely identifies each delivery point to which Australia Post delivers mail. ",
    )
    extensions: Optional[Dict[str, Any]] = None
    floorLevelNumber: Optional[str] = Field(
        None, description="The floorLevelNumber must not be more than {max} characters"
    )
    floorLevelType: Optional[AUFloorLevelTypesRequest] = None
    lotNumber: Optional[str] = Field(None, description="The lot number.")
    postalNumber: Optional[str] = Field(None, description="The postal number. ")
    postalNumberPrefix: Optional[str] = Field(
        None,
        description="This refers to the non-numeric portion preceding the Postal Number. EXAMPLE : PO Box B20 where B is the prefix. ",
    )
    postalNumberSuffix: Optional[str] = Field(
        None,
        description="This refers to the non-numeric portion following the Postal Number. EXAMPLE : PO Box 20A where A is the suffix.",
    )
    postalType: Optional[AUPostalTypesRequest] = None
    premiseNoSuffix: Optional[str] = Field(
        None, description="The suffix to apply to the number of the premise."
    )
    premiseNoTo: Optional[int] = Field(
        None,
        description="The high number in a range for the premise. This is used when an address consists of a range of numbers as in 8-10 Lower Pembroke Street where the value 10 would be stored in this field. ",
    )
    premiseNoToSuffix: Optional[str] = Field(
        None, description="The suffix to apply to the number to of the premise. "
    )
    streetSuffix: Optional[AUStreetSuffixesRequest] = None


class EditResidentialStatusRequest(PydanticBaseModelEmptyStrIsNone):
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )
    name: Optional[str] = Field(None, description="The enum instance name")


class EditTaxCodeRequest(PydanticBaseModelEmptyStrIsNone):
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )
    name: Optional[str] = Field(None, description="The enum instance name")


class EditTaxOffsetsMoneyRequest(PydanticBaseModelEmptyStrIsNone):
    amountMinorUnits: Optional[str] = Field(
        None,
        description="The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
    )


class EditTaxTypeRequest(PydanticBaseModelEmptyStrIsNone):
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )
    name: Optional[str] = Field(None, description="The enum instance name")


class EditVersionRequest(PydanticBaseModelEmptyStrIsNone):
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )
    name: Optional[str] = Field(None, description="The enum instance name")


class EditWithholdingTaxStatusRequest(PydanticBaseModelEmptyStrIsNone):
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )
    name: Optional[str] = Field(None, description="The enum instance name")


class Employee(PydanticBaseModelEmptyStrIsNone):
    id: Optional[str] = Field(None, description="Unique identifier for the employee")
    name: Optional[str] = Field(None, description="Name of the employee")


class EmployeeEmbeddable(PydanticBaseModelEmptyStrIsNone):
    id: Optional[str] = Field(None, description="Unique identifier for the employee.")
    name: Optional[str] = Field(None, description="Full name of the employee.")


class EmployeeLeaveBalance(PydanticBaseModelEmptyStrIsNone):
    approvedTime: Optional[float] = Field(
        None,
        description="Employee total approved leave as per the leave plan calculation for the given period.",
    )
    availabilityPeriodEndDate: Optional[datetime] = Field(
        None, description="ISO 8601 date time format", example="1999-12-31T23:59:59Z"
    )
    availabilityPeriodStartDate: Optional[datetime] = Field(
        None, description="ISO 8601 date time format", example="1999-12-31T23:59:59Z"
    )
    availableBalance: Optional[float] = Field(
        None,
        description="Employee total approximate available leave balance as per the leave plan calculation for the given period.",
    )
    notificationMessage: Optional[str] = Field(
        None,
        description="The additional information to the employer about the balance being presented and can explain some reasons to be cautious of the value presented here.The following information message returns as per the leave plan type.<UL><LI><B>Standard leave plan:</B> The approximate balance provides an indication of your balance under this leave plan and is for general information purposes only. This balance considers your leave requests within the highlighted months. We recommend that you submit a leave request for an accurate assessment of available time under each leave plan.</LI><LI><B>Shared leave plan:</B>The approximate balance estimates time left under this leave plan. Other leave requests and leave plan entitlements may affect this plan's balance. We recommend that you submit a leave request for an accurate evaluation of available time.</LI><LI><B>Tracking plans:</B>This leave plan tracks time shared between other leave plans and the approved and pending time is totaled from those plans. The approximate balance is a guide only.</LI><LI><B>Leave plan with versions:</B>The approximate balance is an estimate as this leave plan has different versions that may alter the plan's entitlements. These calculations are based on the version that is effective in the selected month. We recommend that you submit a leave request for an accurate evaluation of available time.</LI><LI><B>Leave plans with reasonable timebank:</B> The approximate balance is not available as this leave plan allows for a reasonable amount of time to be taken rather than a set entitlement. The amount of time available is at the employer's discretion.</LI><LI><B>Leave plans that are no longer serviced by a carrier:</B> The approximate balance is not available because this leave plan is no longer serviced by the employer.</LI></UL>",
    )
    pendingTime: Optional[float] = Field(
        None,
        description="Employee total pending leave as per the leave plan calculation for the given period.",
    )
    timeBasis: Optional[str] = Field(
        None,
        description="The basis used to record time unit of approved, pending and entitlement. It may be Minutes, Hours, Days, Weeks, Years or Months. This maps to enum TimeUnits(domain id 6757).",
        max_length=10,
        min_length=0,
    )
    timeEntitlement: Optional[float] = Field(
        None,
        description="The time that is available to an employee who has met the eligibility requirements as per the leave plan calculation period.",
    )
    timeWithinPeriod: Optional[int] = Field(
        None,
        description="The time frame within which the employee must avail of the entitled leave. For example, an employee may be entitled to 6 weeks leave within 12 months period.",
        le=9999.0,
    )
    timeWithinPeriodBasis: Optional[str] = Field(
        None,
        description="The basis used to record time unit of time within a period. It may be Minutes, Hours, Days, Weeks or Months. This maps to enum LengthBasis(domain id 6758).",
        max_length=10,
        min_length=0,
    )


class EmployeeRegistrationStatus(PydanticBaseModelEmptyStrIsNone):
    registered: Optional[bool] = Field(
        None, description="True if the Employee is registered, false otherwise."
    )


class EmployeeSummaryForManager(PydanticBaseModelEmptyStrIsNone):
    employeeId: Optional[str] = Field(None, description="The employment id of the employee.")
    firstName: Optional[str] = Field(None, description="First names of a person.")
    initials: Optional[str] = Field(None, description="The person's middle initials.")
    lastName: Optional[str] = Field(None, description="The person's lastName.")


class EmployerQuestion(PydanticBaseModelEmptyStrIsNone):
    category: str = Field(
        ...,
        description="The category of the employer question requested. Enum InstructionsQuestionsCategory (domainId 234) instance name value",
    )
    employerName: str = Field(
        ...,
        description="The name of the employer on the case for which employer questions are returned, either person full name or organisation name.",
    )
    mandatory: Optional[bool] = Field(
        None, description="Optional: Specifies if the employer question answer is mandatory."
    )
    questionEnumDomainName: Optional[str] = Field(
        None, description="Optional: Domain name of the enum, if the questionType is Enum."
    )
    questionId: str = Field(
        ...,
        description="The id of the employer question. Must be unique for all employer questions of one category.",
    )
    questionText: str = Field(
        ..., description="The configured employer question text for the question id."
    )
    questionType: str = Field(
        ...,
        description="The type of the employer question. Enum Field Data Types (domainId 107) instance name value.\r\nCan be one of the following: String, Integer, Date, Float, Boolean and Enum.",
    )


class EmployerQuestions(PydanticBaseModelEmptyStrIsNone):
    elements: List[EmployerQuestion] = Field(
        ...,
        description="An array of employer questions stored in the EmployerQuestion structure belonging to the given category of ER questions.",
    )


class EmploymentCategoryRequest(PydanticBaseModelEmptyStrIsNone):
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )
    name: Optional[str] = Field(None, description="The enum instance name")


class EmploymentDetails(PydanticBaseModelEmptyStrIsNone):
    dateOfHire: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    department: Optional[str] = Field(None, description="The organisation unit")
    employeeId: Optional[str] = Field(None, description="The employee Id.")
    hoursWorkedPerWeek: Optional[float] = Field(
        None, description="The number of hours worked per week"
    )
    hoursWorkedPerYear: Optional[int] = Field(
        None, description="The number of hours worked per year"
    )
    jobTitle: Optional[str] = Field(None, description="The job title")
    manager: Optional[str] = Field(None, description="The full name of the employee Manager")
    workCity: Optional[str] = Field(None, description="The work city")
    workPattern: Optional[str] = Field(None, description="The work pattern")
    workSite: Optional[str] = Field(None, description="The Worksite from this occupation")
    workState: Optional[str] = Field(None, description="The work state")


class EnumInstanceSummary(PydanticBaseModelEmptyStrIsNone):
    _links: Optional[Dict[str, str]] = Field(
        None,
        description="Links to related objects (in this case: enumInstance)",
        example="{'enumInstance': ''}",
    )
    id: Optional[str] = Field(None, description="Enum instance ID")
    name: Optional[str] = Field(None, description="Enum instance name")


class EnumSubset(PydanticBaseModelEmptyStrIsNone):
    instances: Optional[List[EnumInstanceSummary]] = Field(
        None, description="List of the instances that belongs to this Subset "
    )
    name: Optional[str] = Field(None, description="Enum subset name")


class EnumSubsetInfo(PydanticBaseModelEmptyStrIsNone):
    description: Optional[str] = None
    editable: Optional[bool] = None
    name: Optional[str] = None


class EnumSubsetSummary(PydanticBaseModelEmptyStrIsNone):
    name: Optional[str] = Field(None, description="Enum subset name")


class EpisodePeriodDurationBasisRequest(PydanticBaseModelEmptyStrIsNone):
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )
    name: Optional[str] = Field(None, description="The enum instance name")


class EpisodicLeavePeriod(PydanticBaseModelEmptyStrIsNone):
    duration: Optional[int] = Field(None, description="Duration of each individual Episode")
    durationBasis: Optional[str] = Field(
        None,
        description="Duration Basis for e.g. Minutes, Hours, Days. This maps to enum TimeUnits(domain id 6757)",
    )
    endDate: date = Field(..., description="ISO 8601 date format", example="1999-12-31")
    frequency: Optional[int] = Field(None, description="The Frequency of Episodes")
    frequencyInterval: Optional[int] = Field(
        None, description="Number indicating the episodic frequency interval"
    )
    frequencyIntervalBasis: Optional[str] = Field(
        None,
        description="Frequency interval Basis for e.g. Days, Weeks, Months. This maps to enum TimeUnits(domain id 6757)",
    )
    startDate: date = Field(..., description="ISO 8601 date format", example="1999-12-31")


class EpisodicLeavePeriodDetail(PydanticBaseModelEmptyStrIsNone):
    duration: Optional[int] = Field(None, description="Duration of each individual Episode")
    durationBasis: Optional[str] = Field(
        None,
        description="Duration Basis for e.g. Minutes, Hours, Days. This maps to enum TimeUnits(domain id 6757)",
    )
    frequency: Optional[int] = Field(None, description="The Frequency of Episodes")
    frequencyInterval: Optional[int] = Field(
        None, description="Number indicating the episodic frequency interval"
    )
    frequencyIntervalBasis: Optional[str] = Field(
        None,
        description="Frequency interval Basis for e.g. Days, Weeks, Months. This maps to enum TimeUnits(domain id 6757)",
    )


class ErrorSource(PydanticBaseModelEmptyStrIsNone):
    parameter: Optional[str] = None
    pointer: Optional[str] = None


class ExtraPayTaxRateRequest(PydanticBaseModelEmptyStrIsNone):
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )
    name: Optional[str] = Field(None, description="The enum instance name")


class ExtraRequestAttributes(PydanticBaseModelEmptyStrIsNone):
    temporaryAddress: Optional[bool] = Field(
        None, description="Temporary address type indicator. Default value false, if not provided."
    )
    temporaryAddressEndDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )


class FilingMaritalStatusRequest(PydanticBaseModelEmptyStrIsNone):
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )
    name: Optional[str] = Field(None, description="The enum instance name")


class GrossAmountMoneyRequest(PydanticBaseModelEmptyStrIsNone):
    amountMinorUnits: Optional[str] = Field(
        None,
        description="The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
    )


class GrossAmountMoneyResponse(PydanticBaseModelEmptyStrIsNone):
    amountMinorUnits: Optional[int] = Field(
        None,
        description="The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
    )
    currency: Optional[str] = Field(None, description="The currency used in the Money amount")
    scale: Optional[int] = Field(None, description="The scale used in the Money amount")


class InfoOnlyAmountMoneyRequest(PydanticBaseModelEmptyStrIsNone):
    amountMinorUnits: Optional[str] = Field(
        None,
        description="The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
    )


class InfoOnlyAmountMoneyResponse(PydanticBaseModelEmptyStrIsNone):
    amountMinorUnits: Optional[int] = Field(
        None,
        description="The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
    )
    currency: Optional[str] = Field(None, description="The currency used in the Money amount")
    scale: Optional[int] = Field(None, description="The scale used in the Money amount")


class KiwiSaverStatusRequest(PydanticBaseModelEmptyStrIsNone):
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )
    name: Optional[str] = Field(None, description="The enum instance name")


class LeavePlanDetails(PydanticBaseModelEmptyStrIsNone):
    applicability: Optional[str] = Field(
        None,
        description="The applicability status of the Selected Leave Plan.",
        max_length=100,
        min_length=0,
    )
    category: Optional[str] = Field(
        None, description="The category for this leave plan.", max_length=100, min_length=0
    )
    decision: Optional[str] = Field(
        None,
        description="The availability status of the Selected Leave Plan.",
        max_length=100,
        min_length=0,
    )
    eligibility: Optional[str] = Field(
        None,
        description="The eligibility status of the Selected Leave Plan.",
        max_length=100,
        min_length=0,
    )
    leavePlanId: Optional[str] = Field(
        None, description="The Leave Plan UUID.", max_length=36, min_length=0
    )
    longName: Optional[str] = Field(
        None, description="The long name for the leave plan.", max_length=50, min_length=0
    )


class LeavePlanModel(PydanticBaseModelEmptyStrIsNone):
    absenceReasons: List[AbsenceReasonModel] = Field(
        ..., description="The absence reasons linked to the leave plan."
    )
    category: Optional[str] = Field(None, description="The category for this leave plan.")
    description: Optional[str] = Field(
        None, description="The description for the leave plan.", max_length=3000, min_length=0
    )
    effectiveFromDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    effectiveToDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    entitlement: Optional[str] = Field(
        None,
        description="Number of time units for the Time Entitlement.",
        max_length=999,
        min_length=0,
    )
    entitlementCalculationPeriod: Optional[str] = Field(
        None,
        description="Concatenated value of DurationValue, DurationBasis, CalculatePeriodMethod, FixedYearStartDay, FixedYearStartMonth.",
    )
    group: Optional[str] = Field(None, description="The group for this leave plan.")
    informationLink: Optional[str] = Field(
        None,
        description="The link URL for the leave plan. This can contain a link to relevant online document.",
        max_length=500,
        min_length=0,
    )
    jobProtection: Optional[str] = Field(
        None, description="Indicates the level of job protection on this leave plan."
    )
    leavePlanAlias: Optional[str] = None
    leavePlanAppliesToStates: Optional[bool] = Field(
        None, description="This applies to the leave plan."
    )
    leavePlanId: str = Field(
        ...,
        description="Leave Plan UUID is a mandatory field, it must be specified.",
        max_length=35,
        min_length=0,
    )
    lengthOfService: Optional[str] = Field(None, description="The worked within period basis.")
    longName: Optional[str] = Field(
        None, description="The long name for the leave plan.", max_length=50, min_length=0
    )
    minimumWorkHours: Optional[str] = Field(
        None, description="The minimum hours worked within a period.", max_length=9999, min_length=0
    )
    otherDetails: Optional[List[str]] = Field(
        None,
        description="Other details if the employer of the logged in user is linked to that plan through their service agreement.",
    )
    states: Optional[List[str]] = Field(
        None, description="List of work states can be added as states where the plan is applicable."
    )
    statesData: Optional[List[str]] = None
    type: Optional[str] = Field(None, description="The type for this leave plan.")


class LeavePlanSummary(PydanticBaseModelEmptyStrIsNone):
    category: Optional[str] = Field(None, description="The category for this leave plan.")
    description: Optional[str] = Field(
        None, description="The description for the leave plan.", max_length=3000, min_length=0
    )
    endDate: Optional[date] = Field(None, description="ISO 8601 date format", example="1999-12-31")
    group: Optional[str] = Field(None, description="The group for this leave plan.")
    leavePlanAlias: Optional[str] = None
    leavePlanId: str = Field(..., description="The Leave Plan UUID.", max_length=36, min_length=0)
    name: Optional[str] = Field(
        None, description="The long name for the leave plan.", max_length=50, min_length=0
    )
    startDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    type: Optional[str] = Field(None, description="The type for this leave plan.")


class LeavePlanType(PydanticBaseModelEmptyStrIsNone):
    fullId: Optional[int] = None
    leavePlanName: Optional[str] = None


class LeaveRequest(PydanticBaseModelEmptyStrIsNone):
    approvalReason: Optional[str] = Field(None, description="Reason for approval of a request")
    decisionStatus: Optional[str] = Field(None, description="Leave request decision status")
    denialReason: Optional[str] = Field(None, description="Reason for denial of a request")
    id: Optional[str] = Field(
        None, description="Business Entity OID", example="PE-00012-0000001234"
    )
    qualifier1: Optional[str] = Field(None, description="The leave request first qualifier")
    qualifier2: Optional[str] = Field(None, description="The leave request second qualifier")
    reasonName: Optional[str] = Field(None, description="The leave request reason")


class LevyExemptionRequest(PydanticBaseModelEmptyStrIsNone):
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )
    name: Optional[str] = Field(None, description="The enum instance name")


class Limitation(PydanticBaseModelEmptyStrIsNone):
    limitationType: Optional[str] = Field(
        None, description="Represents a Limitation to be associated to an Accommodation Case."
    )


class LimitationDetail(PydanticBaseModelEmptyStrIsNone):
    id: Optional[str] = Field(
        None,
        description="The unique identifier for this limitation. ",
        max_length=254,
        min_length=0,
    )
    limitationType: Optional[str] = Field(
        None, description="Represents a Limitation to be associated to an Accommodation Case."
    )


class MaritalRelationshipStatusRequest(PydanticBaseModelEmptyStrIsNone):
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )
    name: Optional[str] = Field(None, description="The enum instance name")


class MedicareLevySurchargeRequest(PydanticBaseModelEmptyStrIsNone):
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )
    name: Optional[str] = Field(None, description="The enum instance name")


class ModelEnum(PydanticBaseModelEmptyStrIsNone):
    domainName: str = Field(..., description="Domain name.", max_length=100, min_length=0)
    instanceValue: str = Field(..., description="Enum instance name.", max_length=100, min_length=0)


class MonthlyBasisEarningAmountsRequest(PydanticBaseModelEmptyStrIsNone):
    bonuses: Optional[Decimal] = Field(None, description="Money amount format", example="1500.50")
    commissions: Optional[Decimal] = Field(
        None, description="Money amount format", example="1500.50"
    )
    earningsAmount: Decimal = Field(..., description="Money amount format", example="1500.50")
    pensionContribution: Optional[Decimal] = Field(
        None, description="Money amount format", example="1500.50"
    )
    shiftPay: Optional[Decimal] = Field(None, description="Money amount format", example="1500.50")


class MonthlyBasisEarningAmountsResponse(PydanticBaseModelEmptyStrIsNone):
    bonuses: Optional[Decimal] = Field(None, description="Money amount format", example="1500.50")
    commissions: Optional[Decimal] = Field(
        None, description="Money amount format", example="1500.50"
    )
    earningsAmount: Decimal = Field(..., description="Money amount format", example="1500.50")
    earningsAmountAsWeekly: Optional[Decimal] = Field(
        None, description="Money amount format", example="1500.50"
    )
    pensionContribution: Optional[Decimal] = Field(
        None, description="Money amount format", example="1500.50"
    )
    shiftPay: Optional[Decimal] = Field(None, description="Money amount format", example="1500.50")
    totalEarnings: Optional[Decimal] = Field(
        None, description="Money amount format", example="1500.50"
    )


class NetAmountMoneyRequest(PydanticBaseModelEmptyStrIsNone):
    amountMinorUnits: Optional[str] = Field(
        None,
        description="The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
    )


class NetAmountMoneyResponse(PydanticBaseModelEmptyStrIsNone):
    amountMinorUnits: Optional[int] = Field(
        None,
        description="The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
    )
    currency: Optional[str] = Field(None, description="The currency used in the Money amount")
    scale: Optional[int] = Field(None, description="The scale used in the Money amount")


class NewDiagnosisDetails(PydanticBaseModelEmptyStrIsNone):
    levelIndicator: Optional[str] = Field(
        None,
        description="The injury code level e.g. primary or secondary assigned to the injury in the context of the claim.",
    )
    medicalCode: Optional[str] = Field(
        None,
        description="The code ID that specifies a particular diagnosis.",
        max_length=20,
        min_length=0,
    )


class NonStdDeductionsMoneyRequest(PydanticBaseModelEmptyStrIsNone):
    amountMinorUnits: Optional[str] = Field(
        None,
        description="The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
    )


class NonStdDeductionsMoneyResponse(PydanticBaseModelEmptyStrIsNone):
    amountMinorUnits: Optional[int] = Field(
        None,
        description="The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
    )
    currency: Optional[str] = Field(None, description="The currency used in the Money amount")
    scale: Optional[int] = Field(None, description="The scale used in the Money amount")


class NotificationAbsenceCaseSummary(PydanticBaseModelEmptyStrIsNone):
    absenceHandler: Optional[str] = Field(
        None, description=" The Person handling the absence case", max_length=50, min_length=0
    )
    absenceHandlerEmailAddress: Optional[str] = Field(
        None,
        description="The phone number of the absence case handler",
        max_length=40,
        min_length=0,
    )
    absenceHandlerPhoneNumber: Optional[str] = Field(
        None,
        description="The email address of the absence case handler",
        max_length=20,
        min_length=0,
    )
    absenceId: Optional[str] = Field(
        None, description="Absence case identifier", max_length=254, min_length=0
    )
    createdDate: Optional[datetime] = Field(
        None, description="ISO 8601 date time format", example="1999-12-31T23:59:59Z"
    )
    endDate: Optional[datetime] = Field(
        None, description="ISO 8601 date time format", example="1999-12-31T23:59:59Z"
    )
    hasFinancialInformation: Optional[bool] = Field(
        None, description="Absence case has financial information"
    )
    reason: Optional[str] = Field(
        None, description="Reason for the absence", max_length=100, min_length=0
    )
    reasonQualifier1: Optional[str] = Field(
        None, description="Qualifier 1", max_length=100, min_length=0
    )
    reasonQualifier2: Optional[str] = Field(
        None, description="Qualifier 2", max_length=100, min_length=0
    )
    startDate: Optional[datetime] = Field(
        None, description="ISO 8601 date time format", example="1999-12-31T23:59:59Z"
    )
    status: Optional[str] = Field(
        None,
        description="Value expected to be from is for enum domain CurrentPhase",
        max_length=100,
        min_length=0,
    )


class NotificationCaseEmbeddable(PydanticBaseModelEmptyStrIsNone):
    caseNumber: Optional[str] = Field(None, description="Business identifier for this case.")
    id: Optional[str] = Field(
        None,
        description="Resource Id of the notification case this accommodation case belongs to if one exists.",
    )


class OCOccupationAltEmploymentCatRequest(PydanticBaseModelEmptyStrIsNone):
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )
    name: Optional[str] = Field(None, description="The enum instance name")


class OCOccupationEmpLocationCodeRequest(PydanticBaseModelEmptyStrIsNone):
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )
    name: Optional[str] = Field(None, description="The enum instance name")


class OCOccupationEmploymentStatusRequest(PydanticBaseModelEmptyStrIsNone):
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )
    name: Optional[str] = Field(None, description="The enum instance name")


class OCOccupationEmploymentTitleRequest(PydanticBaseModelEmptyStrIsNone):
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )
    name: Optional[str] = Field(None, description="The enum instance name")


class OCOccupationEndPositionCodeRequest(PydanticBaseModelEmptyStrIsNone):
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )
    name: Optional[str] = Field(None, description="The enum instance name")


class OCOccupationJobStrenuousnessRequest(PydanticBaseModelEmptyStrIsNone):
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )
    name: Optional[str] = Field(None, description="The enum instance name")


class OtherIncomeMoneyRequest(PydanticBaseModelEmptyStrIsNone):
    amountMinorUnits: Optional[str] = Field(
        None,
        description="The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
    )


class OtherIncomeMoneyResponse(PydanticBaseModelEmptyStrIsNone):
    amountMinorUnits: Optional[int] = Field(
        None,
        description="The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
    )
    currency: Optional[str] = Field(None, description="The currency used in the Money amount")
    scale: Optional[int] = Field(None, description="The scale used in the Money amount")


class OutstandingSupportingEvidence(PydanticBaseModelEmptyStrIsNone):
    docReceived: Optional[bool] = Field(
        None,
        description="Indicates whether a document has been received for the outstanding supporting evidence.<BR>For instance, a document could be uploaded and linked to an outstanding requirement, however the outstanding requirement will remain OPEN until a back office user validates that the uploaded document is actually what was required.<BR>This flag will always be FALSE for a evidence result which is either pending or received but not satisfied; it will be TRUE for a received evidence result which is received and satisfied.<BR>If the element represents a combination of outstanding requirements and evidence results, the flag will be FALSE if at least one of these elements returns FALSE.",
    )
    name: Optional[str] = Field(
        None,
        description="The name of the document type representing the document that can satisfy the supporting evidence.",
        max_length=350,
        min_length=0,
    )
    rootCaseId: Optional[str] = Field(
        None,
        description="The root case id is the id of the last case retrieved following all parent relationships starting from the case holding the supporting evidence elements. Given a case Id, all supporting evidence elements share the same root case.",
        max_length=254,
        min_length=0,
    )
    source: Optional[str] = Field(
        None,
        description="The name of the party who is expected to provide the document. <BR>If the record returned represents an Outstanding Requirement, the source is the name of the party indicated as the source for that requirement, including the title if available. <BR>If the record returned represents an Evidence, the source is the Employee name, including the title if available. <BR>If the record returned represents both an Outstanding Requirement and an Evidence (because the same document would satisfy both) and the source names differ, then the source name from the Outstanding Requirement is returned. <BR>If the record returned represents two Outstanding Requirements (because the same document would satisfy both) and the source names differ, then the source name is randomly picked from one of them.",
    )
    uploadCaseNumber: Optional[str] = Field(
        None,
        description="If the supporting evidence element is requested by multiple cases, the upload Case Number is the id of the lowest case in the hierarchy which is the common parent of all such cases; If the supporting evidence element is requested by one case only, the upload Case Number is the id of that case. Given a caseId, different supporting evidence elements can a have different upload Case Number depending on which case(s) requests which supporting evidence.",
        max_length=254,
        min_length=0,
    )


class PaginatedEmployeeSearchResults(PydanticBaseModelEmptyStrIsNone):
    employees: Optional[List[EmployeeSummaryForManager]] = None
    totalNumberOfRecords: Optional[int] = None


class PaidLeaveCase(PydanticBaseModelEmptyStrIsNone):
    caseNumber: Optional[str] = Field(None, description="Case identification number.")
    caseType: Optional[str] = Field(None, description="Name of the case type.")
    leavePlanId: Optional[str] = Field(
        None, description="The business identifier of the Absence Plan."
    )
    leaveRequestId: Optional[str] = Field(
        None, description="The business identifier of the Absence Leave Request."
    )


class PaymentMethodRequest(PydanticBaseModelEmptyStrIsNone):
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )
    name: Optional[str] = Field(None, description="The enum instance name")


class Policy(PydanticBaseModelEmptyStrIsNone):
    referenceNo: str = Field(
        ...,
        description="Unique alphanumeric policy reference from the relevant policy admin system.",
        max_length=50,
        min_length=0,
    )


class PregnancyDetails(PydanticBaseModelEmptyStrIsNone):
    actualDeliveryDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    deliveryType: Optional[str] = Field(
        None, description="Indicates the type of delivery following pregnancy."
    )
    expectedDeliveryDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    pregnancyComplications: Optional[bool] = Field(
        None, description="Indicates whether or not pregnancy complications occurred."
    )


class ReasonRequest(PydanticBaseModelEmptyStrIsNone):
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )
    name: Optional[str] = Field(None, description="The enum instance name")


class ReducedScheduleLeavePeriod(PydanticBaseModelEmptyStrIsNone):
    endDate: date = Field(..., description="ISO 8601 date format", example="1999-12-31")
    fridayOffHours: Optional[int] = Field(None, description="The end date off hours for Friday.")
    fridayOffMinutes: Optional[int] = Field(
        None, description="The end date off minutes for Friday."
    )
    mondayOffHours: Optional[int] = Field(None, description="The end date off hours for Monday.")
    mondayOffMinutes: Optional[int] = Field(
        None, description="The end date off minutes for Monday."
    )
    saturdayOffHours: Optional[int] = Field(
        None, description="The end date off hours for Saturday."
    )
    saturdayOffMinutes: Optional[int] = Field(
        None, description="The end date off minutes for Saturday."
    )
    startDate: date = Field(..., description="ISO 8601 date format", example="1999-12-31")
    status: Optional[str] = Field(
        None,
        description="The status of this absence period. This maps to enum AbsenceStatus(domain id 6812).",
        max_length=100,
        min_length=0,
    )
    sundayOffHours: Optional[int] = Field(None, description="The end date off hours for Sunday.")
    sundayOffMinutes: Optional[int] = Field(
        None, description="The end date off minutes for Sunday."
    )
    thursdayOffHours: Optional[int] = Field(
        None, description="The end date off hours for Thursday."
    )
    thursdayOffMinutes: Optional[int] = Field(
        None, description="The end date off minutes for Thursday."
    )
    tuesdayOffHours: Optional[int] = Field(None, description="The end date off hours for Tuesday.")
    tuesdayOffMinutes: Optional[int] = Field(
        None, description="The end date off minutes for Tuesday."
    )
    wednesdayOffHours: Optional[int] = Field(
        None, description="The end date off hours for Wednesday."
    )
    wednesdayOffMinutes: Optional[int] = Field(
        None, description="The end date off minutes for Wednesday."
    )


class ReflexiveQuestionType(PydanticBaseModelEmptyStrIsNone):
    booleanValue: Optional[bool] = Field(None, description="Boolean value of an attribute.")
    dateValue: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    decimalValue: Optional[float] = Field(None, description="Decimal value of an attribute.")
    enumValue: Optional[ModelEnum] = None
    fieldName: str = Field(
        ..., description="The name of an attribute.", max_length=300, min_length=0
    )
    integerValue: Optional[int] = Field(None, description="Integer value of an attribute.")
    stringValue: Optional[str] = Field(
        None, description="String value of an attribute.", max_length=100, min_length=0
    )


class ReflexiveQuestions(PydanticBaseModelEmptyStrIsNone):
    reflexiveQuestionDetails: Optional[List[ReflexiveQuestionType]] = None
    reflexiveQuestionLevel: str = Field(
        ...,
        description="The reflexive question level possible value can be 'reason', 'primary relationship' or 'secondary relationship'.",
        max_length=25,
        min_length=0,
    )


class RegionTaxCodeDetails1(PydanticBaseModelEmptyStrIsNone):
    id: Optional[str] = None


class RegistrationResponse(PydanticBaseModelEmptyStrIsNone):
    registered: Optional[bool] = Field(
        None, description="True if the customer is registered, false otherwise."
    )


class Relationship(PydanticBaseModelEmptyStrIsNone):
    relationshipName: Optional[str] = Field(None, description="Name of the relationship.")
    relationshipQualifier1: Optional[str] = Field(
        None, description="The first qualifier for the relationship."
    )
    relationshipQualifier2: Optional[str] = Field(
        None, description="The second qualifier for the relationship."
    )


class ReportedReducedScheduleLeavePeriod(PydanticBaseModelEmptyStrIsNone):
    decision: Optional[str] = Field(
        None,
        description="Decison status for the absence period. This maps to enum DecisionStatus(domain id 6821).",
        max_length=100,
        min_length=0,
    )
    endDate: date = Field(..., description="ISO 8601 date format", example="1999-12-31")
    fridayOffHours: Optional[int] = Field(None, description="The end date off hours for Friday.")
    fridayOffMinutes: Optional[int] = Field(
        None, description="The end date off minutes for Friday."
    )
    mondayOffHours: Optional[int] = Field(None, description="The end date off hours for Monday.")
    mondayOffMinutes: Optional[int] = Field(
        None, description="The end date off minutes for Monday."
    )
    saturdayOffHours: Optional[int] = Field(
        None, description="The end date off hours for Saturday."
    )
    saturdayOffMinutes: Optional[int] = Field(
        None, description="The end date off minutes for Saturday."
    )
    startDate: date = Field(..., description="ISO 8601 date format", example="1999-12-31")
    sundayOffHours: Optional[int] = Field(None, description="The end date off hours for Sunday.")
    sundayOffMinutes: Optional[int] = Field(
        None, description="The end date off minutes for Sunday."
    )
    thursdayOffHours: Optional[int] = Field(
        None, description="The end date off hours for Thursday."
    )
    thursdayOffMinutes: Optional[int] = Field(
        None, description="The end date off minutes for Thursday."
    )
    tuesdayOffHours: Optional[int] = Field(None, description="The end date off hours for Tuesday.")
    tuesdayOffMinutes: Optional[int] = Field(
        None, description="The end date off minutes for Tuesday."
    )
    wednesdayOffHours: Optional[int] = Field(
        None, description="The end date off hours for Wednesday."
    )
    wednesdayOffMinutes: Optional[int] = Field(
        None, description="The end date off minutes for Wednesday."
    )


class ReportedTimeOffLeavePeriod(PydanticBaseModelEmptyStrIsNone):
    decision: Optional[str] = Field(
        None,
        description="Decison status for the absence period. This maps to enum DecisionStatus(domain id 6821).",
        max_length=100,
        min_length=0,
    )
    endDate: date = Field(..., description="ISO 8601 date format", example="1999-12-31")
    endDateFullDay: Optional[bool] = Field(None, description="The end date full day.")
    endDateOffHours: Optional[int] = Field(None, description="The end date off hours.")
    endDateOffMinutes: Optional[int] = Field(None, description="The end date off minutes.")
    lastDayWorked: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    startDate: date = Field(..., description="ISO 8601 date format", example="1999-12-31")
    startDateFullDay: Optional[bool] = Field(None, description="The start date full day.")
    startDateOffHours: Optional[int] = Field(None, description="The start date off hours.")
    startDateOffMinutes: Optional[int] = Field(None, description="The start date off minutes.")


class RequestedEpisodicLeaveDetails(PydanticBaseModelEmptyStrIsNone):
    duration: Optional[int] = Field(
        None, description="The duration of each period of absence, for example, 3 (Hours)."
    )
    durationBasis: Optional[str] = Field(
        None,
        description="The unit of the duration of the period of absence, for example, Minutes, Hours, Days. This maps to a sub-set of the Enum TimeUnits (domain id 6757).",
    )
    frequency: Optional[int] = Field(
        None,
        description="How often individual periods of absence are taken, for example, 2 (times)",
    )
    frequencyInterval: Optional[int] = Field(
        None,
        description="The interval of time between the individual periods of absence, for example, 1 (Weeks).",
    )
    frequencyIntervalBasis: Optional[str] = Field(
        None,
        description="The unit of the interval between the periods of absence, for example, Minutes, Hours, Days. This maps to a sub-set of the Enum TimeUnits (domain id 6757)",
    )


class ResidentialStatusRequest(PydanticBaseModelEmptyStrIsNone):
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )
    name: Optional[str] = Field(None, description="The enum instance name")


class RestrictionsLimitations(PydanticBaseModelEmptyStrIsNone):
    restrictionEffectiveDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    restrictions: Optional[str] = Field(
        None,
        description="Specifies the disabilities/restrictions experienced by the injured party as a result of the claim.",
    )


class SalaryAmountBasisRequest(PydanticBaseModelEmptyStrIsNone):
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )
    name: Optional[str] = Field(None, description="The enum instance name")


class FieldType(Enum):
    booleanValue = "booleanValue"
    dateValue = "dateValue"
    decimalValue = "decimalValue"
    integerValue = "integerValue"
    stringValue = "stringValue"


class SimpleQuestionAttribute(PydanticBaseModelEmptyStrIsNone):
    caption: Optional[str] = Field(
        None, description="The descriptive heading or title of a question."
    )
    fieldName: Optional[str] = Field(None, description="The attribute Name of the question.")
    fieldType: Optional[FieldType] = Field(None, description="The type of value or data.")


class SocialSecurityBenefitResponse(PydanticBaseModelEmptyStrIsNone):
    authorityConsentDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    awardInformationReceivedDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    benefitAmount: Optional[Decimal] = Field(
        None, description="Money amount format", example="1500.50"
    )
    claimStatus: Optional[str] = Field(
        None,
        description="The status of the insureds application with the Social Security Administration.",
    )
    disabilityBenefitsEligibleDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    earlyRetirementBenefitsEligibleDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    insuranceEndDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    reimbursementAgreementReceived: Optional[bool] = Field(
        None, description="Indicates that the reimbursement Agreement has been received."
    )
    reimbursementAgreementSignedDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    socialSecurityBenefitId: Optional[str] = Field(
        None, description="The unique identification number(oid)."
    )


class SocialSecurityDecisionResponse(PydanticBaseModelEmptyStrIsNone):
    applicationDate: Optional[datetime] = Field(
        None, description="ISO 8601 date time format", example="1999-12-31T23:59:59Z"
    )
    approvalType: Optional[str] = Field(
        None, description="The level of decision made for the social security decision"
    )
    decision: Optional[str] = Field(
        None, description="This is the actual decision made for the social security decision"
    )
    decisionDate: Optional[datetime] = Field(
        None, description="ISO 8601 date time format", example="1999-12-31T23:59:59Z"
    )
    socialSecurityDecisionId: str = Field(
        ...,
        description="The unique identifier for the social security",
        max_length=32,
        min_length=0,
    )


class Direction(Enum):
    ASC = "ASC"
    DESC = "DESC"


class SortOrderItem(PydanticBaseModelEmptyStrIsNone):
    columnName: Optional[str] = None
    direction: Optional[Direction] = None


class StartClaim(PydanticBaseModelEmptyStrIsNone):
    claimIncurredDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    description: Optional[str] = Field(
        None,
        description="Description for this case as entered by the user.",
        max_length=2000,
        min_length=0,
    )
    notificationCaseId: Optional[str] = Field(
        None,
        description="The notification case number of the claim case if applicable.",
        max_length=256,
        min_length=0,
    )
    notificationReason: Optional[str] = Field(
        None,
        description="Notification reason selected during notification case intake.",
        max_length=100,
        min_length=0,
    )
    policies: Optional[List[Policy]] = Field(
        None,
        description="An array of the policy objects with information about policies that will be added to the claim.",
    )


class SupervisedAbsenceDay(PydanticBaseModelEmptyStrIsNone):
    date: Optional[date] = Field(None, description="ISO 8601 date format", example="1999-12-31")
    decision: Optional[str] = Field(
        None, description="Decision status of leave request", max_length=100, min_length=0
    )
    timeDeducted: Optional[str] = Field(
        None,
        description="The total deducted time of absence associated with this day.",
        max_length=100,
        min_length=0,
    )
    timeDeductedBasis: Optional[str] = Field(
        None, description="TaEnum<LengthBasis> value", max_length=100, min_length=0
    )
    timeRequested: Optional[str] = Field(
        None,
        description="The total requested time of absence associated with this day.",
        max_length=100,
        min_length=0,
    )
    timeRequestedBasis: Optional[str] = Field(
        None, description="TaEnum<LengthBasis> value", max_length=100, min_length=0
    )


class SupervisedAbsencePeriod(PydanticBaseModelEmptyStrIsNone):
    absenceType: Optional[str] = Field(
        None, description="The absenceType for the absence reason.", max_length=100, min_length=0
    )
    endDate: Optional[date] = Field(None, description="ISO 8601 date format", example="1999-12-31")
    episodicLeavePeriodDetail: Optional[EpisodicLeavePeriodDetail] = None
    id: Optional[str] = Field(
        None, description="Business Entity OID", example="PE-00012-0000001234"
    )
    reason: Optional[str] = Field(
        None, description="The name for the absence reason.", max_length=100, min_length=0
    )
    reasonQualifier1: Optional[str] = Field(
        None,
        description="The first qualifier for the absence reason.",
        max_length=100,
        min_length=0,
    )
    reasonQualifier2: Optional[str] = Field(
        None,
        description="The second qualifier for the absence reason.",
        max_length=100,
        min_length=0,
    )
    requestStatus: Optional[str] = Field(
        None, description="The status of the leave request.", max_length=100, min_length=0
    )
    startDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    status: Optional[str] = Field(
        None, description="The status for this absence period.", max_length=100, min_length=0
    )


class SupervisedAbsenceSummary(PydanticBaseModelEmptyStrIsNone):
    absenceHandler: Optional[str] = Field(
        None, description=" The Person handling the absence case", max_length=50, min_length=0
    )
    absenceHandlerEmailAddress: Optional[str] = Field(
        None,
        description="The phone number of the absence case handler",
        max_length=40,
        min_length=0,
    )
    absenceHandlerPhoneNumber: Optional[str] = Field(
        None,
        description="The email address of the absence case handler",
        max_length=20,
        min_length=0,
    )
    absenceId: Optional[str] = Field(
        None, description="Absence case identifier", max_length=254, min_length=0
    )
    createdDate: Optional[datetime] = Field(
        None, description="ISO 8601 date time format", example="1999-12-31T23:59:59Z"
    )
    endDate: Optional[datetime] = Field(
        None, description="ISO 8601 date time format", example="1999-12-31T23:59:59Z"
    )
    hasFinancialInformation: Optional[bool] = Field(
        None, description="Absence case has financial information"
    )
    member: Optional[str] = Field(
        None, description="Full name of the employee", max_length=100, min_length=0
    )
    memberId: Optional[str] = Field(
        None,
        description="The id of an employee in respect of its employer.",
        max_length=50,
        min_length=0,
    )
    notificationCaseId: Optional[str] = Field(
        None, description="Notification case id, if applicable for the absence case"
    )
    reason: Optional[str] = Field(
        None, description="Reason for the absence", max_length=100, min_length=0
    )
    reasonQualifier1: Optional[str] = Field(
        None, description="Qualifier 1", max_length=100, min_length=0
    )
    reasonQualifier2: Optional[str] = Field(
        None, description="Qualifier 2", max_length=100, min_length=0
    )
    startDate: Optional[datetime] = Field(
        None, description="ISO 8601 date time format", example="1999-12-31T23:59:59Z"
    )
    status: Optional[str] = Field(
        None,
        description="Value expected to be from is for enum domain CurrentPhase",
        max_length=100,
        min_length=0,
    )


class SupervisedReducedScheduleLeavePeriod(PydanticBaseModelEmptyStrIsNone):
    endDate: date = Field(..., description="ISO 8601 date format", example="1999-12-31")
    fridayOffHours: Optional[int] = Field(None, description="The end date off hours for Friday.")
    fridayOffMinutes: Optional[int] = Field(
        None, description="The end date off minutes for Friday."
    )
    mondayOffHours: Optional[int] = Field(None, description="The end date off hours for Monday.")
    mondayOffMinutes: Optional[int] = Field(
        None, description="The end date off minutes for Monday."
    )
    saturdayOffHours: Optional[int] = Field(
        None, description="The end date off hours for Saturday."
    )
    saturdayOffMinutes: Optional[int] = Field(
        None, description="The end date off minutes for Saturday."
    )
    startDate: date = Field(..., description="ISO 8601 date format", example="1999-12-31")
    status: Optional[str] = Field(
        None,
        description="The status of this absence period. This maps to enum AbsenceStatus(domain id 6812).",
        max_length=100,
        min_length=0,
    )
    sundayOffHours: Optional[int] = Field(None, description="The end date off hours for Sunday.")
    sundayOffMinutes: Optional[int] = Field(
        None, description="The end date off minutes for Sunday."
    )
    thursdayOffHours: Optional[int] = Field(
        None, description="The end date off hours for Thursday."
    )
    thursdayOffMinutes: Optional[int] = Field(
        None, description="The end date off minutes for Thursday."
    )
    tuesdayOffHours: Optional[int] = Field(None, description="The end date off hours for Tuesday.")
    tuesdayOffMinutes: Optional[int] = Field(
        None, description="The end date off minutes for Tuesday."
    )
    wednesdayOffHours: Optional[int] = Field(
        None, description="The end date off hours for Wednesday."
    )
    wednesdayOffMinutes: Optional[int] = Field(
        None, description="The end date off minutes for Wednesday."
    )


class SupervisedTimeOffLeavePeriod(PydanticBaseModelEmptyStrIsNone):
    decision: Optional[str] = Field(
        None,
        description="Decison status for the absence period. This maps to enum DecisionStatus(domain id 6821).",
        max_length=100,
        min_length=0,
    )
    endDate: date = Field(..., description="ISO 8601 date format", example="1999-12-31")
    endDateFullDay: Optional[bool] = Field(None, description="The end date full day.")
    endDateOffHours: Optional[int] = Field(None, description="The end date off hours.")
    endDateOffMinutes: Optional[int] = Field(None, description="The end date off minutes.")
    lastDayWorked: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    startDate: date = Field(..., description="ISO 8601 date format", example="1999-12-31")
    startDateFullDay: Optional[bool] = Field(None, description="The start date full day.")
    startDateOffHours: Optional[int] = Field(None, description="The start date off hours.")
    startDateOffMinutes: Optional[int] = Field(None, description="The start date off minutes.")


class TaEnumInstanceSwagger(PydanticBaseModelEmptyStrIsNone):
    fullId: Optional[str] = Field(None, description="The <code>instance id</code> of the enum")
    name: Optional[str] = Field(None, description="The enum instance name")


class TaEnumQuestionResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class TaEnumTaEnumType(PydanticBaseModelEmptyStrIsNone):
    active: Optional[bool] = None
    alphaSort: Optional[bool] = None
    defaultFirst: Optional[bool] = None
    domainDescription: Optional[str] = None
    domainId: Optional[int] = None
    domainName: Optional[str] = None
    dorder: Optional[int] = None
    editable: Optional[bool] = None
    endDate: Optional[datetime] = Field(
        None, description="ISO 8601 date time format", example="1999-12-31T23:59:59Z"
    )
    fullId: Optional[int] = None
    id: Optional[int] = None
    name: Optional[str] = None
    nameAttribute: Optional[str] = None
    retired: Optional[bool] = None
    startDate: Optional[datetime] = Field(
        None, description="ISO 8601 date time format", example="1999-12-31T23:59:59Z"
    )
    subsetInfo: Optional[List[EnumSubsetInfo]] = None
    subsets: Optional[List[str]] = None


class TaxCodeRequest(PydanticBaseModelEmptyStrIsNone):
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )
    name: Optional[str] = Field(None, description="The enum instance name")


class TaxCodeResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class TaxOffsetsMoneyRequest(PydanticBaseModelEmptyStrIsNone):
    amountMinorUnits: Optional[str] = Field(
        None,
        description="The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
    )


class TaxOffsetsMoneyResponse(PydanticBaseModelEmptyStrIsNone):
    amountMinorUnits: Optional[int] = Field(
        None,
        description="The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
    )
    currency: Optional[str] = Field(None, description="The currency used in the Money amount")
    scale: Optional[int] = Field(None, description="The scale used in the Money amount")


class TaxTypeRequest(PydanticBaseModelEmptyStrIsNone):
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )
    name: Optional[str] = Field(None, description="The enum instance name")


class TaxTypeResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class TimeOffLeavePeriod(PydanticBaseModelEmptyStrIsNone):
    endDate: date = Field(..., description="ISO 8601 date format", example="1999-12-31")
    endDateFullDay: Optional[bool] = Field(None, description="The end date full day.")
    endDateOffHours: Optional[int] = Field(None, description="The end date off hours.")
    endDateOffMinutes: Optional[int] = Field(None, description="The end date off minutes.")
    lastDayWorked: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    startDate: date = Field(..., description="ISO 8601 date format", example="1999-12-31")
    startDateFullDay: Optional[bool] = Field(None, description="The start date full day.")
    startDateOffHours: Optional[int] = Field(None, description="The start date off hours.")
    startDateOffMinutes: Optional[int] = Field(None, description="The start date off minutes.")
    status: str = Field(
        ...,
        description="The absence status for the absence period. This maps to enum AbsenceStatus(domain id 6812).",
        max_length=100,
        min_length=0,
    )


class TimeZoneRequest(PydanticBaseModelEmptyStrIsNone):
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )
    name: Optional[str] = Field(None, description="The enum instance name")


class TimeZoneResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class TypeResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class ValidationMessageModel(PydanticBaseModelEmptyStrIsNone):
    validationMessage: str


class VersionRequest(PydanticBaseModelEmptyStrIsNone):
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )
    name: Optional[str] = Field(None, description="The enum instance name")


class VersionResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class WageBaseCalculationBasisResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class WageBaseTypeResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class WebMessageId(PydanticBaseModelEmptyStrIsNone):
    messageId: Optional[int] = Field(None, description="Message Id")


class WeekBasedWorkPatternTypeRequest(PydanticBaseModelEmptyStrIsNone):
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )
    name: Optional[str] = Field(None, description="The enum instance name")


class WeekBasedWorkWeekStartsRequest(PydanticBaseModelEmptyStrIsNone):
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )
    name: Optional[str] = Field(None, description="The enum instance name")


class WeekBasedWorkWeekStartsResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class WeeklyAmountMoneyResponse(PydanticBaseModelEmptyStrIsNone):
    amountMinorUnits: Optional[int] = Field(
        None,
        description="The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
    )
    currency: Optional[str] = Field(None, description="The currency used in the Money amount")
    scale: Optional[int] = Field(None, description="The scale used in the Money amount")


class WeeklyBasisEarningAmountsRequest(PydanticBaseModelEmptyStrIsNone):
    overtimeHourlyRate: Optional[Decimal] = Field(
        None, description="Money amount format", example="1500.50"
    )
    overtimeHours: Optional[float] = Field(
        None, description="Number of overtime hours in a working week or bi-week."
    )
    shiftAllowance: Optional[Decimal] = Field(
        None, description="Money amount format", example="1500.50"
    )
    shiftBasis: Optional[str] = Field(
        None,
        description="Basis of weekly or bi-weekly shift earnings - either an additional hourly allowance or an additional amount.",
    )
    shiftHours: Optional[float] = Field(
        None, description="Number of shift hours in a working week or bi-week."
    )
    standardHourRate: Optional[Decimal] = Field(
        None, description="Money amount format", example="1500.50"
    )
    standardHours: Optional[float] = Field(
        None, description="The number of hours in a standard working week or bi-week."
    )
    statutoryBasis: Optional[str] = Field(
        None,
        description="Additional weekly or bi-weekly vacation or statutory entitlements type. It may be an amount or percentage of regular hour.",
    )
    statutoryValue: Optional[float] = Field(
        None,
        description="Additional weekly or bi-weekly vacation or statutory entitlement amount or percentage of regular hours.",
    )
    totalAmountOverridden: bool = Field(
        ...,
        description="This attribute indicates if the total weekly or bi-weekly amount has been manually overridden.",
    )
    totalEarnings: Optional[Decimal] = Field(
        None, description="Money amount format", example="1500.50"
    )


class WeeklyBasisEarningAmountsResponse(PydanticBaseModelEmptyStrIsNone):
    overtimeEarnings: Optional[Decimal] = Field(
        None, description="Money amount format", example="1500.50"
    )
    overtimeHourlyRate: Optional[Decimal] = Field(
        None, description="Money amount format", example="1500.50"
    )
    overtimeHours: Optional[float] = Field(
        None, description="Number of overtime hours in a working week or bi-week."
    )
    shiftAllowance: Optional[Decimal] = Field(
        None, description="Money amount format", example="1500.50"
    )
    shiftBasis: Optional[str] = Field(
        None,
        description="Basis of weekly or bi-weekly shift earnings - either an additional hourly allowance or an additional amount.",
    )
    shiftEarnings: Optional[Decimal] = Field(
        None, description="Money amount format", example="1500.50"
    )
    shiftHours: Optional[float] = Field(
        None, description="Number of shift hours in a working week or bi-week."
    )
    standardEarnings: Optional[Decimal] = Field(
        None, description="Money amount format", example="1500.50"
    )
    standardHourRate: Optional[Decimal] = Field(
        None, description="Money amount format", example="1500.50"
    )
    standardHours: Optional[float] = Field(
        None, description="The number of hours in a standard working week or bi-week."
    )
    statutoryBasis: Optional[str] = Field(
        None,
        description="Additional weekly or bi-weekly vacation or statutory entitlements type. It may be an amount or percentage of regular hour.",
    )
    statutoryEarnings: Optional[Decimal] = Field(
        None, description="Money amount format", example="1500.50"
    )
    statutoryValue: Optional[float] = Field(
        None,
        description="Additional weekly or bi-weekly vacation or statutory entitlement amount or percentage of regular hours.",
    )
    totalAmountOverridden: bool = Field(
        ...,
        description="This attribute indicates if the total weekly or bi-weekly amount has been manually overridden.",
    )
    totalEarnings: Optional[Decimal] = Field(
        None, description="Money amount format", example="1500.50"
    )


class WithholdingTaxStatusRequest(PydanticBaseModelEmptyStrIsNone):
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )
    name: Optional[str] = Field(None, description="The enum instance name")


class WithholdingTaxStatusResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class WorkPatternDay(PydanticBaseModelEmptyStrIsNone):
    dayOfWeek: str = Field(..., description="The day of the week.")
    hours: int = Field(
        ..., description="The number of whole working hours on this day in the work pattern."
    )
    minutes: int = Field(..., description="The number of minutes on this day in the work pattern.")
    weekNumber: int = Field(
        ...,
        description="The number of the week in the pattern within which this day occurs (1, 2, 3 or 4)",
    )


class WorkPatternDayOfWeekRequest(PydanticBaseModelEmptyStrIsNone):
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )
    name: Optional[str] = Field(None, description="The enum instance name")


class WorkPatternStatusRequest(PydanticBaseModelEmptyStrIsNone):
    fullId: Optional[int] = Field(
        None,
        description="The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
    )
    name: Optional[str] = Field(None, description="The enum instance name")


class WorkPatternStatusResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class WorkPatternTypeResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class WorkPlaceAccommodation(PydanticBaseModelEmptyStrIsNone):
    accommodationCategory: Optional[str] = Field(
        None, description="The Category that identifies this association."
    )
    accommodationDescription: Optional[str] = Field(
        None, description="The description of this accommodation."
    )
    accommodationType: Optional[str] = Field(
        None, description="The Type that identifies this accommodation"
    )


class WorkPlaceAccommodationDetail(PydanticBaseModelEmptyStrIsNone):
    accommodationCategory: Optional[str] = Field(
        None, description="The Category that identifies this association."
    )
    accommodationDescription: Optional[str] = Field(
        None, description="The description of this accommodation."
    )
    accommodationEndDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    accommodationType: Optional[str] = Field(
        None, description="The Type that identifies this accommodation"
    )
    creationDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    id: Optional[str] = Field(
        None,
        description="The unique identifier for this accommodation",
        max_length=254,
        min_length=0,
    )
    implementDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    implementedDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )


class AUFloorLevelTypesResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class AUPostalTypesResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class AUStreetSuffixesResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class AbsencePeriod(PydanticBaseModelEmptyStrIsNone):
    absenceType: Optional[str] = Field(
        None, description="The absenceType for the absence reason.", max_length=100, min_length=0
    )
    endDate: Optional[date] = Field(None, description="ISO 8601 date format", example="1999-12-31")
    episodicLeavePeriodDetail: Optional[EpisodicLeavePeriodDetail] = None
    id: Optional[str] = Field(
        None, description="Business Entity OID", example="PE-00012-0000001234"
    )
    reason: Optional[str] = Field(
        None, description="The name for the absence reason.", max_length=100, min_length=0
    )
    reasonQualifier1: Optional[str] = Field(
        None,
        description="The first qualifier for the absence reason.",
        max_length=100,
        min_length=0,
    )
    reasonQualifier2: Optional[str] = Field(
        None,
        description="The second qualifier for the absence reason.",
        max_length=100,
        min_length=0,
    )
    requestStatus: Optional[str] = Field(
        None, description="The status of the leave request.", max_length=100, min_length=0
    )
    startDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    status: Optional[str] = Field(
        None, description="The status for this absence period.", max_length=100, min_length=0
    )


class AccommodationCase(PydanticBaseModelEmptyStrIsNone):
    additionalNotes: Optional[str] = Field(
        None, description="Additional notes for this accommodation.", max_length=20000, min_length=0
    )
    limitations: Optional[List[Limitation]] = Field(
        None, description="Represents a Limitation to be associated to an Accommodation Case."
    )
    notificationCaseId: Optional[str] = Field(
        None,
        description="Notification case id of the case to which the accommodation should be added as a child case.  ",
        max_length=254,
        min_length=0,
    )
    notificationReason: Optional[str] = Field(
        None,
        description="Notification Reason selected during Notification case intake.",
        max_length=100,
        min_length=0,
    )
    pregnancyRelated: str = Field(
        ...,
        description="Identifies whether the accommodation being requested is related to an employee's pregnancy. This is a statutory requirement in certain states and is captured so as it can be reported upon where required. ",
    )
    workPlaceAccommodations: Optional[List[WorkPlaceAccommodation]] = Field(
        None, description="List of Accommodations for this accommodation case."
    )


class ClosureReasons(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class Limitations(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class AccommodationCaseSummary(PydanticBaseModelEmptyStrIsNone):
    accommodationCaseId: Optional[str] = Field(
        None, description="The Case Number for the accommodation case", max_length=256, min_length=0
    )
    accommodationDecision: Optional[str] = Field(
        None, description="The decision made on this accommodation case"
    )
    additionalNotes: Optional[str] = Field(
        None, description="Additional notes for the accommodation.", max_length=20000, min_length=0
    )
    caseHandler: Optional[str] = Field(
        None, description="The Person handling the accommodation case", max_length=50, min_length=0
    )
    caseHandlerEmailAddress: Optional[str] = Field(
        None,
        description="The email address of the accommodation case handler ",
        max_length=40,
        min_length=0,
    )
    caseHandlerPhoneNumber: Optional[str] = Field(
        None,
        description="The phone number of the accommodation case handler ",
        max_length=20,
        min_length=0,
    )
    decisionDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    limitations: Optional[List[LimitationDetail]] = Field(
        None, description="List of Limitation for this Accommodation Case."
    )
    notificationCaseId: Optional[str] = Field(
        None,
        description="Notification case id, if applicable for the accommodation case",
        max_length=254,
        min_length=0,
    )
    notificationDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    notificationReason: Optional[str] = Field(
        None,
        description="Notification Reason selected during Notification case intake.",
        max_length=100,
        min_length=0,
    )
    notifiedBy: Optional[str] = Field(None, description="The notifier for this accommodation case")
    pregnancyRelated: Optional[str] = Field(
        None, description="The date a decision was made on this accommodation case"
    )
    status: Optional[str] = Field(
        None, description="The Accommodation Case current phase.", max_length=100, min_length=0
    )
    workplaceAccommodationDetails: Optional[List[WorkPlaceAccommodationDetail]] = Field(
        None, description="List of Accommodations for this accommodation case"
    )


class AccommodationCategoryResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class AccommodationSourceResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class AccomodationResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class AccountTypeResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class ActualEarningsTypeResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class AllowedGenderResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class ApiError(PydanticBaseModelEmptyStrIsNone):
    _links: Optional[Dict[str, str]] = None
    code: Optional[str] = None
    detail: Optional[str] = None
    id: Optional[str] = None
    meta: Optional[Dict[str, Any]] = None
    source: Optional[ErrorSource] = None
    status: Optional[str] = None
    title: Optional[str] = None


class ApplicabilityStatusResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class CategoryResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class ClaimMedicareLevyExemptionResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class ClosureReasonsResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class CountryResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class CoveredPersonResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class CreateActualAbsencePeriodCommand(PydanticBaseModelEmptyStrIsNone):
    actualDate: date = Field(..., description="ISO 8601 date format", example="1999-12-31")
    additionalNotes: Optional[str] = Field(
        None,
        description="Enter any additional notes about the reported actual time.",
        max_length=250,
        min_length=0,
    )
    endDateTime: Optional[datetime] = Field(
        None, description="ISO 8601 date time format", example="1999-12-31T23:59:59Z"
    )
    episodePeriodBasis: EpisodePeriodDurationBasisRequest
    episodePeriodDuration: int = Field(
        ..., description="Actual time/duration taken by the employee.", ge=1.0
    )
    reportedDateTime: Optional[datetime] = Field(
        None, description="ISO 8601 date time format", example="1999-12-31T23:59:59Z"
    )
    startDateTime: Optional[datetime] = Field(
        None, description="ISO 8601 date time format", example="1999-12-31T23:59:59Z"
    )
    timeZone: Optional[TimeZoneRequest] = None
    type: Optional[CreateAbsencePeriodTypeRequest] = None


class CreateActualEarningsCommand(PydanticBaseModelEmptyStrIsNone):
    creditDays: Optional[str] = Field(
        None,
        description="Additional credit amount paid earned between the effective date and end date expressed as a number of days earnings",
    )
    creditEarnings: Optional[CreditEarningsMoneyRequest] = None
    creditReason: Optional[EarningsCreditReasonRequest] = None
    earningsType: ActualEarningsTypeRequest
    effectiveDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    endDate: Optional[date] = Field(None, description="ISO 8601 date format", example="1999-12-31")
    extensions: Optional[Dict[str, Any]] = None
    grossAmount: Optional[GrossAmountMoneyRequest] = None
    infoOnlyAmount: Optional[InfoOnlyAmountMoneyRequest] = None
    netAmount: Optional[NetAmountMoneyRequest] = None
    notes: Optional[str] = Field(
        None, description="Notes related to the earnings period", max_length=2000
    )
    paidDate: Optional[date] = Field(None, description="ISO 8601 date format", example="1999-12-31")
    salaryAmountBasis: Optional[SalaryAmountBasisRequest] = None


class CreateAddressCommand(PydanticBaseModelEmptyStrIsNone):
    addressLine1: Optional[str] = Field(
        None, description="First line of an address.", max_length=40
    )
    addressLine2: Optional[str] = Field(
        None, description="Second line of an address.", max_length=40
    )
    addressLine3: Optional[str] = Field(
        None, description="Third line of an address.", max_length=40
    )
    addressLine4: Optional[str] = Field(
        None, description="Fourth line of an address.", max_length=40
    )
    addressLine5: Optional[str] = Field(
        None, description="Fifth line of an address.", max_length=40
    )
    addressLine6: Optional[str] = Field(
        None, description="Sixth line of an address.", max_length=40
    )
    addressLine7: Optional[str] = Field(
        None, description="Seventh line of an address.", max_length=40
    )
    country: CountryRequest
    extensions: Optional[Dict[str, Any]] = None
    extraAustralianFields: Optional[CreateAustralianAddressCommand] = None
    postCode: Optional[str] = Field(None, description="International Postcode.", max_length=40)
    premiseNo: Optional[str] = Field(
        None, description="The premise number i.e. the street number.", max_length=50
    )


class CreateLeavePeriodsChangeRequestCommand(PydanticBaseModelEmptyStrIsNone):
    additionalNotes: Optional[str] = Field(
        None,
        description="Extra information about the leave period change request in free text format.",
    )
    changeRequestPeriods: List[ChangeRequestPeriodCommand] = Field(
        ..., description="List of leave period changes requested."
    )
    reason: ReasonRequest


class CreateOccupationCommand(PydanticBaseModelEmptyStrIsNone):
    additionalEmploymentCategory: Optional[OCOccupationAltEmploymentCatRequest] = None
    codeId: Optional[str] = Field(None, description="Occupation Industry Classification Code id.")
    codeName: Optional[str] = Field(
        None,
        description="The name(s) associated with the specific Occupation Industry Classification Code id.",
    )
    dateJobBegan: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    dateJobEnded: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    daysWorkedPerWeek: Optional[str] = Field(
        None,
        description="The number of days worked per week, which can be specified with partial day.",
    )
    employeeId: Optional[str] = Field(
        None, description="Reference identifier of an employee in respect of its employer. "
    )
    employer: Optional[str] = Field(None, description="This is the name of the Employer Party.")
    employmentCategory: Optional[EmploymentCategoryRequest] = None
    employmentLocation: Optional[OCOccupationEmpLocationCodeRequest] = None
    employmentStatus: Optional[OCOccupationEmploymentStatusRequest] = None
    employmentTitle: Optional[OCOccupationEmploymentTitleRequest] = None
    endEmploymentReason: Optional[OCOccupationEndPositionCodeRequest] = None
    endPosReason: Optional[str] = Field(None, description="The reason for job ending.")
    extensions: Optional[Dict[str, Any]] = None
    hoursWorkedPerWeek: Optional[str] = None
    jobDesc: Optional[str] = Field(None, description="Job description.")
    jobStrenuous: Optional[OCOccupationJobStrenuousnessRequest] = None
    jobTitle: Optional[str] = Field(None, description="Job title.")
    overrideDaysWorkedPerWeek: Optional[bool] = Field(
        None, description="Is override days worked per week true or false?"
    )
    primary: Optional[bool] = Field(
        None, description="Indicates if the Occupation record is the primary occupation or not."
    )
    remarks: Optional[str] = Field(None, description="Remarks about the Occupation.")
    requestOnlyAttributes: Optional[Dict[str, str]] = Field(
        None,
        description="Can contain only: copyEmployerFromOccupationId - The ID of an occupation that exists on a case where the case has the same root case as the case against which the occupation is being added, and when provided means that the Employer rel from the existing occupation is copied to the new one.",
    )
    selfEmployed: Optional[bool] = Field(
        None, description="Indicates whether the person linked to the occupation is self-employed."
    )
    workScheduleDescription: Optional[str] = Field(None, description="Work schedule description.")


class CreatePaymentPreferenceCommand(PydanticBaseModelEmptyStrIsNone):
    accountDetail: Optional[CreateAccountDetailCommand] = None
    address: Optional[CreateAddressCommand] = None
    chequeDetail: Optional[CreateChequeDetailCommand] = None
    description: Optional[str] = Field(
        None, description="Payment preference description.", max_length=150
    )
    effectiveFromDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    effectiveToDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    extensions: Optional[Dict[str, Any]] = None
    isDefault: Optional[bool] = None
    overridePostalAddress: Optional[bool] = Field(
        None,
        description="This indicator will be used to override the address or use the customer current address. If true then override the address, else use the customer default address.",
    )
    paymentMethod: PaymentMethodRequest


class CurrentPhaseResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class DayOfWeekResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class DayPatternEmbeddable(PydanticBaseModelEmptyStrIsNone):
    dayOfWeek: Optional[DayOfWeekResponse] = None
    hours: Optional[int] = Field(None, description="Hours worked on that particular day")
    id: Optional[str] = Field(
        None,
        description="The unique identifier for the day pattern, composed of classId and indexId",
    )
    minutes: Optional[int] = Field(None, description="Minutes worked on that particular day")
    weekNumber: Optional[int] = Field(
        None, description="The week number in a particular month (1,2,3,4)"
    )


class DisabilityIntegrationResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class EFormAttribute(PydanticBaseModelEmptyStrIsNone):
    booleanValue: Optional[bool] = Field(
        None,
        description="Boolean value of an EForm attribute, which must be populated if the type attribute is set to boolean.",
    )
    dateValue: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    decimalValue: Optional[float] = Field(
        None,
        description="Decimal value of an EForm attribute, which must be populated if the type attribute is set to decimal.",
    )
    enumValue: Optional[ModelEnum] = None
    integerValue: Optional[int] = Field(
        None,
        description="Integer value of an EForm attribute, which must be populated if the type attribute is set to integer.",
    )
    name: str = Field(..., description="The name of an EForm attibute.")
    stringValue: Optional[str] = Field(
        None,
        description="String value of an EForm attribute, which must be populated if the type attribute is set to string.",
    )


class EarningsCreditReasonResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class EditPaymentPreferenceAddressCommand(PydanticBaseModelEmptyStrIsNone):
    addressLine1: Optional[str] = Field(None, description="First line of an address.")
    addressLine2: Optional[str] = Field(None, description="Second line of an address.")
    addressLine3: Optional[str] = Field(None, description="Third line of an address.")
    addressLine4: Optional[str] = Field(None, description="Fourth line of an address.")
    addressLine5: Optional[str] = Field(None, description="Fifth line of an address.")
    addressLine6: Optional[str] = Field(None, description="Sixth line of an address.")
    addressLine7: Optional[str] = Field(None, description="Seventh line of an address.")
    country: Optional[CountryRequest] = None
    extensions: Optional[Dict[str, Any]] = None
    extraAustralianFields: Optional[EditPaymentPreferenceAustralianAddressCommand] = None
    postCode: Optional[str] = Field(None, description="International Postcode.")
    premiseNo: Optional[str] = None


class EditPaymentPreferenceCommand(PydanticBaseModelEmptyStrIsNone):
    accountDetail: Optional[EditAccountDetailCommand] = None
    address: Optional[EditPaymentPreferenceAddressCommand] = None
    chequeDetail: Optional[EditChequeDetailCommand] = None
    default: Optional[bool] = Field(None, description="Default payment preference indicator.")
    description: Optional[str] = Field(None, description="Payment preference description.")
    effectiveFromDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    effectiveToDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    isDefault: Optional[bool] = None
    overridePostalAddress: Optional[bool] = Field(
        None,
        description="This indicator will be used to override the address or use the customer current address. If true then override the address, else use the customer default address.",
    )
    paymentMethod: Optional[PaymentMethodRequest] = None


class EligibilityStatusResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class EmployeeAnswers(PydanticBaseModelEmptyStrIsNone):
    answers: Optional[List[EFormAttribute]] = Field(None, description="Get Answers if any exist.")
    category: Optional[str] = Field(
        None,
        description="The category of the employer questions answered. Enum InstructionsQuestionsCategory (domainId 234) instance name value",
    )


class EmployerQuestionAnswer(PydanticBaseModelEmptyStrIsNone):
    answer: EFormAttribute
    question: EmployerQuestion


class EmployerQuestionAnswers(PydanticBaseModelEmptyStrIsNone):
    elements: List[EmployerQuestionAnswer] = Field(
        ...,
        description="An array of questions and answers to employer questions belonging to the given category of ER questions.",
    )


class EmploymentCategoryResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class EnumDomain(PydanticBaseModelEmptyStrIsNone):
    _links: Optional[Dict[str, str]] = Field(
        None,
        description="Links to related objects (in this case: self and instances)",
        example="{'self': '','instances': ''}",
    )
    alphaSort: Optional[bool] = Field(
        None,
        description="When value is equal to 'true' it indicating that domain instances when presented to user should be sorted alphabetically, 'false' otherwise. This parameter does not influence sort order of instances when returned by this API",
    )
    defaultSort: Optional[bool] = Field(
        None,
        description="When value is equal to 'true' it indicating that default instance should be shown (to user) first in an alphabetically sorted view, 'false' othrwise. This parameter does not influence sort order of instances when returned by this API",
    )
    description: Optional[str] = Field(None, description="Description of this domain")
    editable: Optional[bool] = Field(
        None,
        description="Flag whether this domain is allowed to be edited. Domain can be edited from back office system only - No edit domain endpoint exists.",
    )
    id: Optional[str] = Field(None, description="Enum domain ID (unique in the system)")
    instances: Optional[List[EnumInstanceSummary]] = Field(
        None, description="List of the instances that belongs to this domain "
    )
    name: Optional[str] = Field(None, description="Enum domain name")
    subsets: Optional[List[EnumSubset]] = Field(
        None, description="List of subsets that belongs to this domain"
    )


class EnumDomains(PydanticBaseModelEmptyStrIsNone):
    _links: Optional[Dict[str, str]] = None
    elements: Optional[List[EnumDomain]] = None
    hasMoreElements: Optional[bool] = Field(
        None,
        description="<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>",
    )
    meta: Optional[Dict[str, Any]] = None
    totalSize: Optional[int] = Field(
        None,
        description="<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
    )


class EnumInstance(PydanticBaseModelEmptyStrIsNone):
    _links: Optional[Dict[str, str]] = Field(
        None,
        description="Links to related objects (in this case: SELF and DOMAIN)",
        example="{'self': '','domain': ''}",
    )
    dOrder: Optional[int] = Field(
        None,
        description="Denotes the order the Enum resides within all Enum Instances within Domain",
    )
    domainId: Optional[int] = Field(
        None, description="Enum Domain ID, corresponds to <code>domainId</code>"
    )
    domainName: Optional[str] = Field(
        None, description="Name of domain to which this instance belongs to"
    )
    endDate: Optional[date] = Field(
        None,
        description="Date at which the Enum will become inactive (since that date, enum should be considered inactive)",
    )
    fullId: Optional[int] = Field(
        None, description="Enum instance fullId, corresponds to <code>TaEnum.fullId</code>"
    )
    id: Optional[str] = Field(None, description="Enum instance ID (unique in the domain)")
    name: Optional[str] = Field(None, description="Enum instance name")
    retired: Optional[bool] = Field(
        None,
        description="If <code>true</code> retired Instances only are returned,if <code>false</code>(or not specified) non-retired instances only are returned",
    )
    startDate: Optional[date] = Field(None, description="Date at which the Enum was activated")
    subsets: Optional[List[EnumSubsetSummary]] = Field(
        None, description="List of subsets to which this instance belongs to"
    )


class EnumInstances(PydanticBaseModelEmptyStrIsNone):
    _links: Optional[Dict[str, str]] = None
    elements: Optional[List[EnumInstance]] = None
    hasMoreElements: Optional[bool] = Field(
        None,
        description="<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>",
    )
    meta: Optional[Dict[str, Any]] = None
    totalSize: Optional[int] = Field(
        None,
        description="<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
    )


class EnumQuestionAttribute(PydanticBaseModelEmptyStrIsNone):
    caption: Optional[str] = Field(
        None, description="The descriptive heading or title of a question."
    )
    enumDomain: Optional[TaEnumQuestionResponse] = None
    fieldName: Optional[str] = Field(None, description="The attribute Name of the question.")


class EpisodeDurationBasisResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class EventTypeResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class ExtensionAttribute(PydanticBaseModelEmptyStrIsNone):
    booleanValue: Optional[bool] = Field(
        None, description="Value of the class extension attribute of a boolean type."
    )
    dateOnlyValue: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    decimalValue: Optional[float] = Field(
        None, description="Value of the class extension attribute of a Decimal type."
    )
    enumValue: Optional[ModelEnum] = None
    integerValue: Optional[int] = Field(
        None, description="Value of the class extension attribute of a string type."
    )
    moneyValue: Optional[str] = Field(
        None, description="Value of the class extension attribute of a Money type."
    )
    name: str = Field(
        ..., description="The name of the attribute which extends standard claim set of attributes."
    )
    stringValue: Optional[str] = Field(
        None, description="Value of the class extension attribute of a string type."
    )


class ExtraPayTaxRateResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class FilingMaritalStatusResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class FuturePaymentDetail(PydanticBaseModelEmptyStrIsNone):
    adjustmentClassExtension: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain OLFixedAmountIncreaseInstruction extension information.",
    )
    adjustmentTypeId: Optional[str] = Field(
        None, description="Business Entity OID", example="PE-00012-0000001234"
    )
    amount: Optional[Decimal] = Field(None, description="Money amount format", example="1500.50")
    calcDetails: Optional[List[str]] = Field(
        None, description="The Calculation Details that explain how each adjustment is calculated. "
    )
    calcDetailsClassExtension: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain OLAdjustmentCalcDetail extension information.",
    )
    integrationType: Optional[str] = Field(
        None, description="The integration type of the future payment detail."
    )
    payee: Optional[str] = Field(
        None,
        description="The name of the Payee which the future payment detail belongs.",
        max_length=100,
        min_length=0,
    )
    periodEndDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    periodStartDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    reference: Optional[str] = Field(
        None, description="This gives the reference value of the future payment detail."
    )
    sequenceNumber: Optional[int] = Field(
        None, description="The sequence number of the future payment detail. "
    )
    type: Optional[str] = Field(None, description="The type of the future payment detail.")
    useTOCalc: Optional[str] = Field(
        None,
        description="The Calculation that explain how each future payment detail is calculated. ",
    )


class HospitalisationDetails(PydanticBaseModelEmptyStrIsNone):
    description: Optional[str] = Field(
        None, description="The description of hospitalisation detail.", max_length=256, min_length=0
    )
    endDate: Optional[date] = Field(None, description="ISO 8601 date format", example="1999-12-31")
    endDateConfirmed: Optional[bool] = Field(
        None, description="The end date confirmation for the hospitalisation period."
    )
    extensionAttributes: Optional[List[ExtensionAttribute]] = None
    hospitalReason: Optional[str] = Field(
        None, description="The hospitalisation reason for the claim period."
    )
    startDate: date = Field(..., description="ISO 8601 date format", example="1999-12-31")


class HospitalisationDetailsResponse(PydanticBaseModelEmptyStrIsNone):
    description: Optional[str] = Field(
        None, description="The description of hospitalisation detail.", max_length=256, min_length=0
    )
    endDate: Optional[date] = Field(None, description="ISO 8601 date format", example="1999-12-31")
    endDateConfirmed: Optional[bool] = Field(
        None, description="The end date confirmation for the hospitalisation period."
    )
    extensionAttributes: Optional[List[ExtensionAttribute]] = None
    facility: Optional[str] = Field(None, description="The facilitator(hospital) name.")
    hospitalReason: Optional[str] = Field(
        None, description="The hospitalisation reason for the claim period."
    )
    hospitalisationDetailId: str = Field(
        ..., description="Business Entity OID", example="PE-00012-0000001234"
    )
    startDate: date = Field(..., description="ISO 8601 date format", example="1999-12-31")


class IncomeSource(PydanticBaseModelEmptyStrIsNone):
    amount: Optional[Decimal] = Field(None, description="Money amount format", example="1500.50")
    endDate: Optional[date] = Field(None, description="ISO 8601 date format", example="1999-12-31")
    extensionAttributes: Optional[List[ExtensionAttribute]] = None
    frequency: Optional[str] = Field(None, description="Frequency of the income.")
    incomeName: str = Field(..., description="Income source name.", max_length=256, min_length=0)
    incomeType: str = Field(..., description="Type of the income source.")
    receivedFrom: Optional[str] = Field(
        None, description="Identify from where the other income source was received."
    )
    startDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )


class IncomeSourceResponse(PydanticBaseModelEmptyStrIsNone):
    amount: Optional[Decimal] = Field(None, description="Money amount format", example="1500.50")
    endDate: Optional[date] = Field(None, description="ISO 8601 date format", example="1999-12-31")
    extensionAttributes: Optional[List[ExtensionAttribute]] = None
    frequency: Optional[str] = Field(None, description="Frequency of the income.")
    incomeName: str = Field(..., description="Income source name.", max_length=256, min_length=0)
    incomeSourceId: Optional[str] = Field(
        None, description="Business Entity OID", example="PE-00012-0000001234"
    )
    incomeType: str = Field(..., description="Type of the income source.")
    receivedFrom: Optional[str] = Field(
        None, description="Identify from where the other income source was received."
    )
    startDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )


class KiwiSaverStatusResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class LeavePlan(PydanticBaseModelEmptyStrIsNone):
    adjudicationStatus: Optional[str] = Field(None, description="Adjudication status of leave plan")
    applicabilityStatus: Optional[str] = Field(
        None, description="Applicability status of leave plan"
    )
    availabilityStatus: Optional[str] = Field(
        None, description="Result of the evaluation of plan availability within a leave request"
    )
    calculationPeriodMethod: Optional[str] = Field(
        None, description="Calculation period method of leave plan period."
    )
    category: Optional[str] = Field(None, description="Leave plan category")
    eligibilityStatus: Optional[str] = Field(None, description="Eligibility status of leave plan")
    evidenceStatus: Optional[str] = Field(
        None, description="Evidence status made on this Selected Leave Plan"
    )
    fixedYearStartDay: Optional[int] = Field(
        None, description="Start day for the specified fixed year"
    )
    fixedYearStartMonth: Optional[str] = Field(None, description="Fixed year start month")
    id: Optional[str] = Field(None, description="The unique identifier for the leave plan")
    leavePlanType: Optional[LeavePlanType] = None
    name: Optional[str] = Field(None, description="Leave plan long name")
    paidLeaveCaseId: Optional[str] = Field(None, description="Paid leave case id")
    shortName: Optional[str] = Field(None, description="Leave plan short name")
    timeBankMethod: Optional[str] = Field(
        None,
        description="The time bank method either from the Service Agreement or from the Leave Plan Availability",
    )
    timeEntitlement: Optional[float] = Field(
        None, description="Number of time units for the time entitlement"
    )
    timeEntitlementBasis: Optional[str] = Field(
        None, description="Units of time used in leave plan availability"
    )
    timeWithinPeriod: Optional[int] = Field(
        None, description="Number of time units for the period duration e.g. Weeks, Days"
    )
    timeWithinPeriodBasis: Optional[str] = Field(
        None, description="Units of time used in calculating the time with in period "
    )


class LimitationsDescriptionResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class LumpSumBenefit(PydanticBaseModelEmptyStrIsNone):
    amountType: Optional[str] = Field(
        None,
        description="Indicates the basis upon which the benefit is calculated, examples might be fixed amount basis, salary percentage basis or tiered basis.",
    )
    basisOfPolicyWaitingPeriod: Optional[str] = Field(
        None,
        description="Basis of the period of time that the policy must be in force before the insured qualifies for coverage (i.e. day, week month or year).",
    )
    benefitExpiryDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    benefitIncurredDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    benefitType: Optional[str] = Field(
        None,
        description="Type of a benefit right such as Disability Income - STD, Disability Income LTD, Accelerated Death Benefit or Accidental Death Benefit.",
    )
    brokerAuthorisationFlag: Optional[bool] = Field(
        None,
        description="Flag that indicates if the broker is to be included in the correspondence.",
    )
    effectiveDateForCoverage: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    extensionAttributes: Optional[List[ExtensionAttribute]] = Field(
        None, description="Extra attributes from extension if any."
    )
    flatAmount: Optional[Decimal] = Field(
        None, description="Money amount format", example="1500.50"
    )
    initialNotificationDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    isUnderwritten: Optional[bool] = Field(
        None,
        description="Indicates whether or not the member has been underwritten in order to have additional cover beyond what the group membership offers.",
    )
    maximumBenefitExpiryAge: Optional[int] = Field(
        None, description="Maximum Age to be eligible to receive benefit."
    )
    notificationReceivedDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    overrideClaimIncurredDate: Optional[bool] = Field(
        None,
        description="Indicator which specifies that the benefit level incurred date should be used rather than the claim level incurred date.",
    )
    policyWaitingPeriod: Optional[int] = Field(
        None,
        description="Period of time that the policy must be in force before the insured qualifies for coverage.",
    )
    sourceOfRequest: Optional[str] = Field(
        None,
        description="The type of source that is requesting the benefit, such as claimant, guardian, or medical officer.",
    )
    startDateOfBenefitForClaim: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    sumInsuredAtIncurredDate: Optional[Decimal] = Field(
        None, description="Money amount format", example="1500.50"
    )


class ManagedRequirementSummary(PydanticBaseModelEmptyStrIsNone):
    category: str = Field(
        ...,
        description="The category name of the managed requirement.",
        max_length=50,
        min_length=0,
    )
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain managed requirement (OCManagedRequirement) extension information.",
    )
    dateCompleted: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    dateLastFollowedUp: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    dateRequested: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    description: Optional[str] = Field(
        None,
        description="A text description of the outstanding requirement or information.",
        max_length=250,
        min_length=0,
    )
    documentReceived: bool = Field(
        ...,
        description="Indicates that a document has been received for this managed requirement. Returns true if the managed requirement is linked to a document that this user can access,otherwise returns false.",
    )
    followUpDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    managedReqId: int = Field(..., description="the identifier for this managed requirement.")
    notProceedingWithDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    status: Optional[str] = Field(
        None,
        description="The current status of this Managed Requirement. ",
        max_length=100,
        min_length=0,
    )
    type: str = Field(
        ...,
        description="The name of the type of the managed requirement.",
        max_length=50,
        min_length=0,
    )


class ManagerAcceptedResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class MaritalRelationshipStatusResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class MedicalDetails(PydanticBaseModelEmptyStrIsNone):
    causeOfInjuryCode: Optional[str] = Field(
        None, description="The code ID that specifies the cause of injury."
    )
    clientDominantSide: Optional[str] = Field(None, description="The claimants dominant side.")
    condition: Optional[str] = Field(
        None, description="A description of the medical condition of the injured party."
    )
    conditionCategory: Optional[str] = Field(
        None, description="A high-level indicator of the medical condition being claimed."
    )
    extensionAttributes: Optional[List[ExtensionAttribute]] = Field(
        None, description="Extension attributes."
    )
    firstDoctorVisitDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    lastReceivedDateMedicalInfo: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    lastRequestedDateMedicalInfo: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    lifeExpectancy: Optional[str] = Field(
        None,
        description="Projected life expectancy for the injured party based on the current medical information.",
    )
    medicalAuthorisationReceivedDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    pregnancyIndicator: Optional[bool] = Field(
        None, description="Indicates whether a person is pregnant or not."
    )
    symptomsFirstAppeared: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    treatmentPlan: Optional[str] = Field(
        None, description="A description of the treatment plan for the injured party."
    )


class MedicalDetailsResponse(PydanticBaseModelEmptyStrIsNone):
    causeOfInjuryCode: Optional[str] = Field(
        None, description="The code ID that specifies the cause of injury."
    )
    clientDominantSide: Optional[str] = Field(None, description="The claimants dominant side.")
    condition: Optional[str] = Field(
        None, description="A description of the medical condition of the injured party."
    )
    conditionCategory: Optional[str] = Field(
        None, description="A high-level indicator of the medical condition being claimed."
    )
    description: Optional[str] = Field(None, description="Description of the cause of injury code.")
    extensionAttributes: Optional[List[ExtensionAttribute]] = Field(
        None, description="Extension attributes."
    )
    firstDoctorVisitDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    lastReceivedDateMedicalInfo: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    lastRequestedDateMedicalInfo: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    lifeExpectancy: Optional[str] = Field(
        None,
        description="Projected life expectancy for the injured party based on the current medical information.",
    )
    medicalAuthorisationReceivedDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    pregnancyIndicator: Optional[bool] = Field(
        None, description="Indicates whether a person is pregnant or not."
    )
    symptomsFirstAppeared: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    treatmentPlan: Optional[str] = Field(
        None, description="A description of the treatment plan for the injured party."
    )


class MedicalRelatedResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class MedicareLevySurchargeResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class MilitaryRelatedResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class MonthlyEarningsRequest(PydanticBaseModelEmptyStrIsNone):
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain Earnings extension information.",
    )
    earningsBasis: str = Field(..., description="The earnings frequency.")
    effectiveDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    endDate: Optional[date] = Field(None, description="ISO 8601 date format", example="1999-12-31")
    monthlyBasisEarningAmountsRequest: Optional[MonthlyBasisEarningAmountsRequest] = None
    notes: Optional[str] = Field(
        None, description="Notes relating to the earnings period.", max_length=200, min_length=0
    )
    salaryAmountBasis: Optional[str] = Field(
        None, description="Basis for salary amount being used."
    )


class NewWebMessage(PydanticBaseModelEmptyStrIsNone):
    caseId: Optional[str] = Field(
        None,
        description="The case the web message is associated to (if any)",
        max_length=254,
        min_length=0,
    )
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain web message information.",
    )
    narrative: str = Field(..., description="The web message text", max_length=4000, min_length=0)
    subject: str = Field(..., description="Subject of the message", max_length=200, min_length=0)


class NextPaymentLine(PydanticBaseModelEmptyStrIsNone):
    amount: Optional[str] = Field(
        None, description="The amount of the adjustment", max_length=28, min_length=0
    )
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain payments (OLPaymentLine) extension information.",
    )
    lineType: Optional[str] = Field(
        None,
        description="The name of the payment adjustment e.g. Gross Benefit, Income Tax, Seat Belt etc.",
        max_length=100,
        min_length=0,
    )
    sequenceNumber: Optional[int] = Field(
        None,
        description="The adjustment sequence number. Adjustments are applied in ascending order",
    )


class NotificationAccommodationCaseSummary(PydanticBaseModelEmptyStrIsNone):
    accommodationCaseId: Optional[str] = Field(
        None, description="The Case Number for the accommodation case", max_length=256, min_length=0
    )
    accommodationDecision: Optional[str] = Field(
        None, description="The decision made on this accommodation case"
    )
    caseHandler: Optional[str] = Field(
        None, description="The Person handling the accommodation case", max_length=50, min_length=0
    )
    caseHandlerEmailAddress: Optional[str] = Field(
        None,
        description="The email address of the accommodation case handler ",
        max_length=20,
        min_length=0,
    )
    caseHandlerPhoneNumber: Optional[str] = Field(
        None,
        description="The phone number of the accommodation case handler ",
        max_length=20,
        min_length=0,
    )
    decisionDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    limitations: Optional[List[LimitationDetail]] = Field(
        None, description="Represents a Limitation to be associated to an Accommodation Case."
    )
    notificationDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    notifiedBy: Optional[str] = Field(None, description="The notifier for this accommodation case")
    pregnancyRelated: Optional[str] = Field(
        None, description="The date a decision was made on this accommodation case"
    )
    status: Optional[str] = Field(None, description="The Accommodation Case current phase.")
    workplaceAccommodations: Optional[List[WorkPlaceAccommodationDetail]] = Field(
        None, description="List of Accommodations for this accommodation case"
    )


class NotificationCaseSummaryForAbsenceTypes(PydanticBaseModelEmptyStrIsNone):
    absences: Optional[List[NotificationAbsenceCaseSummary]] = Field(
        None, description="The absence child cases under this notification case."
    )
    accidentDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    accommodations: Optional[List[NotificationAccommodationCaseSummary]] = Field(
        None, description="The accommodation child cases under this notification case."
    )
    actualDeliveryDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    actualPartialReturnToWorkDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    actualReturnToWorkDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    createdDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    dateFirstMissingWork: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    expectedDeliveryDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    expectedRTWDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    multipleConflictingAccidentDates: Optional[bool] = Field(
        None,
        description="Multiple conflicting accident dates found.If true,accidentDate attribute will be empty.",
    )
    notificationCaseId: Optional[str] = Field(
        None, description="The case number for the notification case."
    )
    notificationDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    notificationReason: Optional[str] = Field(
        None,
        description="Notification reason selected during notification case intake.",
        max_length=100,
        min_length=0,
    )
    partialReturnToWorkDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    releasedPartialReturnToWorkDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    releasedReturnToWorkDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    returnToWorkIntention: Optional[str] = Field(
        None,
        description="Indicates the employees return to work plans once they have finished their leave.",
    )
    status: Optional[str] = Field(
        None,
        description="The notification case status his is the current phase of the notification case managing process.",
    )


class NotificationClaimSummary(PydanticBaseModelEmptyStrIsNone):
    caseComplexity: Optional[str] = Field(None, description="Case complexity on Claim")
    claimHandler: Optional[str] = Field(
        None, description="The Person that is handling the claim.", max_length=50, min_length=0
    )
    claimHandlerEmailAddress: Optional[str] = Field(
        None, description="The email address of the claim handler.", max_length=40, min_length=0
    )
    claimHandlerPhoneNo: Optional[str] = Field(
        None, description="The phone number of the claim handler.", max_length=20, min_length=0
    )
    claimId: str = Field(
        ..., description="The claim number of the claim", max_length=256, min_length=0
    )
    claimType: str = Field(
        ...,
        description="The name by which the claim type is referred.",
        max_length=50,
        min_length=0,
    )
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain extension information.",
    )
    creationDate: Optional[datetime] = Field(
        None, description="ISO 8601 date time format", example="1999-12-31T23:59:59Z"
    )
    customerName: Optional[str] = Field(
        None, description="The customer name of the claim", max_length=256, min_length=0
    )
    description: Optional[str] = Field(
        None,
        description="Description for this case as entered by the user.",
        max_length=2000,
        min_length=0,
    )
    effectiveDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    notificationDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    policyReferences: Optional[str] = Field(
        None,
        description="The reference(s) to the policy from within the relevant admin system.",
        max_length=50,
        min_length=0,
    )
    stageName: Optional[str] = Field(None, description="The current stage of claim case.")
    status: Optional[str] = Field(
        None,
        description="This is the stage in the process that the case is currently at.",
        max_length=10,
        min_length=0,
    )


class NotificationReasonResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class OCOccupationAltEmploymentCatResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class OCOccupationEmpLocationCodeResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class OCOccupationEmploymentStatusResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class OCOccupationEmploymentTitleResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class OCOccupationEndPositionCodeResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class OCOccupationJobStrenuousnessResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class PaginatedSupervisedAbsences(PydanticBaseModelEmptyStrIsNone):
    absences: Optional[List[SupervisedAbsenceSummary]] = None
    totalNumberOfRecords: Optional[int] = None


class Payment(PydanticBaseModelEmptyStrIsNone):
    accountTransferInfo: Optional[AccountTransferInfo] = None
    benefitCaseNumber: Optional[str] = Field(None, description="The Benefit Case Number.")
    benefitCaseTypeName: Optional[str] = None
    benefitRightTypeName: Optional[str] = None
    chequePaymentInfo: Optional[ChequePaymentInfo] = None
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain payments (OLPaymentEventInterface) extension information.",
    )
    dateInterfaceRecordCreated: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    effectiveDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    nominatedPayeeName: Optional[str] = Field(
        None,
        description="The party the payee nominated to receive payment",
        max_length=256,
        min_length=0,
    )
    payeeName: Optional[str] = Field(
        None, description="The party to whom the payment was made", max_length=256, min_length=0
    )
    paymentAddress: Optional[str] = Field(
        None, description="The address the payment was sent to", max_length=256, min_length=0
    )
    paymentAmount: Optional[Decimal] = Field(
        None, description="Money amount format", example="1500.50"
    )
    paymentDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    paymentId: Optional[str] = Field(
        None, description="Business Entity OID", example="PE-00012-0000001234"
    )
    paymentMethod: Optional[str] = Field(
        None,
        description="The method used to transfer the payment e.g. EFT, Hand Typed Check etc.",
        max_length=256,
        min_length=0,
    )
    paymentType: Optional[str] = Field(
        None, description="The payment type e.g. recurring, adhoc etc", max_length=250, min_length=0
    )
    periodEndDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    periodStartDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    rootCaseNumber: Optional[str] = None


class PaymentLineDetails(PydanticBaseModelEmptyStrIsNone):
    adjustmentCalcDetailClassExtension: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain OLAdjustmentCalcDetail extension information.",
    )
    adjustmentId: Optional[str] = Field(
        None, description="Business Entity OID", example="PE-00012-0000001234"
    )
    adjustmentTypeId: Optional[str] = Field(
        None, description="Business Entity OID", example="PE-00012-0000001234"
    )
    amount: Optional[Decimal] = Field(None, description="Money amount format", example="1500.50")
    calcDetails: Optional[List[str]] = Field(
        None, description="The Calculation Details that explain how each adjustment is calculated. "
    )
    endDate: Optional[date] = Field(None, description="ISO 8601 date format", example="1999-12-31")
    fixedAmountIncreaseInstructionClassExtension: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain OLFixedAmountIncreaseInstruction extension information.",
    )
    payee: Optional[str] = Field(
        None,
        description="The name of the Payee which the payment adjustment belongs.",
        max_length=100,
        min_length=0,
    )
    startDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )


class PaymentMethodResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class PaymentPreferenceAustralianAddressEmbeddable(PydanticBaseModelEmptyStrIsNone):
    buildingName1: Optional[str] = Field(None, description="The name of the building.")
    buildingName2: Optional[str] = Field(None, description="The name of the building continued.")
    dpId: Optional[int] = Field(
        None,
        description="Referred to as DPID this is an 8-digit Australian post address identifier which uniquely identifies each delivery point to which Australia Post delivers mail. ",
    )
    extensions: Optional[Dict[str, Any]] = None
    floorLevelNumber: Optional[str] = Field(
        None, description="The floorLevelNumber must not be more than {max} characters"
    )
    floorLevelType: Optional[AUFloorLevelTypesResponse] = None
    lotNumber: Optional[str] = Field(None, description="The lot number.")
    postalNumber: Optional[str] = Field(None, description="The postal number. ")
    postalNumberPrefix: Optional[str] = Field(
        None,
        description="This refers to the non-numeric portion preceding the Postal Number. EXAMPLE : PO Box B20 where B is the prefix. ",
    )
    postalNumberSuffix: Optional[str] = Field(
        None,
        description="This refers to the non-numeric portion following the Postal Number. EXAMPLE : PO Box 20A where A is the suffix.",
    )
    postalType: Optional[AUPostalTypesResponse] = None
    premiseNoSuffix: Optional[str] = Field(
        None, description="The suffix to apply to the number of the premise."
    )
    premiseNoTo: Optional[int] = Field(
        None,
        description="The high number in a range for the premise. This is used when an address consists of a range of numbers as in 8-10 Lower Pembroke Street where the value 10 would be stored in this field. ",
    )
    premiseNoToSuffix: Optional[str] = Field(
        None, description="The suffix to apply to the number to of the premise. "
    )
    streetSuffix: Optional[AUStreetSuffixesResponse] = None


class Period(PydanticBaseModelEmptyStrIsNone):
    balanceDeduction: Optional[float] = Field(
        None,
        description="The amount of time deducted from the time bank in the specified time entitlement basis e.g. number of Weeks, Days etc.",
    )
    endDate: Optional[date] = Field(None, description="ISO 8601 date format", example="1999-12-31")
    leavePlan: Optional[LeavePlan] = None
    leaveRequest: Optional[LeaveRequest] = None
    parentPeriodReference: Optional[str] = Field(
        None, description="Reference number for the parent period"
    )
    periodReference: Optional[str] = Field(
        None, description="Business Entity OID", example="PE-00012-0000001234"
    )
    relatedToEpisodic: Optional[bool] = Field(
        None,
        description="True if this period represents a reported actual for an episodic requested period, false otherwise",
    )
    requestedEpisodicLeaveDetails: Optional[RequestedEpisodicLeaveDetails] = None
    startDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    status: Optional[str] = Field(None, description="Status of the leave request")
    timeDecisionReason: Optional[str] = Field(
        None, description="Decision reason associated with the period"
    )
    timeDecisionStatus: Optional[str] = Field(
        None, description="Decision status associated with the period"
    )
    timeDeducted: Optional[str] = Field(
        None,
        description="The amount of time deducted in this period, in the specified time deducted basis e.g. number of Hours, Days",
    )
    timeDeductedBasis: Optional[str] = Field(
        None, description="The time deducted basis in this period e.g. Hours, Days"
    )
    timeRequested: Optional[str] = Field(
        None,
        description="The amount of time requested in this period, in the specified time entitlement basis e.g. number of Weeks, Days",
    )
    type: Optional[str] = Field(None, description="Type of the absence period")


class PeriodPeriodTypeResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class PersonDetails(PydanticBaseModelEmptyStrIsNone):
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain customer (OCPerson) extension information.",
    )
    dateOfBirth: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    gender: Optional[str] = Field(
        None, description="The person's gender.", max_length=100, min_length=0
    )
    maritalStatus: Optional[str] = Field(
        None,
        description="Person's marital status - single / married / etc.",
        max_length=100,
        min_length=0,
    )
    nationality: Optional[str] = Field(
        None, description="Person's nationality.", max_length=100, min_length=0
    )
    needsInterpretor: Optional[bool] = Field(
        None, description="Indicates if the customer needs an interpreter."
    )


class PhoneNumber(PydanticBaseModelEmptyStrIsNone):
    areaCode: Optional[str] = Field(
        None, description="area code value", max_length=20, min_length=0
    )
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain phone number (OCPhone) extension information.",
    )
    id: Optional[int] = Field(
        None,
        description="The id of the contact method (e.g. phone / mobile / emailAddress) ",
        ge=0.0,
    )
    intCode: Optional[str] = Field(
        None, description="international code value", max_length=10, min_length=0
    )
    phoneNumberType: str = Field(
        ...,
        description="The type of phone number (e.g. landline / mobile)",
        max_length=10,
        min_length=0,
    )
    preferred: Optional[bool] = Field(
        None, description="Specify if it is the first person to try to contact when it is required."
    )
    telephoneNo: Optional[str] = Field(
        None, description="telephone No. value", max_length=10, min_length=0
    )


class PregnancyRelatedResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class QuerySortInfo(PydanticBaseModelEmptyStrIsNone):
    sortOrderItemsList: Optional[List[SortOrderItem]] = None
    sortStatementsText: Optional[str] = None


class ReadCustomerOccupation(PydanticBaseModelEmptyStrIsNone):
    additionalEmploymentCategory: Optional[str] = Field(
        None, description="The alternate employment category."
    )
    codeId: Optional[str] = Field(None, description="The occupation Code ID.")
    codeName: Optional[str] = Field(
        None, description="The name associated with the specific occupation Code ID."
    )
    dateJobBegan: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    dateJobEnded: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    daysWorkedPerWeek: Optional[float] = Field(
        None, description="The number of days worked per week."
    )
    employeeId: Optional[str] = Field(
        None,
        description="The id of an employee in respect of its employer.",
        max_length=50,
        min_length=0,
    )
    employer: Optional[str] = Field(None, description="The name of the employer.")
    employmentCategory: Optional[str] = Field(None, description="The employment category.")
    employmentLocation: Optional[str] = Field(None, description="The employment location code.")
    employmentStatus: Optional[str] = Field(None, description="The employment status.")
    employmentTitle: Optional[str] = Field(None, description="The employment title.")
    endEmploymentReason: Optional[str] = Field(None, description="The code for occupation ending.")
    endPosReason: Optional[str] = Field(None, description="The reason for job ending.")
    extensionAttributes: Optional[List[ExtensionAttribute]] = Field(
        None, description="The extension attributes."
    )
    hoursWorkedPerWeek: Optional[float] = Field(
        None, description="The number of hours worked per week."
    )
    jobDesc: Optional[str] = Field(None, description="The job description.")
    jobStrenuous: Optional[str] = Field(None, description="The job strenuous.")
    jobTitle: Optional[str] = Field(None, description="The job title.")
    occupationId: Optional[int] = Field(None, description="The occupation ID.")
    overrideDaysWorkedPerWeek: Optional[bool] = Field(
        None, description="Is override days worked per week true or false?"
    )
    remarks: Optional[str] = Field(None, description="The occupation remarks.")
    selfEmployed: Optional[bool] = Field(
        None, description="Is occupation considered self-employed?"
    )
    workPatternBasis: Optional[str] = Field(None, description="The work pattern basis.")
    workScheduleDescription: Optional[str] = Field(
        None, description="The work schedule description."
    )


class ReadOccupation(PydanticBaseModelEmptyStrIsNone):
    additionalEmploymentCategory: Optional[str] = Field(
        None, description="The alternate employment category."
    )
    codeId: Optional[str] = Field(None, description="The occupation Code ID.")
    codeName: Optional[str] = Field(
        None, description="The name associated with the specific occupation Code ID."
    )
    dateJobBegan: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    dateJobEnded: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    daysWorkedPerWeek: Optional[float] = Field(
        None, description="The number of days worked per week."
    )
    employeeId: Optional[str] = Field(
        None,
        description="The id of an employee in respect of its employer.",
        max_length=50,
        min_length=0,
    )
    employer: Optional[str] = Field(None, description="The name of the employer.")
    employmentCategory: Optional[str] = Field(None, description="The employment category.")
    employmentLocation: Optional[str] = Field(None, description="The employment location code.")
    employmentStatus: Optional[str] = Field(None, description="The employment status.")
    employmentTitle: Optional[str] = Field(None, description="The employment title.")
    endEmploymentReason: Optional[str] = Field(None, description="The code for occupation ending.")
    endPosReason: Optional[str] = Field(None, description="The reason for job ending.")
    extensionAttributes: Optional[List[ExtensionAttribute]] = Field(
        None, description="The extension attributes."
    )
    hoursWorkedPerWeek: Optional[float] = Field(
        None, description="The number of hours worked per week."
    )
    jobDesc: Optional[str] = Field(None, description="The job description.")
    jobStrenuous: Optional[str] = Field(None, description="The job strenuous.")
    jobTitle: Optional[str] = Field(None, description="The job title.")
    occupationId: Optional[int] = Field(None, description="The occupation ID.")
    overrideDaysWorkedPerWeek: Optional[bool] = Field(
        None, description="Is override days worked per week true or false?"
    )
    primary: Optional[bool] = Field(None, description="Is occupation the primary one?")
    remarks: Optional[str] = Field(None, description="The occupation remarks.")
    selfEmployed: Optional[bool] = Field(
        None, description="Is occupation considered self-employed?"
    )
    workPatternBasis: Optional[str] = Field(None, description="The work pattern basis.")
    workScheduleDescription: Optional[str] = Field(
        None, description="The work schedule description."
    )


class ReasonResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class ReceivedViaResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class ReportedByResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class RequestStatusResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class ResidentialStatusResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class SalaryAmountBasisResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class SeriousHealthResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class StartClaimSummary(PydanticBaseModelEmptyStrIsNone):
    caseComplexity: Optional[str] = Field(None, description="Case complexity on Claim")
    claimHandler: Optional[str] = Field(
        None, description="The Person that is handling the claim.", max_length=50, min_length=0
    )
    claimHandlerEmailAddress: Optional[str] = Field(
        None, description="The email address of the claim handler.", max_length=40, min_length=0
    )
    claimHandlerPhoneNo: Optional[str] = Field(
        None, description="The phone number of the claim handler.", max_length=20, min_length=0
    )
    claimId: str = Field(
        ..., description="The claim number of the claim", max_length=256, min_length=0
    )
    claimType: str = Field(
        ...,
        description="The name by which the claim type is referred.",
        max_length=50,
        min_length=0,
    )
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain extension information.",
    )
    creationDate: Optional[datetime] = Field(
        None, description="ISO 8601 date time format", example="1999-12-31T23:59:59Z"
    )
    customerName: Optional[str] = Field(
        None, description="The customer name of the claim", max_length=256, min_length=0
    )
    description: Optional[str] = Field(
        None,
        description="Description for this case as entered by the user.",
        max_length=2000,
        min_length=0,
    )
    effectiveDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    expectedReturnToWorkDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    notificationCaseId: Optional[str] = Field(
        None,
        description="The notification case number of the claim case if applicable.",
        max_length=256,
        min_length=0,
    )
    notificationDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    policyReferences: Optional[str] = Field(
        None,
        description="The reference(s) to the policy from within the relevant admin system.",
        max_length=50,
        min_length=0,
    )
    stageName: Optional[str] = Field(None, description="The current stage of claim case.")
    status: Optional[str] = Field(
        None,
        description="This is the stage in the process that the case is currently at.",
        max_length=10,
        min_length=0,
    )


class StatusResponse(PydanticBaseModelEmptyStrIsNone):
    _links: Dict[str, str] = Field(
        ..., description="Links to the enum domain and enum instance for the API"
    )
    domainId: int = Field(..., description="The <code>domain id</code> of the enum")
    domainName: str = Field(..., description="The enum domain name")
    fullId: int = Field(..., description="The <code>instance id</code> of the enum")
    instances: Optional[List[TaEnumInstanceSwagger]] = None
    name: str = Field(..., description="The enum instance name")


class SupervisedAbsenceDetails(PydanticBaseModelEmptyStrIsNone):
    absenceDays: Optional[List[SupervisedAbsenceDay]] = Field(
        None, description="The absence days for this absence case."
    )
    absenceId: Optional[str] = Field(
        None, description="The case number of this absence case.", max_length=254, min_length=0
    )
    absencePeriods: Optional[List[SupervisedAbsencePeriod]] = Field(
        None, description="The absence periods for this absence case."
    )
    actualPartialReturnToWorkDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    actualReturnToWorkDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    creationDate: Optional[datetime] = Field(
        None, description="ISO 8601 date time format", example="1999-12-31T23:59:59Z"
    )
    expectedReturnToWorkDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    lastUpdatedDate: Optional[datetime] = Field(
        None, description="ISO 8601 date time format", example="1999-12-31T23:59:59Z"
    )
    member: Optional[str] = Field(
        None,
        description="Full name of the employee for whom the absence case was created.",
        max_length=100,
        min_length=0,
    )
    memberId: Optional[str] = Field(
        None,
        description="The id of an employee in respect of its employer.",
        max_length=100,
        min_length=0,
    )
    notificationDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    notifiedBy: Optional[str] = Field(
        None, description="The notifier for this absence case.", max_length=254, min_length=0
    )
    partialReturnToWorkDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    releasedPartialReturnToWorkDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    releasedReturnToWorkDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    reportedReducedSchedule: Optional[List[SupervisedReducedScheduleLeavePeriod]] = Field(
        None, description="The list of supervised reduced schedule leave periods."
    )
    reportedTimeOff: Optional[List[SupervisedTimeOffLeavePeriod]] = Field(
        None, description="The list of supervised time off leave periods."
    )
    returnToWorkIntention: Optional[str] = Field(
        None,
        description="Indicates the employees return to work plans once they have finished their leave.",
    )
    status: Optional[str] = Field(
        None, description="The status for this absence case.", max_length=100, min_length=0
    )


class TaEnum(PydanticBaseModelEmptyStrIsNone):
    active: Optional[bool] = None
    alphaSort: Optional[bool] = None
    defaultFirst: Optional[bool] = None
    domainDescription: Optional[str] = None
    domainId: Optional[int] = None
    domainName: Optional[str] = None
    dorder: Optional[int] = None
    editable: Optional[bool] = None
    endDate: Optional[datetime] = Field(
        None, description="ISO 8601 date time format", example="1999-12-31T23:59:59Z"
    )
    fullId: Optional[int] = None
    id: Optional[int] = None
    name: Optional[str] = None
    nameAttribute: Optional[str] = None
    retired: Optional[bool] = None
    startDate: Optional[datetime] = Field(
        None, description="ISO 8601 date time format", example="1999-12-31T23:59:59Z"
    )
    subsetInfo: Optional[List[EnumSubsetInfo]] = None
    subsets: Optional[List[str]] = None
    typedInstances: Optional[List[TaEnumTaEnumType]] = None


class TaEnumAccommodationType(PydanticBaseModelEmptyStrIsNone):
    active: Optional[bool] = None
    alphaSort: Optional[bool] = None
    defaultFirst: Optional[bool] = None
    domainDescription: Optional[str] = None
    domainId: Optional[int] = None
    domainName: Optional[str] = None
    dorder: Optional[int] = None
    editable: Optional[bool] = None
    endDate: Optional[datetime] = Field(
        None, description="ISO 8601 date time format", example="1999-12-31T23:59:59Z"
    )
    fullId: Optional[int] = None
    id: Optional[int] = None
    instances: Optional[List[TaEnum]] = None
    name: Optional[str] = None
    nameAttribute: Optional[str] = None
    retired: Optional[bool] = None
    startDate: Optional[datetime] = Field(
        None, description="ISO 8601 date time format", example="1999-12-31T23:59:59Z"
    )
    subsetInfo: Optional[List[EnumSubsetInfo]] = None
    subsets: Optional[List[str]] = None
    typedInstances: Optional[List[TaEnumAccommodationType]] = None


class TaEnumResponseAccommodationType(PydanticBaseModelEmptyStrIsNone):
    includeAttributes: Optional[List[str]] = None
    taEnum: Optional[TaEnumAccommodationType] = None


class TaEnumReturnToWorkIntention(PydanticBaseModelEmptyStrIsNone):
    active: Optional[bool] = None
    alphaSort: Optional[bool] = None
    defaultFirst: Optional[bool] = None
    domainDescription: Optional[str] = None
    domainId: Optional[int] = None
    domainName: Optional[str] = None
    dorder: Optional[int] = None
    editable: Optional[bool] = None
    endDate: Optional[datetime] = Field(
        None, description="ISO 8601 date time format", example="1999-12-31T23:59:59Z"
    )
    fullId: Optional[int] = None
    id: Optional[int] = None
    instances: Optional[List[TaEnum]] = None
    name: Optional[str] = None
    nameAttribute: Optional[str] = None
    retired: Optional[bool] = None
    startDate: Optional[datetime] = Field(
        None, description="ISO 8601 date time format", example="1999-12-31T23:59:59Z"
    )
    subsetInfo: Optional[List[EnumSubsetInfo]] = None
    subsets: Optional[List[str]] = None
    typedInstances: Optional[List[TaEnumReturnToWorkIntention]] = None


class TaxTypeDetails(PydanticBaseModelEmptyStrIsNone):
    additionalWithholdAmount: Optional[Decimal] = Field(
        None, description="Money amount format", example="1500.50"
    )
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain claim extension information.",
    )
    effectiveDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    filingMaritalStatus: Optional[str] = Field(
        None, description="The marital status filed for tax purposes."
    )
    numberExemptions: Optional[int] = Field(
        None, description="The tax exemptions e.g. number of exemptions accumulated."
    )
    percentageRate: Optional[float] = Field(None, description="A percentage rate for tax record.")
    taxCode: str = Field(..., description="The specifies a code for a subcategory of tax type.")
    taxType: str = Field(
        ..., description="The specifies the type of tax, e.g. Federal Income Tax, State Income Tax."
    )


class TaxTypeDetailsResponse(PydanticBaseModelEmptyStrIsNone):
    additionalWithholdAmount: Optional[Decimal] = Field(
        None, description="Money amount format", example="1500.50"
    )
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain claim extension information.",
    )
    effectiveDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    filingMaritalStatus: Optional[str] = Field(
        None, description="The marital status filed for tax purposes."
    )
    numberExemptions: Optional[int] = Field(
        None, description="The tax exemptions e.g. number of exemptions accumulated."
    )
    percentageRate: Optional[float] = Field(None, description="A percentage rate for tax record.")
    taxCode: str = Field(..., description="The specifies a code for a subcategory of tax type.")
    taxType: str = Field(
        ..., description="The specifies the type of tax, e.g. Federal Income Tax, State Income Tax."
    )
    taxTypeDetailsId: str = Field(..., description="The id of the tax type details.")


class WageBaseDetailsEmbeddable(PydanticBaseModelEmptyStrIsNone):
    calculationBasis: Optional[WageBaseCalculationBasisResponse] = None
    effectiveDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    id: Optional[str] = Field(None, description="id used to uniquely identify case handler")
    wageBaseType: Optional[WageBaseTypeResponse] = None
    wagePeriodType: Optional[PeriodPeriodTypeResponse] = None


class WebMessage(PydanticBaseModelEmptyStrIsNone):
    caseId: Optional[str] = Field(
        None,
        description="The case the web message is associated to (if any)",
        max_length=254,
        min_length=0,
    )
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain web message information.",
    )
    contactTime: Optional[datetime] = Field(
        None, description="ISO 8601 date time format", example="1999-12-31T23:59:59Z"
    )
    isRead: Optional[bool] = None
    messageId: Optional[int] = Field(None, description="Message Id")
    msgOriginatesFromPortal: Optional[bool] = Field(
        None,
        description="A flag indicating whether the message originates from the customer on the portal or not (in which case the message originating from the insurer)",
    )
    narrative: str = Field(..., description="The web message text", max_length=4000, min_length=0)
    read: Optional[bool] = Field(
        None,
        description="A flag indicating whether the message has been read or not. All msgs which orginate from Portal (i.e. messages from the customer) will be automatically marked as read when created. All messages which do not originate from the portal (from the insurer to the customer) will be marked as read once the customer has read the message",
    )
    subject: str = Field(..., description="Subject of the message", max_length=200, min_length=0)


class WebMessageSummary(PydanticBaseModelEmptyStrIsNone):
    unReadMessages: Optional[int] = Field(None, description="The number of un-read web messages")
    webMessages: Optional[List[WebMessage]] = Field(
        None, description="The list of web messages belonging to the customer"
    )


class WeekBasedWorkPattern(PydanticBaseModelEmptyStrIsNone):
    patternStartDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    patternStatus: Optional[str] = Field(
        None,
        description="Indicates whether the pattern is estimated by the Employee or confirmed by the Employer.",
    )
    workPatternDays: List[WorkPatternDay] = Field(
        ...,
        description="List of days which make up the pattern. There can be 7, 14, 21 or 28 of these.",
    )
    workPatternType: str = Field(
        ...,
        description="The Work Pattern Type, which can be any of the following: Fixed, 2 weeks Rotating, 3 weeks Rotating, 4 weeks Rotating. The Unknown, Variable and Weekly Work Pattern values will not be supported",
    )
    workWeekStarts: Optional[str] = Field(
        None, description="The day of the week on which the work week starts."
    )


class WeeklyEarningsRequest(PydanticBaseModelEmptyStrIsNone):
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain Earnings extension information.",
    )
    earningsBasis: str = Field(..., description="The earnings frequency.")
    effectiveDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    endDate: Optional[date] = Field(None, description="ISO 8601 date format", example="1999-12-31")
    notes: Optional[str] = Field(
        None, description="Notes relating to the earnings period.", max_length=200, min_length=0
    )
    salaryAmountBasis: Optional[str] = Field(
        None, description="Basis for salary amount being used."
    )
    weeklyBasisEarningAmountsRequest: Optional[WeeklyBasisEarningAmountsRequest] = None


class WorkPatternDayCommand(PydanticBaseModelEmptyStrIsNone):
    dayOfWeek: WorkPatternDayOfWeekRequest
    hours: int = Field(..., description="Hours worked on that particular day")
    minutes: int = Field(..., description="Minutes worked on that particular day")
    weekNumber: int = Field(..., description="The week number in a particular month (1,2,3,4)")


class AbsenceCase(PydanticBaseModelEmptyStrIsNone):
    actualPartialReturnToWorkDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    actualReturnToWorkDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    additionalComments: Optional[str] = Field(
        None,
        description="Description for this case as entered by the user.",
        max_length=2000,
        min_length=0,
    )
    employerNotificationDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    employerNotificationMethod: Optional[str] = Field(
        None,
        description="The method used to notify the employer about the leave request. Only relevant if the employer has been notified (valid if the employer has been notified).e.g. Other, By Telephone, In Person and In Writing. This maps to enum NotificationMethod(domain id 2547).",
        max_length=100,
        min_length=0,
    )
    employerNotified: Optional[bool] = Field(
        None,
        description="Indicates whether the employer has been notified about the leave request.",
    )
    episodicLeavePeriods: Optional[List[EpisodicLeavePeriod]] = None
    expectedReturnToWorkDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    intakeSource: str = Field(
        ..., description="The source of the intake process.", max_length=100, min_length=0
    )
    notificationCaseId: Optional[str] = Field(
        None,
        description="An existing Notification Case Id. If empty a new parent Notification may be created depending on how the Notification case type is configured.",
        max_length=254,
        min_length=0,
    )
    notificationReason: Optional[str] = Field(
        None,
        description="Notification Reason selected during Notification case intake.",
        max_length=100,
        min_length=0,
    )
    notifiedBy: str = Field(
        ..., description="The notifier for this absence case.", max_length=100, min_length=0
    )
    notifierFirstName: Optional[str] = Field(
        None, description="The first name for the Notifier.", max_length=50, min_length=0
    )
    notifierLastName: Optional[str] = Field(
        None, description="The last name for the Notifier.", max_length=50, min_length=0
    )
    notifierPhone: Optional[str] = Field(
        None, description="The telephone number for the Notifier.", max_length=50, min_length=0
    )
    partialReturnToWorkDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    primaryRelQualifier1: Optional[str] = Field(
        None,
        description="The qualifier1 of the primary relationship.",
        max_length=100,
        min_length=0,
    )
    primaryRelQualifier2: Optional[str] = Field(
        None,
        description="The qualifier2 of the primary relationship.",
        max_length=100,
        min_length=0,
    )
    primaryRelationship: Optional[str] = Field(
        None, description="The name of the primary relationship.", max_length=100, min_length=0
    )
    reason: Optional[str] = Field(
        None, description="The absence reason.", max_length=100, min_length=0
    )
    reasonQualifier1: Optional[str] = Field(
        None, description="The qualifier1 for the absence reason.", max_length=100, min_length=0
    )
    reasonQualifier2: Optional[str] = Field(
        None, description="The qualifier2 for the absence reason.", max_length=100, min_length=0
    )
    reducedScheduleLeavePeriods: Optional[List[ReducedScheduleLeavePeriod]] = None
    releasedPartialReturnToWorkDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    releasedReturnToWorkDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    returnToWorkIntention: Optional[TaEnumReturnToWorkIntention] = None
    secondaryRelQualifier1: Optional[str] = Field(
        None,
        description="The qualifier1 of the secondary relationship.",
        max_length=100,
        min_length=0,
    )
    secondaryRelQualifier2: Optional[str] = Field(
        None,
        description="The qualifier2 of the secondary relationship.",
        max_length=100,
        min_length=0,
    )
    secondaryRelationship: Optional[str] = Field(
        None, description="The name of the secondary relationship.", max_length=100, min_length=0
    )
    timeOffLeavePeriods: Optional[List[TimeOffLeavePeriod]] = None


class AbsenceDetails(PydanticBaseModelEmptyStrIsNone):
    absenceDays: Optional[List[AbsenceDay]] = Field(
        None, description="The absence days for this absence case."
    )
    absenceId: Optional[str] = Field(
        None, description="The case number of this absence case.", max_length=254, min_length=0
    )
    absencePeriods: Optional[List[AbsencePeriod]] = Field(
        None, description="The absence periods for this absence case."
    )
    actualPartialReturnToWorkDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    actualReturnToWorkDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    creationDate: Optional[datetime] = Field(
        None, description="ISO 8601 date time format", example="1999-12-31T23:59:59Z"
    )
    expectedReturnToWorkDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    financialCaseIds: Optional[List[str]] = Field(
        None, description="The values of the financial case Ids on this absence case."
    )
    lastUpdatedDate: Optional[datetime] = Field(
        None, description="ISO 8601 date time format", example="1999-12-31T23:59:59Z"
    )
    notificationDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    notifiedBy: Optional[str] = Field(
        None, description="The notifier for this absence case.", max_length=254, min_length=0
    )
    paidLeaveCase: Optional[List[PaidLeaveCase]] = Field(
        None, description="The paid leave case details for this absence case."
    )
    partialReturnToWorkDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    releasedPartialReturnToWorkDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    releasedReturnToWorkDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    reportedReducedSchedule: Optional[List[ReportedReducedScheduleLeavePeriod]] = Field(
        None, description="The list of reduced scheduled leave periods."
    )
    reportedTimeOff: Optional[List[ReportedTimeOffLeavePeriod]] = Field(
        None, description="The list of time off leave periods."
    )
    returnToWorkIntention: Optional[str] = Field(
        None,
        description="Indicates the employees return to work plans once they have finished their leave.",
    )
    selectedLeavePlans: Optional[List[LeavePlanDetails]] = Field(
        None, description="The selected leave plans for this absence case."
    )
    status: Optional[str] = Field(
        None, description="The status for this absence case.", max_length=100, min_length=0
    )


class AbsenceReasonResource(PydanticBaseModelEmptyStrIsNone):
    _links: Optional[Dict[str, str]] = None
    accommodation: Optional[AccomodationResponse] = None
    allowedGender: Optional[AllowedGenderResponse] = None
    askForSecondaryRelationship: Optional[bool] = Field(
        None, description="An indicator to define secondary relationship required or not."
    )
    category: Optional[CategoryResponse] = None
    coveredPerson: Optional[CoveredPersonResponse] = None
    disabilityIntegration: Optional[DisabilityIntegrationResponse] = None
    eventType: Optional[EventTypeResponse] = None
    id: Optional[str] = Field(None, description="Id that uniquely identifies the absence reason.")
    medicalRelated: Optional[MedicalRelatedResponse] = None
    militaryRelated: Optional[MilitaryRelatedResponse] = None
    notificationReason: Optional[NotificationReasonResponse] = None
    reasonName: Optional[str] = Field(None, description="The name for the absence reason.")
    reasonQualifier1: Optional[str] = Field(
        None, description="The first qualifier for the absence reason"
    )
    reasonQualifier2: Optional[str] = Field(
        None, description="The second qualifier for the absence reason."
    )
    seriousHealth: Optional[SeriousHealthResponse] = None


class AbsenceReasonResources(PydanticBaseModelEmptyStrIsNone):
    _links: Optional[Dict[str, str]] = None
    elements: Optional[List[AbsenceReasonResource]] = None
    hasMoreElements: Optional[bool] = Field(
        None,
        description="<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>",
    )
    meta: Optional[Dict[str, Any]] = None
    totalSize: Optional[int] = Field(
        None,
        description="<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
    )


class AccommodationEmbeddable(PydanticBaseModelEmptyStrIsNone):
    acceptedDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    accommodationType: Optional[TaEnumResponseAccommodationType] = None
    category: Optional[AccommodationCategoryResponse] = None
    createDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    description: Optional[str] = Field(
        None,
        description="Additional information when category is 'Other Accommodation' and type is 'Other'.",
    )
    endDate: Optional[date] = Field(None, description="ISO 8601 date format", example="1999-12-31")
    implementedDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    source: Optional[AccommodationSourceResponse] = None


class AccountDetailEmbeddable(PydanticBaseModelEmptyStrIsNone):
    accountName: Optional[str] = Field(None, description="Name of the account holder")
    accountNo: Optional[str] = Field(None, description="The Account number of the personal account")
    accountType: Optional[AccountTypeResponse] = None
    bankCode: Optional[str] = Field(None, description="The Bank Code")
    extensions: Optional[Dict[str, Any]] = None
    routingNumber: Optional[str] = Field(None, description="Sort code of the Bank")


class AccountDetails(PydanticBaseModelEmptyStrIsNone):
    accountName: str = Field(
        ..., description="Name of the account holder", max_length=256, min_length=0
    )
    accountNo: str = Field(
        ..., description="The Account number of the personal account", max_length=256, min_length=0
    )
    accountType: Optional[str] = Field(
        None, description="Account type of the bank", max_length=256, min_length=0
    )
    bankCode: Optional[str] = Field(None, description="The Bank Code", max_length=4, min_length=0)
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain claim extension information.",
    )
    routingNumber: str = Field(
        ..., description="Sort code of the Bank", max_length=256, min_length=0
    )


class ActualAbsencePeriodResource(PydanticBaseModelEmptyStrIsNone):
    _links: Optional[Dict[str, str]] = None
    actualDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    additionalNotes: Optional[str] = Field(
        None, description="Enter any additional notes about the reported actual time."
    )
    endDateTime: Optional[datetime] = Field(
        None, description="ISO 8601 date time format", example="1999-12-31T23:59:59Z"
    )
    episodePeriodBasis: Optional[EpisodeDurationBasisResponse] = None
    episodePeriodDuration: Optional[int] = Field(
        None, description="Actual time/duration taken by the employee."
    )
    episodicLeaveRequestId: Optional[str] = Field(
        None, description="Id of the related absence period."
    )
    id: Optional[str] = Field(None, description="Unique id of the actual time record.")
    managerAccepted: Optional[ManagerAcceptedResponse] = None
    receivedVia: Optional[ReceivedViaResponse] = None
    reportedBy: Optional[ReportedByResponse] = None
    reportedDateTime: Optional[datetime] = Field(
        None, description="ISO 8601 date time format", example="1999-12-31T23:59:59Z"
    )
    reportingPartyName: Optional[str] = Field(
        None,
        description="The name of party that reported the actual associated to this reporting information.",
    )
    startDateTime: Optional[datetime] = Field(
        None, description="ISO 8601 date time format", example="1999-12-31T23:59:59Z"
    )
    status: Optional[StatusResponse] = None
    timeZone: Optional[TimeZoneResponse] = None
    type: Optional[TypeResponse] = None


class ActualAbsencePeriodResources(PydanticBaseModelEmptyStrIsNone):
    _links: Optional[Dict[str, str]] = None
    elements: Optional[List[ActualAbsencePeriodResource]] = None
    hasMoreElements: Optional[bool] = Field(
        None,
        description="<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>",
    )
    meta: Optional[Dict[str, Any]] = None
    totalSize: Optional[int] = Field(
        None,
        description="<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
    )


class ActualEarnings(PydanticBaseModelEmptyStrIsNone):
    _links: Optional[Dict[str, str]] = None
    creditDays: Optional[str] = Field(
        None,
        description="Additional credit amount paid earned between the effective date and end date expressed as a number of days earnings",
    )
    creditEarnings: Optional[CreditEarningsMoneyResponse] = None
    creditReason: Optional[EarningsCreditReasonResponse] = None
    earningsType: Optional[ActualEarningsTypeResponse] = None
    effectiveDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    endDate: Optional[date] = Field(None, description="ISO 8601 date format", example="1999-12-31")
    extensions: Optional[Dict[str, Any]] = None
    grossAmount: Optional[GrossAmountMoneyResponse] = None
    id: Optional[str] = Field(
        None,
        description="The unique identifier for the actual earnings, composed of classId and indexId",
    )
    infoOnlyAmount: Optional[InfoOnlyAmountMoneyResponse] = None
    netAmount: Optional[NetAmountMoneyResponse] = None
    notes: Optional[str] = Field(None, description="Notes related to the earnings period")
    paidDate: Optional[date] = Field(None, description="ISO 8601 date format", example="1999-12-31")
    salaryAmountBasis: Optional[SalaryAmountBasisResponse] = None
    weeklyAmount: Optional[WeeklyAmountMoneyResponse] = None


class ActualEarningsResources(PydanticBaseModelEmptyStrIsNone):
    _links: Optional[Dict[str, str]] = None
    elements: Optional[List[ActualEarnings]] = None
    hasMoreElements: Optional[bool] = Field(
        None,
        description="<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>",
    )
    meta: Optional[Dict[str, Any]] = None
    totalSize: Optional[int] = Field(
        None,
        description="<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
    )


class Address(PydanticBaseModelEmptyStrIsNone):
    addressLine1: Optional[str] = Field(
        None, description="Address Line 1", max_length=40, min_length=0
    )
    addressLine2: Optional[str] = Field(
        None, description="Address Line 2", max_length=40, min_length=0
    )
    addressLine3: Optional[str] = Field(
        None, description="Address Line 3", max_length=40, min_length=0
    )
    addressLine4: Optional[str] = Field(
        None, description="Address Line 4", max_length=40, min_length=0
    )
    addressLine5: Optional[str] = Field(
        None, description="Address Line 5", max_length=40, min_length=0
    )
    addressLine6: Optional[str] = Field(
        None, description="Address Line 6", max_length=40, min_length=0
    )
    addressLine7: Optional[str] = Field(
        None, description="Address Line 7", max_length=40, min_length=0
    )
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain claim extension information.",
    )
    country: str = Field(..., description="Country", max_length=100, min_length=0)
    postCode: Optional[str] = Field(
        None, description="International Postcode", max_length=40, min_length=0
    )
    premiseNo: Optional[str] = Field(
        None, description="This is the premise number", max_length=5, min_length=0
    )


class ApiBaseErrorResponse(PydanticBaseModelEmptyStrIsNone):
    errors: Optional[List[ApiError]] = None


class ApplicableLeavePlanResource(PydanticBaseModelEmptyStrIsNone):
    _links: Optional[Dict[str, str]] = None
    applicabilityStatus: Optional[ApplicabilityStatusResponse] = None
    availableTime: Optional[str] = Field(None, description="Available balance of the leave plan.")
    eligibilityStatus: Optional[EligibilityStatusResponse] = None
    id: Optional[str] = Field(None, description="Reason for the absence.")
    planEntitlement: Optional[str] = Field(None, description="Leave plan entitlement.")
    planName: Optional[str] = Field(None, description="Short name of the leave plan.")


class ApplicableLeavePlanResources(PydanticBaseModelEmptyStrIsNone):
    _links: Optional[Dict[str, str]] = None
    elements: Optional[List[ApplicableLeavePlanResource]] = None
    hasMoreElements: Optional[bool] = Field(
        None,
        description="<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>",
    )
    meta: Optional[Dict[str, Any]] = None
    totalSize: Optional[int] = Field(
        None,
        description="<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
    )


class BenefitSummary(PydanticBaseModelEmptyStrIsNone):
    benefitCaseType: Optional[str] = Field(
        None, description="The name by which the benefit type is referred."
    )
    benefitHandler: Optional[str] = Field(
        None, description="The person that is handling the benefit."
    )
    benefitHandlerEmailAddress: Optional[str] = Field(
        None, description="The email address of the benefit handler."
    )
    benefitHandlerPhoneNo: Optional[str] = Field(
        None, description="The phone number of the benefit handler."
    )
    benefitId: Optional[str] = Field(None, description="The case number of the benefit.")
    benefitIncurredDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    benefitRightCategory: Optional[str] = Field(
        None, description="Information about the category of the benefit right."
    )
    creationDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    customerName: Optional[str] = Field(None, description="The full name of the customer.")
    description: Optional[str] = Field(
        None, description="Description for this case as entered by the user."
    )
    extensionAttributes: Optional[List[ExtensionAttribute]] = Field(
        None, description="Extra attributes from extension if any."
    )
    policyReferences: Optional[str] = Field(
        None, description="The reference(s) to the policy from within the relevant admin system."
    )
    stageName: Optional[str] = Field(None, description="The current stage of benefit claim case.")
    status: Optional[str] = Field(
        None, description="This is the stage in the process that the case is currently at."
    )


class BulkCreateActualAbsencePeriodCommand(PydanticBaseModelEmptyStrIsNone):
    elements: List[CreateActualAbsencePeriodCommand]


class BulkCreateCommandCreateActualAbsencePeriodCommand(PydanticBaseModelEmptyStrIsNone):
    elements: List[CreateActualAbsencePeriodCommand]


class ClaimOccupation(PydanticBaseModelEmptyStrIsNone):
    additionalEmploymentCategory: Optional[str] = Field(
        None, description="The alternate employment category."
    )
    dateJobBegan: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    dateJobEnded: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    daysWorkedPerWeek: Optional[float] = Field(
        None, description="The number of days worked per week."
    )
    employeeId: Optional[str] = Field(
        None,
        description="The id of an employee in respect of its employer.",
        max_length=50,
        min_length=0,
    )
    employer: Optional[str] = Field(None, description="The name of the employer.")
    employmentCategory: Optional[str] = Field(None, description="The employment category.")
    employmentLocation: Optional[str] = Field(None, description="The employment location code.")
    employmentStatus: Optional[str] = Field(None, description="The employment status.")
    employmentTitle: Optional[str] = Field(None, description="The employment title.")
    endEmploymentReason: Optional[str] = Field(None, description="The code for occupation ending.")
    endPosReason: Optional[str] = Field(None, description="The reason for job ending.")
    extensionAttributes: Optional[List[ExtensionAttribute]] = Field(
        None, description="The extension attributes."
    )
    hoursWorkedPerWeek: Optional[float] = Field(
        None, description="The number of hours worked per week."
    )
    jobDesc: Optional[str] = Field(None, description="The job description.")
    jobStrenuous: Optional[str] = Field(None, description="The job strenuous.")
    jobTitle: Optional[str] = Field(None, description="The job title.")
    primary: Optional[bool] = Field(None, description="Is occupation the primary one?")
    remarks: Optional[str] = Field(None, description="The occupation remarks.")
    selfEmployed: Optional[bool] = Field(
        None, description="Is occupation considered self-employed?"
    )
    workPatternBasis: Optional[str] = Field(None, description="The work pattern basis.")
    workScheduleDescription: Optional[str] = Field(
        None, description="The work schedule description."
    )


class ClaimSummary(PydanticBaseModelEmptyStrIsNone):
    caseComplexity: Optional[str] = Field(None, description="Case complexity on Claim")
    claimHandler: Optional[str] = Field(
        None, description="The Person that is handling the claim.", max_length=50, min_length=0
    )
    claimHandlerEmailAddress: Optional[str] = Field(
        None, description="The email address of the claim handler.", max_length=40, min_length=0
    )
    claimHandlerPhoneNo: Optional[str] = Field(
        None, description="The phone number of the claim handler.", max_length=20, min_length=0
    )
    claimId: str = Field(
        ..., description="The claim number of the claim", max_length=256, min_length=0
    )
    claimType: str = Field(
        ...,
        description="The name by which the claim type is referred.",
        max_length=50,
        min_length=0,
    )
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain extension information.",
    )
    creationDate: Optional[datetime] = Field(
        None, description="ISO 8601 date time format", example="1999-12-31T23:59:59Z"
    )
    customerName: Optional[str] = Field(
        None, description="The customer name of the claim", max_length=256, min_length=0
    )
    description: Optional[str] = Field(
        None,
        description="Description for this case as entered by the user.",
        max_length=2000,
        min_length=0,
    )
    effectiveDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    notificationCaseId: Optional[str] = Field(
        None,
        description="The notification case number of the claim case if applicable.",
        max_length=256,
        min_length=0,
    )
    notificationDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    policyReferences: Optional[str] = Field(
        None,
        description="The reference(s) to the policy from within the relevant admin system.",
        max_length=50,
        min_length=0,
    )
    stageName: Optional[str] = Field(None, description="The current stage of claim case.")
    status: Optional[str] = Field(
        None,
        description="This is the stage in the process that the case is currently at.",
        max_length=10,
        min_length=0,
    )


class Decision(PydanticBaseModelEmptyStrIsNone):
    absence: Optional[Absence] = None
    employee: Optional[Employee] = None
    period: Optional[Period] = None


class DisabilityBenefit(PydanticBaseModelEmptyStrIsNone):
    accidentBasisOfMaxBenefitPeriod: Optional[str] = Field(
        None, description="Basis for the maximum period for an accident."
    )
    accidentEliminationPeriod: Optional[int] = Field(
        None, description="Elimination Period units for accident."
    )
    accidentMaxBenefitPeriod: Optional[int] = Field(
        None,
        description="Number of units in the maximum period for an accident. The maximum length of the period to be paid if the customer remains disabled.",
    )
    administrationType: Optional[str] = Field(
        None, description="Specify the AdministrationType for the Funding Arrangement."
    )
    adviceToPayOverride: Optional[str] = Field(
        None,
        description="The advice provided by the insurer with regard to an individual benefit can be overridden by the employer, either regarding the decision (to pay or not to pay) or the calculated amount.",
    )
    amountType: Optional[str] = Field(
        None,
        description="Indicates the basis upon which the benefit is calculated, examples might be fixed amount basis, salary percentage basis or tiered basis.",
    )
    approvedThroughDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    basisOfAccidentEliminationPeriod: Optional[str] = Field(
        None, description="Basis for elimination period for accident."
    )
    basisOfEliminationPeriod: Optional[str] = Field(
        None, description="Basis for elimination period."
    )
    basisOfLateEnrollmentPeriod: Optional[str] = Field(
        None,
        description="Basis of the period after enrolment date when customer has to wait for coverage to become eligible (i.e. day, week month or year).",
    )
    basisOfMaxBenefitPeriod: Optional[str] = Field(
        None,
        description="Basis of the maximum benefit period. The maximum length of the period to be paid if the claimant remains disabled.",
    )
    basisOfMinBenefitPeriod: Optional[str] = Field(
        None,
        description="Basis of the minimum benefit period. The minimum length of the period to be paid if the claimant remains disabled.",
    )
    basisOfMinimumQualifyPeriod: Optional[str] = Field(
        None,
        description="Basis of the period of time policy has to be in force before the minimum benefit provision can be applied (i.e. day, week month or year).",
    )
    basisOfPolicyWaitingPeriod: Optional[str] = Field(
        None,
        description="Basis of the period of time that the policy must be in force before the insured qualifies for coverage (i.e. day, week month or year).",
    )
    benefitEndDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    benefitIncurredDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    benefitStartDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    benefitType: Optional[str] = Field(
        None,
        description="Type of a benefit right such as Disability Income - STD, Disability Income LTD, Accelerated Death Benefit or Accidental Death Benefit.",
    )
    brokerAuthorisationFlag: Optional[bool] = Field(
        None,
        description="Flag that indicates if the broker is to be included in the correspondence.",
    )
    earliestDateForClaimPayment: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    eliminationPeriod: Optional[int] = Field(None, description="The number of Elimination Days.")
    employeeContributionPercentage: Optional[float] = Field(
        None, description="Percentage representing the Employee Contribution Percentage."
    )
    employeeContributionStatus: Optional[str] = Field(
        None,
        description="Field which indicates whether a policy is contributory or non-contributory.",
    )
    employeePremiumTaxation: Optional[str] = Field(
        None, description="The employee portion of the contribution was made pre or post tax."
    )
    employerContributionPercentage: Optional[float] = Field(
        None,
        description="Indicates the percent of the payment that is taxable. Typically used as the Employer contribution.",
    )
    employerPremiumTaxation: Optional[str] = Field(
        None, description="The employer portion of the contribution was made pre tax or gross up."
    )
    expectedResolutionDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    extensionAttributes: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="The array will contain extension attributes from Benefit and Benefit Right objects.",
    )
    frequencyAmount: Optional[Decimal] = Field(
        None, description="Money amount format", example="1500.50"
    )
    hospitalBasisOfEliminationPeriod: Optional[str] = Field(
        None, description="Basis for elimination period for hospitalisation."
    )
    hospitalBasisOfMaxBenefitPeriod: Optional[str] = Field(
        None, description="Basis of the maximum period for hospitalization."
    )
    hospitalEliminationPeriod: Optional[int] = Field(
        None, description="Elimination Period for hospitalisation."
    )
    hospitalMaxBenefitPeriod: Optional[int] = Field(
        None, description="Number of units in the maximum period for hospitalization."
    )
    hospitalizationClauseApplies: Optional[bool] = Field(
        None, description="Indicator which determines whether the Hospitalization clause applies."
    )
    initialNotificationDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    isReimbursement: Optional[bool] = Field(
        None, description="Indicates if the benefit is paid as a reimbursement or not."
    )
    isUnderwritten: Optional[bool] = Field(
        None,
        description="Indicates whether or not the member has been underwritten in order to have additional cover beyond what the group membership offers.",
    )
    lateEnrollmentPeriod: Optional[int] = Field(
        None,
        description="Period after enrolment date when customer has to wait for coverage to become eligible.",
    )
    latestDateForClaimPayment: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    maxBenefitPeriod: Optional[int] = Field(
        None,
        description="Number of units in the maximum benefit period. The maximum length of the period to be paid if the claimant remains disabled",
    )
    minBenefitPeriod: Optional[int] = Field(
        None,
        description="Number of units in the minimum benefit period. The minimum length of the period to be paid if the claimant remains disabled.",
    )
    minimumQualifyPeriod: Optional[int] = Field(
        None,
        description="Period of time policy has to be in force before the minimum benefit provision can be applied.",
    )
    notificationReceivedDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    overrideClaimIncurredDate: Optional[bool] = Field(
        None,
        description="Indicator which specifies that the benefit level incurred date should be used rather than the claim level incurred date.",
    )
    percentTaxable: Optional[float] = Field(
        None, description="The percent of the payment that is taxable."
    )
    percentageNonTaxable: Optional[float] = Field(
        None, description="The Employee Contribution Percentage"
    )
    periodType: Optional[str] = Field(
        None,
        description="The type of Benefit Period used to derive the Approved Through Date. Indicates whether the approval is for a fully certified or partially certified period.",
    )
    policyWaitingPeriod: Optional[int] = Field(
        None,
        description="Period of time that the policy must be in force before the insured qualifies for coverage.",
    )
    serviceLevel: Optional[str] = Field(
        None,
        description='Specify the ServiceLevel for the Funding Arrangement when AdministrationType is "ASO - Advice To Pay"',
    )
    sourceOfRequest: Optional[str] = Field(
        None,
        description="The type of source that is requesting the benefit, such as claimant, guardian, or medical officer.",
    )
    startDateOfBenefitForClaim: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )


class DisabilityClaim(PydanticBaseModelEmptyStrIsNone):
    accidentDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    actualPartialReturnToWorkDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    actualReturnToWorkDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    claimAdditionalInfo: Optional[str] = Field(
        None,
        description="Additional incident details relevant to the claim.",
        max_length=4000,
        min_length=0,
    )
    claimIncurredDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    claimType: Optional[str] = Field(
        None,
        description="This field can be used to capture the type of claim. This is a descriptive attribute which can be changed over the life of the claim",
        max_length=10,
        min_length=0,
    )
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain claim extension information.",
    )
    dateSymptomsFirstAppeared: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    description: Optional[str] = Field(
        None,
        description="Description for this case as entered by the user.",
        max_length=2000,
        min_length=0,
    )
    disabilityDateFromCustomer: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    dismembermentOrLoss: Optional[str] = Field(
        None,
        description="Dismemberment/Loss injuries sustained by the customer.",
        max_length=10,
        min_length=0,
    )
    employeeDateLastWorked: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    eventType: Optional[str] = Field(
        None,
        description="The type of event which occurred which led to the disability claim e.g. Accident or Sickness.",
        max_length=10,
        min_length=0,
    )
    expectedReturnToWorkDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    firstDayMissedWork: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    hoursWorked: Optional[float] = Field(
        None, description="Number of hours worked", ge=0.0, le=13.0
    )
    insuredSpouseWorking: Optional[bool] = Field(
        None, description="Indicates if the spouse of the insured is currently working."
    )
    notificationDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    numberOfDependents: Optional[int] = Field(
        None,
        description="The number of dependents for the Customer relevant to this Claim",
        ge=0.0,
        le=10.0,
    )
    partialReturnToWorkDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    providerPartialReturnToWorkDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    providerReturnToWorkDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    reasonForClaimEffectiveDateChange: Optional[str] = Field(
        None,
        description="Allows a reason to be recorded for a change to the claim's effective date.",
        max_length=10,
        min_length=0,
    )
    releasedPartialReturnToWorkDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    releasedReturnToWorkDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    returnToWorkIntention: Optional[str] = Field(
        None, description="Indicates the employees return to work plans."
    )
    returnToWorkPartTimeDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    returnToWorkTargetDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    salaryCountNumDays: Optional[int] = Field(
        None,
        description="Salary Continuance Number of Days - Number of days beyond the disability date insured received full pay",
        ge=0.0,
        le=5.0,
    )
    source: Optional[str] = Field(
        None,
        description="Describes how the claim was initiated, i.e. on-line, phone call, paper application form, customer portal.",
        max_length=10,
        min_length=0,
    )
    workHistory: Optional[str] = Field(
        None,
        description="This lists the work history of the insured including occupational, job duty as well as when the insured was employed at these jobs.  Used for any/all and LCDD decisions as well as assisting with job  placement strategy development of the vocational consultant.",
        max_length=256,
        min_length=0,
    )
    workRelated: Optional[bool] = Field(
        None, description="Indicates whether the event was work related or not."
    )


class Document(PydanticBaseModelEmptyStrIsNone):
    caseId: Optional[str] = None
    createdBy: Optional[str] = Field(
        None, description="The User name who created a document.", max_length=60, min_length=0
    )
    dateCreated: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    description: Optional[str] = Field(
        None,
        description="User solicitied description of this document.",
        max_length=4000,
        min_length=0,
    )
    documentId: int = Field(..., description="The document Id")
    effectiveFrom: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    effectiveTo: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    extensionAttributes: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain document (OCDocumentBase) extension information.",
    )
    fileExtension: Optional[str] = Field(
        None,
        description="The file extension of the document. e.g. .doc for MS Word.",
        max_length=20,
        min_length=0,
    )
    fileName: Optional[str] = Field(
        None,
        description="An external reference to the document. This can be a docid or a path and filename.",
        max_length=400,
        min_length=0,
    )
    isRead: Optional[bool] = None
    name: str = Field(
        ...,
        description="The short business description of the document type",
        max_length=200,
        min_length=0,
    )
    originalFilename: Optional[str] = Field(
        None, description="The original attachment filename.", max_length=300, min_length=0
    )
    receivedDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    rootCaseId: Optional[str] = None
    title: Optional[str] = Field(
        None, description="The title of the document.", max_length=2000, min_length=0
    )
    type: str = Field(
        ...,
        description="The form of the document e.g. image, email, document",
        max_length=100,
        min_length=0,
    )


class EForm(PydanticBaseModelEmptyStrIsNone):
    eformAttributes: Optional[List[EFormAttribute]] = Field(
        None, description="An array of EForm attributes."
    )
    eformId: int = Field(..., description="Unique automatically generated Id of an EForm document.")
    eformType: Optional[str] = Field(
        None, description="Name of the EForm document type", max_length=200, min_length=0
    )


class EarningsResponse(PydanticBaseModelEmptyStrIsNone):
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain Earnings extension information.",
    )
    earningsBasis: str = Field(..., description="The earnings frequency.")
    earningsId: int = Field(
        ..., description="The unique identifier for the earnings record.", ge=0.0, le=32.0
    )
    earningsType: str = Field(
        ...,
        description="The type of earnings record, it could refer to pre-disability, partial or salary.",
    )
    effectiveDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    endDate: Optional[date] = Field(None, description="ISO 8601 date format", example="1999-12-31")
    monthlyBasisEarningAmountsResponse: Optional[MonthlyBasisEarningAmountsResponse] = None
    notes: Optional[str] = Field(
        None, description="Notes relating to the earnings period.", max_length=200, min_length=0
    )
    periodInWeeks: int = Field(
        ..., description="Period in weeks between Effective Date and End Date of Earnings record."
    )
    salaryAmountBasis: Optional[str] = Field(
        None, description="Basis for salary amount being used."
    )
    weeklyBasisEarningAmountsResponse: Optional[WeeklyBasisEarningAmountsResponse] = None


class EmailAddress(PydanticBaseModelEmptyStrIsNone):
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain email Address extension information.",
    )
    emailAddress: Optional[str] = Field(
        None, description="Customers email address.", max_length=120, min_length=0
    )
    emailAddressType: str = Field(
        ..., description="Identifies the type of mail which is returned (Enum Domain=51)"
    )
    id: Optional[int] = Field(
        None,
        description="The id of the contact method (e.g. phone / mobile / emailAddress) ",
        ge=0.0,
    )
    preferred: Optional[bool] = Field(
        None, description="Specify if it is the first person to try to contact when it is required."
    )


class ExtendedAddress(PydanticBaseModelEmptyStrIsNone):
    buildingName1: Optional[str] = Field(
        None, description="The name of the building.", max_length=30, min_length=0
    )
    buildingName2: Optional[str] = Field(
        None, description="The name of the building continued.", max_length=30, min_length=0
    )
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain claim extension information.",
    )
    dpid: Optional[float] = Field(
        None, description="DPID - 8 digit Australian post address identifier.", ge=0.0, le=8.0
    )
    floorLevelNumber: Optional[str] = Field(
        None, description="The number of floor level.", max_length=2, min_length=0
    )
    floorLevelType: Optional[str] = Field(
        None, description="Type of floor level description.", max_length=10, min_length=0
    )
    lotNumber: Optional[str] = Field(
        None, description="The lot number.", max_length=6, min_length=0
    )
    postalNumber: Optional[str] = Field(
        None, description="The postal number.", max_length=11, min_length=0
    )
    postalNumberPrefix: Optional[str] = Field(
        None,
        description="This refers to the non-numeric portion preceding the Postal Number.",
        max_length=3,
        min_length=0,
    )
    postalNumberSuffix: Optional[str] = Field(
        None,
        description="This refers to the non-numeric portion following the Postal Number.",
        max_length=3,
        min_length=0,
    )
    postalType: Optional[str] = Field(
        None,
        description="The postal type - PO Box, Roadside Mail Box etc.",
        max_length=10,
        min_length=0,
    )
    premiseNoSuffix: Optional[str] = Field(
        None,
        description="The suffix to apply to the number of the premise.",
        max_length=1,
        min_length=0,
    )
    premiseNoTo: Optional[float] = Field(
        None, description="The high number in a range for the premise.", ge=0.0, le=5.0
    )
    premiseNoToSuffix: Optional[str] = Field(
        None,
        description="The suffix to apply to the number to of the premise.",
        max_length=1,
        min_length=0,
    )
    streetSuffix: Optional[str] = Field(
        None, description="The suffix for the street.", max_length=10, min_length=0
    )


class FuturePayment(PydanticBaseModelEmptyStrIsNone):
    balancingAmount: Optional[Decimal] = Field(
        None, description="Money amount format", example="1500.50"
    )
    benefitId: Optional[str] = None
    dueEventId: Optional[str] = Field(
        None, description="Business Entity OID", example="PE-00012-0000001234"
    )
    effectiveDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    futurePaymentDetails: Optional[List[FuturePaymentDetail]] = Field(
        None, description="This list return the recurring future payment details list."
    )
    grossAmount: Optional[Decimal] = Field(
        None, description="Money amount format", example="1500.50"
    )
    netAmount: Optional[Decimal] = Field(None, description="Money amount format", example="1500.50")
    netPaymentAmount: Optional[Decimal] = Field(
        None, description="Money amount format", example="1500.50"
    )
    pendingOfflineRecalc: Optional[bool] = Field(
        None,
        description="True if there is a pending or in progress offline benefit recalc, false otherwise.",
    )
    periodEndDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    periodStartDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    processingDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )


class LeavePeriodsChangeRequestResource(PydanticBaseModelEmptyStrIsNone):
    _links: Optional[Dict[str, str]] = None
    additionalNotes: Optional[str] = Field(
        None,
        description="Extra information about the leave period change request in free text format.",
    )
    changeRequestPeriods: Optional[List[ChangeRequestPeriod]] = Field(
        None, description="List of leave period changes requested."
    )
    id: Optional[str] = Field(None, description="Unique identification of Change Request record.")
    reason: Optional[ReasonResponse] = None
    requestDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    requestStatus: Optional[RequestStatusResponse] = None


class LeavePeriodsChangeRequestResources(PydanticBaseModelEmptyStrIsNone):
    _links: Optional[Dict[str, str]] = None
    elements: Optional[List[LeavePeriodsChangeRequestResource]] = None
    hasMoreElements: Optional[bool] = Field(
        None,
        description="<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>",
    )
    meta: Optional[Dict[str, Any]] = None
    totalSize: Optional[int] = Field(
        None,
        description="<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
    )


class NextPayment(PydanticBaseModelEmptyStrIsNone):
    claimId: Optional[str] = Field(None, description="The claim the payment relates to")
    nextPaymentAmount: Optional[Decimal] = Field(
        None, description="Money amount format", example="1500.50"
    )
    nextPaymentDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    nextPaymentLines: Optional[List[NextPaymentLine]] = Field(
        None, description="The estimated payment lines comprising the next estimated payment amount"
    )
    nextPeriodEndDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    nextPeriodStartDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )


class NotificationCaseSummary(PydanticBaseModelEmptyStrIsNone):
    absences: Optional[List[NotificationAbsenceCaseSummary]] = Field(
        None, description="The child absence cases under this notification case."
    )
    accidentDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    accommodations: Optional[List[NotificationAccommodationCaseSummary]] = Field(
        None, description="The child cases under this notification case."
    )
    actualDeliveryDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    actualPartialReturnToWorkDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    actualReturnToWorkDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    claims: Optional[List[NotificationClaimSummary]] = Field(
        None, description="The child cases under this notification case."
    )
    createdDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    dateFirstMissingWork: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    expectedDeliveryDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    expectedRTWDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    multipleConflictingAccidentDates: Optional[bool] = Field(
        None,
        description="Multiple conflicting accident dates found.If true,accidentDate attribute will be empty.",
    )
    notificationCaseId: Optional[str] = Field(
        None, description="The case number for the notification case."
    )
    notificationDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    notificationReason: Optional[str] = Field(
        None,
        description="Notification reason selected during notification case intake.",
        max_length=100,
        min_length=0,
    )
    partialReturnToWorkDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    releasedPartialReturnToWorkDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    releasedReturnToWorkDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    returnToWorkIntention: Optional[str] = Field(
        None,
        description="Indicates the employees return to work plans once they have finished their leave.",
    )
    status: Optional[str] = Field(
        None,
        description="The notification case status his is the current phase of the notification case managing process.",
    )


class NotificationCaseSummaryForClaims(PydanticBaseModelEmptyStrIsNone):
    accidentDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    actualDeliveryDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    actualPartialReturnToWorkDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    actualReturnToWorkDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    claims: Optional[List[NotificationClaimSummary]] = Field(
        None, description="The child cases under this notification case."
    )
    createdDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    dateFirstMissingWork: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    expectedDeliveryDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    expectedRTWDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    multipleConflictingAccidentDates: Optional[bool] = Field(
        None,
        description="Multiple conflicting accident dates found.If true,accidentDate attribute will be empty.",
    )
    notificationCaseId: Optional[str] = Field(
        None, description="The case number for the notification case."
    )
    notificationDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    notificationReason: Optional[str] = Field(
        None,
        description="Notification reason selected during notification case intake.",
        max_length=100,
        min_length=0,
    )
    partialReturnToWorkDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    releasedPartialReturnToWorkDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    releasedReturnToWorkDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    returnToWorkIntention: Optional[str] = Field(
        None,
        description="Indicates the employees return to work plans once they have finished their leave.",
    )
    status: Optional[str] = Field(
        None,
        description="The notification case status his is the current phase of the notification case managing process.",
    )


class Occupation(PydanticBaseModelEmptyStrIsNone):
    _links: Optional[Dict[str, str]] = Field(None, description="Links to self and child resources.")
    additionalEmploymentCategory: Optional[OCOccupationAltEmploymentCatResponse] = None
    codeId: Optional[str] = Field(None, description="Occupation Industry Classification Code id.")
    codeName: Optional[str] = Field(
        None,
        description="The name(s) associated with the specific Occupation Industry Classification Code id.",
    )
    dateJobBegan: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    dateJobEnded: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    daysWorkedPerWeek: Optional[str] = Field(
        None,
        description="The number of days worked per week, which can be specified with partial day.",
    )
    employeeId: Optional[str] = Field(
        None, description="Reference identifier of an employee in respect of its employer. "
    )
    employer: Optional[str] = Field(None, description="This is the name of the Employer Party.")
    employmentCategory: Optional[EmploymentCategoryResponse] = None
    employmentLocation: Optional[OCOccupationEmpLocationCodeResponse] = None
    employmentStatus: Optional[OCOccupationEmploymentStatusResponse] = None
    employmentTitle: Optional[OCOccupationEmploymentTitleResponse] = None
    endEmploymentReason: Optional[OCOccupationEndPositionCodeResponse] = None
    endPosReason: Optional[str] = Field(None, description="The reason for job ending.")
    extensions: Optional[Dict[str, Dict[str, Any]]] = Field(
        None, description="Occupation class extensions."
    )
    hoursWorkedPerWeek: Optional[str] = None
    id: Optional[str] = Field(
        None,
        description="The unique identifier for the occupation, composed of classId and indexId",
    )
    jobDesc: Optional[str] = Field(None, description="Job description.")
    jobStrenuous: Optional[OCOccupationJobStrenuousnessResponse] = None
    jobTitle: Optional[str] = Field(None, description="Job title.")
    orgUnitName: Optional[str] = Field(
        None,
        description="The name of the organisation unit within the employer organisation structure.",
    )
    overrideDaysWorkedPerWeek: Optional[bool] = Field(
        None, description="Is override days worked per week true or false?"
    )
    primary: Optional[bool] = Field(
        None, description="Indicates if the Occupation record is the primary occupation or not."
    )
    remarks: Optional[str] = Field(None, description="Remarks about the Occupation.")
    selfEmployed: Optional[bool] = Field(
        None, description="Indicates whether the person linked to the occupation is self-employed."
    )
    wageBaseDetailsEmbeddable: Optional[WageBaseDetailsEmbeddable] = None
    workPatternBasis: Optional[str] = Field(
        None, description="Indicates the type of work pattern in use"
    )
    workScheduleDescription: Optional[str] = Field(None, description="Work schedule description.")
    workSiteName: Optional[str] = Field(
        None, description="The name of the employer location which the occupation is related to."
    )


class OccupationResources(PydanticBaseModelEmptyStrIsNone):
    _links: Optional[Dict[str, str]] = None
    elements: Optional[List[Occupation]] = None
    hasMoreElements: Optional[bool] = Field(
        None,
        description="<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>",
    )
    meta: Optional[Dict[str, Any]] = None
    totalSize: Optional[int] = Field(
        None,
        description="<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
    )


class OccupationWeekBasedWorkPatternCommand(PydanticBaseModelEmptyStrIsNone):
    extensions: Optional[Dict[str, Any]] = None
    patternStartDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    patternStatus: Optional[WorkPatternStatusRequest] = None
    workPatternDays: List[WorkPatternDayCommand] = Field(
        ..., description="Day Patterns associated to the work pattern"
    )
    workPatternType: WeekBasedWorkPatternTypeRequest
    workWeekStarts: Optional[WeekBasedWorkWeekStartsRequest] = None


class Participant(PydanticBaseModelEmptyStrIsNone):
    correspondenceAddress: Optional[Address] = None
    extendedAddress: Optional[ExtendedAddress] = None
    participantSummary: CaseParticipantsSummary
    personDetails: Optional[PersonDetails] = None


class PaymentLine(PydanticBaseModelEmptyStrIsNone):
    amount: Optional[Decimal] = Field(None, description="Money amount format", example="1500.50")
    endDate: Optional[date] = Field(None, description="ISO 8601 date format", example="1999-12-31")
    integrationType: Optional[str] = Field(
        None,
        description="For adjustment PaymentLine this records the IntegrationType which may have been recorded for the adjustment",
        max_length=100,
        min_length=0,
    )
    lineType: Optional[str] = Field(
        None,
        description="The name of the payment adjustment e.g. Gross Benefit, Income Tax, Seat Belt etc.",
        max_length=100,
        min_length=0,
    )
    paymentLinesDetail: Optional[List[PaymentLineDetails]] = Field(
        None, description="The Payment Lines Details belongs to each payment."
    )
    reference: Optional[str] = Field(
        None,
        description="For adjustment PaymentLine this records the Reference which may have been recorded for the adjustment",
        max_length=250,
        min_length=0,
    )
    startDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )


class PaymentPreferenceAddressEmbeddable(PydanticBaseModelEmptyStrIsNone):
    addressLine1: Optional[str] = Field(None, description="First line of an address.")
    addressLine2: Optional[str] = Field(None, description="Second line of an address.")
    addressLine3: Optional[str] = Field(None, description="Third line of an address.")
    addressLine4: Optional[str] = Field(None, description="Fourth line of an address.")
    addressLine5: Optional[str] = Field(None, description="Fifth line of an address.")
    addressLine6: Optional[str] = Field(None, description="Sixth line of an address.")
    addressLine7: Optional[str] = Field(None, description="Seventh line of an address.")
    country: Optional[CountryResponse] = None
    extensions: Optional[Dict[str, Any]] = None
    extraAustralianFields: Optional[PaymentPreferenceAustralianAddressEmbeddable] = None
    postCode: Optional[str] = Field(None, description="International Postcode.")
    premiseNo: Optional[str] = Field(None, description="The premise number i.e. the street number.")


class PaymentPreferenceResource(PydanticBaseModelEmptyStrIsNone):
    _links: Optional[Dict[str, str]] = None
    accountDetail: Optional[AccountDetailEmbeddable] = None
    address: Optional[PaymentPreferenceAddressEmbeddable] = None
    chequeDetail: Optional[ChequeDetailEmbeddable] = None
    default: Optional[bool] = None
    description: Optional[str] = Field(None, description="Payment preference description.")
    effectiveFromDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    effectiveToDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    extensions: Optional[Dict[str, Any]] = None
    id: Optional[str] = None
    nominatedPayee: Optional[str] = Field(None, description="Name of the nominated payee.")
    paymentMethod: Optional[PaymentMethodResponse] = None
    stageName: Optional[str] = Field(
        None, description="The current stage of the payment preference."
    )
    status: Optional[CurrentPhaseResponse] = None


class PeriodDecisions(PydanticBaseModelEmptyStrIsNone):
    decisions: Optional[List[Decision]] = Field(
        None, description="List of Period Decisions for the given absence or employee"
    )
    endDate: Optional[date] = Field(None, description="ISO 8601 date format", example="1999-12-31")
    startDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )


class ReadDisabilityBenefitResult(PydanticBaseModelEmptyStrIsNone):
    benefitSummary: Optional[BenefitSummary] = None
    certificationPeriods: Optional[List[CertificationPeriodDetails]] = Field(
        None, description="The certification period details of the disability benefit."
    )
    disabilityBenefit: Optional[DisabilityBenefit] = None


class ReadDisabilityResult(PydanticBaseModelEmptyStrIsNone):
    claimSummary: Optional[ClaimSummary] = None
    disabilityClaim: Optional[DisabilityClaim] = None


class ReadLumpSumBenefitResult(PydanticBaseModelEmptyStrIsNone):
    benefitSummary: Optional[BenefitSummary] = None
    lumpSumBenefit: Optional[LumpSumBenefit] = None


class AccommodationCaseResource(PydanticBaseModelEmptyStrIsNone):
    _links: Optional[Dict[str, str]] = None
    accommodations: Optional[List[AccommodationEmbeddable]] = Field(
        None, description="List of accommodations contained in the case."
    )
    caseHandler: Optional[CaseHandlerEmbeddable] = None
    caseNumber: Optional[str] = Field(
        None, description="Business identifier for this Accommodation Case."
    )
    closureReasons: Optional[ClosureReasons] = Field(
        None, description="List of reasons given if the case is not being accommodated."
    )
    decisionDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    employee: Optional[EmployeeEmbeddable] = None
    id: Optional[str] = Field(None, description="Unique identifier for the Accommodation Case.")
    limitations: Optional[Limitations] = Field(
        None,
        description="List of limitations the employee has that they require an accommodation in their job.",
    )
    notificationCase: Optional[NotificationCaseEmbeddable] = None
    notificationDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    phase: Optional[str] = Field(
        None,
        description="Current phase in the Interactive Accommodation Process required by the Americans With Disabilities Act (ADA) and configured in the system, for example, 'Assessment'.",
    )
    pregnancyRelated: Optional[PregnancyRelatedResponse] = None
    stage: Optional[str] = Field(
        None,
        description="Current stage in the Interactive Accommodation Process and configured in the system, for example, 'Evaluate Accommodation Options'.",
    )


class ContactDetails(PydanticBaseModelEmptyStrIsNone):
    emailAddresses: Optional[List[EmailAddress]] = Field(
        None,
        description="Return list of email addresses, specifying the type: Email or Work Email.",
        max_items=100,
        min_items=0,
    )
    phoneNumbers: Optional[List[PhoneNumber]] = Field(
        None, description="An array with Customer Phone number details elements."
    )
    preferredContactMethod: Optional[int] = Field(
        None,
        description="Return the Id of the preferred contact method (it corresponds to one of the phones or emails specified in the previous lists and it means the first person to be contacted when it is needed).",
    )


class CustomerAddress(PydanticBaseModelEmptyStrIsNone):
    address: Address
    australianAddress: Optional[ExtendedAddress] = None


class CustomerAddressDetails(PydanticBaseModelEmptyStrIsNone):
    address: Address
    australianAddress: Optional[ExtendedAddress] = None
    extraRequestAttributes: Optional[ExtraRequestAttributes] = None


class CustomerDetails(PydanticBaseModelEmptyStrIsNone):
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain customer (OCPerson) extension information.",
    )
    customerAddress: Optional[CustomerAddressDetails] = None
    dateOfBirth: date = Field(..., description="ISO 8601 date format", example="1999-12-31")
    firstName: str = Field(..., description="Person's first name.", max_length=50, min_length=0)
    gender: Optional[str] = Field(
        None, description="The person's gender.", max_length=100, min_length=0
    )
    idNumber: Optional[str] = Field(
        None, description="ID number of the claimant.", max_length=10, min_length=0
    )
    identificationNumberType: Optional[str] = Field(
        None,
        description="The type of identification number the party will have.",
        max_length=100,
        min_length=0,
    )
    initals: Optional[str] = None
    initials: Optional[str] = Field(
        None, description="Person's middle initials.", max_length=10, min_length=0
    )
    lastName: str = Field(..., description="Person's last name.", max_length=50, min_length=0)
    maritalStatus: Optional[str] = Field(
        None,
        description="Person's marital status - single / married / etc.",
        max_length=100,
        min_length=0,
    )
    nationality: Optional[str] = Field(
        None, description="Person's nationality.", max_length=100, min_length=0
    )
    needsInterpretor: Optional[bool] = Field(
        None, description="Indicates if the customer needs an interpreter."
    )
    partyType: Optional[str] = None
    placeOfBirth: Optional[str] = Field(
        None, description="Place of birth.", max_length=50, min_length=0
    )
    secondName: Optional[str] = Field(
        None, description="Person's second name.", max_length=50, min_length=0
    )
    securedClient: Optional[bool] = Field(None, description="Secured client flag.")
    staff: Optional[bool] = Field(None, description="Staff flag.")
    title: Optional[str] = Field(
        None, description="Person's chosen title e.g. Mr / Mrs etc.", max_length=100, min_length=0
    )


class NewPaymentPreference(PydanticBaseModelEmptyStrIsNone):
    accountDetails: Optional[AccountDetails] = None
    chequeDetails: Optional[ChequeDetails] = None
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain claim extension information.",
    )
    customerAddress: Optional[CustomerAddress] = None
    description: Optional[str] = Field(None, description="Description of the Payment Preference")
    effectiveFrom: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    effectiveTo: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    isDefault: Optional[bool] = None
    overridePostalAddress: Optional[bool] = Field(
        None,
        description="Indicates that an override address applies for the payment preference. (i.e. sets the paymentAddressType to override. When false the correspondence address for the payee (or nominated payee) applies.",
    )
    paymentMethod: str = Field(
        ...,
        description="The name of the payment method. This is used to determine whether chequeDetails or accountDetails is displayed",
    )


class PaymentPreferenceCustomerResources(PydanticBaseModelEmptyStrIsNone):
    _links: Optional[Dict[str, str]] = None
    elements: Optional[List[PaymentPreferenceResource]] = None
    hasMoreElements: Optional[bool] = Field(
        None,
        description="<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>",
    )
    meta: Optional[Dict[str, Any]] = None
    totalSize: Optional[int] = Field(
        None,
        description="<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
    )


class PaymentPreferenceResponse(PydanticBaseModelEmptyStrIsNone):
    accountDetails: Optional[AccountDetails] = None
    chequeDetails: Optional[ChequeDetails] = None
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain claim extension information.",
    )
    customerAddress: Optional[CustomerAddress] = None
    description: Optional[str] = Field(None, description="Description of the Payment Preference")
    effectiveFrom: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    effectiveTo: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    isDefault: Optional[bool] = None
    nominatedPayee: Optional[str] = Field(
        None,
        description="The nominated payee for the payment preference",
        max_length=250,
        min_length=0,
    )
    paymentMethod: str = Field(
        ...,
        description="The name of the payment method. This is used to determine whether chequeDetails or accountDetails is displayed",
    )
    paymentPreferenceId: str = Field(
        ..., description="The unique identifier for payment preference", max_length=32, min_length=0
    )
    stageName: Optional[str] = Field(
        None, description="The current stage of the payment preference"
    )
    status: Optional[str] = Field(None, description="The status of the payment preference")


class Customer(PydanticBaseModelEmptyStrIsNone):
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain customer (OCPerson) extension information.",
    )
    customerAddress: Optional[CustomerAddress] = None
    dateOfBirth: date = Field(..., description="ISO 8601 date format", example="1999-12-31")
    firstName: str = Field(..., description="Person's first name.", max_length=50, min_length=0)
    gender: Optional[str] = Field(
        None, description="The person's gender.", max_length=100, min_length=0
    )
    idNumber: Optional[str] = Field(
        None, description="ID number of the claimant.", max_length=10, min_length=0
    )
    identificationNumberType: Optional[str] = Field(
        None,
        description="The type of identification number the party will have.",
        max_length=100,
        min_length=0,
    )
    initals: Optional[str] = None
    initials: Optional[str] = Field(
        None, description="Person's middle initials.", max_length=10, min_length=0
    )
    lastName: str = Field(..., description="Person's last name.", max_length=50, min_length=0)
    maritalStatus: Optional[str] = Field(
        None,
        description="Person's marital status - single / married / etc.",
        max_length=100,
        min_length=0,
    )
    nationality: Optional[str] = Field(
        None, description="Person's nationality.", max_length=100, min_length=0
    )
    needsInterpretor: Optional[bool] = Field(
        None, description="Indicates if the customer needs an interpreter."
    )
    partyType: Optional[str] = None
    placeOfBirth: Optional[str] = Field(
        None, description="Place of birth.", max_length=50, min_length=0
    )
    secondName: Optional[str] = Field(
        None, description="Person's second name.", max_length=50, min_length=0
    )
    securedClient: Optional[bool] = Field(None, description="Secured client flag.")
    staff: Optional[bool] = Field(None, description="Staff flag.")
    title: Optional[str] = Field(
        None, description="Person's chosen title e.g. Mr / Mrs etc.", max_length=100, min_length=0
    )


class MainPayeeDetails(PydanticBaseModelEmptyStrIsNone):
    classExtensionInformation: Optional[List[ExtensionAttribute]] = Field(
        None,
        description="An array of the extensionAttribute objects which contain claim extension information",
    )
    endDate: Optional[date] = Field(None, description="ISO 8601 date format", example="1999-12-31")
    participantId: Optional[int] = Field(None, description="Id of the participant")
    partyName: Optional[str] = Field(
        None,
        description="The name of the party with the participant role on the case",
        max_length=100,
        min_length=0,
    )
    paymentPreference: Optional[PaymentPreferenceResponse] = None
    referenceNo: Optional[str] = Field(
        None,
        description="The reference number of the party with the participant role on the case",
        max_length=40,
        min_length=0,
    )
    rolename: Optional[str] = Field(
        None,
        description="The role name assigned to the participant on the case",
        max_length=10,
        min_length=0,
    )
    sourceSystem: Optional[str] = Field(
        None,
        description="The source system of the party with the participant role on the case",
        max_length=100,
        min_length=0,
    )
    startDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    taxTypeDetails: Optional[List[TaxTypeDetails]] = Field(
        None, description="Gets the list of tax details of main payee on benefit."
    )


class CompoundQuestion(PydanticBaseModelEmptyStrIsNone):
    questions: Optional[List[QuestionAttribute]] = None
    value: Optional[str] = None


class CompoundQuestionAttribute(PydanticBaseModelEmptyStrIsNone):
    caption: Optional[str] = Field(
        None, description="The descriptive heading or title of a question."
    )
    compoundQuestion: Optional[List[CompoundQuestion]] = None
    fieldName: Optional[str] = Field(None, description="The attribute Name of the question.")


class CreateRegionTaxCodeDetailsCommand(PydanticBaseModelEmptyStrIsNone):
    __root__: Union[CreateAUTaxCodeDetailsCommand, CreateNZTaxCodeDetailsCommand]


class CreateTaxCodeRecordCommand(PydanticBaseModelEmptyStrIsNone):
    additionalWithholdAmount: Optional[AdditionalWithholdAmountMoneyRequest] = None
    dependentDeductions: Optional[DependentDeductionsMoneyRequest] = None
    effectiveDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    endDate: Optional[date] = Field(None, description="ISO 8601 date format", example="1999-12-31")
    extensions: Optional[Dict[str, Any]] = None
    filingMaritalStatus: Optional[FilingMaritalStatusRequest] = None
    nonStdDeductions: Optional[NonStdDeductionsMoneyRequest] = None
    numberExemptions: Optional[int] = Field(
        None, description="The tax exemptions e.g. number of exemptions accumulated."
    )
    otherIncome: Optional[OtherIncomeMoneyRequest] = None
    percentageRate: Optional[str] = Field(
        None,
        description="A percentage rate for tax record. The percentageRate must be of precision 10,2.",
    )
    regionTaxCodeDetails: Optional[CreateRegionTaxCodeDetailsCommand] = None
    taxCode: TaxCodeRequest
    taxType: TaxTypeRequest
    version: VersionRequest


class EditRegionTaxCodeDetailsCommand(PydanticBaseModelEmptyStrIsNone):
    __root__: Union[EditAUTaxCodeDetailsCommand, EditNZTaxCodeDetailsCommand]


class EditTaxCodeRecordCommand(PydanticBaseModelEmptyStrIsNone):
    additionalWithholdAmount: Optional[EditAdditionalWithholdAmountMoneyRequest] = None
    dependentDeductions: Optional[EditDependentDeductionsMoneyRequest] = None
    effectiveDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    endDate: Optional[date] = Field(None, description="ISO 8601 date format", example="1999-12-31")
    extensions: Optional[Dict[str, Any]] = None
    filingMaritalStatus: Optional[EditFilingMaritalStatusRequest] = None
    nonStdDeductions: Optional[EditNonStdDeductionsMoneyRequest] = None
    numberExemptions: Optional[int] = Field(
        None, description="The tax exemptions e.g. number of exemptions accumulated."
    )
    otherIncome: Optional[EditOtherIncomeMoneyRequest] = None
    percentageRate: Optional[str] = Field(
        None,
        description="A percentage rate for tax record. The percentageRate must be of precision 10,2.",
    )
    regionTaxCodeDetails: Optional[EditRegionTaxCodeDetailsCommand] = None
    taxCode: Optional[EditTaxCodeRequest] = None
    taxType: Optional[EditTaxTypeRequest] = None
    version: Optional[EditVersionRequest] = None


class QuestionAttribute(PydanticBaseModelEmptyStrIsNone):
    __root__: Union[SimpleQuestionAttribute, EnumQuestionAttribute, CompoundQuestionAttribute]


class QuestionSet(PydanticBaseModelEmptyStrIsNone):
    questions: Optional[List[QuestionAttribute]] = None


class ReflexiveQuestionResource(PydanticBaseModelEmptyStrIsNone):
    _links: Optional[Dict[str, str]] = None
    primaryRelationshipQuestionSet: Optional[List[RelationshipQuestionSet]] = Field(
        None, description="Set of question related to one or more primary relationship."
    )
    reason: Optional[AbsenceReasonSummary] = None
    reasonQuestionSet: Optional[QuestionSet] = None
    secondaryRelationshipQuestionSet: Optional[List[RelationshipQuestionSet]] = Field(
        None, description="Set of question related to one or more secondary relationship."
    )


class RegionTaxCodeDetails(PydanticBaseModelEmptyStrIsNone):
    __root__: Union[RegionTaxCodeDetails1, AUTaxCodeDetails, NZTaxCodeDetails]


class RelationshipQuestionSet(PydanticBaseModelEmptyStrIsNone):
    questions: Optional[List[QuestionAttribute]] = None
    relationships: Optional[List[Relationship]] = Field(None, description="List of Relationship")


class TaxCodeRecord(PydanticBaseModelEmptyStrIsNone):
    _links: Optional[Dict[str, str]] = None
    additionalWithholdAmount: Optional[AdditionalWithholdAmountMoneyResponse] = None
    dependentDeductions: Optional[DependentDeductionsMoneyResponse] = None
    effectiveDate: Optional[date] = Field(
        None, description="ISO 8601 date format", example="1999-12-31"
    )
    endDate: Optional[date] = Field(None, description="ISO 8601 date format", example="1999-12-31")
    extensions: Optional[Dict[str, Any]] = None
    filingMaritalStatus: Optional[FilingMaritalStatusResponse] = None
    id: Optional[str] = Field(None, description="Tax Code Record ID (unique in the system)")
    nonStdDeductions: Optional[NonStdDeductionsMoneyResponse] = None
    numberExemptions: Optional[int] = Field(
        None, description="The tax exemptions e.g. number of exemptions accumulated."
    )
    otherIncome: Optional[OtherIncomeMoneyResponse] = None
    percentageRate: Optional[str] = Field(
        None,
        description="A percentage rate for tax record. The percentageRate must be of precision 10,2.",
    )
    regionTaxCodeDetails: Optional[RegionTaxCodeDetails] = None
    taxCode: Optional[TaxCodeResponse] = None
    taxType: Optional[TaxTypeResponse] = None
    version: Optional[VersionResponse] = None


class TaxCodeRecordResourcesList(PydanticBaseModelEmptyStrIsNone):
    _links: Optional[Dict[str, str]] = None
    elements: Optional[List[TaxCodeRecord]] = None
    hasMoreElements: Optional[bool] = Field(
        None,
        description="<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>",
    )
    meta: Optional[Dict[str, Any]] = None
    totalSize: Optional[int] = Field(
        None,
        description="<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
    )


class CreateAUTaxCodeDetailsCommand(PydanticBaseModelEmptyStrIsNone):
    claimVaryOffset: Optional[bool] = Field(
        None, description="Indicates if there is a withholding variation."
    )
    combinedIncome: Optional[bool] = Field(
        None, description="Indicates if combinedIncome is greater than a set amount."
    )
    levyExemption: Optional[LevyExemptionRequest] = None
    levyReduction: Optional[bool] = Field(
        None, description="Indicates if claiming medicare levy reduction.."
    )
    maritalRelationshipStatus: Optional[MaritalRelationshipStatusRequest] = None
    medicareLevySurcharge: Optional[MedicareLevySurchargeRequest] = None
    noDependents: Optional[int] = Field(None, description="Number of dependents claimed.")
    qualifyMedicareLevyExemption: Optional[bool] = Field(
        None, description="Indicates if qualifies for medicare levy exemption."
    )
    residentialStatus: Optional[ResidentialStatusRequest] = None
    seniorsPensionersOffset: Optional[bool] = Field(
        None, description="Indicates if Claim or Vary Seniors Pensioners Offset."
    )
    spouse: Optional[bool] = Field(None, description="Indicates if spouse has claimed.")
    studyAndTrainingLoan: Optional[bool] = Field(
        None, description="Indicates if has a study/training loan."
    )
    taxFreeThresholdClaimed: Optional[bool] = Field(
        None, description="Indicates if the tax free threshold claimed."
    )
    taxOffsets: Optional[TaxOffsetsMoneyRequest] = None


class CreateNZTaxCodeDetailsCommand(PydanticBaseModelEmptyStrIsNone):
    extraPayTaxRate: Optional[ExtraPayTaxRateRequest] = None
    irTaxCodeChange: Optional[bool] = Field(
        None,
        description="The tax office may direct the insurer to use a different tax code than the client declared one. This field indicates where the tax office has ordered a tax code change.",
    )
    isGSTRegistered: Optional[bool] = Field(
        None, description="Denotes if a payee is liable for Goods and Services Tax (GST)"
    )
    kiwiSaverStatus: Optional[KiwiSaverStatusRequest] = None
    studLoanThresholdApplies: Optional[bool] = Field(
        None, description="Denotes if a Student Loan Repayment Threshold Applies"
    )
    taxCertNumber: Optional[str] = Field(
        None,
        description="When a payee (client usually) has an individual tax agreement with IRD, i.e. to use a non-standard tax rate, this is the reference number of the tax certificate issued by IRD.",
    )
    taxCodeRateNonStdStudLoan: Optional[str] = Field(
        None, description="Indicates what rate to use for student loan for a non-standard tax code."
    )
    withholdingTaxStatus: Optional[WithholdingTaxStatusRequest] = None
    zeroStudLoanTaxCodeRate: Optional[bool] = Field(
        None,
        description="Indicates if a rate of zero is entered for the TaxCodeRateNonStdStudLoan field that this was intentional.",
    )


class EditAUTaxCodeDetailsCommand(PydanticBaseModelEmptyStrIsNone):
    claimVaryOffset: Optional[bool] = Field(
        None, description="Indicates if there is a withholding variation."
    )
    combinedIncome: Optional[bool] = Field(
        None, description="Indicates if combinedIncome is greater than a set amount."
    )
    levyExemption: Optional[EditLevyExemptionRequest] = None
    levyReduction: Optional[bool] = Field(
        None, description="Indicates if claiming medicare levy reduction.."
    )
    maritalRelationshipStatus: Optional[EditMaritalRelationshipStatusRequest] = None
    medicareLevySurcharge: Optional[EditMedicareLevySurchargeRequest] = None
    noDependents: Optional[int] = Field(None, description="Number of dependents claimed.")
    qualifyMedicareLevyExemption: Optional[bool] = Field(
        None, description="Indicates if qualifies for medicare levy exemption."
    )
    residentialStatus: Optional[EditResidentialStatusRequest] = None
    seniorsPensionersOffset: Optional[bool] = Field(
        None, description="Indicates if Claim or Vary Seniors Pensioners Offset."
    )
    spouse: Optional[bool] = Field(None, description="Indicates if spouse has claimed.")
    studyAndTrainingLoan: Optional[bool] = Field(
        None, description="Indicates if has a study/training loan."
    )
    taxFreeThresholdClaimed: Optional[bool] = Field(
        None, description="Indicates if the tax free threshold claimed."
    )
    taxOffsets: Optional[EditTaxOffsetsMoneyRequest] = None


class EditNZTaxCodeDetailsCommand(PydanticBaseModelEmptyStrIsNone):
    extraPayTaxRate: Optional[EditExtraPayTaxRateRequest] = None
    irTaxCodeChange: Optional[bool] = Field(
        None,
        description="The tax office may direct the insurer to use a different tax code than the client declared one. This field indicates where the tax office has ordered a tax code change.",
    )
    isGSTRegistered: Optional[bool] = Field(
        None, description="Denotes if a payee is liable for Goods and Services Tax (GST)"
    )
    kiwiSaverStatus: Optional[EditKiwiSaverStatusRequest] = None
    studLoanThresholdApplies: Optional[bool] = Field(
        None, description="Denotes if a Student Loan Repayment Threshold Applies"
    )
    taxCertNumber: Optional[str] = Field(
        None,
        description="When a payee (client usually) has an individual tax agreement with IRD, i.e. to use a non-standard tax rate, this is the reference number of the tax certificate issued by IRD.",
    )
    taxCodeRateNonStdStudLoan: Optional[str] = Field(
        None, description="Indicates what rate to use for student loan for a non-standard tax code."
    )
    withholdingTaxStatus: Optional[EditWithholdingTaxStatusRequest] = None
    zeroStudLoanTaxCodeRate: Optional[bool] = Field(
        None,
        description="Indicates if a rate of zero is entered for the TaxCodeRateNonStdStudLoan field that this was intentional.",
    )


class AUTaxCodeDetails(PydanticBaseModelEmptyStrIsNone):
    claimVaryOffset: Optional[bool] = Field(
        None, description="Indicates if there is a withholding variation."
    )
    combinedIncome: Optional[bool] = Field(
        None, description="Indicates if combinedIncome is greater than a set amount."
    )
    levyExemption: Optional[ClaimMedicareLevyExemptionResponse] = None
    levyReduction: Optional[bool] = Field(
        None, description="Indicates if claiming medicare levy reduction.."
    )
    maritalRelationshipStatus: Optional[MaritalRelationshipStatusResponse] = None
    medicareLevySurcharge: Optional[MedicareLevySurchargeResponse] = None
    noDependents: Optional[int] = Field(None, description="Number of dependents claimed.")
    qualifyMedicareLevyExemption: Optional[bool] = Field(
        None, description="Indicates if qualifies for medicare levy exemption."
    )
    residentialStatus: Optional[ResidentialStatusResponse] = None
    seniorsPensionersOffset: Optional[bool] = Field(
        None, description="Indicates if Claim or Vary Seniors Pensioners Offset."
    )
    spouse: Optional[bool] = Field(None, description="Indicates if spouse has claimed.")
    studyAndTrainingLoan: Optional[bool] = Field(
        None, description="Indicates if has a study/training loan."
    )
    taxFreeThresholdClaimed: Optional[bool] = Field(
        None, description="Indicates if the tax free threshold claimed."
    )
    taxOffsets: Optional[TaxOffsetsMoneyResponse] = None


class NZTaxCodeDetails(PydanticBaseModelEmptyStrIsNone):
    extraPayTaxRate: Optional[ExtraPayTaxRateResponse] = None
    irTaxCodeChange: Optional[bool] = Field(
        None,
        description="The tax office may direct the insurer to use a different tax code than the client declared one. This field indicates where the tax office has ordered a tax code change.",
    )
    isGSTRegistered: Optional[bool] = Field(
        None, description="Denotes if a payee is liable for Goods and Services Tax (GST)"
    )
    kiwiSaverStatus: Optional[KiwiSaverStatusResponse] = None
    studLoanThresholdApplies: Optional[bool] = Field(
        None, description="Denotes if a Student Loan Repayment Threshold Applies"
    )
    taxCertNumber: Optional[str] = Field(
        None,
        description="When a payee (client usually) has an individual tax agreement with IRD, i.e. to use a non-standard tax rate, this is the reference number of the tax certificate issued by IRD.",
    )
    taxCodeRateNonStdStudLoan: Optional[str] = Field(
        None, description="Indicates what rate to use for student loan for a non-standard tax code."
    )
    withholdingTaxStatus: Optional[WithholdingTaxStatusResponse] = None
    zeroStudLoanTaxCodeRate: Optional[bool] = Field(
        None,
        description="Indicates if a rate of zero is entered for the TaxCodeRateNonStdStudLoan field that this was intentional.",
    )


TaEnumAccommodationType.update_forward_refs()
TaEnumReturnToWorkIntention.update_forward_refs()
CompoundQuestion.update_forward_refs()
CreateRegionTaxCodeDetailsCommand.update_forward_refs()
EditRegionTaxCodeDetailsCommand.update_forward_refs()
ReflexiveQuestionResource.update_forward_refs()
RegionTaxCodeDetails.update_forward_refs()
