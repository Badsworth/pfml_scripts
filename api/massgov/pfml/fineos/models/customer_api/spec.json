{
  "components": {
    "schemas": {
      "AUFloorLevelTypesRequest": {
        "description": "The type of floor level from an enumerated list as in Basement, Floor, Ground Floor and so on. Corresponds to the AUFloorLevelTypes Enum Domain (<I>domainId</I> = 186).",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AUFloorLevelTypesResponse": {
        "description": "The type of floor level from an enumerated list as in Basement, Floor, Ground Floor and so on. Corresponds to the AUFloorLevelTypes Enum Domain (<I>domainId</I> = 186).",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "AUPostalTypesRequest": {
        "description": "The postal type from an enumerated list as in PO Box, Roadside Mail Box and so on. Corresponds to the AUPostalTypes Enum Domain (<I>domainId</I> = 188).",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AUPostalTypesResponse": {
        "description": "The postal type from an enumerated list as in PO Box, Roadside Mail Box and so on. Corresponds to the AUPostalTypes Enum Domain (<I>domainId</I> = 188).",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "AUStreetSuffixesRequest": {
        "description": "The suffix for the street from an enumerated list. Corresponds to the AUStreetSuffixes Enum Domain (<I>domainId</I> = 187).",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AUStreetSuffixesResponse": {
        "description": "The suffix for the street from an enumerated list. Corresponds to the AUStreetSuffixes Enum Domain (<I>domainId</I> = 187).",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "AUTaxCodeDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RegionTaxCodeDetails"
          },
          {
            "properties": {
              "claimVaryOffset": {
                "description": "Indicates if there is a withholding variation.",
                "type": "boolean"
              },
              "combinedIncome": {
                "description": "Indicates if combinedIncome is greater than a set amount.",
                "type": "boolean"
              },
              "levyExemption": {
                "$ref": "#/components/schemas/ClaimMedicareLevyExemptionResponse"
              },
              "levyReduction": {
                "description": "Indicates if claiming medicare levy reduction..",
                "type": "boolean"
              },
              "maritalRelationshipStatus": {
                "$ref": "#/components/schemas/MaritalRelationshipStatusResponse"
              },
              "medicareLevySurcharge": {
                "$ref": "#/components/schemas/MedicareLevySurchargeResponse"
              },
              "noDependents": {
                "description": "Number of dependents claimed.",
                "format": "int32",
                "type": "integer"
              },
              "qualifyMedicareLevyExemption": {
                "description": "Indicates if qualifies for medicare levy exemption.",
                "type": "boolean"
              },
              "residentialStatus": {
                "$ref": "#/components/schemas/ResidentialStatusResponse"
              },
              "seniorsPensionersOffset": {
                "description": "Indicates if Claim or Vary Seniors Pensioners Offset.",
                "type": "boolean"
              },
              "spouse": {
                "description": "Indicates if spouse has claimed.",
                "type": "boolean"
              },
              "studyAndTrainingLoan": {
                "description": "Indicates if has a study/training loan.",
                "type": "boolean"
              },
              "taxFreeThresholdClaimed": {
                "description": "Indicates if the tax free threshold claimed.",
                "type": "boolean"
              },
              "taxOffsets": {
                "$ref": "#/components/schemas/TaxOffsetsMoneyResponse"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "Absence": {
        "description": "Absence case related to qualified request",
        "properties": {
          "caseReference": {
            "description": "Case reference related to absence",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the absence case",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AbsenceCase": {
        "properties": {
          "actualPartialReturnToWorkDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "actualReturnToWorkDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "additionalComments": {
            "description": "Description for this case as entered by the user.",
            "maxLength": 2000,
            "minLength": 0,
            "type": "string"
          },
          "employerNotificationDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "employerNotificationMethod": {
            "description": "The method used to notify the employer about the leave request. Only relevant if the employer has been notified (valid if the employer has been notified).e.g. Other, By Telephone, In Person and In Writing. This maps to enum NotificationMethod(domain id 2547).",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "employerNotified": {
            "description": "Indicates whether the employer has been notified about the leave request.",
            "type": "boolean"
          },
          "episodicLeavePeriods": {
            "items": {
              "$ref": "#/components/schemas/EpisodicLeavePeriod"
            },
            "type": "array"
          },
          "expectedReturnToWorkDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "intakeSource": {
            "description": "The source of the intake process.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "notificationCaseId": {
            "description": "An existing Notification Case Id. If empty a new parent Notification may be created depending on how the Notification case type is configured.",
            "maxLength": 254,
            "minLength": 0,
            "type": "string"
          },
          "notificationReason": {
            "description": "Notification Reason selected during Notification case intake.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "notifiedBy": {
            "description": "The notifier for this absence case.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "notifierFirstName": {
            "description": "The first name for the Notifier.",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "notifierLastName": {
            "description": "The last name for the Notifier.",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "notifierPhone": {
            "description": "The telephone number for the Notifier.",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "partialReturnToWorkDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "primaryRelQualifier1": {
            "description": "The qualifier1 of the primary relationship.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "primaryRelQualifier2": {
            "description": "The qualifier2 of the primary relationship.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "primaryRelationship": {
            "description": "The name of the primary relationship.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "reason": {
            "description": "The absence reason.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "reasonQualifier1": {
            "description": "The qualifier1 for the absence reason.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "reasonQualifier2": {
            "description": "The qualifier2 for the absence reason.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "reducedScheduleLeavePeriods": {
            "items": {
              "$ref": "#/components/schemas/ReducedScheduleLeavePeriod"
            },
            "type": "array"
          },
          "releasedPartialReturnToWorkDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "releasedReturnToWorkDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "returnToWorkIntention": {
            "$ref": "#/components/schemas/TaEnumReturnToWorkIntention"
          },
          "secondaryRelQualifier1": {
            "description": "The qualifier1 of the secondary relationship.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "secondaryRelQualifier2": {
            "description": "The qualifier2 of the secondary relationship.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "secondaryRelationship": {
            "description": "The name of the secondary relationship.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "timeOffLeavePeriods": {
            "items": {
              "$ref": "#/components/schemas/TimeOffLeavePeriod"
            },
            "type": "array"
          }
        },
        "required": [
          "intakeSource",
          "notifiedBy"
        ],
        "type": "object"
      },
      "AbsenceCaseSummary": {
        "properties": {
          "absenceHandler": {
            "description": " The Person handling the absence case",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "absenceHandlerEmailAddress": {
            "description": "The phone number of the absence case handler",
            "maxLength": 40,
            "minLength": 0,
            "type": "string"
          },
          "absenceHandlerPhoneNumber": {
            "description": "The email address of the absence case handler",
            "maxLength": 20,
            "minLength": 0,
            "type": "string"
          },
          "absenceId": {
            "description": "Absence case identifier",
            "maxLength": 254,
            "minLength": 0,
            "type": "string"
          },
          "createdDate": {
            "description": "ISO 8601 date time format",
            "example": "1999-12-31T23:59:59Z",
            "format": "date-time",
            "type": "string"
          },
          "endDate": {
            "description": "ISO 8601 date time format",
            "example": "1999-12-31T23:59:59Z",
            "format": "date-time",
            "type": "string"
          },
          "hasFinancialInformation": {
            "description": "Absence case has financial information",
            "type": "boolean"
          },
          "notificationCaseId": {
            "description": "Notification case id, if applicable for the absence case",
            "type": "string"
          },
          "reason": {
            "description": "Reason for the absence",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "reasonQualifier1": {
            "description": "Qualifier 1",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "reasonQualifier2": {
            "description": "Qualifier 2",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "startDate": {
            "description": "ISO 8601 date time format",
            "example": "1999-12-31T23:59:59Z",
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "description": "Value expected to be from is for enum domain CurrentPhase",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          }
        },
        "type": "object"
      },
      "AbsenceDay": {
        "description": "The absence days for this absence case.",
        "properties": {
          "date": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "decision": {
            "description": "Decision status of leave request",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "timeDeducted": {
            "description": "The total deducted time of absence associated with this day.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "timeDeductedBasis": {
            "description": "TaEnum<LengthBasis> value",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "timeRequested": {
            "description": "The total requested time of absence associated with this day.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "timeRequestedBasis": {
            "description": "TaEnum<LengthBasis> value",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          }
        },
        "type": "object"
      },
      "AbsenceDetails": {
        "properties": {
          "absenceDays": {
            "description": "The absence days for this absence case.",
            "items": {
              "$ref": "#/components/schemas/AbsenceDay"
            },
            "type": "array"
          },
          "absenceId": {
            "description": "The case number of this absence case.",
            "maxLength": 254,
            "minLength": 0,
            "type": "string"
          },
          "absencePeriods": {
            "description": "The absence periods for this absence case.",
            "items": {
              "$ref": "#/components/schemas/AbsencePeriod"
            },
            "type": "array"
          },
          "actualPartialReturnToWorkDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "actualReturnToWorkDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "creationDate": {
            "description": "ISO 8601 date time format",
            "example": "1999-12-31T23:59:59Z",
            "format": "date-time",
            "type": "string"
          },
          "expectedReturnToWorkDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "financialCaseIds": {
            "description": "The values of the financial case Ids on this absence case.",
            "items": {
              "description": "The values of the financial case Ids on this absence case.",
              "type": "string"
            },
            "type": "array"
          },
          "lastUpdatedDate": {
            "description": "ISO 8601 date time format",
            "example": "1999-12-31T23:59:59Z",
            "format": "date-time",
            "type": "string"
          },
          "notificationDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "notifiedBy": {
            "description": "The notifier for this absence case.",
            "maxLength": 254,
            "minLength": 0,
            "type": "string"
          },
          "paidLeaveCase": {
            "description": "The paid leave case details for this absence case.",
            "items": {
              "$ref": "#/components/schemas/PaidLeaveCase"
            },
            "type": "array"
          },
          "partialReturnToWorkDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "releasedPartialReturnToWorkDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "releasedReturnToWorkDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "reportedReducedSchedule": {
            "description": "The list of reduced scheduled leave periods.",
            "items": {
              "$ref": "#/components/schemas/ReportedReducedScheduleLeavePeriod"
            },
            "type": "array"
          },
          "reportedTimeOff": {
            "description": "The list of time off leave periods.",
            "items": {
              "$ref": "#/components/schemas/ReportedTimeOffLeavePeriod"
            },
            "type": "array"
          },
          "returnToWorkIntention": {
            "description": "Indicates the employees return to work plans once they have finished their leave.",
            "type": "string"
          },
          "selectedLeavePlans": {
            "description": "The selected leave plans for this absence case.",
            "items": {
              "$ref": "#/components/schemas/LeavePlanDetails"
            },
            "type": "array"
          },
          "status": {
            "description": "The status for this absence case.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          }
        },
        "type": "object"
      },
      "AbsencePeriod": {
        "description": "The absence periods for this absence case.",
        "properties": {
          "absenceType": {
            "description": "The absenceType for the absence reason.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "endDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "episodicLeavePeriodDetail": {
            "$ref": "#/components/schemas/EpisodicLeavePeriodDetail"
          },
          "id": {
            "description": "Business Entity OID",
            "example": "PE-00012-0000001234",
            "format": "string",
            "type": "string"
          },
          "reason": {
            "description": "The name for the absence reason.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "reasonQualifier1": {
            "description": "The first qualifier for the absence reason.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "reasonQualifier2": {
            "description": "The second qualifier for the absence reason.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "requestStatus": {
            "description": "The status of the leave request.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "startDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "status": {
            "description": "The status for this absence period.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          }
        },
        "type": "object"
      },
      "AbsencePeriodDecision": {
        "properties": {
          "absenceCaseId": {
            "description": "Absence Case ID.",
            "type": "string"
          },
          "absencePeriodStatus": {
            "description": "Status of absence period.",
            "type": "string"
          },
          "absencePeriodType": {
            "description": "Type of absence period.",
            "type": "string"
          },
          "actualForRequestedEpisodic": {
            "description": "True if this is an Actual Period linked to an Episodic Period.",
            "type": "boolean"
          },
          "adjudicationStatus": {
            "description": "Adjudication status of leave plan.",
            "type": "string"
          },
          "applicabilityStatus": {
            "description": "Applicability status of leave plan.",
            "type": "string"
          },
          "approvalReason": {
            "description": "Absence plan approval reason.",
            "type": "string"
          },
          "availabilityPeriodMethod": {
            "description": "Availability period method of leave plan period.",
            "type": "string"
          },
          "availabilityStatus": {
            "description": "Availability status of leave plan.",
            "type": "string"
          },
          "balanceDeduction": {
            "description": "Balance deduction value for every decision day included in this period.",
            "type": "number"
          },
          "decisionStatus": {
            "description": "Absence plan decision status.",
            "type": "string"
          },
          "denialReason": {
            "description": "Absence plan denial status.",
            "type": "string"
          },
          "eligibilityStatus": {
            "description": "Eligibility status of leave plan.",
            "type": "string"
          },
          "endDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "evidenceStatus": {
            "description": "Evidence status of leave plan.",
            "type": "string"
          },
          "fixedYearStartDay": {
            "description": "Fixed year start date of absence period.",
            "format": "int64",
            "type": "integer"
          },
          "fixedYearStartMonth": {
            "description": "Fixed year start month of absence period.",
            "type": "string"
          },
          "leavePlanCategory": {
            "description": "Category of leave plan.",
            "type": "string"
          },
          "leavePlanId": {
            "description": "Leave plan ID.",
            "type": "string"
          },
          "leavePlanName": {
            "description": "Leave plan name.",
            "type": "string"
          },
          "leavePlanShortName": {
            "description": "Leave plan short name.",
            "type": "string"
          },
          "leaveRequestId": {
            "description": "Business Entity OID",
            "example": "PE-00012-0000001234",
            "format": "string",
            "type": "string"
          },
          "parentPeriodId": {
            "type": "string"
          },
          "periodId": {
            "description": "Business Entity OID",
            "example": "PE-00012-0000001234",
            "format": "string",
            "type": "string"
          },
          "qualifier1": {
            "description": "Leave plan qualifier1.",
            "type": "string"
          },
          "qualifier2": {
            "description": "Leave plan qualifier2.",
            "type": "string"
          },
          "reasonName": {
            "description": "Reason name of leave plan.",
            "type": "string"
          },
          "startDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "timeBankMethod": {
            "description": "Time bank method of leave plan period.",
            "type": "string"
          },
          "timeDecisionReason": {
            "description": "Absence plan time decision reason.",
            "type": "string"
          },
          "timeDecisionStatus": {
            "description": "Absence plan time decision status.",
            "type": "string"
          },
          "timeDeducted": {
            "description": "The total deducted time of absence associated with the decision day.",
            "type": "string"
          },
          "timeDeductedBasis": {
            "description": "the time deducted Basis used for the total deducted time of absence associated with the decision day.e.g.minutes,hours,days",
            "type": "string"
          },
          "timeEntitlement": {
            "description": "Time entitlement of absence period.",
            "type": "number"
          },
          "timeEntitlementBasis": {
            "description": "Time entitlement basis of absence period.",
            "type": "string"
          },
          "timeRequested": {
            "description": "The time requested for Actual Periods linked to an Episodic Period.",
            "type": "string"
          },
          "timeWithinPeriod": {
            "description": "Time within absence period.",
            "format": "int64",
            "type": "integer"
          },
          "timeWithinPeriodBasis": {
            "description": "Time within period basis of absence period.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AbsencePeriodDecisions": {
        "properties": {
          "absencePeriodDecisions": {
            "items": {
              "$ref": "#/components/schemas/AbsencePeriodDecision"
            },
            "type": "array"
          },
          "endDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "startDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AbsenceReasonModel": {
        "description": "The absence reasons linked to the leave plan.",
        "properties": {
          "reason": {
            "description": "The name for the absence reason.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "reasonQualifier1": {
            "description": "The first qualifier for the absence reason.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "reasonQualifier2": {
            "description": "The second qualifier for the absence reason.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          }
        },
        "required": [
          "reason",
          "reasonQualifier1",
          "reasonQualifier2"
        ],
        "type": "object"
      },
      "AbsenceReasonResource": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "accommodation": {
            "$ref": "#/components/schemas/AccomodationResponse"
          },
          "allowedGender": {
            "$ref": "#/components/schemas/AllowedGenderResponse"
          },
          "askForSecondaryRelationship": {
            "description": "An indicator to define secondary relationship required or not.",
            "type": "boolean"
          },
          "category": {
            "$ref": "#/components/schemas/CategoryResponse"
          },
          "coveredPerson": {
            "$ref": "#/components/schemas/CoveredPersonResponse"
          },
          "disabilityIntegration": {
            "$ref": "#/components/schemas/DisabilityIntegrationResponse"
          },
          "eventType": {
            "$ref": "#/components/schemas/EventTypeResponse"
          },
          "id": {
            "description": "Id that uniquely identifies the absence reason.",
            "type": "string"
          },
          "medicalRelated": {
            "$ref": "#/components/schemas/MedicalRelatedResponse"
          },
          "militaryRelated": {
            "$ref": "#/components/schemas/MilitaryRelatedResponse"
          },
          "notificationReason": {
            "$ref": "#/components/schemas/NotificationReasonResponse"
          },
          "reasonName": {
            "description": "The name for the absence reason.",
            "type": "string"
          },
          "reasonQualifier1": {
            "description": "The first qualifier for the absence reason",
            "type": "string"
          },
          "reasonQualifier2": {
            "description": "The second qualifier for the absence reason.",
            "type": "string"
          },
          "seriousHealth": {
            "$ref": "#/components/schemas/SeriousHealthResponse"
          }
        },
        "type": "object"
      },
      "AbsenceReasonResources": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "elements": {
            "items": {
              "$ref": "#/components/schemas/AbsenceReasonResource"
            },
            "type": "array"
          },
          "hasMoreElements": {
            "description": "<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>",
            "type": "boolean"
          },
          "meta": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "totalSize": {
            "description": "<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "AbsenceReasonSummary": {
        "properties": {
          "accommodation": {
            "description": "Determine whether the reason requires a workplace accommodation.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "allowedGender": {
            "description": "Gender of the covered person",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "askForSecondaryRelationship": {
            "description": "Specify secondary reason.",
            "type": "boolean"
          },
          "category": {
            "description": "The Category for the absence reason.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "coveredPerson": {
            "description": "Covered person type.",
            "type": "string"
          },
          "disabilityIntegration": {
            "description": "Determines if the reason is classed as a disability condition.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "eventType": {
            "description": "The Event type for the absence reason.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "medicalRelated": {
            "description": "Medical information of  the covered person",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "militaryRelated": {
            "description": "MilitaryRelated information of  the covered person.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "notificationReason": {
            "description": "The notification reason associated with this absence reason.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "reason": {
            "description": "The name for the absence reason.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "reasonQualifier1": {
            "description": "The first qualifier for the absence reason.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "reasonQualifier2": {
            "description": "The second qualifier for the absence reason.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "seriousHealth": {
            "description": "Indicates whether the condition is serious or not.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          }
        },
        "required": [
          "reason",
          "reasonQualifier1",
          "reasonQualifier2"
        ],
        "type": "object"
      },
      "AccommodationCase": {
        "properties": {
          "additionalNotes": {
            "description": "Additional notes for this accommodation.",
            "maxLength": 20000,
            "minLength": 0,
            "type": "string"
          },
          "limitations": {
            "description": "Represents a Limitation to be associated to an Accommodation Case.",
            "items": {
              "$ref": "#/components/schemas/Limitation"
            },
            "type": "array"
          },
          "notificationCaseId": {
            "description": "Notification case id of the case to which the accommodation should be added as a child case.  ",
            "maxLength": 254,
            "minLength": 0,
            "type": "string"
          },
          "notificationReason": {
            "description": "Notification Reason selected during Notification case intake.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "pregnancyRelated": {
            "description": "Identifies whether the accommodation being requested is related to an employee's pregnancy. This is a statutory requirement in certain states and is captured so as it can be reported upon where required. ",
            "type": "string"
          },
          "workPlaceAccommodations": {
            "description": "List of Accommodations for this accommodation case.",
            "items": {
              "$ref": "#/components/schemas/WorkPlaceAccommodation"
            },
            "type": "array"
          }
        },
        "required": [
          "pregnancyRelated"
        ],
        "type": "object"
      },
      "AccommodationCaseResource": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "accommodations": {
            "description": "List of accommodations contained in the case.",
            "items": {
              "$ref": "#/components/schemas/AccommodationEmbeddable"
            },
            "type": "array"
          },
          "caseHandler": {
            "$ref": "#/components/schemas/CaseHandlerEmbeddable"
          },
          "caseNumber": {
            "description": "Business identifier for this Accommodation Case.",
            "type": "string"
          },
          "closureReasons": {
            "description": "List of reasons given if the case is not being accommodated.",
            "properties": {
              "_links": {
                "additionalProperties": {
                  "description": "Links to the enum domain and enum instance for the API",
                  "type": "string"
                },
                "description": "Links to the enum domain and enum instance for the API",
                "type": "object"
              },
              "domainId": {
                "description": "The <code>domain id</code> of the enum",
                "format": "int64",
                "type": "integer"
              },
              "domainName": {
                "description": "The enum domain name",
                "type": "string"
              },
              "fullId": {
                "description": "The <code>instance id</code> of the enum",
                "format": "int64",
                "type": "integer"
              },
              "instances": {
                "items": {
                  "$ref": "#/components/schemas/TaEnumInstanceSwagger"
                },
                "type": "array"
              },
              "name": {
                "description": "The enum instance name",
                "type": "string"
              }
            },
            "required": [
              "_links",
              "domainId",
              "domainName",
              "fullId",
              "name"
            ],
            "type": "object"
          },
          "decisionDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "employee": {
            "$ref": "#/components/schemas/EmployeeEmbeddable"
          },
          "id": {
            "description": "Unique identifier for the Accommodation Case.",
            "type": "string"
          },
          "limitations": {
            "description": "List of limitations the employee has that they require an accommodation in their job.",
            "properties": {
              "_links": {
                "additionalProperties": {
                  "description": "Links to the enum domain and enum instance for the API",
                  "type": "string"
                },
                "description": "Links to the enum domain and enum instance for the API",
                "type": "object"
              },
              "domainId": {
                "description": "The <code>domain id</code> of the enum",
                "format": "int64",
                "type": "integer"
              },
              "domainName": {
                "description": "The enum domain name",
                "type": "string"
              },
              "fullId": {
                "description": "The <code>instance id</code> of the enum",
                "format": "int64",
                "type": "integer"
              },
              "instances": {
                "items": {
                  "$ref": "#/components/schemas/TaEnumInstanceSwagger"
                },
                "type": "array"
              },
              "name": {
                "description": "The enum instance name",
                "type": "string"
              }
            },
            "required": [
              "_links",
              "domainId",
              "domainName",
              "fullId",
              "name"
            ],
            "type": "object"
          },
          "notificationCase": {
            "$ref": "#/components/schemas/NotificationCaseEmbeddable"
          },
          "notificationDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "phase": {
            "description": "Current phase in the Interactive Accommodation Process required by the Americans With Disabilities Act (ADA) and configured in the system, for example, 'Assessment'.",
            "type": "string"
          },
          "pregnancyRelated": {
            "$ref": "#/components/schemas/PregnancyRelatedResponse"
          },
          "stage": {
            "description": "Current stage in the Interactive Accommodation Process and configured in the system, for example, 'Evaluate Accommodation Options'.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AccommodationCaseSummary": {
        "properties": {
          "accommodationCaseId": {
            "description": "The Case Number for the accommodation case",
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "accommodationDecision": {
            "description": "The decision made on this accommodation case",
            "type": "string"
          },
          "additionalNotes": {
            "description": "Additional notes for the accommodation.",
            "maxLength": 20000,
            "minLength": 0,
            "type": "string"
          },
          "caseHandler": {
            "description": "The Person handling the accommodation case",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "caseHandlerEmailAddress": {
            "description": "The email address of the accommodation case handler ",
            "maxLength": 40,
            "minLength": 0,
            "type": "string"
          },
          "caseHandlerPhoneNumber": {
            "description": "The phone number of the accommodation case handler ",
            "maxLength": 20,
            "minLength": 0,
            "type": "string"
          },
          "decisionDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "limitations": {
            "description": "List of Limitation for this Accommodation Case.",
            "items": {
              "$ref": "#/components/schemas/LimitationDetail"
            },
            "type": "array"
          },
          "notificationCaseId": {
            "description": "Notification case id, if applicable for the accommodation case",
            "maxLength": 254,
            "minLength": 0,
            "type": "string"
          },
          "notificationDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "notificationReason": {
            "description": "Notification Reason selected during Notification case intake.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "notifiedBy": {
            "description": "The notifier for this accommodation case",
            "type": "string"
          },
          "pregnancyRelated": {
            "description": "The date a decision was made on this accommodation case",
            "type": "string"
          },
          "status": {
            "description": "The Accommodation Case current phase.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "workplaceAccommodationDetails": {
            "description": "List of Accommodations for this accommodation case",
            "items": {
              "$ref": "#/components/schemas/WorkPlaceAccommodationDetail"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "AccommodationCategoryResponse": {
        "description": "Accommodations available are grouped in categories configured in the system, for example, 'Physical workplace modifications or workstation relocation'.(Enum Domain = 6855)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "AccommodationEmbeddable": {
        "description": "List of accommodations contained in the case.",
        "properties": {
          "acceptedDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "accommodationType": {
            "$ref": "#/components/schemas/TaEnumResponseAccommodationType"
          },
          "category": {
            "$ref": "#/components/schemas/AccommodationCategoryResponse"
          },
          "createDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "description": {
            "description": "Additional information when category is 'Other Accommodation' and type is 'Other'.",
            "type": "string"
          },
          "endDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "implementedDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "source": {
            "$ref": "#/components/schemas/AccommodationSourceResponse"
          }
        },
        "type": "object"
      },
      "AccommodationSourceResponse": {
        "description": "Has the accommodation been requested by employee or proposed by employer?. (Enum Domain = 6860)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "AccomodationResponse": {
        "description": "Determine whether the reason requires a workplace accommodation. Enum domain 6785.",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "AccountDetailEmbeddable": {
        "description": "This is the party's bank account number where a payment is made for an EFT.",
        "properties": {
          "accountName": {
            "description": "Name of the account holder",
            "type": "string"
          },
          "accountNo": {
            "description": "The Account number of the personal account",
            "type": "string"
          },
          "accountType": {
            "$ref": "#/components/schemas/AccountTypeResponse"
          },
          "bankCode": {
            "description": "The Bank Code",
            "type": "string"
          },
          "extensions": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "routingNumber": {
            "description": "Sort code of the Bank",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AccountDetails": {
        "description": "Account details",
        "properties": {
          "accountName": {
            "description": "Name of the account holder",
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "accountNo": {
            "description": "The Account number of the personal account",
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "accountType": {
            "description": "Account type of the bank",
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "bankCode": {
            "description": "The Bank Code",
            "maxLength": 4,
            "minLength": 0,
            "type": "string"
          },
          "classExtensionInformation": {
            "description": "An array of the extensionAttribute objects which contain claim extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "routingNumber": {
            "description": "Sort code of the Bank",
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          }
        },
        "required": [
          "accountName",
          "accountNo",
          "routingNumber"
        ],
        "type": "object"
      },
      "AccountTransferInfo": {
        "description": "get bank account transfer info of an employee.",
        "properties": {
          "bankAccountNumber": {
            "description": "The bank account number of an employee",
            "type": "string"
          },
          "bankAccountType": {
            "description": "The bank account type of an employee",
            "type": "string"
          },
          "bankBranchSortCode": {
            "description": "The employee bank branch sort code",
            "type": "string"
          },
          "bankCode": {
            "description": "The bank code of an employee",
            "type": "string"
          },
          "bankInstituteName": {
            "description": "The bank institute name of an employee",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AccountTypeRequest": {
        "description": "The type of account type the party will have, e.g. saving, checking, (<I>domainId</I> = 2130)",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AccountTypeResponse": {
        "description": "The type of account type the party will have, e.g. saving, checking, (<I>domainId</I> = 2130)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "ActualAbsencePeriodResource": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "actualDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "additionalNotes": {
            "description": "Enter any additional notes about the reported actual time.",
            "type": "string"
          },
          "endDateTime": {
            "description": "ISO 8601 date time format",
            "example": "1999-12-31T23:59:59Z",
            "format": "date-time",
            "type": "string"
          },
          "episodePeriodBasis": {
            "$ref": "#/components/schemas/EpisodeDurationBasisResponse"
          },
          "episodePeriodDuration": {
            "description": "Actual time/duration taken by the employee.",
            "format": "int32",
            "type": "integer"
          },
          "episodicLeaveRequestId": {
            "description": "Id of the related absence period.",
            "type": "string"
          },
          "id": {
            "description": "Unique id of the actual time record.",
            "type": "string"
          },
          "managerAccepted": {
            "$ref": "#/components/schemas/ManagerAcceptedResponse"
          },
          "receivedVia": {
            "$ref": "#/components/schemas/ReceivedViaResponse"
          },
          "reportedBy": {
            "$ref": "#/components/schemas/ReportedByResponse"
          },
          "reportedDateTime": {
            "description": "ISO 8601 date time format",
            "example": "1999-12-31T23:59:59Z",
            "format": "date-time",
            "type": "string"
          },
          "reportingPartyName": {
            "description": "The name of party that reported the actual associated to this reporting information.",
            "type": "string"
          },
          "startDateTime": {
            "description": "ISO 8601 date time format",
            "example": "1999-12-31T23:59:59Z",
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/StatusResponse"
          },
          "timeZone": {
            "$ref": "#/components/schemas/TimeZoneResponse"
          },
          "type": {
            "$ref": "#/components/schemas/TypeResponse"
          }
        },
        "type": "object"
      },
      "ActualAbsencePeriodResources": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "elements": {
            "items": {
              "$ref": "#/components/schemas/ActualAbsencePeriodResource"
            },
            "type": "array"
          },
          "hasMoreElements": {
            "description": "<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>",
            "type": "boolean"
          },
          "meta": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "totalSize": {
            "description": "<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ActualEarnings": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "creditDays": {
            "description": "Additional credit amount paid earned between the effective date and end date expressed as a number of days earnings",
            "type": "string"
          },
          "creditEarnings": {
            "$ref": "#/components/schemas/CreditEarningsMoneyResponse"
          },
          "creditReason": {
            "$ref": "#/components/schemas/EarningsCreditReasonResponse"
          },
          "earningsType": {
            "$ref": "#/components/schemas/ActualEarningsTypeResponse"
          },
          "effectiveDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "endDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "extensions": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "grossAmount": {
            "$ref": "#/components/schemas/GrossAmountMoneyResponse"
          },
          "id": {
            "description": "The unique identifier for the actual earnings, composed of classId and indexId",
            "type": "string"
          },
          "infoOnlyAmount": {
            "$ref": "#/components/schemas/InfoOnlyAmountMoneyResponse"
          },
          "netAmount": {
            "$ref": "#/components/schemas/NetAmountMoneyResponse"
          },
          "notes": {
            "description": "Notes related to the earnings period",
            "type": "string"
          },
          "paidDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "salaryAmountBasis": {
            "$ref": "#/components/schemas/SalaryAmountBasisResponse"
          },
          "weeklyAmount": {
            "$ref": "#/components/schemas/WeeklyAmountMoneyResponse"
          }
        },
        "type": "object"
      },
      "ActualEarningsResources": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "elements": {
            "items": {
              "$ref": "#/components/schemas/ActualEarnings"
            },
            "type": "array"
          },
          "hasMoreElements": {
            "description": "<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>",
            "type": "boolean"
          },
          "meta": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "totalSize": {
            "description": "<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ActualEarningsTypeRequest": {
        "description": "Type of actual earnings (domainId = 223)",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ActualEarningsTypeResponse": {
        "description": "Type of actual earnings (domainId = 223)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "AdditionalWithholdAmountMoneyRequest": {
        "description": "The additional withholding amount for tax. The amount recorded here does not affect payments within.",
        "properties": {
          "amountMinorUnits": {
            "description": "The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AdditionalWithholdAmountMoneyResponse": {
        "description": "The additional withholding amount for tax. The amount recorded here does not affect payments within.",
        "properties": {
          "amountMinorUnits": {
            "description": "The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
            "format": "int64",
            "type": "integer"
          },
          "currency": {
            "description": "The currency used in the Money amount",
            "type": "string"
          },
          "scale": {
            "description": "The scale used in the Money amount",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Address": {
        "properties": {
          "addressLine1": {
            "description": "Address Line 1",
            "maxLength": 40,
            "minLength": 0,
            "type": "string"
          },
          "addressLine2": {
            "description": "Address Line 2",
            "maxLength": 40,
            "minLength": 0,
            "type": "string"
          },
          "addressLine3": {
            "description": "Address Line 3",
            "maxLength": 40,
            "minLength": 0,
            "type": "string"
          },
          "addressLine4": {
            "description": "Address Line 4",
            "maxLength": 40,
            "minLength": 0,
            "type": "string"
          },
          "addressLine5": {
            "description": "Address Line 5",
            "maxLength": 40,
            "minLength": 0,
            "type": "string"
          },
          "addressLine6": {
            "description": "Address Line 6",
            "maxLength": 40,
            "minLength": 0,
            "type": "string"
          },
          "addressLine7": {
            "description": "Address Line 7",
            "maxLength": 40,
            "minLength": 0,
            "type": "string"
          },
          "classExtensionInformation": {
            "description": "An array of the extensionAttribute objects which contain claim extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "country": {
            "description": "Country",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "postCode": {
            "description": "International Postcode",
            "maxLength": 40,
            "minLength": 0,
            "type": "string"
          },
          "premiseNo": {
            "description": "This is the premise number",
            "maxLength": 5,
            "minLength": 0,
            "type": "string"
          }
        },
        "required": [
          "country"
        ],
        "type": "object"
      },
      "AllowedGenderResponse": {
        "description": "Gender of the covered person. Enum domain id 6779.",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "ApiBaseErrorResponse": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/ApiError"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ApiError": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "code": {
            "type": "string"
          },
          "detail": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "meta": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "source": {
            "$ref": "#/components/schemas/ErrorSource"
          },
          "status": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApplicabilityStatusResponse": {
        "description": "The applicability status of the leave plan. (EnumDomainId=6815).",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "ApplicableLeavePlanResource": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "applicabilityStatus": {
            "$ref": "#/components/schemas/ApplicabilityStatusResponse"
          },
          "availableTime": {
            "description": "Available balance of the leave plan.",
            "type": "string"
          },
          "eligibilityStatus": {
            "$ref": "#/components/schemas/EligibilityStatusResponse"
          },
          "id": {
            "description": "Reason for the absence.",
            "type": "string"
          },
          "planEntitlement": {
            "description": "Leave plan entitlement.",
            "type": "string"
          },
          "planName": {
            "description": "Short name of the leave plan.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApplicableLeavePlanResources": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "elements": {
            "items": {
              "$ref": "#/components/schemas/ApplicableLeavePlanResource"
            },
            "type": "array"
          },
          "hasMoreElements": {
            "description": "<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>",
            "type": "boolean"
          },
          "meta": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "totalSize": {
            "description": "<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ApprovalOrderDecisions": {
        "properties": {
          "amount": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          },
          "amountUsed": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          },
          "approvalDecisionId": {
            "description": "Approval Order Decision Id",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "decisionReason": {
            "description": "Decision Reason",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "decisionStatus": {
            "description": "Decision Status",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "limitInUnits": {
            "description": "Limit in Units",
            "type": "number"
          },
          "periodEndDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "periodStartDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "ratePerUnit": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          },
          "remainingAmount": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          },
          "remainingUnits": {
            "description": "Remaining Units",
            "type": "number"
          },
          "serviceCode": {
            "description": "Service Code",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "serviceDescription": {
            "description": "Service Description",
            "maxLength": 2000,
            "minLength": 0,
            "type": "string"
          },
          "unitsUsed": {
            "description": "Units used",
            "format": "int64",
            "type": "integer"
          },
          "usageBasis": {
            "description": "Usage Basis",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          }
        },
        "required": [
          "amount",
          "amountUsed",
          "approvalDecisionId",
          "decisionReason",
          "decisionStatus",
          "limitInUnits",
          "periodEndDate",
          "periodStartDate",
          "ratePerUnit",
          "remainingAmount",
          "remainingUnits",
          "serviceCode",
          "serviceDescription",
          "unitsUsed",
          "usageBasis"
        ],
        "type": "object"
      },
      "ApprovalOrders": {
        "properties": {
          "approvalOrderId": {
            "description": "Approval Order Id",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "benefitCaseNumber": {
            "description": "Benefit Number",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "description": {
            "description": "Description",
            "maxLength": 2000,
            "minLength": 0,
            "type": "string"
          },
          "facilityName": {
            "description": "Faclity Name",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "overallMaximumAmount": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          },
          "providerName": {
            "description": "Provider Name",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "referenceNumber": {
            "description": "Reference Number",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "status": {
            "description": "Status",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "statusEffectiveDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "vendorName": {
            "description": "Vendor Name",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          }
        },
        "required": [
          "approvalOrderId",
          "benefitCaseNumber",
          "description",
          "facilityName",
          "overallMaximumAmount",
          "providerName",
          "referenceNumber",
          "status",
          "statusEffectiveDate",
          "vendorName"
        ],
        "type": "object"
      },
      "Base64EncodedFileData": {
        "properties": {
          "base64EncodedFileContents": {
            "description": "The base64 encoded file contents.",
            "type": "string"
          },
          "contentType": {
            "description": "The MIME type of the file.",
            "type": "string"
          },
          "description": {
            "description": "A description of the file.",
            "type": "string"
          },
          "fileExtension": {
            "description": "The extension of the file, without a preceding dot.",
            "type": "string"
          },
          "fileName": {
            "description": "The name of the file, without the extension.",
            "type": "string"
          },
          "fileSizeInBytes": {
            "description": "The size in bytes of the file.",
            "format": "int64",
            "type": "integer"
          },
          "managedReqId": {
            "description": "The Managed Requirement ID to be associated with the file.",
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "base64EncodedFileContents",
          "fileExtension",
          "fileName",
          "fileSizeInBytes"
        ],
        "type": "object"
      },
      "Base64EncodedFileDetails": {
        "properties": {
          "base64EncodedFileContents": {
            "description": "The base64 encoded file contents.",
            "type": "string"
          },
          "contentType": {
            "description": "The MIME type of the file.",
            "type": "string"
          },
          "description": {
            "description": "A description of the file.",
            "type": "string"
          },
          "fileExtension": {
            "description": "The extension of the file, without a preceding dot.",
            "type": "string"
          },
          "fileName": {
            "description": "The name of the file, without the extension.",
            "type": "string"
          }
        },
        "required": [
          "base64EncodedFileContents",
          "fileExtension",
          "fileName"
        ],
        "type": "object"
      },
      "BenefitSummary": {
        "description": "The summary of the disability benefit.",
        "properties": {
          "benefitCaseType": {
            "description": "The name by which the benefit type is referred.",
            "type": "string"
          },
          "benefitHandler": {
            "description": "The person that is handling the benefit.",
            "type": "string"
          },
          "benefitHandlerEmailAddress": {
            "description": "The email address of the benefit handler.",
            "type": "string"
          },
          "benefitHandlerPhoneNo": {
            "description": "The phone number of the benefit handler.",
            "type": "string"
          },
          "benefitId": {
            "description": "The case number of the benefit.",
            "type": "string"
          },
          "benefitIncurredDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "benefitRightCategory": {
            "description": "Information about the category of the benefit right.",
            "type": "string"
          },
          "creationDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "customerName": {
            "description": "The full name of the customer.",
            "type": "string"
          },
          "description": {
            "description": "Description for this case as entered by the user.",
            "type": "string"
          },
          "extensionAttributes": {
            "description": "Extra attributes from extension if any.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "policyReferences": {
            "description": "The reference(s) to the policy from within the relevant admin system.",
            "type": "string"
          },
          "stageName": {
            "description": "The current stage of benefit claim case.",
            "type": "string"
          },
          "status": {
            "description": "This is the stage in the process that the case is currently at.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "BulkCreateActualAbsencePeriodCommand": {
        "properties": {
          "elements": {
            "items": {
              "$ref": "#/components/schemas/CreateActualAbsencePeriodCommand"
            },
            "type": "array"
          }
        },
        "required": [
          "elements"
        ],
        "type": "object"
      },
      "BulkCreateCommandCreateActualAbsencePeriodCommand": {
        "properties": {
          "elements": {
            "items": {
              "$ref": "#/components/schemas/CreateActualAbsencePeriodCommand"
            },
            "type": "array"
          }
        },
        "required": [
          "elements"
        ],
        "type": "object"
      },
      "CaseHandlerEmbeddable": {
        "description": "Person who has been assigned to manage the Accommodation Case.",
        "properties": {
          "emailAddress": {
            "description": "Email address of the case handler.",
            "type": "string"
          },
          "id": {
            "description": "ID used to uniquely identify case handler.",
            "type": "string"
          },
          "name": {
            "description": "Full name of the case handler.",
            "type": "string"
          },
          "phoneNumber": {
            "description": "Phone number of the case handler.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CaseParticipantsSummary": {
        "description": "Participant Summary Details.",
        "properties": {
          "endDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "participantId": {
            "description": "Id of the participant",
            "format": "int64",
            "type": "integer"
          },
          "partyName": {
            "description": "The name of the party with the participant role on the case",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "referenceNo": {
            "description": "The reference number of the party with the participant role on the case",
            "maxLength": 40,
            "minLength": 0,
            "type": "string"
          },
          "rolename": {
            "description": "The role name assigned to the participant on the case",
            "maxLength": 10,
            "minLength": 0,
            "type": "string"
          },
          "sourceSystem": {
            "description": "The source system of the party with the participant role on the case",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "startDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CaseStatusHistory": {
        "properties": {
          "dateStatusDeparted": {
            "description": "Formatted date when benefit's underlying process moved out of a step with this phase.",
            "type": "string"
          },
          "dateStatusEntered": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "status": {
            "description": "The stage in the process that the case was at.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CategoryResponse": {
        "description": "The Category for the absence reason. Enum Domain id 6793.",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "CertificationPeriodDetails": {
        "description": "The certification period details of the disability benefit.",
        "properties": {
          "consultationDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "duration": {
            "description": "The number of days within the certification period.",
            "format": "int64",
            "type": "integer"
          },
          "insurerReceivedDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "notes": {
            "description": "The notes about the certification period.",
            "type": "string"
          },
          "periodFromDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "periodToDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "periodType": {
            "description": "The period type of the certification period.",
            "type": "string"
          },
          "status": {
            "description": "The status of the certification period.",
            "type": "string"
          },
          "statusReason": {
            "description": " The selected reason for the status of a certification period.",
            "type": "string"
          },
          "totalPeriodDays": {
            "description": "The total days of a certification period for a specific period type.\r\nThis is calculated based on the event FINEOS.claims.benefits.calcDaysInPeriodEvent",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ChangeRequestPeriod": {
        "description": "List of leave period changes requested.",
        "properties": {
          "endDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "startDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChangeRequestPeriodCommand": {
        "description": "List of leave period changes requested.",
        "properties": {
          "endDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "startDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChequeDetailEmbeddable": {
        "properties": {
          "nameToPrintOnCheck": {
            "description": "This is the name that displays on the payee's check. For example, the payee's name, or if there is a nominated payee, In the Estate of followed by the nominated payee's name.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChequeDetails": {
        "description": "Cheque details",
        "properties": {
          "nameToPrintOnCheck": {
            "description": "The name that should be printed on the check",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChequePaymentInfo": {
        "description": "get cheque payment info of an employee.",
        "properties": {
          "chequeNumber": {
            "description": "The cheque number of an employee",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ClaimMedicareLevyExemptionResponse": {
        "description": "Indicates if claiming for full or half medicare exemption. Sample values are 'Full', 'Half'",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "ClaimOccupation": {
        "properties": {
          "additionalEmploymentCategory": {
            "description": "The alternate employment category.",
            "type": "string"
          },
          "dateJobBegan": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "dateJobEnded": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "daysWorkedPerWeek": {
            "description": "The number of days worked per week.",
            "type": "number"
          },
          "employeeId": {
            "description": "The id of an employee in respect of its employer.",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "employer": {
            "description": "The name of the employer.",
            "type": "string"
          },
          "employmentCategory": {
            "description": "The employment category.",
            "type": "string"
          },
          "employmentLocation": {
            "description": "The employment location code.",
            "type": "string"
          },
          "employmentStatus": {
            "description": "The employment status.",
            "type": "string"
          },
          "employmentTitle": {
            "description": "The employment title.",
            "type": "string"
          },
          "endEmploymentReason": {
            "description": "The code for occupation ending.",
            "type": "string"
          },
          "endPosReason": {
            "description": "The reason for job ending.",
            "type": "string"
          },
          "extensionAttributes": {
            "description": "The extension attributes.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "hoursWorkedPerWeek": {
            "description": "The number of hours worked per week.",
            "type": "number"
          },
          "jobDesc": {
            "description": "The job description.",
            "type": "string"
          },
          "jobStrenuous": {
            "description": "The job strenuous.",
            "type": "string"
          },
          "jobTitle": {
            "description": "The job title.",
            "type": "string"
          },
          "primary": {
            "description": "Is occupation the primary one?",
            "type": "boolean"
          },
          "remarks": {
            "description": "The occupation remarks.",
            "type": "string"
          },
          "selfEmployed": {
            "description": "Is occupation considered self-employed?",
            "type": "boolean"
          },
          "workPatternBasis": {
            "description": "The work pattern basis.",
            "type": "string"
          },
          "workScheduleDescription": {
            "description": "The work schedule description.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ClaimSummary": {
        "properties": {
          "caseComplexity": {
            "description": "Case complexity on Claim",
            "type": "string"
          },
          "claimHandler": {
            "description": "The Person that is handling the claim.",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "claimHandlerEmailAddress": {
            "description": "The email address of the claim handler.",
            "maxLength": 40,
            "minLength": 0,
            "type": "string"
          },
          "claimHandlerPhoneNo": {
            "description": "The phone number of the claim handler.",
            "maxLength": 20,
            "minLength": 0,
            "type": "string"
          },
          "claimId": {
            "description": "The claim number of the claim",
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "claimType": {
            "description": "The name by which the claim type is referred.",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "classExtensionInformation": {
            "description": "An array of the extensionAttribute objects which contain extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "creationDate": {
            "description": "ISO 8601 date time format",
            "example": "1999-12-31T23:59:59Z",
            "format": "date-time",
            "type": "string"
          },
          "customerName": {
            "description": "The customer name of the claim",
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "description": {
            "description": "Description for this case as entered by the user.",
            "maxLength": 2000,
            "minLength": 0,
            "type": "string"
          },
          "effectiveDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "notificationCaseId": {
            "description": "The notification case number of the claim case if applicable.",
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "notificationDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "policyReferences": {
            "description": "The reference(s) to the policy from within the relevant admin system.",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "stageName": {
            "description": "The current stage of claim case.",
            "type": "string"
          },
          "status": {
            "description": "This is the stage in the process that the case is currently at.",
            "maxLength": 10,
            "minLength": 0,
            "type": "string"
          }
        },
        "required": [
          "claimId",
          "claimType"
        ],
        "type": "object"
      },
      "ClosureReasonsResponse": {
        "description": "List of reasons given if the case is not being accommodated.",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "CompoundQuestion": {
        "properties": {
          "questions": {
            "items": {
              "$ref": "#/components/schemas/QuestionAttribute"
            },
            "type": "array"
          },
          "value": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "CompoundQuestionAttribute": {
        "description": "It will used define the metadata of the compound question.",
        "properties": {
          "caption": {
            "description": "The descriptive heading or title of a question.",
            "type": "string"
          },
          "compoundQuestion": {
            "items": {
              "$ref": "#/components/schemas/CompoundQuestion"
            },
            "type": "array"
          },
          "fieldName": {
            "description": "The attribute Name of the question.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ContactDetails": {
        "properties": {
          "emailAddresses": {
            "description": "Email Address of the customer.",
            "items": {
              "$ref": "#/components/schemas/EmailAddress"
            },
            "maxItems": 100,
            "minItems": 0,
            "type": "array"
          },
          "phoneNumbers": {
            "description": "An array of objects which contain customer phone number details.",
            "items": {
              "$ref": "#/components/schemas/PhoneNumber"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CountryRequest": {
        "description": "Country for the address e.g. Ireland, USA (<I>domainId</I> = 21)",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CountryResponse": {
        "description": "Country for the address e.g. Ireland, USA (<I>domainId</I> = 21)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "CoveredPersonResponse": {
        "description": "Covered person type i.e Family or employee. Enum Domain id 6780.",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "CreateAUTaxCodeDetailsCommand": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateRegionTaxCodeDetailsCommand"
          },
          {
            "properties": {
              "claimVaryOffset": {
                "description": "Indicates if there is a withholding variation.",
                "type": "boolean"
              },
              "combinedIncome": {
                "description": "Indicates if combinedIncome is greater than a set amount.",
                "type": "boolean"
              },
              "levyExemption": {
                "$ref": "#/components/schemas/LevyExemptionRequest"
              },
              "levyReduction": {
                "description": "Indicates if claiming medicare levy reduction..",
                "type": "boolean"
              },
              "maritalRelationshipStatus": {
                "$ref": "#/components/schemas/MaritalRelationshipStatusRequest"
              },
              "medicareLevySurcharge": {
                "$ref": "#/components/schemas/MedicareLevySurchargeRequest"
              },
              "noDependents": {
                "description": "Number of dependents claimed.",
                "format": "int32",
                "type": "integer"
              },
              "qualifyMedicareLevyExemption": {
                "description": "Indicates if qualifies for medicare levy exemption.",
                "type": "boolean"
              },
              "residentialStatus": {
                "$ref": "#/components/schemas/ResidentialStatusRequest"
              },
              "seniorsPensionersOffset": {
                "description": "Indicates if Claim or Vary Seniors Pensioners Offset.",
                "type": "boolean"
              },
              "spouse": {
                "description": "Indicates if spouse has claimed.",
                "type": "boolean"
              },
              "studyAndTrainingLoan": {
                "description": "Indicates if has a study/training loan.",
                "type": "boolean"
              },
              "taxFreeThresholdClaimed": {
                "description": "Indicates if the tax free threshold claimed.",
                "type": "boolean"
              },
              "taxOffsets": {
                "$ref": "#/components/schemas/TaxOffsetsMoneyRequest"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "CreateAbsencePeriodTypeRequest": {
        "description": "Type of the actual time taken by the employee on the episodic leave request. It is an optional attribute, if not provided then the default Time Off will be populated. Absence Period Type Enum Domain (<I>domainId</I> = 6811).",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CreateAccountDetailCommand": {
        "description": "Account Detail Request",
        "properties": {
          "accountName": {
            "description": "Name of the account holder",
            "maxLength": 256,
            "type": "string"
          },
          "accountNo": {
            "description": "The Account number of the personal account",
            "maxLength": 256,
            "type": "string"
          },
          "accountType": {
            "$ref": "#/components/schemas/AccountTypeRequest"
          },
          "bankCode": {
            "description": "The Bank Code",
            "maxLength": 4,
            "type": "string"
          },
          "extensions": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "routingNumber": {
            "description": "Sort code of the Bank",
            "maxLength": 256,
            "type": "string"
          }
        },
        "required": [
          "accountName",
          "accountNo",
          "routingNumber"
        ],
        "type": "object"
      },
      "CreateActualAbsencePeriodCommand": {
        "properties": {
          "actualDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "additionalNotes": {
            "description": "Enter any additional notes about the reported actual time.",
            "maxLength": 250,
            "minLength": 0,
            "type": "string"
          },
          "endDateTime": {
            "description": "ISO 8601 date time format",
            "example": "1999-12-31T23:59:59Z",
            "format": "date-time",
            "type": "string"
          },
          "episodePeriodBasis": {
            "$ref": "#/components/schemas/EpisodePeriodDurationBasisRequest"
          },
          "episodePeriodDuration": {
            "description": "Actual time/duration taken by the employee.",
            "format": "int32",
            "minimum": 1,
            "type": "integer"
          },
          "reportedDateTime": {
            "description": "ISO 8601 date time format",
            "example": "1999-12-31T23:59:59Z",
            "format": "date-time",
            "type": "string"
          },
          "startDateTime": {
            "description": "ISO 8601 date time format",
            "example": "1999-12-31T23:59:59Z",
            "format": "date-time",
            "type": "string"
          },
          "timeZone": {
            "$ref": "#/components/schemas/TimeZoneRequest"
          },
          "type": {
            "$ref": "#/components/schemas/CreateAbsencePeriodTypeRequest"
          }
        },
        "required": [
          "actualDate",
          "episodePeriodBasis",
          "episodePeriodDuration"
        ],
        "type": "object"
      },
      "CreateActualEarningsCommand": {
        "properties": {
          "creditDays": {
            "description": "Additional credit amount paid earned between the effective date and end date expressed as a number of days earnings",
            "type": "string"
          },
          "creditEarnings": {
            "$ref": "#/components/schemas/CreditEarningsMoneyRequest"
          },
          "creditReason": {
            "$ref": "#/components/schemas/EarningsCreditReasonRequest"
          },
          "earningsType": {
            "$ref": "#/components/schemas/ActualEarningsTypeRequest"
          },
          "effectiveDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "endDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "extensions": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "grossAmount": {
            "$ref": "#/components/schemas/GrossAmountMoneyRequest"
          },
          "infoOnlyAmount": {
            "$ref": "#/components/schemas/InfoOnlyAmountMoneyRequest"
          },
          "netAmount": {
            "$ref": "#/components/schemas/NetAmountMoneyRequest"
          },
          "notes": {
            "description": "Notes related to the earnings period",
            "maximum": 2000,
            "type": "string"
          },
          "paidDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "salaryAmountBasis": {
            "$ref": "#/components/schemas/SalaryAmountBasisRequest"
          }
        },
        "required": [
          "earningsType"
        ],
        "type": "object"
      },
      "CreateAddressCommand": {
        "description": "Address Command",
        "properties": {
          "addressLine1": {
            "description": "First line of an address.",
            "maxLength": 40,
            "type": "string"
          },
          "addressLine2": {
            "description": "Second line of an address.",
            "maxLength": 40,
            "type": "string"
          },
          "addressLine3": {
            "description": "Third line of an address.",
            "maxLength": 40,
            "type": "string"
          },
          "addressLine4": {
            "description": "Fourth line of an address.",
            "maxLength": 40,
            "type": "string"
          },
          "addressLine5": {
            "description": "Fifth line of an address.",
            "maxLength": 40,
            "type": "string"
          },
          "addressLine6": {
            "description": "Sixth line of an address.",
            "maxLength": 40,
            "type": "string"
          },
          "addressLine7": {
            "description": "Seventh line of an address.",
            "maxLength": 40,
            "type": "string"
          },
          "country": {
            "$ref": "#/components/schemas/CountryRequest"
          },
          "extensions": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "extraAustralianFields": {
            "$ref": "#/components/schemas/CreateAustralianAddressCommand"
          },
          "postCode": {
            "description": "International Postcode.",
            "maxLength": 40,
            "type": "string"
          },
          "premiseNo": {
            "description": "The premise number i.e. the street number.",
            "maxLength": 50,
            "type": "string"
          }
        },
        "required": [
          "country"
        ],
        "type": "object"
      },
      "CreateAustralianAddressCommand": {
        "properties": {
          "buildingName1": {
            "description": "The name of the building.",
            "maxLength": 30,
            "type": "string"
          },
          "buildingName2": {
            "description": "The name of the building continued.",
            "maxLength": 30,
            "type": "string"
          },
          "dpId": {
            "description": "Referred to as DPID this is an 8-digit Australian post address identifier which uniquely identifies each delivery point to which Australia Post delivers mail. ",
            "format": "int32",
            "type": "integer"
          },
          "extensions": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "floorLevelNumber": {
            "description": "The floorLevelNumber must not be more than {max} characters",
            "maxLength": 2,
            "type": "string"
          },
          "floorLevelType": {
            "$ref": "#/components/schemas/AUFloorLevelTypesRequest"
          },
          "lotNumber": {
            "description": "The lot number.",
            "maxLength": 6,
            "type": "string"
          },
          "postalNumber": {
            "description": "The postal number. ",
            "maxLength": 6,
            "type": "string"
          },
          "postalNumberPrefix": {
            "description": "This refers to the non-numeric portion preceding the Postal Number. EXAMPLE : PO Box B20 where B is the prefix. ",
            "maxLength": 3,
            "type": "string"
          },
          "postalNumberSuffix": {
            "description": "This refers to the non-numeric portion following the Postal Number. EXAMPLE : PO Box 20A where A is the suffix.",
            "maxLength": 3,
            "type": "string"
          },
          "postalType": {
            "$ref": "#/components/schemas/AUPostalTypesRequest"
          },
          "premiseNoSuffix": {
            "description": "The suffix to apply to the number of the premise.",
            "maxLength": 1,
            "type": "string"
          },
          "premiseNoTo": {
            "description": "The high number in a range for the premise. This is used when an address consists of a range of numbers as in 8-10 Lower Pembroke Street where the value 10 would be stored in this field. ",
            "format": "int32",
            "type": "integer"
          },
          "premiseNoToSuffix": {
            "description": "The suffix to apply to the number to of the premise. ",
            "maxLength": 1,
            "type": "string"
          },
          "streetSuffix": {
            "$ref": "#/components/schemas/AUStreetSuffixesRequest"
          }
        },
        "required": [
          "floorLevelType",
          "postalType",
          "streetSuffix"
        ],
        "type": "object"
      },
      "CreateChequeDetailCommand": {
        "description": "Cheque Detail",
        "properties": {
          "nameToPrintOnCheck": {
            "description": "This is the name that displays on the payee's check. For example, the payee's name, or if there is a nominated payee, In the Estate of followed by the nominated payee's name.",
            "maxLength": 100,
            "type": "string"
          }
        },
        "type": "object"
      },
      "CreateLeavePeriodsChangeRequestCommand": {
        "properties": {
          "additionalNotes": {
            "description": "Extra information about the leave period change request in free text format.",
            "type": "string"
          },
          "changeRequestPeriods": {
            "description": "List of leave period changes requested.",
            "items": {
              "$ref": "#/components/schemas/ChangeRequestPeriodCommand"
            },
            "type": "array"
          },
          "reason": {
            "$ref": "#/components/schemas/ReasonRequest"
          }
        },
        "required": [
          "changeRequestPeriods",
          "reason"
        ],
        "type": "object"
      },
      "CreateNZTaxCodeDetailsCommand": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateRegionTaxCodeDetailsCommand"
          },
          {
            "properties": {
              "extraPayTaxRate": {
                "$ref": "#/components/schemas/ExtraPayTaxRateRequest"
              },
              "irTaxCodeChange": {
                "description": "The tax office may direct the insurer to use a different tax code than the client declared one. This field indicates where the tax office has ordered a tax code change.",
                "type": "boolean"
              },
              "isGSTRegistered": {
                "description": "Denotes if a payee is liable for Goods and Services Tax (GST)",
                "type": "boolean"
              },
              "kiwiSaverStatus": {
                "$ref": "#/components/schemas/KiwiSaverStatusRequest"
              },
              "studLoanThresholdApplies": {
                "description": "Denotes if a Student Loan Repayment Threshold Applies",
                "type": "boolean"
              },
              "taxCertNumber": {
                "description": "When a payee (client usually) has an individual tax agreement with IRD, i.e. to use a non-standard tax rate, this is the reference number of the tax certificate issued by IRD.",
                "type": "string"
              },
              "taxCodeRateNonStdStudLoan": {
                "description": "Indicates what rate to use for student loan for a non-standard tax code.",
                "type": "string"
              },
              "withholdingTaxStatus": {
                "$ref": "#/components/schemas/WithholdingTaxStatusRequest"
              },
              "zeroStudLoanTaxCodeRate": {
                "description": "Indicates if a rate of zero is entered for the TaxCodeRateNonStdStudLoan field that this was intentional.",
                "type": "boolean"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "CreateOccupationCommand": {
        "properties": {
          "additionalEmploymentCategory": {
            "$ref": "#/components/schemas/OCOccupationAltEmploymentCatRequest"
          },
          "codeId": {
            "description": "Occupation Industry Classification Code id.",
            "type": "string"
          },
          "codeName": {
            "description": "The name(s) associated with the specific Occupation Industry Classification Code id.",
            "type": "string"
          },
          "dateJobBegan": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "dateJobEnded": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "daysWorkedPerWeek": {
            "description": "The number of days worked per week, which can be specified with partial day.",
            "type": "string"
          },
          "employeeId": {
            "description": "Reference identifier of an employee in respect of its employer. ",
            "type": "string"
          },
          "employer": {
            "description": "This is the name of the Employer Party.",
            "type": "string"
          },
          "employmentCategory": {
            "$ref": "#/components/schemas/EmploymentCategoryRequest"
          },
          "employmentLocation": {
            "$ref": "#/components/schemas/OCOccupationEmpLocationCodeRequest"
          },
          "employmentStatus": {
            "$ref": "#/components/schemas/OCOccupationEmploymentStatusRequest"
          },
          "employmentTitle": {
            "$ref": "#/components/schemas/OCOccupationEmploymentTitleRequest"
          },
          "endEmploymentReason": {
            "$ref": "#/components/schemas/OCOccupationEndPositionCodeRequest"
          },
          "endPosReason": {
            "description": "The reason for job ending.",
            "type": "string"
          },
          "extensions": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "hoursWorkedPerWeek": {
            "type": "string"
          },
          "jobDesc": {
            "description": "Job description.",
            "type": "string"
          },
          "jobStrenuous": {
            "$ref": "#/components/schemas/OCOccupationJobStrenuousnessRequest"
          },
          "jobTitle": {
            "description": "Job title.",
            "type": "string"
          },
          "overrideDaysWorkedPerWeek": {
            "description": "Is override days worked per week true or false?",
            "type": "boolean"
          },
          "primary": {
            "description": "Indicates if the Occupation record is the primary occupation or not.",
            "type": "boolean"
          },
          "remarks": {
            "description": "Remarks about the Occupation.",
            "type": "string"
          },
          "requestOnlyAttributes": {
            "additionalProperties": {
              "description": "Can contain only: copyEmployerFromOccupationId - The ID of an occupation that exists on a case where the case has the same root case as the case against which the occupation is being added, and when provided means that the Employer rel from the existing occupation is copied to the new one.",
              "type": "string"
            },
            "description": "Can contain only: copyEmployerFromOccupationId - The ID of an occupation that exists on a case where the case has the same root case as the case against which the occupation is being added, and when provided means that the Employer rel from the existing occupation is copied to the new one.",
            "type": "object"
          },
          "selfEmployed": {
            "description": "Indicates whether the person linked to the occupation is self-employed.",
            "type": "boolean"
          },
          "workScheduleDescription": {
            "description": "Work schedule description.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CreatePaymentPreferenceCommand": {
        "properties": {
          "accountDetail": {
            "$ref": "#/components/schemas/CreateAccountDetailCommand"
          },
          "address": {
            "$ref": "#/components/schemas/CreateAddressCommand"
          },
          "chequeDetail": {
            "$ref": "#/components/schemas/CreateChequeDetailCommand"
          },
          "description": {
            "description": "Payment preference description.",
            "maxLength": 150,
            "type": "string"
          },
          "effectiveFromDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "effectiveToDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "extensions": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "isDefault": {
            "type": "boolean"
          },
          "overridePostalAddress": {
            "description": "This indicator will be used to override the address or use the customer current address. If true then override the address, else use the customer default address.",
            "type": "boolean"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/PaymentMethodRequest"
          }
        },
        "required": [
          "paymentMethod"
        ],
        "type": "object"
      },
      "CreateRegionTaxCodeDetailsCommand": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/CreateAUTaxCodeDetailsCommand"
          },
          {
            "$ref": "#/components/schemas/CreateNZTaxCodeDetailsCommand"
          }
        ],
        "type": "object"
      },
      "CreateTaxCodeRecordCommand": {
        "properties": {
          "additionalWithholdAmount": {
            "$ref": "#/components/schemas/AdditionalWithholdAmountMoneyRequest"
          },
          "dependentDeductions": {
            "$ref": "#/components/schemas/DependentDeductionsMoneyRequest"
          },
          "effectiveDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "endDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "extensions": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "filingMaritalStatus": {
            "$ref": "#/components/schemas/FilingMaritalStatusRequest"
          },
          "nonStdDeductions": {
            "$ref": "#/components/schemas/NonStdDeductionsMoneyRequest"
          },
          "numberExemptions": {
            "description": "The tax exemptions e.g. number of exemptions accumulated.",
            "format": "int64",
            "type": "integer"
          },
          "otherIncome": {
            "$ref": "#/components/schemas/OtherIncomeMoneyRequest"
          },
          "percentageRate": {
            "description": "A percentage rate for tax record. The percentageRate must be of precision 10,2.",
            "type": "string"
          },
          "regionTaxCodeDetails": {
            "$ref": "#/components/schemas/CreateRegionTaxCodeDetailsCommand"
          },
          "taxCode": {
            "$ref": "#/components/schemas/TaxCodeRequest"
          },
          "taxType": {
            "$ref": "#/components/schemas/TaxTypeRequest"
          },
          "version": {
            "$ref": "#/components/schemas/VersionRequest"
          }
        },
        "required": [
          "taxCode",
          "taxType",
          "version"
        ],
        "type": "object"
      },
      "CreditEarningsMoneyRequest": {
        "description": "Additional credit amount earned between the effective date and end date",
        "properties": {
          "amountMinorUnits": {
            "description": "The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CreditEarningsMoneyResponse": {
        "description": "Additional credit amount earned between the effective date and end date",
        "properties": {
          "amountMinorUnits": {
            "description": "The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
            "format": "int64",
            "type": "integer"
          },
          "currency": {
            "description": "The currency used in the Money amount",
            "type": "string"
          },
          "scale": {
            "description": "The scale used in the Money amount",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "CurrentPhaseResponse": {
        "description": "The status of the payment preference (EnumDomainId = 255).",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "Customer": {
        "properties": {
          "classExtensionInformation": {
            "description": "An array of the extensionAttribute objects which contain customer (OCPerson) extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "customerAddress": {
            "$ref": "#/components/schemas/CustomerAddress"
          },
          "dateOfBirth": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "firstName": {
            "description": "Person's first name.",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "gender": {
            "description": "The person's gender.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "idNumber": {
            "description": "ID number of the claimant.",
            "maxLength": 10,
            "minLength": 0,
            "type": "string"
          },
          "identificationNumberType": {
            "description": "The type of identification number the party will have.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "initals": {
            "type": "string",
            "writeOnly": true
          },
          "initials": {
            "description": "Person's middle initials.",
            "maxLength": 10,
            "minLength": 0,
            "type": "string"
          },
          "lastName": {
            "description": "Person's last name.",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "maritalStatus": {
            "description": "Person's marital status - single / married / etc.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "nationality": {
            "description": "Person's nationality.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "needsInterpretor": {
            "description": "Indicates if the customer needs an interpreter.",
            "type": "boolean"
          },
          "partyType": {
            "type": "string"
          },
          "placeOfBirth": {
            "description": "Place of birth.",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "secondName": {
            "description": "Person's second name.",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "securedClient": {
            "description": "Secured client flag.",
            "type": "boolean"
          },
          "staff": {
            "description": "Staff flag.",
            "type": "boolean"
          },
          "title": {
            "description": "Person's chosen title e.g. Mr / Mrs etc.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          }
        },
        "required": [
          "dateOfBirth",
          "firstName",
          "lastName"
        ],
        "type": "object"
      },
      "CustomerAddress": {
        "description": "The reason why the payment preference has this status",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "australianAddress": {
            "$ref": "#/components/schemas/ExtendedAddress"
          }
        },
        "required": [
          "address"
        ],
        "type": "object"
      },
      "CustomerAddressDetails": {
        "description": "The person's address.",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "australianAddress": {
            "$ref": "#/components/schemas/ExtendedAddress"
          },
          "extraRequestAttributes": {
            "$ref": "#/components/schemas/ExtraRequestAttributes"
          }
        },
        "required": [
          "address"
        ],
        "type": "object"
      },
      "CustomerDetails": {
        "properties": {
          "classExtensionInformation": {
            "description": "An array of the extensionAttribute objects which contain customer (OCPerson) extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "customerAddress": {
            "$ref": "#/components/schemas/CustomerAddressDetails"
          },
          "dateOfBirth": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "firstName": {
            "description": "Person's first name.",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "gender": {
            "description": "The person's gender.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "idNumber": {
            "description": "ID number of the claimant.",
            "maxLength": 10,
            "minLength": 0,
            "type": "string"
          },
          "identificationNumberType": {
            "description": "The type of identification number the party will have.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "initals": {
            "type": "string",
            "writeOnly": true
          },
          "initials": {
            "description": "Person's middle initials.",
            "maxLength": 10,
            "minLength": 0,
            "type": "string"
          },
          "lastName": {
            "description": "Person's last name.",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "maritalStatus": {
            "description": "Person's marital status - single / married / etc.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "nationality": {
            "description": "Person's nationality.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "needsInterpretor": {
            "description": "Indicates if the customer needs an interpreter.",
            "type": "boolean"
          },
          "partyType": {
            "type": "string"
          },
          "placeOfBirth": {
            "description": "Place of birth.",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "secondName": {
            "description": "Person's second name.",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "securedClient": {
            "description": "Secured client flag.",
            "type": "boolean"
          },
          "staff": {
            "description": "Staff flag.",
            "type": "boolean"
          },
          "title": {
            "description": "Person's chosen title e.g. Mr / Mrs etc.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          }
        },
        "required": [
          "dateOfBirth",
          "firstName",
          "lastName"
        ],
        "type": "object"
      },
      "CustomerSummaryDetails": {
        "properties": {
          "customerNo": {
            "description": "The Customer number",
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "dateOfBirth": {
            "description": "The Date Of Birth of the Customer",
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "firstName": {
            "description": "The First Name of the Customer",
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "lastName": {
            "description": "The Last Name of the Customer",
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          }
        },
        "required": [
          "customerNo",
          "dateOfBirth",
          "firstName",
          "lastName"
        ],
        "type": "object"
      },
      "DayOfWeekResponse": {
        "description": "Day for which the hours and minutes are entered (Monday, Tuesday, etc)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "DayPatternEmbeddable": {
        "description": "Day Patterns associated to the work pattern",
        "properties": {
          "dayOfWeek": {
            "$ref": "#/components/schemas/DayOfWeekResponse"
          },
          "hours": {
            "description": "Hours worked on that particular day",
            "format": "int32",
            "type": "integer"
          },
          "id": {
            "description": "The unique identifier for the day pattern, composed of classId and indexId",
            "type": "string"
          },
          "minutes": {
            "description": "Minutes worked on that particular day",
            "format": "int32",
            "type": "integer"
          },
          "weekNumber": {
            "description": "The week number in a particular month (1,2,3,4)",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Decision": {
        "description": "List of Period Decisions for the given absence or employee",
        "properties": {
          "absence": {
            "$ref": "#/components/schemas/Absence"
          },
          "employee": {
            "$ref": "#/components/schemas/Employee"
          },
          "period": {
            "$ref": "#/components/schemas/Period"
          }
        },
        "type": "object"
      },
      "DependentDeductionsMoneyRequest": {
        "description": "Specifies the amount for dependent deductions.",
        "properties": {
          "amountMinorUnits": {
            "description": "The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DependentDeductionsMoneyResponse": {
        "description": "Specifies the amount for dependent deductions.",
        "properties": {
          "amountMinorUnits": {
            "description": "The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
            "format": "int64",
            "type": "integer"
          },
          "currency": {
            "description": "The currency used in the Money amount",
            "type": "string"
          },
          "scale": {
            "description": "The scale used in the Money amount",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "DiagnosisDetails": {
        "properties": {
          "causeGrouping": {
            "description": "The name of the medical code group in which this medical code is contained.",
            "maxLength": 500,
            "minLength": 0,
            "type": "string"
          },
          "description": {
            "description": "A description of the medical code.",
            "maxLength": 500,
            "minLength": 0,
            "type": "string"
          },
          "diagnosisDetailsId": {
            "description": "Business Entity OID",
            "example": "PE-00012-0000001234",
            "format": "string",
            "maxLength": 10,
            "minLength": 0,
            "type": "string"
          },
          "firstPrimaryCode": {
            "description": "Indicates whether or not this is the first medical code identified with the primary level indicator.",
            "type": "boolean"
          },
          "groupType": {
            "description": "Specifies the type of the medical code group.",
            "type": "string"
          },
          "levelIndicator": {
            "description": "The injury code level e.g. primary or secondary assigned to the injury in the context of the claim.",
            "type": "string"
          },
          "medicalCode": {
            "description": "The code ID that specifies a particular diagnosis.",
            "maxLength": 20,
            "minLength": 0,
            "type": "string"
          }
        },
        "type": "object"
      },
      "DisabilityBenefit": {
        "description": "The details of the disability benefit.",
        "properties": {
          "accidentBasisOfMaxBenefitPeriod": {
            "description": "Basis for the maximum period for an accident.",
            "type": "string"
          },
          "accidentEliminationPeriod": {
            "description": "Elimination Period units for accident.",
            "format": "int64",
            "type": "integer"
          },
          "accidentMaxBenefitPeriod": {
            "description": "Number of units in the maximum period for an accident. The maximum length of the period to be paid if the customer remains disabled.",
            "format": "int64",
            "type": "integer"
          },
          "administrationType": {
            "description": "Specify the AdministrationType for the Funding Arrangement.",
            "type": "string"
          },
          "adviceToPayOverride": {
            "description": "The advice provided by the insurer with regard to an individual benefit can be overridden by the employer, either regarding the decision (to pay or not to pay) or the calculated amount.",
            "type": "string"
          },
          "amountType": {
            "description": "Indicates the basis upon which the benefit is calculated, examples might be fixed amount basis, salary percentage basis or tiered basis.",
            "type": "string"
          },
          "approvedThroughDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "basisOfAccidentEliminationPeriod": {
            "description": "Basis for elimination period for accident.",
            "type": "string"
          },
          "basisOfEliminationPeriod": {
            "description": "Basis for elimination period.",
            "type": "string"
          },
          "basisOfLateEnrollmentPeriod": {
            "description": "Basis of the period after enrolment date when customer has to wait for coverage to become eligible (i.e. day, week month or year).",
            "type": "string"
          },
          "basisOfMaxBenefitPeriod": {
            "description": "Basis of the maximum benefit period. The maximum length of the period to be paid if the claimant remains disabled.",
            "type": "string"
          },
          "basisOfMinBenefitPeriod": {
            "description": "Basis of the minimum benefit period. The minimum length of the period to be paid if the claimant remains disabled.",
            "type": "string"
          },
          "basisOfMinimumQualifyPeriod": {
            "description": "Basis of the period of time policy has to be in force before the minimum benefit provision can be applied (i.e. day, week month or year).",
            "type": "string"
          },
          "basisOfPolicyWaitingPeriod": {
            "description": "Basis of the period of time that the policy must be in force before the insured qualifies for coverage (i.e. day, week month or year).",
            "type": "string"
          },
          "benefitEndDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "benefitIncurredDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "benefitStartDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "benefitType": {
            "description": "Type of a benefit right such as Disability Income - STD, Disability Income LTD, Accelerated Death Benefit or Accidental Death Benefit.",
            "type": "string"
          },
          "brokerAuthorisationFlag": {
            "description": "Flag that indicates if the broker is to be included in the correspondence.",
            "type": "boolean"
          },
          "earliestDateForClaimPayment": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "eliminationPeriod": {
            "description": "The number of Elimination Days.",
            "format": "int64",
            "type": "integer"
          },
          "employeeContributionPercentage": {
            "description": "Percentage representing the Employee Contribution Percentage.",
            "type": "number"
          },
          "employeeContributionStatus": {
            "description": "Field which indicates whether a policy is contributory or non-contributory.",
            "type": "string"
          },
          "employeePremiumTaxation": {
            "description": "The employee portion of the contribution was made pre or post tax.",
            "type": "string"
          },
          "employerContributionPercentage": {
            "description": "Indicates the percent of the payment that is taxable. Typically used as the Employer contribution.",
            "type": "number"
          },
          "employerPremiumTaxation": {
            "description": "The employer portion of the contribution was made pre tax or gross up.",
            "type": "string"
          },
          "expectedResolutionDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "extensionAttributes": {
            "description": "The array will contain extension attributes from Benefit and Benefit Right objects.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "frequencyAmount": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          },
          "hospitalBasisOfEliminationPeriod": {
            "description": "Basis for elimination period for hospitalisation.",
            "type": "string"
          },
          "hospitalBasisOfMaxBenefitPeriod": {
            "description": "Basis of the maximum period for hospitalization.",
            "type": "string"
          },
          "hospitalEliminationPeriod": {
            "description": "Elimination Period for hospitalisation.",
            "format": "int64",
            "type": "integer"
          },
          "hospitalMaxBenefitPeriod": {
            "description": "Number of units in the maximum period for hospitalization.",
            "format": "int64",
            "type": "integer"
          },
          "hospitalizationClauseApplies": {
            "description": "Indicator which determines whether the Hospitalization clause applies.",
            "type": "boolean"
          },
          "initialNotificationDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "isReimbursement": {
            "description": "Indicates if the benefit is paid as a reimbursement or not.",
            "type": "boolean"
          },
          "isUnderwritten": {
            "description": "Indicates whether or not the member has been underwritten in order to have additional cover beyond what the group membership offers.",
            "type": "boolean"
          },
          "lateEnrollmentPeriod": {
            "description": "Period after enrolment date when customer has to wait for coverage to become eligible.",
            "format": "int64",
            "type": "integer"
          },
          "latestDateForClaimPayment": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "maxBenefitPeriod": {
            "description": "Number of units in the maximum benefit period. The maximum length of the period to be paid if the claimant remains disabled",
            "format": "int64",
            "type": "integer"
          },
          "minBenefitPeriod": {
            "description": "Number of units in the minimum benefit period. The minimum length of the period to be paid if the claimant remains disabled.",
            "format": "int64",
            "type": "integer"
          },
          "minimumQualifyPeriod": {
            "description": "Period of time policy has to be in force before the minimum benefit provision can be applied.",
            "format": "int64",
            "type": "integer"
          },
          "notificationReceivedDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "overrideClaimIncurredDate": {
            "description": "Indicator which specifies that the benefit level incurred date should be used rather than the claim level incurred date.",
            "type": "boolean"
          },
          "percentTaxable": {
            "description": "The percent of the payment that is taxable.",
            "type": "number"
          },
          "percentageNonTaxable": {
            "description": "The Employee Contribution Percentage",
            "type": "number"
          },
          "periodType": {
            "description": "The type of Benefit Period used to derive the Approved Through Date. Indicates whether the approval is for a fully certified or partially certified period.",
            "type": "string"
          },
          "policyWaitingPeriod": {
            "description": "Period of time that the policy must be in force before the insured qualifies for coverage.",
            "format": "int64",
            "type": "integer"
          },
          "serviceLevel": {
            "description": "Specify the ServiceLevel for the Funding Arrangement when AdministrationType is \"ASO - Advice To Pay\"",
            "type": "string"
          },
          "sourceOfRequest": {
            "description": "The type of source that is requesting the benefit, such as claimant, guardian, or medical officer.",
            "type": "string"
          },
          "startDateOfBenefitForClaim": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DisabilityClaim": {
        "properties": {
          "accidentDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "actualPartialReturnToWorkDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "actualReturnToWorkDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "claimAdditionalInfo": {
            "description": "Additional incident details relevant to the claim.",
            "maxLength": 4000,
            "minLength": 0,
            "type": "string"
          },
          "claimIncurredDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "claimType": {
            "description": "This field can be used to capture the type of claim. This is a descriptive attribute which can be changed over the life of the claim",
            "maxLength": 10,
            "minLength": 0,
            "type": "string"
          },
          "classExtensionInformation": {
            "description": "An array of the extensionAttribute objects which contain claim extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "dateSymptomsFirstAppeared": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "description": {
            "description": "Description for this case as entered by the user.",
            "maxLength": 2000,
            "minLength": 0,
            "type": "string"
          },
          "disabilityDateFromCustomer": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "dismembermentOrLoss": {
            "description": "Dismemberment/Loss injuries sustained by the customer.",
            "maxLength": 10,
            "minLength": 0,
            "type": "string"
          },
          "employeeDateLastWorked": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "eventType": {
            "description": "The type of event which occurred which led to the disability claim e.g. Accident or Sickness.",
            "maxLength": 10,
            "minLength": 0,
            "type": "string"
          },
          "expectedReturnToWorkDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "firstDayMissedWork": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "hoursWorked": {
            "description": "Number of hours worked",
            "format": "float",
            "maximum": 13,
            "minimum": 0,
            "type": "number"
          },
          "insuredSpouseWorking": {
            "description": "Indicates if the spouse of the insured is currently working.",
            "type": "boolean"
          },
          "notificationDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "numberOfDependents": {
            "description": "The number of dependents for the Customer relevant to this Claim",
            "format": "int64",
            "maximum": 10,
            "minimum": 0,
            "type": "integer"
          },
          "partialReturnToWorkDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "providerPartialReturnToWorkDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "providerReturnToWorkDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "reasonForClaimEffectiveDateChange": {
            "description": "Allows a reason to be recorded for a change to the claim's effective date.",
            "maxLength": 10,
            "minLength": 0,
            "type": "string"
          },
          "releasedPartialReturnToWorkDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "releasedReturnToWorkDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "returnToWorkIntention": {
            "description": "Indicates the employees return to work plans.",
            "type": "string"
          },
          "returnToWorkPartTimeDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "returnToWorkTargetDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "salaryCountNumDays": {
            "description": "Salary Continuance Number of Days - Number of days beyond the disability date insured received full pay",
            "format": "int32",
            "maximum": 5,
            "minimum": 0,
            "type": "integer"
          },
          "source": {
            "description": "Describes how the claim was initiated, i.e. on-line, phone call, paper application form, customer portal.",
            "maxLength": 10,
            "minLength": 0,
            "type": "string"
          },
          "workHistory": {
            "description": "This lists the work history of the insured including occupational, job duty as well as when the insured was employed at these jobs.  Used for any/all and LCDD decisions as well as assisting with job  placement strategy development of the vocational consultant.",
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "workRelated": {
            "description": "Indicates whether the event was work related or not.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "DisabilityIntegrationResponse": {
        "description": "Determines if the reason is classed as a disability condition. Enum domain 6784.",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "Document": {
        "properties": {
          "caseId": {
            "type": "string"
          },
          "createdBy": {
            "description": "The User name who created a document.",
            "maxLength": 60,
            "minLength": 0,
            "type": "string"
          },
          "dateCreated": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "description": {
            "description": "User solicitied description of this document.",
            "maxLength": 4000,
            "minLength": 0,
            "type": "string"
          },
          "documentId": {
            "description": "The document Id",
            "format": "int64",
            "type": "integer"
          },
          "effectiveFrom": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "effectiveTo": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "extensionAttributes": {
            "description": "An array of the extensionAttribute objects which contain document (OCDocumentBase) extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "fileExtension": {
            "description": "The file extension of the document. e.g. .doc for MS Word.",
            "maxLength": 20,
            "minLength": 0,
            "type": "string"
          },
          "fileName": {
            "description": "An external reference to the document. This can be a docid or a path and filename.",
            "maxLength": 400,
            "minLength": 0,
            "type": "string"
          },
          "isRead": {
            "type": "boolean"
          },
          "name": {
            "description": "The short business description of the document type",
            "maxLength": 200,
            "minLength": 0,
            "type": "string"
          },
          "originalFilename": {
            "description": "The original attachment filename.",
            "maxLength": 300,
            "minLength": 0,
            "type": "string"
          },
          "receivedDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "rootCaseId": {
            "type": "string"
          },
          "title": {
            "description": "The title of the document.",
            "maxLength": 2000,
            "minLength": 0,
            "type": "string"
          },
          "type": {
            "description": "The form of the document e.g. image, email, document",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          }
        },
        "required": [
          "documentId",
          "name",
          "type"
        ],
        "type": "object"
      },
      "DocumentGroup": {
        "description": "Document groups containing the document.",
        "properties": {
          "description": {
            "description": "The document group description.",
            "maxLength": 200,
            "minLength": 0,
            "type": "string"
          },
          "name": {
            "description": "The document group name.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          }
        },
        "type": "object"
      },
      "DocumentSummary": {
        "properties": {
          "documentGroups": {
            "description": "Document groups containing the document.",
            "items": {
              "$ref": "#/components/schemas/DocumentGroup"
            },
            "type": "array"
          },
          "documentId": {
            "description": "The document ID.",
            "format": "int64",
            "type": "integer"
          },
          "fileExtension": {
            "description": "The document file extension.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "fileName": {
            "description": "The document file name.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          }
        },
        "type": "object"
      },
      "EForm": {
        "properties": {
          "eformAttributes": {
            "description": "An array of EForm attributes.",
            "items": {
              "$ref": "#/components/schemas/EFormAttribute"
            },
            "type": "array"
          },
          "eformId": {
            "description": "Unique automatically generated Id of an EForm document.",
            "format": "int64",
            "type": "integer"
          },
          "eformType": {
            "description": "Name of the EForm document type",
            "maxLength": 200,
            "minLength": 0,
            "type": "string"
          }
        },
        "required": [
          "eformId"
        ],
        "type": "object"
      },
      "EFormAttribute": {
        "description": "Get Answers if any exist.",
        "properties": {
          "booleanValue": {
            "description": "Boolean value of an EForm attribute, which must be populated if the type attribute is set to boolean.",
            "type": "boolean"
          },
          "dateValue": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "decimalValue": {
            "description": "Decimal value of an EForm attribute, which must be populated if the type attribute is set to decimal.",
            "type": "number"
          },
          "enumValue": {
            "$ref": "#/components/schemas/ModelEnum"
          },
          "integerValue": {
            "description": "Integer value of an EForm attribute, which must be populated if the type attribute is set to integer.",
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "description": "The name of an EForm attibute.",
            "type": "string"
          },
          "stringValue": {
            "description": "String value of an EForm attribute, which must be populated if the type attribute is set to string.",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "EFormSummary": {
        "properties": {
          "effectiveDateFrom": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "effectiveDateTo": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "eformId": {
            "description": "Unique automatically generated Id of an EForm document.",
            "format": "int64",
            "type": "integer"
          },
          "eformType": {
            "description": "The short business description of the document type.",
            "maxLength": 200,
            "minLength": 0,
            "type": "string"
          },
          "eformTypeId": {
            "description": "Business Entity OID",
            "example": "PE-00012-0000001234",
            "format": "string",
            "type": "string"
          }
        },
        "required": [
          "eformId",
          "eformType"
        ],
        "type": "object"
      },
      "EarningsCreditReasonRequest": {
        "description": "Reason for the additional credit amount (domainId = 218)",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EarningsCreditReasonResponse": {
        "description": "Reason for the additional credit amount (domainId = 218)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "EarningsResponse": {
        "properties": {
          "classExtensionInformation": {
            "description": "An array of the extensionAttribute objects which contain Earnings extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "earningsBasis": {
            "description": "The earnings frequency.",
            "type": "string"
          },
          "earningsId": {
            "description": "The unique identifier for the earnings record.",
            "format": "int64",
            "maximum": 32,
            "minimum": 0,
            "type": "integer"
          },
          "earningsType": {
            "description": "The type of earnings record, it could refer to pre-disability, partial or salary.",
            "type": "string"
          },
          "effectiveDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "endDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "monthlyBasisEarningAmountsResponse": {
            "$ref": "#/components/schemas/MonthlyBasisEarningAmountsResponse"
          },
          "notes": {
            "description": "Notes relating to the earnings period.",
            "maxLength": 200,
            "minLength": 0,
            "type": "string"
          },
          "periodInWeeks": {
            "description": "Period in weeks between Effective Date and End Date of Earnings record.",
            "format": "int32",
            "type": "integer"
          },
          "salaryAmountBasis": {
            "description": "Basis for salary amount being used.",
            "type": "string"
          },
          "weeklyBasisEarningAmountsResponse": {
            "$ref": "#/components/schemas/WeeklyBasisEarningAmountsResponse"
          }
        },
        "required": [
          "earningsBasis",
          "earningsId",
          "earningsType",
          "periodInWeeks"
        ],
        "type": "object"
      },
      "EditAUTaxCodeDetailsCommand": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EditRegionTaxCodeDetailsCommand"
          },
          {
            "properties": {
              "claimVaryOffset": {
                "description": "Indicates if there is a withholding variation.",
                "type": "boolean"
              },
              "combinedIncome": {
                "description": "Indicates if combinedIncome is greater than a set amount.",
                "type": "boolean"
              },
              "levyExemption": {
                "$ref": "#/components/schemas/EditLevyExemptionRequest"
              },
              "levyReduction": {
                "description": "Indicates if claiming medicare levy reduction..",
                "type": "boolean"
              },
              "maritalRelationshipStatus": {
                "$ref": "#/components/schemas/EditMaritalRelationshipStatusRequest"
              },
              "medicareLevySurcharge": {
                "$ref": "#/components/schemas/EditMedicareLevySurchargeRequest"
              },
              "noDependents": {
                "description": "Number of dependents claimed.",
                "format": "int32",
                "type": "integer"
              },
              "qualifyMedicareLevyExemption": {
                "description": "Indicates if qualifies for medicare levy exemption.",
                "type": "boolean"
              },
              "residentialStatus": {
                "$ref": "#/components/schemas/EditResidentialStatusRequest"
              },
              "seniorsPensionersOffset": {
                "description": "Indicates if Claim or Vary Seniors Pensioners Offset.",
                "type": "boolean"
              },
              "spouse": {
                "description": "Indicates if spouse has claimed.",
                "type": "boolean"
              },
              "studyAndTrainingLoan": {
                "description": "Indicates if has a study/training loan.",
                "type": "boolean"
              },
              "taxFreeThresholdClaimed": {
                "description": "Indicates if the tax free threshold claimed.",
                "type": "boolean"
              },
              "taxOffsets": {
                "$ref": "#/components/schemas/EditTaxOffsetsMoneyRequest"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "EditAccountDetailCommand": {
        "description": "This is the party's bank account number where a payment is made for an EFT.",
        "properties": {
          "accountName": {
            "description": "Name of the account holder",
            "type": "string"
          },
          "accountNo": {
            "description": "The Account number of the personal account",
            "type": "string"
          },
          "accountType": {
            "$ref": "#/components/schemas/AccountTypeRequest"
          },
          "bankCode": {
            "description": "The Bank Code",
            "type": "string"
          },
          "routingNumber": {
            "description": "Sort code of the Bank",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EditAdditionalWithholdAmountMoneyRequest": {
        "description": "The additional withholding amount for tax. The amount recorded here does not affect payments within.",
        "properties": {
          "amountMinorUnits": {
            "description": "The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EditChequeDetailCommand": {
        "properties": {
          "nameToPrintOnCheck": {
            "description": "This is the name that displays on the payee's check. For example, the payee's name, or if there is a nominated payee, In the Estate of followed by the nominated payee's name.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EditDependentDeductionsMoneyRequest": {
        "description": "Specifies the amount for dependent deductions.",
        "properties": {
          "amountMinorUnits": {
            "description": "The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EditExtraPayTaxRateRequest": {
        "description": "Extra pay tax calcs are used when paying backdated periods in previous tax years. This field indicates what rate to use.",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EditFilingMaritalStatusRequest": {
        "description": "The marital status filed for tax purposes (EnumDomainId=2201). Sample value is 'Unknown'",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EditKiwiSaverStatusRequest": {
        "description": "Indicates what rate to use when calculating Kiwisaver deductions.",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EditLevyExemptionRequest": {
        "description": "Indicates if claiming for full or half medicare exemption. Sample values are 'Full', 'Half'",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EditMaritalRelationshipStatusRequest": {
        "description": "Status of Marital Relationship. Sample values are 'Single', 'Illness', 'Separated Couple','Couple'",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EditMedicareLevySurchargeRequest": {
        "description": "Percentage of Medicare Levy surcharge. Sample values are '1%', '1.25%', '1.5%'",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EditNZTaxCodeDetailsCommand": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EditRegionTaxCodeDetailsCommand"
          },
          {
            "properties": {
              "extraPayTaxRate": {
                "$ref": "#/components/schemas/EditExtraPayTaxRateRequest"
              },
              "irTaxCodeChange": {
                "description": "The tax office may direct the insurer to use a different tax code than the client declared one. This field indicates where the tax office has ordered a tax code change.",
                "type": "boolean"
              },
              "isGSTRegistered": {
                "description": "Denotes if a payee is liable for Goods and Services Tax (GST)",
                "type": "boolean"
              },
              "kiwiSaverStatus": {
                "$ref": "#/components/schemas/EditKiwiSaverStatusRequest"
              },
              "studLoanThresholdApplies": {
                "description": "Denotes if a Student Loan Repayment Threshold Applies",
                "type": "boolean"
              },
              "taxCertNumber": {
                "description": "When a payee (client usually) has an individual tax agreement with IRD, i.e. to use a non-standard tax rate, this is the reference number of the tax certificate issued by IRD.",
                "type": "string"
              },
              "taxCodeRateNonStdStudLoan": {
                "description": "Indicates what rate to use for student loan for a non-standard tax code.",
                "type": "string"
              },
              "withholdingTaxStatus": {
                "$ref": "#/components/schemas/EditWithholdingTaxStatusRequest"
              },
              "zeroStudLoanTaxCodeRate": {
                "description": "Indicates if a rate of zero is entered for the TaxCodeRateNonStdStudLoan field that this was intentional.",
                "type": "boolean"
              }
            },
            "type": "object"
          }
        ],
        "required": [
          "extraPayTaxRate",
          "kiwiSaverStatus",
          "withholdingTaxStatus"
        ],
        "type": "object"
      },
      "EditNonStdDeductionsMoneyRequest": {
        "description": "Specifies the amount for non standard deductions.",
        "properties": {
          "amountMinorUnits": {
            "description": "The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EditOtherIncomeMoneyRequest": {
        "description": "Specifies the amount for other income.",
        "properties": {
          "amountMinorUnits": {
            "description": "The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EditPaymentPreferenceAddressCommand": {
        "description": "Payment preference is valid to date.",
        "properties": {
          "addressLine1": {
            "description": "First line of an address.",
            "type": "string"
          },
          "addressLine2": {
            "description": "Second line of an address.",
            "type": "string"
          },
          "addressLine3": {
            "description": "Third line of an address.",
            "type": "string"
          },
          "addressLine4": {
            "description": "Fourth line of an address.",
            "type": "string"
          },
          "addressLine5": {
            "description": "Fifth line of an address.",
            "type": "string"
          },
          "addressLine6": {
            "description": "Sixth line of an address.",
            "type": "string"
          },
          "addressLine7": {
            "description": "Seventh line of an address.",
            "type": "string"
          },
          "country": {
            "$ref": "#/components/schemas/CountryRequest"
          },
          "extensions": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "extraAustralianFields": {
            "$ref": "#/components/schemas/EditPaymentPreferenceAustralianAddressCommand"
          },
          "postCode": {
            "description": "International Postcode.",
            "type": "string"
          },
          "premiseNo": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "EditPaymentPreferenceAustralianAddressCommand": {
        "properties": {
          "buildingName1": {
            "description": "The name of the building.",
            "type": "string"
          },
          "buildingName2": {
            "description": "The name of the building continued.",
            "type": "string"
          },
          "dpId": {
            "description": "Referred to as DPID this is an 8-digit Australian post address identifier which uniquely identifies each delivery point to which Australia Post delivers mail. ",
            "format": "int32",
            "type": "integer"
          },
          "extensions": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "floorLevelNumber": {
            "description": "The floorLevelNumber must not be more than {max} characters",
            "type": "string"
          },
          "floorLevelType": {
            "$ref": "#/components/schemas/AUFloorLevelTypesRequest"
          },
          "lotNumber": {
            "description": "The lot number.",
            "type": "string"
          },
          "postalNumber": {
            "description": "The postal number. ",
            "type": "string"
          },
          "postalNumberPrefix": {
            "description": "This refers to the non-numeric portion preceding the Postal Number. EXAMPLE : PO Box B20 where B is the prefix. ",
            "type": "string"
          },
          "postalNumberSuffix": {
            "description": "This refers to the non-numeric portion following the Postal Number. EXAMPLE : PO Box 20A where A is the suffix.",
            "type": "string"
          },
          "postalType": {
            "$ref": "#/components/schemas/AUPostalTypesRequest"
          },
          "premiseNoSuffix": {
            "description": "The suffix to apply to the number of the premise.",
            "type": "string"
          },
          "premiseNoTo": {
            "description": "The high number in a range for the premise. This is used when an address consists of a range of numbers as in 8-10 Lower Pembroke Street where the value 10 would be stored in this field. ",
            "format": "int32",
            "type": "integer"
          },
          "premiseNoToSuffix": {
            "description": "The suffix to apply to the number to of the premise. ",
            "type": "string"
          },
          "streetSuffix": {
            "$ref": "#/components/schemas/AUStreetSuffixesRequest"
          }
        },
        "type": "object"
      },
      "EditPaymentPreferenceCommand": {
        "properties": {
          "accountDetail": {
            "$ref": "#/components/schemas/EditAccountDetailCommand"
          },
          "address": {
            "$ref": "#/components/schemas/EditPaymentPreferenceAddressCommand"
          },
          "chequeDetail": {
            "$ref": "#/components/schemas/EditChequeDetailCommand"
          },
          "default": {
            "description": "Default payment preference indicator.",
            "type": "boolean"
          },
          "description": {
            "description": "Payment preference description.",
            "type": "string"
          },
          "effectiveFromDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "effectiveToDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "isDefault": {
            "type": "boolean",
            "writeOnly": true
          },
          "overridePostalAddress": {
            "description": "This indicator will be used to override the address or use the customer current address. If true then override the address, else use the customer default address.",
            "type": "boolean"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/PaymentMethodRequest"
          }
        },
        "type": "object"
      },
      "EditRegionTaxCodeDetailsCommand": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/EditAUTaxCodeDetailsCommand"
          },
          {
            "$ref": "#/components/schemas/EditNZTaxCodeDetailsCommand"
          }
        ],
        "type": "object"
      },
      "EditResidentialStatusRequest": {
        "description": "Indicates residential status. Sample values are 'Resident', 'Non Resident', 'Working Holiday'",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EditTaxCodeRecordCommand": {
        "properties": {
          "additionalWithholdAmount": {
            "$ref": "#/components/schemas/EditAdditionalWithholdAmountMoneyRequest"
          },
          "dependentDeductions": {
            "$ref": "#/components/schemas/EditDependentDeductionsMoneyRequest"
          },
          "effectiveDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "endDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "extensions": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "filingMaritalStatus": {
            "$ref": "#/components/schemas/EditFilingMaritalStatusRequest"
          },
          "nonStdDeductions": {
            "$ref": "#/components/schemas/EditNonStdDeductionsMoneyRequest"
          },
          "numberExemptions": {
            "description": "The tax exemptions e.g. number of exemptions accumulated.",
            "format": "int64",
            "type": "integer"
          },
          "otherIncome": {
            "$ref": "#/components/schemas/EditOtherIncomeMoneyRequest"
          },
          "percentageRate": {
            "description": "A percentage rate for tax record. The percentageRate must be of precision 10,2.",
            "type": "string"
          },
          "regionTaxCodeDetails": {
            "$ref": "#/components/schemas/EditRegionTaxCodeDetailsCommand"
          },
          "taxCode": {
            "$ref": "#/components/schemas/EditTaxCodeRequest"
          },
          "taxType": {
            "$ref": "#/components/schemas/EditTaxTypeRequest"
          },
          "version": {
            "$ref": "#/components/schemas/EditVersionRequest"
          }
        },
        "type": "object"
      },
      "EditTaxCodeRequest": {
        "description": "Specifies a code for a subcategory of tax type (EnumDomainId=2232). Sample values are 'Unknown', 'Maximum Age Limit', 'Maximum Benefit Expiry Age'",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EditTaxOffsetsMoneyRequest": {
        "description": "Specifies the Tax Offsets amount.",
        "properties": {
          "amountMinorUnits": {
            "description": "The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EditTaxTypeRequest": {
        "description": "Specifies the type of tax, e.g. 'Federal Income Tax', 'State Income Tax' (EnumDomainId=2321). Sample values are 'Unknown', 'TaxTypeA', 'TaxTypeB'.",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EditVersionRequest": {
        "description": "Specifies the version for this tax record. Sample values are 'Pre 2020', '2020'",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EditWithholdingTaxStatusRequest": {
        "description": "For payments to caregivers, that are not subject to PAYE, does withholding tax apply.",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EligibilityStatusResponse": {
        "description": "The eligibility status of the leave plan. (EnumDomainId=6816).",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "EmailAddress": {
        "description": "Email Address of the customer.",
        "properties": {
          "classExtensionInformation": {
            "description": "An array of the extensionAttribute objects which contain email Address extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "emailAddress": {
            "description": "Customers email address.",
            "maxLength": 120,
            "minLength": 0,
            "type": "string"
          },
          "id": {
            "description": "The id of the contact method (e.g. phone / mobile / emailAddress) ",
            "format": "int64",
            "maximum": 10,
            "minimum": 0,
            "type": "integer"
          },
          "preferred": {
            "type": "boolean"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "Employee": {
        "description": "Employee for which leave request is submitted",
        "properties": {
          "id": {
            "description": "Unique identifier for the employee",
            "type": "string"
          },
          "name": {
            "description": "Name of the employee",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EmployeeAnswers": {
        "properties": {
          "answers": {
            "description": "Get Answers if any exist.",
            "items": {
              "$ref": "#/components/schemas/EFormAttribute"
            },
            "type": "array"
          },
          "category": {
            "description": "The category of the employer questions answered. Enum InstructionsQuestionsCategory (domainId 234) instance name value",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EmployeeEmbeddable": {
        "description": "Employee who requested accommodations for the job.",
        "properties": {
          "id": {
            "description": "Unique identifier for the employee.",
            "type": "string"
          },
          "name": {
            "description": "Full name of the employee.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EmployeeLeaveBalance": {
        "properties": {
          "approvedTime": {
            "description": "Employee total approved leave as per the leave plan calculation for the given period.",
            "type": "number"
          },
          "availabilityPeriodEndDate": {
            "description": "ISO 8601 date time format",
            "example": "1999-12-31T23:59:59Z",
            "format": "date-time",
            "type": "string"
          },
          "availabilityPeriodStartDate": {
            "description": "ISO 8601 date time format",
            "example": "1999-12-31T23:59:59Z",
            "format": "date-time",
            "type": "string"
          },
          "availableBalance": {
            "description": "Employee total approximate available leave balance as per the leave plan calculation for the given period.",
            "type": "number"
          },
          "notificationMessage": {
            "description": "The additional information to the employer about the balance being presented and can explain some reasons to be cautious of the value presented here.The following information message returns as per the leave plan type.<UL><LI><B>Standard leave plan:</B> The approximate balance provides an indication of your balance under this leave plan and is for general information purposes only. This balance considers your leave requests within the highlighted months. We recommend that you submit a leave request for an accurate assessment of available time under each leave plan.</LI><LI><B>Shared leave plan:</B>The approximate balance estimates time left under this leave plan. Other leave requests and leave plan entitlements may affect this plan's balance. We recommend that you submit a leave request for an accurate evaluation of available time.</LI><LI><B>Tracking plans:</B>This leave plan tracks time shared between other leave plans and the approved and pending time is totaled from those plans. The approximate balance is a guide only.</LI><LI><B>Leave plan with versions:</B>The approximate balance is an estimate as this leave plan has different versions that may alter the plan's entitlements. These calculations are based on the version that is effective in the selected month. We recommend that you submit a leave request for an accurate evaluation of available time.</LI><LI><B>Leave plans with reasonable timebank:</B> The approximate balance is not available as this leave plan allows for a reasonable amount of time to be taken rather than a set entitlement. The amount of time available is at the employer's discretion.</LI><LI><B>Leave plans that are no longer serviced by a carrier:</B> The approximate balance is not available because this leave plan is no longer serviced by the employer.</LI></UL>",
            "type": "string"
          },
          "pendingTime": {
            "description": "Employee total pending leave as per the leave plan calculation for the given period.",
            "type": "number"
          },
          "timeBasis": {
            "description": "The basis used to record time unit of approved, pending and entitlement. It may be Minutes, Hours, Days, Weeks, Years or Months. This maps to enum TimeUnits(domain id 6757).",
            "maxLength": 10,
            "minLength": 0,
            "type": "string"
          },
          "timeEntitlement": {
            "description": "The time that is available to an employee who has met the eligibility requirements as per the leave plan calculation period.",
            "type": "number"
          },
          "timeWithinPeriod": {
            "description": "The time frame within which the employee must avail of the entitled leave. For example, an employee may be entitled to 6 weeks leave within 12 months period.",
            "format": "int64",
            "maximum": 9999,
            "type": "integer"
          },
          "timeWithinPeriodBasis": {
            "description": "The basis used to record time unit of time within a period. It may be Minutes, Hours, Days, Weeks or Months. This maps to enum LengthBasis(domain id 6758).",
            "maxLength": 10,
            "minLength": 0,
            "type": "string"
          }
        },
        "type": "object"
      },
      "EmployeeRegistrationStatus": {
        "description": "Payload containing information on the status of Employee registration.",
        "properties": {
          "registered": {
            "description": "True if the Employee is registered, false otherwise.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "EmployeeSummaryForManager": {
        "properties": {
          "employeeId": {
            "description": "The employment id of the employee.",
            "type": "string"
          },
          "firstName": {
            "description": "First names of a person.",
            "type": "string"
          },
          "initials": {
            "description": "The person's middle initials.",
            "type": "string"
          },
          "lastName": {
            "description": "The person's lastName.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EmployerQuestion": {
        "description": "The employer's question.",
        "properties": {
          "category": {
            "description": "The category of the employer question requested. Enum InstructionsQuestionsCategory (domainId 234) instance name value",
            "type": "string"
          },
          "employerName": {
            "description": "The name of the employer on the case for which employer questions are returned, either person full name or organisation name.",
            "type": "string"
          },
          "mandatory": {
            "description": "Optional: Specifies if the employer question answer is mandatory.",
            "type": "boolean"
          },
          "questionEnumDomainName": {
            "description": "Optional: Domain name of the enum, if the questionType is Enum.",
            "type": "string"
          },
          "questionId": {
            "description": "The id of the employer question. Must be unique for all employer questions of one category.",
            "type": "string"
          },
          "questionText": {
            "description": "The configured employer question text for the question id.",
            "type": "string"
          },
          "questionType": {
            "description": "The type of the employer question. Enum Field Data Types (domainId 107) instance name value.\r\nCan be one of the following: String, Integer, Date, Float, Boolean and Enum.",
            "type": "string"
          }
        },
        "required": [
          "category",
          "employerName",
          "questionId",
          "questionText",
          "questionType"
        ],
        "type": "object"
      },
      "EmployerQuestionAnswer": {
        "description": "An array of questions and answers to employer questions belonging to the given category of ER questions.",
        "properties": {
          "answer": {
            "$ref": "#/components/schemas/EFormAttribute"
          },
          "question": {
            "$ref": "#/components/schemas/EmployerQuestion"
          }
        },
        "required": [
          "answer",
          "question"
        ],
        "type": "object"
      },
      "EmployerQuestionAnswers": {
        "properties": {
          "elements": {
            "description": "An array of questions and answers to employer questions belonging to the given category of ER questions.",
            "items": {
              "$ref": "#/components/schemas/EmployerQuestionAnswer"
            },
            "type": "array"
          }
        },
        "required": [
          "elements"
        ],
        "type": "object"
      },
      "EmployerQuestions": {
        "properties": {
          "elements": {
            "description": "An array of employer questions stored in the EmployerQuestion structure belonging to the given category of ER questions.",
            "items": {
              "$ref": "#/components/schemas/EmployerQuestion"
            },
            "type": "array"
          }
        },
        "required": [
          "elements"
        ],
        "type": "object"
      },
      "EmploymentCategoryRequest": {
        "description": "Employment category.",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EmploymentCategoryResponse": {
        "description": "Employment category.",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "EmploymentDetails": {
        "properties": {
          "dateOfHire": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "department": {
            "description": "The organisation unit",
            "type": "string"
          },
          "employeeId": {
            "description": "The employee Id.",
            "type": "string"
          },
          "hoursWorkedPerWeek": {
            "description": "The number of hours worked per week",
            "type": "number"
          },
          "hoursWorkedPerYear": {
            "description": "The number of hours worked per year",
            "format": "int32",
            "type": "integer"
          },
          "jobTitle": {
            "description": "The job title",
            "type": "string"
          },
          "manager": {
            "description": "The full name of the employee Manager",
            "type": "string"
          },
          "workCity": {
            "description": "The work city",
            "type": "string"
          },
          "workPattern": {
            "description": "The work pattern",
            "type": "string"
          },
          "workSite": {
            "description": "The Worksite from this occupation",
            "type": "string"
          },
          "workState": {
            "description": "The work state",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EnumDomain": {
        "description": "Enum Domain from TA",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to related objects (in this case: self and instances)",
              "example": "{'self': '','instances': ''}",
              "format": "url",
              "type": "string"
            },
            "description": "Links to related objects (in this case: self and instances)",
            "example": "{'self': '','instances': ''}",
            "type": "object"
          },
          "alphaSort": {
            "description": "When value is equal to 'true' it indicating that domain instances when presented to user should be sorted alphabetically, 'false' otherwise. This parameter does not influence sort order of instances when returned by this API",
            "type": "boolean"
          },
          "defaultSort": {
            "description": "When value is equal to 'true' it indicating that default instance should be shown (to user) first in an alphabetically sorted view, 'false' othrwise. This parameter does not influence sort order of instances when returned by this API",
            "type": "boolean"
          },
          "description": {
            "description": "Description of this domain",
            "type": "string"
          },
          "editable": {
            "description": "Flag whether this domain is allowed to be edited. Domain can be edited from back office system only - No edit domain endpoint exists.",
            "type": "boolean"
          },
          "id": {
            "description": "Enum domain ID (unique in the system)",
            "type": "string"
          },
          "instances": {
            "description": "List of the instances that belongs to this domain ",
            "items": {
              "$ref": "#/components/schemas/EnumInstanceSummary"
            },
            "type": "array"
          },
          "name": {
            "description": "Enum domain name",
            "type": "string"
          },
          "subsets": {
            "description": "List of subsets that belongs to this domain",
            "items": {
              "$ref": "#/components/schemas/EnumSubset"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "EnumDomains": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "elements": {
            "items": {
              "$ref": "#/components/schemas/EnumDomain"
            },
            "type": "array"
          },
          "hasMoreElements": {
            "description": "<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>",
            "type": "boolean"
          },
          "meta": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "totalSize": {
            "description": "<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "EnumInstance": {
        "description": "This model class expose EnumInstance from TA",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to related objects (in this case: SELF and DOMAIN)",
              "example": "{'self': '','domain': ''}",
              "format": "url",
              "type": "string"
            },
            "description": "Links to related objects (in this case: SELF and DOMAIN)",
            "example": "{'self': '','domain': ''}",
            "type": "object"
          },
          "dOrder": {
            "description": "Denotes the order the Enum resides within all Enum Instances within Domain",
            "format": "int64",
            "type": "integer"
          },
          "domainId": {
            "description": "Enum Domain ID, corresponds to <code>domainId</code>",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "Name of domain to which this instance belongs to",
            "type": "string"
          },
          "endDate": {
            "description": "Date at which the Enum will become inactive (since that date, enum should be considered inactive)",
            "format": "date",
            "type": "string"
          },
          "fullId": {
            "description": "Enum instance fullId, corresponds to <code>TaEnum.fullId</code>",
            "format": "int64",
            "type": "integer"
          },
          "id": {
            "description": "Enum instance ID (unique in the domain)",
            "type": "string"
          },
          "name": {
            "description": "Enum instance name",
            "type": "string"
          },
          "retired": {
            "description": "If <code>true</code> retired Instances only are returned,if <code>false</code>(or not specified) non-retired instances only are returned",
            "type": "boolean"
          },
          "startDate": {
            "description": "Date at which the Enum was activated",
            "format": "date",
            "type": "string"
          },
          "subsets": {
            "description": "List of subsets to which this instance belongs to",
            "items": {
              "$ref": "#/components/schemas/EnumSubsetSummary"
            },
            "type": "array",
            "uniqueItems": true
          }
        },
        "type": "object"
      },
      "EnumInstanceSummary": {
        "description": "This model class expose EnumInstance Summary",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to related objects (in this case: enumInstance)",
              "example": "{'enumInstance': ''}",
              "format": "url",
              "type": "string"
            },
            "description": "Links to related objects (in this case: enumInstance)",
            "example": "{'enumInstance': ''}",
            "type": "object"
          },
          "id": {
            "description": "Enum instance ID",
            "type": "string"
          },
          "name": {
            "description": "Enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EnumInstances": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "elements": {
            "items": {
              "$ref": "#/components/schemas/EnumInstance"
            },
            "type": "array"
          },
          "hasMoreElements": {
            "description": "<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>",
            "type": "boolean"
          },
          "meta": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "totalSize": {
            "description": "<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "EnumQuestionAttribute": {
        "description": "It will used define the metadata of the enum question like caption/title, type and Enum domain.",
        "properties": {
          "caption": {
            "description": "The descriptive heading or title of a question.",
            "type": "string"
          },
          "enumDomain": {
            "$ref": "#/components/schemas/TaEnumQuestionResponse"
          },
          "fieldName": {
            "description": "The attribute Name of the question.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EnumSubset": {
        "description": "This model class expose EnumSubset detailed information, this means that except name also list of EnumInstanceSummary objects get exposed.",
        "properties": {
          "instances": {
            "description": "List of the instances that belongs to this Subset ",
            "items": {
              "$ref": "#/components/schemas/EnumInstanceSummary"
            },
            "type": "array"
          },
          "name": {
            "description": "Enum subset name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EnumSubsetInfo": {
        "properties": {
          "description": {
            "type": "string"
          },
          "editable": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "EnumSubsetSummary": {
        "description": "This model class expose EnumSubset summary information.",
        "properties": {
          "name": {
            "description": "Enum subset name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EpisodeDurationBasisResponse": {
        "description": "Time unit for episodic period duration for E.g. Days, Hours, Minutes. This maps to enum TimeUnits(domain id 6757)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "EpisodePeriodDurationBasisRequest": {
        "description": "Episodic Time Unit basis (<I>domainId</I> = 6757).",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EpisodicLeavePeriod": {
        "properties": {
          "duration": {
            "description": "Duration of each individual Episode",
            "format": "int64",
            "type": "integer"
          },
          "durationBasis": {
            "description": "Duration Basis for e.g. Minutes, Hours, Days. This maps to enum TimeUnits(domain id 6757)",
            "type": "string"
          },
          "endDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "frequency": {
            "description": "The Frequency of Episodes",
            "format": "int64",
            "type": "integer"
          },
          "frequencyInterval": {
            "description": "Number indicating the episodic frequency interval",
            "format": "int64",
            "type": "integer"
          },
          "frequencyIntervalBasis": {
            "description": "Frequency interval Basis for e.g. Days, Weeks, Months. This maps to enum TimeUnits(domain id 6757)",
            "type": "string"
          },
          "startDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          }
        },
        "required": [
          "endDate",
          "startDate"
        ],
        "type": "object"
      },
      "EpisodicLeavePeriodDetail": {
        "description": "The episodic leave period detail for the absence case.",
        "properties": {
          "duration": {
            "description": "Duration of each individual Episode",
            "format": "int64",
            "type": "integer"
          },
          "durationBasis": {
            "description": "Duration Basis for e.g. Minutes, Hours, Days. This maps to enum TimeUnits(domain id 6757)",
            "type": "string"
          },
          "frequency": {
            "description": "The Frequency of Episodes",
            "format": "int64",
            "type": "integer"
          },
          "frequencyInterval": {
            "description": "Number indicating the episodic frequency interval",
            "format": "int64",
            "type": "integer"
          },
          "frequencyIntervalBasis": {
            "description": "Frequency interval Basis for e.g. Days, Weeks, Months. This maps to enum TimeUnits(domain id 6757)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ErrorSource": {
        "properties": {
          "parameter": {
            "type": "string"
          },
          "pointer": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "EventTypeResponse": {
        "description": "The Event type for the absence reason. Enum Domain id 2155.",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "ExtendedAddress": {
        "properties": {
          "buildingName1": {
            "description": "The name of the building.",
            "maxLength": 30,
            "minLength": 0,
            "type": "string"
          },
          "buildingName2": {
            "description": "The name of the building continued.",
            "maxLength": 30,
            "minLength": 0,
            "type": "string"
          },
          "classExtensionInformation": {
            "description": "An array of the extensionAttribute objects which contain claim extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "dpid": {
            "description": "DPID - 8 digit Australian post address identifier.",
            "maximum": 8,
            "minimum": 0,
            "type": "number"
          },
          "floorLevelNumber": {
            "description": "The number of floor level.",
            "maxLength": 2,
            "minLength": 0,
            "type": "string"
          },
          "floorLevelType": {
            "description": "Type of floor level description.",
            "maxLength": 10,
            "minLength": 0,
            "type": "string"
          },
          "lotNumber": {
            "description": "The lot number.",
            "maxLength": 6,
            "minLength": 0,
            "type": "string"
          },
          "postalNumber": {
            "description": "The postal number.",
            "maxLength": 11,
            "minLength": 0,
            "type": "string"
          },
          "postalNumberPrefix": {
            "description": "This refers to the non-numeric portion preceding the Postal Number.",
            "maxLength": 3,
            "minLength": 0,
            "type": "string"
          },
          "postalNumberSuffix": {
            "description": "This refers to the non-numeric portion following the Postal Number.",
            "maxLength": 3,
            "minLength": 0,
            "type": "string"
          },
          "postalType": {
            "description": "The postal type - PO Box, Roadside Mail Box etc.",
            "maxLength": 10,
            "minLength": 0,
            "type": "string"
          },
          "premiseNoSuffix": {
            "description": "The suffix to apply to the number of the premise.",
            "maxLength": 1,
            "minLength": 0,
            "type": "string"
          },
          "premiseNoTo": {
            "description": "The high number in a range for the premise.",
            "maximum": 5,
            "minimum": 0,
            "type": "number"
          },
          "premiseNoToSuffix": {
            "description": "The suffix to apply to the number to of the premise.",
            "maxLength": 1,
            "minLength": 0,
            "type": "string"
          },
          "streetSuffix": {
            "description": "The suffix for the street.",
            "maxLength": 10,
            "minLength": 0,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ExtensionAttribute": {
        "description": "An array of the extensionAttribute objects which contain extension information.",
        "properties": {
          "booleanValue": {
            "description": "Value of the class extension attribute of a boolean type.",
            "type": "boolean"
          },
          "dateOnlyValue": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "decimalValue": {
            "description": "Value of the class extension attribute of a Decimal type.",
            "type": "number"
          },
          "enumValue": {
            "$ref": "#/components/schemas/ModelEnum"
          },
          "integerValue": {
            "description": "Value of the class extension attribute of a string type.",
            "format": "int32",
            "type": "integer"
          },
          "moneyValue": {
            "description": "Value of the class extension attribute of a Money type.",
            "type": "string"
          },
          "name": {
            "description": "The name of the attribute which extends standard claim set of attributes.",
            "type": "string"
          },
          "stringValue": {
            "description": "Value of the class extension attribute of a string type.",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "ExtraPayTaxRateRequest": {
        "description": "Extra pay tax calcs are used when paying backdated periods in previous tax years. This field indicates what rate to use.",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ExtraPayTaxRateResponse": {
        "description": "Extra pay tax calcs are used when paying backdated periods in previous tax years. This field indicates what rate to use.",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "ExtraRequestAttributes": {
        "description": "Extra request attributes for temporary address.",
        "properties": {
          "temporaryAddress": {
            "description": "Temporary address type indicator. Default value false, if not provided.",
            "type": "boolean",
            "writeOnly": true
          },
          "temporaryAddressEndDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string",
            "writeOnly": true
          }
        },
        "type": "object"
      },
      "FilingMaritalStatusRequest": {
        "description": "The marital status filed for tax purposes (EnumDomainId=2201). Sample value is 'Unknown'",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "FilingMaritalStatusResponse": {
        "description": "The marital status filed for tax purposes (EnumDomainId=2201). Sample value is 'Unknown'",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "FuturePayment": {
        "properties": {
          "balancingAmount": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "maxLength": 28,
            "minLength": 0,
            "type": "string"
          },
          "benefitId": {
            "type": "string"
          },
          "dueEventId": {
            "description": "Business Entity OID",
            "example": "PE-00012-0000001234",
            "format": "string",
            "type": "string"
          },
          "effectiveDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "futurePaymentDetails": {
            "description": "This list return the recurring future payment details list.",
            "items": {
              "$ref": "#/components/schemas/FuturePaymentDetail"
            },
            "type": "array"
          },
          "grossAmount": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "maxLength": 28,
            "minLength": 0,
            "type": "string"
          },
          "netAmount": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "maxLength": 28,
            "minLength": 0,
            "type": "string"
          },
          "netPaymentAmount": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "maxLength": 28,
            "minLength": 0,
            "type": "string"
          },
          "pendingOfflineRecalc": {
            "description": "True if there is a pending or in progress offline benefit recalc, false otherwise.",
            "type": "boolean"
          },
          "periodEndDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "periodStartDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "processingDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          }
        },
        "type": "object"
      },
      "FuturePaymentDetail": {
        "description": "This list return the recurring future payment details list.",
        "properties": {
          "adjustmentClassExtension": {
            "description": "An array of the extensionAttribute objects which contain OLFixedAmountIncreaseInstruction extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "adjustmentTypeId": {
            "description": "Business Entity OID",
            "example": "PE-00012-0000001234",
            "format": "string",
            "type": "string"
          },
          "amount": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          },
          "calcDetails": {
            "description": "The Calculation Details that explain how each adjustment is calculated. ",
            "items": {
              "description": "The Calculation Details that explain how each adjustment is calculated. ",
              "type": "string"
            },
            "type": "array"
          },
          "calcDetailsClassExtension": {
            "description": "An array of the extensionAttribute objects which contain OLAdjustmentCalcDetail extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "integrationType": {
            "description": "The integration type of the future payment detail.",
            "type": "string"
          },
          "payee": {
            "description": "The name of the Payee which the future payment detail belongs.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "periodEndDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "periodStartDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "reference": {
            "description": "This gives the reference value of the future payment detail.",
            "type": "string"
          },
          "sequenceNumber": {
            "description": "The sequence number of the future payment detail. ",
            "format": "int64",
            "type": "integer"
          },
          "type": {
            "description": "The type of the future payment detail.",
            "type": "string"
          },
          "useTOCalc": {
            "description": "The Calculation that explain how each future payment detail is calculated. ",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GrossAmountMoneyRequest": {
        "description": "Actual gross earnings amount between the effective date and end date",
        "properties": {
          "amountMinorUnits": {
            "description": "The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GrossAmountMoneyResponse": {
        "description": "Actual gross earnings amount between the effective date and end date",
        "properties": {
          "amountMinorUnits": {
            "description": "The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
            "format": "int64",
            "type": "integer"
          },
          "currency": {
            "description": "The currency used in the Money amount",
            "type": "string"
          },
          "scale": {
            "description": "The scale used in the Money amount",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "HospitalisationDetails": {
        "properties": {
          "description": {
            "description": "The description of hospitalisation detail.",
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "endDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "endDateConfirmed": {
            "description": "The end date confirmation for the hospitalisation period.",
            "type": "boolean"
          },
          "extensionAttributes": {
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "hospitalReason": {
            "description": "The hospitalisation reason for the claim period.",
            "type": "string"
          },
          "startDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          }
        },
        "required": [
          "startDate"
        ],
        "type": "object"
      },
      "HospitalisationDetailsResponse": {
        "properties": {
          "description": {
            "description": "The description of hospitalisation detail.",
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "endDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "endDateConfirmed": {
            "description": "The end date confirmation for the hospitalisation period.",
            "type": "boolean"
          },
          "extensionAttributes": {
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "facility": {
            "description": "The facilitator(hospital) name.",
            "type": "string"
          },
          "hospitalReason": {
            "description": "The hospitalisation reason for the claim period.",
            "type": "string"
          },
          "hospitalisationDetailId": {
            "description": "Business Entity OID",
            "example": "PE-00012-0000001234",
            "format": "string",
            "type": "string"
          },
          "startDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          }
        },
        "required": [
          "hospitalisationDetailId",
          "startDate"
        ],
        "type": "object"
      },
      "IncomeSource": {
        "properties": {
          "amount": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          },
          "endDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "extensionAttributes": {
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "frequency": {
            "description": "Frequency of the income.",
            "type": "string"
          },
          "incomeName": {
            "description": "Income source name.",
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "incomeType": {
            "description": "Type of the income source.",
            "type": "string"
          },
          "receivedFrom": {
            "description": "Identify from where the other income source was received.",
            "type": "string"
          },
          "startDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          }
        },
        "required": [
          "incomeName",
          "incomeType"
        ],
        "type": "object"
      },
      "IncomeSourceResponse": {
        "properties": {
          "amount": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          },
          "endDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "extensionAttributes": {
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "frequency": {
            "description": "Frequency of the income.",
            "type": "string"
          },
          "incomeName": {
            "description": "Income source name.",
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "incomeSourceId": {
            "description": "Business Entity OID",
            "example": "PE-00012-0000001234",
            "format": "string",
            "type": "string"
          },
          "incomeType": {
            "description": "Type of the income source.",
            "type": "string"
          },
          "receivedFrom": {
            "description": "Identify from where the other income source was received.",
            "type": "string"
          },
          "startDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          }
        },
        "required": [
          "incomeName",
          "incomeType"
        ],
        "type": "object"
      },
      "InfoOnlyAmountMoneyRequest": {
        "description": "Information-only additional earnings amount",
        "properties": {
          "amountMinorUnits": {
            "description": "The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
            "type": "string"
          }
        },
        "type": "object"
      },
      "InfoOnlyAmountMoneyResponse": {
        "description": "Information-only additional earnings amount",
        "properties": {
          "amountMinorUnits": {
            "description": "The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
            "format": "int64",
            "type": "integer"
          },
          "currency": {
            "description": "The currency used in the Money amount",
            "type": "string"
          },
          "scale": {
            "description": "The scale used in the Money amount",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "KiwiSaverStatusRequest": {
        "description": "Indicates what rate to use when calculating Kiwisaver deductions.",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "KiwiSaverStatusResponse": {
        "description": "Indicates what rate to use when calculating Kiwisaver deductions.",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "LeavePeriodsChangeRequestResource": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "additionalNotes": {
            "description": "Extra information about the leave period change request in free text format.",
            "type": "string"
          },
          "changeRequestPeriods": {
            "description": "List of leave period changes requested.",
            "items": {
              "$ref": "#/components/schemas/ChangeRequestPeriod"
            },
            "type": "array"
          },
          "id": {
            "description": "Unique identification of Change Request record.",
            "type": "string"
          },
          "reason": {
            "$ref": "#/components/schemas/ReasonResponse"
          },
          "requestDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "requestStatus": {
            "$ref": "#/components/schemas/RequestStatusResponse"
          }
        },
        "type": "object"
      },
      "LeavePeriodsChangeRequestResources": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "elements": {
            "items": {
              "$ref": "#/components/schemas/LeavePeriodsChangeRequestResource"
            },
            "type": "array"
          },
          "hasMoreElements": {
            "description": "<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>",
            "type": "boolean"
          },
          "meta": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "totalSize": {
            "description": "<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "LeavePlan": {
        "description": "The leave plan associated with the request",
        "properties": {
          "adjudicationStatus": {
            "description": "Adjudication status of leave plan",
            "type": "string"
          },
          "applicabilityStatus": {
            "description": "Applicability status of leave plan",
            "type": "string"
          },
          "availabilityStatus": {
            "description": "Result of the evaluation of plan availability within a leave request",
            "type": "string"
          },
          "calculationPeriodMethod": {
            "description": "Calculation period method of leave plan period.",
            "type": "string"
          },
          "category": {
            "description": "Leave plan category",
            "type": "string"
          },
          "eligibilityStatus": {
            "description": "Eligibility status of leave plan",
            "type": "string"
          },
          "evidenceStatus": {
            "description": "Evidence status made on this Selected Leave Plan",
            "type": "string"
          },
          "fixedYearStartDay": {
            "description": "Start day for the specified fixed year",
            "format": "int64",
            "type": "integer"
          },
          "fixedYearStartMonth": {
            "description": "Fixed year start month",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier for the leave plan",
            "type": "string"
          },
          "leavePlanType": {
            "$ref": "#/components/schemas/LeavePlanType"
          },
          "name": {
            "description": "Leave plan long name",
            "type": "string"
          },
          "paidLeaveCaseId": {
            "description": "Paid leave case id",
            "type": "string"
          },
          "shortName": {
            "description": "Leave plan short name",
            "type": "string"
          },
          "timeBankMethod": {
            "description": "The time bank method either from the Service Agreement or from the Leave Plan Availability",
            "type": "string"
          },
          "timeEntitlement": {
            "description": "Number of time units for the time entitlement",
            "type": "number"
          },
          "timeEntitlementBasis": {
            "description": "Units of time used in leave plan availability",
            "type": "string"
          },
          "timeWithinPeriod": {
            "description": "Number of time units for the period duration e.g. Weeks, Days",
            "format": "int64",
            "type": "integer"
          },
          "timeWithinPeriodBasis": {
            "description": "Units of time used in calculating the time with in period ",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LeavePlanDetails": {
        "description": "The selected leave plans for this absence case.",
        "properties": {
          "applicability": {
            "description": "The applicability status of the Selected Leave Plan.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "category": {
            "description": "The category for this leave plan.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "decision": {
            "description": "The availability status of the Selected Leave Plan.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "eligibility": {
            "description": "The eligibility status of the Selected Leave Plan.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "leavePlanId": {
            "description": "The Leave Plan UUID.",
            "maxLength": 36,
            "minLength": 0,
            "type": "string"
          },
          "longName": {
            "description": "The long name for the leave plan.",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          }
        },
        "type": "object"
      },
      "LeavePlanModel": {
        "properties": {
          "absenceReasons": {
            "description": "The absence reasons linked to the leave plan.",
            "items": {
              "$ref": "#/components/schemas/AbsenceReasonModel"
            },
            "type": "array"
          },
          "category": {
            "description": "The category for this leave plan.",
            "type": "string"
          },
          "description": {
            "description": "The description for the leave plan.",
            "maxLength": 3000,
            "minLength": 0,
            "type": "string"
          },
          "effectiveFromDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "effectiveToDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "entitlement": {
            "description": "Number of time units for the Time Entitlement.",
            "maxLength": 999,
            "minLength": 0,
            "type": "string"
          },
          "entitlementCalculationPeriod": {
            "description": "Concatenated value of DurationValue, DurationBasis, CalculatePeriodMethod, FixedYearStartDay, FixedYearStartMonth.",
            "type": "string"
          },
          "group": {
            "description": "The group for this leave plan.",
            "type": "string"
          },
          "informationLink": {
            "description": "The link URL for the leave plan. This can contain a link to relevant online document.",
            "maxLength": 500,
            "minLength": 0,
            "type": "string"
          },
          "jobProtection": {
            "description": "Indicates the level of job protection on this leave plan.",
            "type": "string"
          },
          "leavePlanAlias": {
            "type": "string"
          },
          "leavePlanAppliesToStates": {
            "description": "This applies to the leave plan.",
            "type": "boolean"
          },
          "leavePlanId": {
            "description": "Leave Plan UUID is a mandatory field, it must be specified.",
            "maxLength": 35,
            "minLength": 0,
            "type": "string"
          },
          "lengthOfService": {
            "description": "The worked within period basis.",
            "type": "string"
          },
          "longName": {
            "description": "The long name for the leave plan.",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "minimumWorkHours": {
            "description": "The minimum hours worked within a period.",
            "maxLength": 9999,
            "minLength": 0,
            "type": "string"
          },
          "otherDetails": {
            "description": "Other details if the employer of the logged in user is linked to that plan through their service agreement.",
            "items": {
              "description": "Other details if the employer of the logged in user is linked to that plan through their service agreement.",
              "type": "string"
            },
            "type": "array"
          },
          "states": {
            "description": "List of work states can be added as states where the plan is applicable.",
            "items": {
              "description": "List of work states can be added as states where the plan is applicable.",
              "type": "string"
            },
            "type": "array"
          },
          "statesData": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "writeOnly": true
          },
          "type": {
            "description": "The type for this leave plan.",
            "type": "string"
          }
        },
        "required": [
          "absenceReasons",
          "leavePlanId"
        ],
        "type": "object"
      },
      "LeavePlanSummary": {
        "properties": {
          "category": {
            "description": "The category for this leave plan.",
            "type": "string"
          },
          "description": {
            "description": "The description for the leave plan.",
            "maxLength": 3000,
            "minLength": 0,
            "type": "string"
          },
          "endDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "group": {
            "description": "The group for this leave plan.",
            "type": "string"
          },
          "leavePlanAlias": {
            "type": "string"
          },
          "leavePlanId": {
            "description": "The Leave Plan UUID.",
            "maxLength": 36,
            "minLength": 0,
            "type": "string"
          },
          "name": {
            "description": "The long name for the leave plan.",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "startDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "type": {
            "description": "The type for this leave plan.",
            "type": "string"
          }
        },
        "required": [
          "leavePlanId"
        ],
        "type": "object"
      },
      "LeavePlanType": {
        "properties": {
          "fullId": {
            "format": "int64",
            "type": "integer"
          },
          "leavePlanName": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "LeaveRequest": {
        "description": "Leave request",
        "properties": {
          "approvalReason": {
            "description": "Reason for approval of a request",
            "type": "string"
          },
          "decisionStatus": {
            "description": "Leave request decision status",
            "type": "string"
          },
          "denialReason": {
            "description": "Reason for denial of a request",
            "type": "string"
          },
          "id": {
            "description": "Business Entity OID",
            "example": "PE-00012-0000001234",
            "format": "string",
            "type": "string"
          },
          "qualifier1": {
            "description": "The leave request first qualifier",
            "type": "string"
          },
          "qualifier2": {
            "description": "The leave request second qualifier",
            "type": "string"
          },
          "reasonName": {
            "description": "The leave request reason",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LevyExemptionRequest": {
        "description": "Indicates if claiming for full or half medicare exemption. Sample values are 'Full', 'Half'",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Limitation": {
        "description": "Represents a Limitation to be associated to an Accommodation Case.",
        "properties": {
          "limitationType": {
            "description": "Represents a Limitation to be associated to an Accommodation Case.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LimitationDetail": {
        "description": "Represents a Limitation to be associated to an Accommodation Case.",
        "properties": {
          "id": {
            "description": "The unique identifier for this limitation. ",
            "maxLength": 254,
            "minLength": 0,
            "type": "string"
          },
          "limitationType": {
            "description": "Represents a Limitation to be associated to an Accommodation Case.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LimitationsDescriptionResponse": {
        "description": "List of limitations the employee has that they require an accommodation in their job.",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "LumpSumBenefit": {
        "description": "A JSON representation of details of a lump sum benefit.",
        "properties": {
          "amountType": {
            "description": "Indicates the basis upon which the benefit is calculated, examples might be fixed amount basis, salary percentage basis or tiered basis.",
            "type": "string"
          },
          "basisOfPolicyWaitingPeriod": {
            "description": "Basis of the period of time that the policy must be in force before the insured qualifies for coverage (i.e. day, week month or year).",
            "type": "string"
          },
          "benefitExpiryDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "benefitIncurredDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "benefitType": {
            "description": "Type of a benefit right such as Disability Income - STD, Disability Income LTD, Accelerated Death Benefit or Accidental Death Benefit.",
            "type": "string"
          },
          "brokerAuthorisationFlag": {
            "description": "Flag that indicates if the broker is to be included in the correspondence.",
            "type": "boolean"
          },
          "effectiveDateForCoverage": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "extensionAttributes": {
            "description": "Extra attributes from extension if any.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "flatAmount": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          },
          "initialNotificationDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "isUnderwritten": {
            "description": "Indicates whether or not the member has been underwritten in order to have additional cover beyond what the group membership offers.",
            "type": "boolean"
          },
          "maximumBenefitExpiryAge": {
            "description": "Maximum Age to be eligible to receive benefit.",
            "format": "int64",
            "type": "integer"
          },
          "notificationReceivedDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "overrideClaimIncurredDate": {
            "description": "Indicator which specifies that the benefit level incurred date should be used rather than the claim level incurred date.",
            "type": "boolean"
          },
          "policyWaitingPeriod": {
            "description": "Period of time that the policy must be in force before the insured qualifies for coverage.",
            "format": "int64",
            "type": "integer"
          },
          "sourceOfRequest": {
            "description": "The type of source that is requesting the benefit, such as claimant, guardian, or medical officer.",
            "type": "string"
          },
          "startDateOfBenefitForClaim": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "sumInsuredAtIncurredDate": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          }
        },
        "type": "object"
      },
      "MainPayeeDetails": {
        "properties": {
          "classExtensionInformation": {
            "description": "An array of the extensionAttribute objects which contain claim extension information",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "endDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "participantId": {
            "description": "Id of the participant",
            "format": "int64",
            "type": "integer"
          },
          "partyName": {
            "description": "The name of the party with the participant role on the case",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "paymentPreference": {
            "$ref": "#/components/schemas/PaymentPreferenceResponse"
          },
          "referenceNo": {
            "description": "The reference number of the party with the participant role on the case",
            "maxLength": 40,
            "minLength": 0,
            "type": "string"
          },
          "rolename": {
            "description": "The role name assigned to the participant on the case",
            "maxLength": 10,
            "minLength": 0,
            "type": "string"
          },
          "sourceSystem": {
            "description": "The source system of the party with the participant role on the case",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "startDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "taxTypeDetails": {
            "description": "Gets the list of tax details of main payee on benefit.",
            "items": {
              "$ref": "#/components/schemas/TaxTypeDetails"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ManagedRequirementSummary": {
        "properties": {
          "category": {
            "description": "The category name of the managed requirement.",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "classExtensionInformation": {
            "description": "An array of the extensionAttribute objects which contain managed requirement (OCManagedRequirement) extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "dateCompleted": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "dateLastFollowedUp": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "dateRequested": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "description": {
            "description": "A text description of the outstanding requirement or information.",
            "maxLength": 250,
            "minLength": 0,
            "type": "string"
          },
          "documentReceived": {
            "description": "Indicates that a document has been received for this managed requirement. Returns true if the managed requirement is linked to a document that this user can access,otherwise returns false.",
            "type": "boolean"
          },
          "followUpDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "managedReqId": {
            "description": "the identifier for this managed requirement.",
            "format": "int64",
            "type": "integer"
          },
          "notProceedingWithDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "status": {
            "description": "The current status of this Managed Requirement. ",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "type": {
            "description": "The name of the type of the managed requirement.",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          }
        },
        "required": [
          "category",
          "documentReceived",
          "managedReqId",
          "type"
        ],
        "type": "object"
      },
      "ManagerAcceptedResponse": {
        "description": "The manager has accepted the associated actual absence periods or not for e.g YesNoUnknown Yes, YesNoUnknown No. This maps to enum YesNoUnknown(domain id 2500)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "MaritalRelationshipStatusRequest": {
        "description": "Status of Marital Relationship. Sample values are 'Single', 'Illness', 'Separated Couple','Couple'",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "MaritalRelationshipStatusResponse": {
        "description": "Status of Marital Relationship. Sample values are 'Single', 'Illness', 'Separated Couple','Couple'",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "MedicalDetails": {
        "properties": {
          "causeOfInjuryCode": {
            "description": "The code ID that specifies the cause of injury.",
            "type": "string"
          },
          "clientDominantSide": {
            "description": "The claimants dominant side.",
            "type": "string"
          },
          "condition": {
            "description": "A description of the medical condition of the injured party.",
            "type": "string"
          },
          "conditionCategory": {
            "description": "A high-level indicator of the medical condition being claimed.",
            "type": "string"
          },
          "extensionAttributes": {
            "description": "Extension attributes.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "firstDoctorVisitDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "lastReceivedDateMedicalInfo": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "lastRequestedDateMedicalInfo": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "lifeExpectancy": {
            "description": "Projected life expectancy for the injured party based on the current medical information.",
            "type": "string"
          },
          "medicalAuthorisationReceivedDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "pregnancyIndicator": {
            "description": "Indicates whether a person is pregnant or not.",
            "type": "boolean"
          },
          "symptomsFirstAppeared": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "treatmentPlan": {
            "description": "A description of the treatment plan for the injured party.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "MedicalDetailsResponse": {
        "properties": {
          "causeOfInjuryCode": {
            "description": "The code ID that specifies the cause of injury.",
            "type": "string"
          },
          "clientDominantSide": {
            "description": "The claimants dominant side.",
            "type": "string"
          },
          "condition": {
            "description": "A description of the medical condition of the injured party.",
            "type": "string"
          },
          "conditionCategory": {
            "description": "A high-level indicator of the medical condition being claimed.",
            "type": "string"
          },
          "description": {
            "description": "Description of the cause of injury code.",
            "type": "string"
          },
          "extensionAttributes": {
            "description": "Extension attributes.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "firstDoctorVisitDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "lastReceivedDateMedicalInfo": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "lastRequestedDateMedicalInfo": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "lifeExpectancy": {
            "description": "Projected life expectancy for the injured party based on the current medical information.",
            "type": "string"
          },
          "medicalAuthorisationReceivedDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "pregnancyIndicator": {
            "description": "Indicates whether a person is pregnant or not.",
            "type": "boolean"
          },
          "symptomsFirstAppeared": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "treatmentPlan": {
            "description": "A description of the treatment plan for the injured party.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "MedicalRelatedResponse": {
        "description": "The reason for leave is medical related or not. Enum domain id 6781.",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "MedicareLevySurchargeRequest": {
        "description": "Percentage of Medicare Levy surcharge. Sample values are '1%', '1.25%', '1.5%'",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "MedicareLevySurchargeResponse": {
        "description": "Percentage of Medicare Levy surcharge. Sample values are '1%', '1.25%', '1.5%'",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "MilitaryRelatedResponse": {
        "description": "The reason relates to military leave. Enum domain id 6783.",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "ModelEnum": {
        "properties": {
          "domainName": {
            "description": "Domain name.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "instanceValue": {
            "description": "Enum instance name.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          }
        },
        "required": [
          "domainName",
          "instanceValue"
        ],
        "type": "object"
      },
      "MonthlyBasisEarningAmountsRequest": {
        "description": "Monthly Basis Earning Amounts Request Details.",
        "properties": {
          "bonuses": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          },
          "commissions": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          },
          "earningsAmount": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          },
          "pensionContribution": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          },
          "shiftPay": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          }
        },
        "required": [
          "earningsAmount"
        ],
        "type": "object"
      },
      "MonthlyBasisEarningAmountsResponse": {
        "description": "Monthly Basis Earning Amounts Response Details.",
        "properties": {
          "bonuses": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          },
          "commissions": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          },
          "earningsAmount": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          },
          "earningsAmountAsWeekly": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          },
          "pensionContribution": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          },
          "shiftPay": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          },
          "totalEarnings": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          }
        },
        "required": [
          "earningsAmount"
        ],
        "type": "object"
      },
      "MonthlyEarningsRequest": {
        "properties": {
          "classExtensionInformation": {
            "description": "An array of the extensionAttribute objects which contain Earnings extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "earningsBasis": {
            "description": "The earnings frequency.",
            "type": "string"
          },
          "effectiveDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "endDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "monthlyBasisEarningAmountsRequest": {
            "$ref": "#/components/schemas/MonthlyBasisEarningAmountsRequest"
          },
          "notes": {
            "description": "Notes relating to the earnings period.",
            "maxLength": 200,
            "minLength": 0,
            "type": "string"
          },
          "salaryAmountBasis": {
            "description": "Basis for salary amount being used.",
            "type": "string"
          }
        },
        "required": [
          "earningsBasis"
        ],
        "type": "object"
      },
      "NZTaxCodeDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RegionTaxCodeDetails"
          },
          {
            "properties": {
              "extraPayTaxRate": {
                "$ref": "#/components/schemas/ExtraPayTaxRateResponse"
              },
              "irTaxCodeChange": {
                "description": "The tax office may direct the insurer to use a different tax code than the client declared one. This field indicates where the tax office has ordered a tax code change.",
                "type": "boolean"
              },
              "isGSTRegistered": {
                "description": "Denotes if a payee is liable for Goods and Services Tax (GST)",
                "type": "boolean"
              },
              "kiwiSaverStatus": {
                "$ref": "#/components/schemas/KiwiSaverStatusResponse"
              },
              "studLoanThresholdApplies": {
                "description": "Denotes if a Student Loan Repayment Threshold Applies",
                "type": "boolean"
              },
              "taxCertNumber": {
                "description": "When a payee (client usually) has an individual tax agreement with IRD, i.e. to use a non-standard tax rate, this is the reference number of the tax certificate issued by IRD.",
                "type": "string"
              },
              "taxCodeRateNonStdStudLoan": {
                "description": "Indicates what rate to use for student loan for a non-standard tax code.",
                "type": "string"
              },
              "withholdingTaxStatus": {
                "$ref": "#/components/schemas/WithholdingTaxStatusResponse"
              },
              "zeroStudLoanTaxCodeRate": {
                "description": "Indicates if a rate of zero is entered for the TaxCodeRateNonStdStudLoan field that this was intentional.",
                "type": "boolean"
              }
            },
            "type": "object"
          }
        ],
        "type": "object"
      },
      "NetAmountMoneyRequest": {
        "description": "Actual net earnings amount paid between the effective date and end date",
        "properties": {
          "amountMinorUnits": {
            "description": "The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
            "type": "string"
          }
        },
        "type": "object"
      },
      "NetAmountMoneyResponse": {
        "description": "Actual net earnings amount paid between the effective date and end date",
        "properties": {
          "amountMinorUnits": {
            "description": "The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
            "format": "int64",
            "type": "integer"
          },
          "currency": {
            "description": "The currency used in the Money amount",
            "type": "string"
          },
          "scale": {
            "description": "The scale used in the Money amount",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "NewDiagnosisDetails": {
        "properties": {
          "levelIndicator": {
            "description": "The injury code level e.g. primary or secondary assigned to the injury in the context of the claim.",
            "type": "string"
          },
          "medicalCode": {
            "description": "The code ID that specifies a particular diagnosis.",
            "maxLength": 20,
            "minLength": 0,
            "type": "string"
          }
        },
        "type": "object"
      },
      "NewPaymentPreference": {
        "properties": {
          "accountDetails": {
            "$ref": "#/components/schemas/AccountDetails"
          },
          "chequeDetails": {
            "$ref": "#/components/schemas/ChequeDetails"
          },
          "classExtensionInformation": {
            "description": "An array of the extensionAttribute objects which contain claim extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "customerAddress": {
            "$ref": "#/components/schemas/CustomerAddress"
          },
          "description": {
            "description": "Description of the Payment Preference",
            "type": "string"
          },
          "effectiveFrom": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "effectiveTo": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "isDefault": {
            "type": "boolean"
          },
          "overridePostalAddress": {
            "description": "Indicates that an override address applies for the payment preference. (i.e. sets the paymentAddressType to override. When false the correspondence address for the payee (or nominated payee) applies.",
            "type": "boolean"
          },
          "paymentMethod": {
            "description": "The name of the payment method. This is used to determine whether chequeDetails or accountDetails is displayed",
            "type": "string"
          }
        },
        "required": [
          "paymentMethod"
        ],
        "type": "object"
      },
      "NewWebMessage": {
        "properties": {
          "caseId": {
            "description": "The case the web message is associated to (if any)",
            "maxLength": 254,
            "minLength": 0,
            "type": "string"
          },
          "classExtensionInformation": {
            "description": "An array of the extensionAttribute objects which contain web message information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "narrative": {
            "description": "The web message text",
            "maxLength": 4000,
            "minLength": 0,
            "type": "string"
          },
          "subject": {
            "description": "Subject of the message",
            "maxLength": 200,
            "minLength": 0,
            "type": "string"
          }
        },
        "required": [
          "narrative",
          "subject"
        ],
        "type": "object"
      },
      "NextPayment": {
        "properties": {
          "claimId": {
            "description": "The claim the payment relates to",
            "type": "string"
          },
          "nextPaymentAmount": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          },
          "nextPaymentDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "nextPaymentLines": {
            "description": "The estimated payment lines comprising the next estimated payment amount",
            "items": {
              "$ref": "#/components/schemas/NextPaymentLine"
            },
            "type": "array"
          },
          "nextPeriodEndDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "nextPeriodStartDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          }
        },
        "type": "object"
      },
      "NextPaymentLine": {
        "description": "The estimated payment lines comprising the next estimated payment amount",
        "properties": {
          "amount": {
            "description": "The amount of the adjustment",
            "maxLength": 28,
            "minLength": 0,
            "type": "string"
          },
          "classExtensionInformation": {
            "description": "An array of the extensionAttribute objects which contain payments (OLPaymentLine) extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "lineType": {
            "description": "The name of the payment adjustment e.g. Gross Benefit, Income Tax, Seat Belt etc.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "sequenceNumber": {
            "description": "The adjustment sequence number. Adjustments are applied in ascending order",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "NonStdDeductionsMoneyRequest": {
        "description": "Specifies the amount for non standard deductions.",
        "properties": {
          "amountMinorUnits": {
            "description": "The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
            "type": "string"
          }
        },
        "type": "object"
      },
      "NonStdDeductionsMoneyResponse": {
        "description": "Specifies the amount for non standard deductions.",
        "properties": {
          "amountMinorUnits": {
            "description": "The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
            "format": "int64",
            "type": "integer"
          },
          "currency": {
            "description": "The currency used in the Money amount",
            "type": "string"
          },
          "scale": {
            "description": "The scale used in the Money amount",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "NotificationAbsenceCaseSummary": {
        "description": "The absence child cases under this notification case.",
        "properties": {
          "absenceHandler": {
            "description": " The Person handling the absence case",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "absenceHandlerEmailAddress": {
            "description": "The phone number of the absence case handler",
            "maxLength": 40,
            "minLength": 0,
            "type": "string"
          },
          "absenceHandlerPhoneNumber": {
            "description": "The email address of the absence case handler",
            "maxLength": 20,
            "minLength": 0,
            "type": "string"
          },
          "absenceId": {
            "description": "Absence case identifier",
            "maxLength": 254,
            "minLength": 0,
            "type": "string"
          },
          "createdDate": {
            "description": "ISO 8601 date time format",
            "example": "1999-12-31T23:59:59Z",
            "format": "date-time",
            "type": "string"
          },
          "endDate": {
            "description": "ISO 8601 date time format",
            "example": "1999-12-31T23:59:59Z",
            "format": "date-time",
            "type": "string"
          },
          "hasFinancialInformation": {
            "description": "Absence case has financial information",
            "type": "boolean"
          },
          "reason": {
            "description": "Reason for the absence",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "reasonQualifier1": {
            "description": "Qualifier 1",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "reasonQualifier2": {
            "description": "Qualifier 2",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "startDate": {
            "description": "ISO 8601 date time format",
            "example": "1999-12-31T23:59:59Z",
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "description": "Value expected to be from is for enum domain CurrentPhase",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          }
        },
        "type": "object"
      },
      "NotificationAccommodationCaseSummary": {
        "description": "The accommodation child cases under this notification case.",
        "properties": {
          "accommodationCaseId": {
            "description": "The Case Number for the accommodation case",
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "accommodationDecision": {
            "description": "The decision made on this accommodation case",
            "type": "string"
          },
          "caseHandler": {
            "description": "The Person handling the accommodation case",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "caseHandlerEmailAddress": {
            "description": "The email address of the accommodation case handler ",
            "maxLength": 20,
            "minLength": 0,
            "type": "string"
          },
          "caseHandlerPhoneNumber": {
            "description": "The phone number of the accommodation case handler ",
            "maxLength": 20,
            "minLength": 0,
            "type": "string"
          },
          "decisionDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "limitations": {
            "description": "Represents a Limitation to be associated to an Accommodation Case.",
            "items": {
              "$ref": "#/components/schemas/LimitationDetail"
            },
            "type": "array"
          },
          "notificationDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "notifiedBy": {
            "description": "The notifier for this accommodation case",
            "type": "string"
          },
          "pregnancyRelated": {
            "description": "The date a decision was made on this accommodation case",
            "type": "string"
          },
          "status": {
            "description": "The Accommodation Case current phase.",
            "type": "string"
          },
          "workplaceAccommodations": {
            "description": "List of Accommodations for this accommodation case",
            "items": {
              "$ref": "#/components/schemas/WorkPlaceAccommodationDetail"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "NotificationCaseEmbeddable": {
        "description": "Parent case of this accommodation case.",
        "properties": {
          "caseNumber": {
            "description": "Business identifier for this case.",
            "type": "string"
          },
          "id": {
            "description": "Resource Id of the notification case this accommodation case belongs to if one exists.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "NotificationCaseSummary": {
        "properties": {
          "absences": {
            "description": "The child absence cases under this notification case.",
            "items": {
              "$ref": "#/components/schemas/NotificationAbsenceCaseSummary"
            },
            "type": "array"
          },
          "accidentDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "accommodations": {
            "description": "The child cases under this notification case.",
            "items": {
              "$ref": "#/components/schemas/NotificationAccommodationCaseSummary"
            },
            "type": "array"
          },
          "actualDeliveryDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "actualPartialReturnToWorkDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "actualReturnToWorkDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "claims": {
            "description": "The child cases under this notification case.",
            "items": {
              "$ref": "#/components/schemas/NotificationClaimSummary"
            },
            "type": "array"
          },
          "createdDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "dateFirstMissingWork": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "expectedDeliveryDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "expectedRTWDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "multipleConflictingAccidentDates": {
            "description": "Multiple conflicting accident dates found.If true,accidentDate attribute will be empty.",
            "type": "boolean"
          },
          "notificationCaseId": {
            "description": "The case number for the notification case.",
            "type": "string"
          },
          "notificationDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "notificationReason": {
            "description": "Notification reason selected during notification case intake.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "partialReturnToWorkDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "releasedPartialReturnToWorkDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "releasedReturnToWorkDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "returnToWorkIntention": {
            "description": "Indicates the employees return to work plans once they have finished their leave.",
            "type": "string"
          },
          "status": {
            "description": "The notification case status his is the current phase of the notification case managing process.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "NotificationCaseSummaryForAbsenceTypes": {
        "properties": {
          "absences": {
            "description": "The absence child cases under this notification case.",
            "items": {
              "$ref": "#/components/schemas/NotificationAbsenceCaseSummary"
            },
            "type": "array"
          },
          "accidentDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "accommodations": {
            "description": "The accommodation child cases under this notification case.",
            "items": {
              "$ref": "#/components/schemas/NotificationAccommodationCaseSummary"
            },
            "type": "array"
          },
          "actualDeliveryDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "actualPartialReturnToWorkDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "actualReturnToWorkDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "createdDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "dateFirstMissingWork": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "expectedDeliveryDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "expectedRTWDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "multipleConflictingAccidentDates": {
            "description": "Multiple conflicting accident dates found.If true,accidentDate attribute will be empty.",
            "type": "boolean"
          },
          "notificationCaseId": {
            "description": "The case number for the notification case.",
            "type": "string"
          },
          "notificationDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "notificationReason": {
            "description": "Notification reason selected during notification case intake.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "partialReturnToWorkDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "releasedPartialReturnToWorkDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "releasedReturnToWorkDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "returnToWorkIntention": {
            "description": "Indicates the employees return to work plans once they have finished their leave.",
            "type": "string"
          },
          "status": {
            "description": "The notification case status his is the current phase of the notification case managing process.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "NotificationCaseSummaryForClaims": {
        "properties": {
          "accidentDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "actualDeliveryDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "actualPartialReturnToWorkDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "actualReturnToWorkDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "claims": {
            "description": "The child cases under this notification case.",
            "items": {
              "$ref": "#/components/schemas/NotificationClaimSummary"
            },
            "type": "array"
          },
          "createdDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "dateFirstMissingWork": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "expectedDeliveryDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "expectedRTWDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "multipleConflictingAccidentDates": {
            "description": "Multiple conflicting accident dates found.If true,accidentDate attribute will be empty.",
            "type": "boolean"
          },
          "notificationCaseId": {
            "description": "The case number for the notification case.",
            "type": "string"
          },
          "notificationDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "notificationReason": {
            "description": "Notification reason selected during notification case intake.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "partialReturnToWorkDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "releasedPartialReturnToWorkDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "releasedReturnToWorkDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "returnToWorkIntention": {
            "description": "Indicates the employees return to work plans once they have finished their leave.",
            "type": "string"
          },
          "status": {
            "description": "The notification case status his is the current phase of the notification case managing process.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "NotificationClaimSummary": {
        "description": "The child cases under this notification case.",
        "properties": {
          "caseComplexity": {
            "description": "Case complexity on Claim",
            "type": "string"
          },
          "claimHandler": {
            "description": "The Person that is handling the claim.",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "claimHandlerEmailAddress": {
            "description": "The email address of the claim handler.",
            "maxLength": 40,
            "minLength": 0,
            "type": "string"
          },
          "claimHandlerPhoneNo": {
            "description": "The phone number of the claim handler.",
            "maxLength": 20,
            "minLength": 0,
            "type": "string"
          },
          "claimId": {
            "description": "The claim number of the claim",
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "claimType": {
            "description": "The name by which the claim type is referred.",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "classExtensionInformation": {
            "description": "An array of the extensionAttribute objects which contain extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "creationDate": {
            "description": "ISO 8601 date time format",
            "example": "1999-12-31T23:59:59Z",
            "format": "date-time",
            "type": "string"
          },
          "customerName": {
            "description": "The customer name of the claim",
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "description": {
            "description": "Description for this case as entered by the user.",
            "maxLength": 2000,
            "minLength": 0,
            "type": "string"
          },
          "effectiveDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "notificationDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "policyReferences": {
            "description": "The reference(s) to the policy from within the relevant admin system.",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "stageName": {
            "description": "The current stage of claim case.",
            "type": "string"
          },
          "status": {
            "description": "This is the stage in the process that the case is currently at.",
            "maxLength": 10,
            "minLength": 0,
            "type": "string"
          }
        },
        "required": [
          "claimId",
          "claimType"
        ],
        "type": "object"
      },
      "NotificationReasonResponse": {
        "description": "The notification reason associated with this absence reason. Enum domain 290.",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "OCOccupationAltEmploymentCatRequest": {
        "description": "Alternate employment category.",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "OCOccupationAltEmploymentCatResponse": {
        "description": "Alternate employment category.",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "OCOccupationEmpLocationCodeRequest": {
        "description": "Employment location code indicating Place of Work.",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "OCOccupationEmpLocationCodeResponse": {
        "description": "Employment location code indicating Place of Work.",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "OCOccupationEmploymentStatusRequest": {
        "description": "Employment status.",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "OCOccupationEmploymentStatusResponse": {
        "description": "Employment status.",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "OCOccupationEmploymentTitleRequest": {
        "description": "Employment title.",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "OCOccupationEmploymentTitleResponse": {
        "description": "Employment title.",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "OCOccupationEndPositionCodeRequest": {
        "description": "Employment termination reason.",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "OCOccupationEndPositionCodeResponse": {
        "description": "Employment termination reason.",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "OCOccupationJobStrenuousnessRequest": {
        "description": "Job strength category.",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "OCOccupationJobStrenuousnessResponse": {
        "description": "Job strength category.",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "Occupation": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to self and child resources.",
              "format": "url",
              "type": "string"
            },
            "description": "Links to self and child resources.",
            "type": "object"
          },
          "additionalEmploymentCategory": {
            "$ref": "#/components/schemas/OCOccupationAltEmploymentCatResponse"
          },
          "codeId": {
            "description": "Occupation Industry Classification Code id.",
            "type": "string"
          },
          "codeName": {
            "description": "The name(s) associated with the specific Occupation Industry Classification Code id.",
            "type": "string"
          },
          "dateJobBegan": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "dateJobEnded": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "daysWorkedPerWeek": {
            "description": "The number of days worked per week, which can be specified with partial day.",
            "type": "string"
          },
          "employeeId": {
            "description": "Reference identifier of an employee in respect of its employer. ",
            "type": "string"
          },
          "employer": {
            "description": "This is the name of the Employer Party.",
            "type": "string"
          },
          "employmentCategory": {
            "$ref": "#/components/schemas/EmploymentCategoryResponse"
          },
          "employmentLocation": {
            "$ref": "#/components/schemas/OCOccupationEmpLocationCodeResponse"
          },
          "employmentStatus": {
            "$ref": "#/components/schemas/OCOccupationEmploymentStatusResponse"
          },
          "employmentTitle": {
            "$ref": "#/components/schemas/OCOccupationEmploymentTitleResponse"
          },
          "endEmploymentReason": {
            "$ref": "#/components/schemas/OCOccupationEndPositionCodeResponse"
          },
          "endPosReason": {
            "description": "The reason for job ending.",
            "type": "string"
          },
          "extensions": {
            "additionalProperties": {
              "description": "Occupation class extensions.",
              "type": "object"
            },
            "description": "Occupation class extensions.",
            "type": "object"
          },
          "hoursWorkedPerWeek": {
            "type": "string"
          },
          "id": {
            "description": "The unique identifier for the occupation, composed of classId and indexId",
            "type": "string"
          },
          "jobDesc": {
            "description": "Job description.",
            "type": "string"
          },
          "jobStrenuous": {
            "$ref": "#/components/schemas/OCOccupationJobStrenuousnessResponse"
          },
          "jobTitle": {
            "description": "Job title.",
            "type": "string"
          },
          "orgUnitName": {
            "description": "The name of the organisation unit within the employer organisation structure.",
            "type": "string"
          },
          "overrideDaysWorkedPerWeek": {
            "description": "Is override days worked per week true or false?",
            "type": "boolean"
          },
          "primary": {
            "description": "Indicates if the Occupation record is the primary occupation or not.",
            "type": "boolean"
          },
          "remarks": {
            "description": "Remarks about the Occupation.",
            "type": "string"
          },
          "selfEmployed": {
            "description": "Indicates whether the person linked to the occupation is self-employed.",
            "type": "boolean"
          },
          "wageBaseDetailsEmbeddable": {
            "$ref": "#/components/schemas/WageBaseDetailsEmbeddable"
          },
          "workPatternBasis": {
            "description": "Indicates the type of work pattern in use",
            "type": "string"
          },
          "workScheduleDescription": {
            "description": "Work schedule description.",
            "type": "string"
          },
          "workSiteName": {
            "description": "The name of the employer location which the occupation is related to.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "OccupationResources": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "elements": {
            "items": {
              "$ref": "#/components/schemas/Occupation"
            },
            "type": "array"
          },
          "hasMoreElements": {
            "description": "<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>",
            "type": "boolean"
          },
          "meta": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "totalSize": {
            "description": "<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "OccupationWeekBasedWorkPatternCommand": {
        "properties": {
          "extensions": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "patternStartDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "patternStatus": {
            "$ref": "#/components/schemas/WorkPatternStatusRequest"
          },
          "workPatternDays": {
            "description": "Day Patterns associated to the work pattern",
            "items": {
              "$ref": "#/components/schemas/WorkPatternDayCommand"
            },
            "type": "array"
          },
          "workPatternType": {
            "$ref": "#/components/schemas/WeekBasedWorkPatternTypeRequest"
          },
          "workWeekStarts": {
            "$ref": "#/components/schemas/WeekBasedWorkWeekStartsRequest"
          }
        },
        "required": [
          "workPatternDays",
          "workPatternType"
        ],
        "type": "object"
      },
      "OtherIncomeMoneyRequest": {
        "description": "Specifies the amount for other income.",
        "properties": {
          "amountMinorUnits": {
            "description": "The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
            "type": "string"
          }
        },
        "type": "object"
      },
      "OtherIncomeMoneyResponse": {
        "description": "Specifies the amount for other income.",
        "properties": {
          "amountMinorUnits": {
            "description": "The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
            "format": "int64",
            "type": "integer"
          },
          "currency": {
            "description": "The currency used in the Money amount",
            "type": "string"
          },
          "scale": {
            "description": "The scale used in the Money amount",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "OutstandingSupportingEvidence": {
        "properties": {
          "docReceived": {
            "description": "Indicates whether a document has been received for the outstanding supporting evidence.<BR>For instance, a document could be uploaded and linked to an outstanding requirement, however the outstanding requirement will remain OPEN until a back office user validates that the uploaded document is actually what was required.<BR>This flag will always be FALSE for a evidence result which is either pending or received but not satisfied; it will be TRUE for a received evidence result which is received and satisfied.<BR>If the element represents a combination of outstanding requirements and evidence results, the flag will be FALSE if at least one of these elements returns FALSE.",
            "type": "boolean"
          },
          "name": {
            "description": "The name of the document type representing the document that can satisfy the supporting evidence.",
            "maxLength": 350,
            "minLength": 0,
            "type": "string"
          },
          "rootCaseId": {
            "description": "The root case id is the id of the last case retrieved following all parent relationships starting from the case holding the supporting evidence elements. Given a case Id, all supporting evidence elements share the same root case.",
            "maxLength": 254,
            "minLength": 0,
            "type": "string"
          },
          "source": {
            "description": "The name of the party who is expected to provide the document. <BR>If the record returned represents an Outstanding Requirement, the source is the name of the party indicated as the source for that requirement, including the title if available. <BR>If the record returned represents an Evidence, the source is the Employee name, including the title if available. <BR>If the record returned represents both an Outstanding Requirement and an Evidence (because the same document would satisfy both) and the source names differ, then the source name from the Outstanding Requirement is returned. <BR>If the record returned represents two Outstanding Requirements (because the same document would satisfy both) and the source names differ, then the source name is randomly picked from one of them.",
            "type": "string"
          },
          "uploadCaseNumber": {
            "description": "If the supporting evidence element is requested by multiple cases, the upload Case Number is the id of the lowest case in the hierarchy which is the common parent of all such cases; If the supporting evidence element is requested by one case only, the upload Case Number is the id of that case. Given a caseId, different supporting evidence elements can a have different upload Case Number depending on which case(s) requests which supporting evidence.",
            "maxLength": 254,
            "minLength": 0,
            "type": "string"
          }
        },
        "type": "object"
      },
      "PaginatedEmployeeSearchResults": {
        "properties": {
          "employees": {
            "items": {
              "$ref": "#/components/schemas/EmployeeSummaryForManager"
            },
            "type": "array"
          },
          "totalNumberOfRecords": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "PaginatedSupervisedAbsences": {
        "properties": {
          "absences": {
            "items": {
              "$ref": "#/components/schemas/SupervisedAbsenceSummary"
            },
            "type": "array"
          },
          "totalNumberOfRecords": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "PaidLeaveCase": {
        "description": "The paid leave case details for this absence case.",
        "properties": {
          "caseNumber": {
            "description": "Case identification number.",
            "type": "string"
          },
          "caseType": {
            "description": "Name of the case type.",
            "type": "string"
          },
          "leavePlanId": {
            "description": "The business identifier of the Absence Plan.",
            "type": "string"
          },
          "leaveRequestId": {
            "description": "The business identifier of the Absence Leave Request.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Participant": {
        "properties": {
          "correspondenceAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "extendedAddress": {
            "$ref": "#/components/schemas/ExtendedAddress"
          },
          "participantSummary": {
            "$ref": "#/components/schemas/CaseParticipantsSummary"
          },
          "personDetails": {
            "$ref": "#/components/schemas/PersonDetails"
          }
        },
        "required": [
          "participantSummary"
        ],
        "type": "object"
      },
      "ParticipantContactDetails": {
        "properties": {
          "emailAddresses": {
            "description": "Return list of email addresses",
            "items": {
              "$ref": "#/components/schemas/EmailAddress"
            },
            "type": "array"
          },
          "phoneNumbers": {
            "description": "Return list of phone numbers",
            "items": {
              "$ref": "#/components/schemas/PhoneNumber"
            },
            "type": "array"
          },
          "preferredContactMethod": {
            "description": "Return the preferred contact method i.e. either the id of the preferred phone number or id of the preferred email address",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Payment": {
        "properties": {
          "accountTransferInfo": {
            "$ref": "#/components/schemas/AccountTransferInfo"
          },
          "benefitCaseNumber": {
            "description": "The Benefit Case Number.",
            "type": "string"
          },
          "benefitCaseTypeName": {
            "type": "string"
          },
          "benefitRightTypeName": {
            "type": "string"
          },
          "chequePaymentInfo": {
            "$ref": "#/components/schemas/ChequePaymentInfo"
          },
          "classExtensionInformation": {
            "description": "An array of the extensionAttribute objects which contain payments (OLPaymentEventInterface) extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "dateInterfaceRecordCreated": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "effectiveDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "nominatedPayeeName": {
            "description": "The party the payee nominated to receive payment",
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "payeeName": {
            "description": "The party to whom the payment was made",
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "paymentAddress": {
            "description": "The address the payment was sent to",
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "paymentAmount": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          },
          "paymentDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "paymentId": {
            "description": "Business Entity OID",
            "example": "PE-00012-0000001234",
            "format": "string",
            "type": "string"
          },
          "paymentMethod": {
            "description": "The method used to transfer the payment e.g. EFT, Hand Typed Check etc.",
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "paymentType": {
            "description": "The payment type e.g. recurring, adhoc etc",
            "maxLength": 250,
            "minLength": 0,
            "type": "string"
          },
          "periodEndDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "periodStartDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "rootCaseNumber": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PaymentLine": {
        "properties": {
          "amount": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "maxLength": 28,
            "minLength": 0,
            "type": "string"
          },
          "endDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "integrationType": {
            "description": "For adjustment PaymentLine this records the IntegrationType which may have been recorded for the adjustment",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "lineType": {
            "description": "The name of the payment adjustment e.g. Gross Benefit, Income Tax, Seat Belt etc.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "paymentLinesDetail": {
            "description": "The Payment Lines Details belongs to each payment.",
            "items": {
              "$ref": "#/components/schemas/PaymentLineDetails"
            },
            "type": "array"
          },
          "reference": {
            "description": "For adjustment PaymentLine this records the Reference which may have been recorded for the adjustment",
            "maxLength": 250,
            "minLength": 0,
            "type": "string"
          },
          "startDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PaymentLineDetails": {
        "description": "The Payment Lines Details belongs to each payment.",
        "properties": {
          "adjustmentCalcDetailClassExtension": {
            "description": "An array of the extensionAttribute objects which contain OLAdjustmentCalcDetail extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "adjustmentId": {
            "description": "Business Entity OID",
            "example": "PE-00012-0000001234",
            "format": "string",
            "type": "string"
          },
          "adjustmentTypeId": {
            "description": "Business Entity OID",
            "example": "PE-00012-0000001234",
            "format": "string",
            "type": "string"
          },
          "amount": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "maxLength": 28,
            "minLength": 0,
            "type": "string"
          },
          "calcDetails": {
            "description": "The Calculation Details that explain how each adjustment is calculated. ",
            "items": {
              "description": "The Calculation Details that explain how each adjustment is calculated. ",
              "type": "string"
            },
            "type": "array"
          },
          "endDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "fixedAmountIncreaseInstructionClassExtension": {
            "description": "An array of the extensionAttribute objects which contain OLFixedAmountIncreaseInstruction extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "payee": {
            "description": "The name of the Payee which the payment adjustment belongs.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "startDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PaymentMethodRequest": {
        "description": "Method of payment for the party, such as check or Electronic Funds Transfer (EFT) (EnumDomainId = 2069).",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PaymentMethodResponse": {
        "description": "Method of payment for the party, such as check or Electronic Funds Transfer (EFT) (EnumDomainId = 2069).",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "PaymentPreferenceAddressEmbeddable": {
        "description": "Payment preference is valid to date.",
        "properties": {
          "addressLine1": {
            "description": "First line of an address.",
            "type": "string"
          },
          "addressLine2": {
            "description": "Second line of an address.",
            "type": "string"
          },
          "addressLine3": {
            "description": "Third line of an address.",
            "type": "string"
          },
          "addressLine4": {
            "description": "Fourth line of an address.",
            "type": "string"
          },
          "addressLine5": {
            "description": "Fifth line of an address.",
            "type": "string"
          },
          "addressLine6": {
            "description": "Sixth line of an address.",
            "type": "string"
          },
          "addressLine7": {
            "description": "Seventh line of an address.",
            "type": "string"
          },
          "country": {
            "$ref": "#/components/schemas/CountryResponse"
          },
          "extensions": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "extraAustralianFields": {
            "$ref": "#/components/schemas/PaymentPreferenceAustralianAddressEmbeddable"
          },
          "postCode": {
            "description": "International Postcode.",
            "type": "string"
          },
          "premiseNo": {
            "description": "The premise number i.e. the street number.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PaymentPreferenceAustralianAddressEmbeddable": {
        "properties": {
          "buildingName1": {
            "description": "The name of the building.",
            "type": "string"
          },
          "buildingName2": {
            "description": "The name of the building continued.",
            "type": "string"
          },
          "dpId": {
            "description": "Referred to as DPID this is an 8-digit Australian post address identifier which uniquely identifies each delivery point to which Australia Post delivers mail. ",
            "format": "int32",
            "type": "integer"
          },
          "extensions": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "floorLevelNumber": {
            "description": "The floorLevelNumber must not be more than {max} characters",
            "type": "string"
          },
          "floorLevelType": {
            "$ref": "#/components/schemas/AUFloorLevelTypesResponse"
          },
          "lotNumber": {
            "description": "The lot number.",
            "type": "string"
          },
          "postalNumber": {
            "description": "The postal number. ",
            "type": "string"
          },
          "postalNumberPrefix": {
            "description": "This refers to the non-numeric portion preceding the Postal Number. EXAMPLE : PO Box B20 where B is the prefix. ",
            "type": "string"
          },
          "postalNumberSuffix": {
            "description": "This refers to the non-numeric portion following the Postal Number. EXAMPLE : PO Box 20A where A is the suffix.",
            "type": "string"
          },
          "postalType": {
            "$ref": "#/components/schemas/AUPostalTypesResponse"
          },
          "premiseNoSuffix": {
            "description": "The suffix to apply to the number of the premise.",
            "type": "string"
          },
          "premiseNoTo": {
            "description": "The high number in a range for the premise. This is used when an address consists of a range of numbers as in 8-10 Lower Pembroke Street where the value 10 would be stored in this field. ",
            "format": "int32",
            "type": "integer"
          },
          "premiseNoToSuffix": {
            "description": "The suffix to apply to the number to of the premise. ",
            "type": "string"
          },
          "streetSuffix": {
            "$ref": "#/components/schemas/AUStreetSuffixesResponse"
          }
        },
        "type": "object"
      },
      "PaymentPreferenceCustomerResources": {
        "description": "Collects Payment preference customer resource.",
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "elements": {
            "items": {
              "$ref": "#/components/schemas/PaymentPreferenceResource"
            },
            "type": "array"
          },
          "hasMoreElements": {
            "description": "<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>",
            "type": "boolean"
          },
          "meta": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "totalSize": {
            "description": "<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "PaymentPreferenceResource": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "accountDetail": {
            "$ref": "#/components/schemas/AccountDetailEmbeddable"
          },
          "address": {
            "$ref": "#/components/schemas/PaymentPreferenceAddressEmbeddable"
          },
          "chequeDetail": {
            "$ref": "#/components/schemas/ChequeDetailEmbeddable"
          },
          "default": {
            "type": "boolean"
          },
          "description": {
            "description": "Payment preference description.",
            "type": "string"
          },
          "effectiveFromDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "effectiveToDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "extensions": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "id": {
            "type": "string"
          },
          "nominatedPayee": {
            "description": "Name of the nominated payee.",
            "type": "string"
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/PaymentMethodResponse"
          },
          "stageName": {
            "description": "The current stage of the payment preference.",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/CurrentPhaseResponse"
          }
        },
        "type": "object"
      },
      "PaymentPreferenceResponse": {
        "description": "Gets the payment preference details  of main payee on benefit.",
        "properties": {
          "accountDetails": {
            "$ref": "#/components/schemas/AccountDetails"
          },
          "chequeDetails": {
            "$ref": "#/components/schemas/ChequeDetails"
          },
          "classExtensionInformation": {
            "description": "An array of the extensionAttribute objects which contain claim extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "customerAddress": {
            "$ref": "#/components/schemas/CustomerAddress"
          },
          "description": {
            "description": "Description of the Payment Preference",
            "type": "string"
          },
          "effectiveFrom": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "effectiveTo": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "isDefault": {
            "type": "boolean"
          },
          "nominatedPayee": {
            "description": "The nominated payee for the payment preference",
            "maxLength": 250,
            "minLength": 0,
            "type": "string"
          },
          "paymentMethod": {
            "description": "The name of the payment method. This is used to determine whether chequeDetails or accountDetails is displayed",
            "type": "string"
          },
          "paymentPreferenceId": {
            "description": "The unique identifier for payment preference",
            "maxLength": 32,
            "minLength": 0,
            "type": "string"
          },
          "stageName": {
            "description": "The current stage of the payment preference",
            "type": "string"
          },
          "status": {
            "description": "The status of the payment preference",
            "type": "string"
          }
        },
        "required": [
          "paymentMethod",
          "paymentPreferenceId"
        ],
        "type": "object"
      },
      "Period": {
        "description": "Leave period",
        "properties": {
          "balanceDeduction": {
            "description": "The amount of time deducted from the time bank in the specified time entitlement basis e.g. number of Weeks, Days etc.",
            "type": "number"
          },
          "endDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "leavePlan": {
            "$ref": "#/components/schemas/LeavePlan"
          },
          "leaveRequest": {
            "$ref": "#/components/schemas/LeaveRequest"
          },
          "parentPeriodReference": {
            "description": "Reference number for the parent period",
            "type": "string"
          },
          "periodReference": {
            "description": "Business Entity OID",
            "example": "PE-00012-0000001234",
            "format": "string",
            "type": "string"
          },
          "relatedToEpisodic": {
            "description": "True if this period represents a reported actual for an episodic requested period, false otherwise",
            "type": "boolean"
          },
          "requestedEpisodicLeaveDetails": {
            "$ref": "#/components/schemas/RequestedEpisodicLeaveDetails"
          },
          "startDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "status": {
            "description": "Status of the leave request",
            "type": "string"
          },
          "timeDecisionReason": {
            "description": "Decision reason associated with the period",
            "type": "string"
          },
          "timeDecisionStatus": {
            "description": "Decision status associated with the period",
            "type": "string"
          },
          "timeDeducted": {
            "description": "The amount of time deducted in this period, in the specified time deducted basis e.g. number of Hours, Days",
            "type": "string"
          },
          "timeDeductedBasis": {
            "description": "The time deducted basis in this period e.g. Hours, Days",
            "type": "string"
          },
          "timeRequested": {
            "description": "The amount of time requested in this period, in the specified time entitlement basis e.g. number of Weeks, Days",
            "type": "string"
          },
          "type": {
            "description": "Type of the absence period",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PeriodDecisions": {
        "properties": {
          "decisions": {
            "description": "List of Period Decisions for the given absence or employee",
            "items": {
              "$ref": "#/components/schemas/Decision"
            },
            "type": "array"
          },
          "endDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "startDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PeriodPeriodTypeResponse": {
        "description": "The type of Period this Benefit Period defines.",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "PersonDetails": {
        "description": "Person Details.",
        "properties": {
          "classExtensionInformation": {
            "description": "An array of the extensionAttribute objects which contain customer (OCPerson) extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "dateOfBirth": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "gender": {
            "description": "The person's gender.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "maritalStatus": {
            "description": "Person's marital status - single / married / etc.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "nationality": {
            "description": "Person's nationality.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "needsInterpretor": {
            "description": "Indicates if the customer needs an interpreter.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PhoneNumber": {
        "description": "An array of objects which contain customer phone number details.",
        "properties": {
          "areaCode": {
            "description": "area code value",
            "maxLength": 20,
            "minLength": 0,
            "type": "string"
          },
          "classExtensionInformation": {
            "description": "An array of the extensionAttribute objects which contain phone number (OCPhone) extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "id": {
            "description": "The id of the contact method (e.g. phone / mobile / emailAddress) ",
            "format": "int64",
            "maximum": 10,
            "minimum": 0,
            "type": "integer"
          },
          "intCode": {
            "description": "international code value",
            "maxLength": 10,
            "minLength": 0,
            "type": "string"
          },
          "phoneNumberType": {
            "description": "The type of phone number (e.g. landline / mobile)",
            "maxLength": 10,
            "minLength": 0,
            "type": "string"
          },
          "preferred": {
            "type": "boolean"
          },
          "telephoneNo": {
            "description": "telephone No. value",
            "maxLength": 10,
            "minLength": 0,
            "type": "string"
          }
        },
        "required": [
          "id",
          "phoneNumberType"
        ],
        "type": "object"
      },
      "Policy": {
        "description": "Object with information about policies that will be added to the claim.",
        "properties": {
          "referenceNo": {
            "description": "Unique alphanumeric policy reference from the relevant policy admin system.",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          }
        },
        "required": [
          "referenceNo"
        ],
        "type": "object"
      },
      "PregnancyDetails": {
        "properties": {
          "actualDeliveryDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "deliveryType": {
            "description": "Indicates the type of delivery following pregnancy.",
            "type": "string"
          },
          "expectedDeliveryDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "pregnancyComplications": {
            "description": "Indicates whether or not pregnancy complications occurred.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PregnancyRelatedResponse": {
        "description": "Identifies whether the accommodation being requested is related to an employee's pregnancy or not. (Enum Domain = 2500)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "QuerySortInfo": {
        "properties": {
          "sortOrderItemsList": {
            "items": {
              "$ref": "#/components/schemas/SortOrderItem"
            },
            "type": "array"
          },
          "sortStatementsText": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "QuestionAttribute": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SimpleQuestionAttribute"
          },
          {
            "$ref": "#/components/schemas/EnumQuestionAttribute"
          },
          {
            "$ref": "#/components/schemas/CompoundQuestionAttribute"
          }
        ],
        "type": "object"
      },
      "QuestionSet": {
        "description": "Set of the question. It could be any one of the following 3 type Simple, Enum or Compound Question.",
        "properties": {
          "questions": {
            "items": {
              "$ref": "#/components/schemas/QuestionAttribute"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ReadCustomerOccupation": {
        "properties": {
          "additionalEmploymentCategory": {
            "description": "The alternate employment category.",
            "type": "string"
          },
          "codeId": {
            "description": "The occupation Code ID.",
            "type": "string"
          },
          "codeName": {
            "description": "The name associated with the specific occupation Code ID.",
            "type": "string"
          },
          "dateJobBegan": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "dateJobEnded": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "daysWorkedPerWeek": {
            "description": "The number of days worked per week.",
            "type": "number"
          },
          "employeeId": {
            "description": "The id of an employee in respect of its employer.",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "employer": {
            "description": "The name of the employer.",
            "type": "string"
          },
          "employmentCategory": {
            "description": "The employment category.",
            "type": "string"
          },
          "employmentLocation": {
            "description": "The employment location code.",
            "type": "string"
          },
          "employmentStatus": {
            "description": "The employment status.",
            "type": "string"
          },
          "employmentTitle": {
            "description": "The employment title.",
            "type": "string"
          },
          "endEmploymentReason": {
            "description": "The code for occupation ending.",
            "type": "string"
          },
          "endPosReason": {
            "description": "The reason for job ending.",
            "type": "string"
          },
          "extensionAttributes": {
            "description": "The extension attributes.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "hoursWorkedPerWeek": {
            "description": "The number of hours worked per week.",
            "type": "number"
          },
          "jobDesc": {
            "description": "The job description.",
            "type": "string"
          },
          "jobStrenuous": {
            "description": "The job strenuous.",
            "type": "string"
          },
          "jobTitle": {
            "description": "The job title.",
            "type": "string"
          },
          "occupationId": {
            "description": "The occupation ID.",
            "format": "int64",
            "type": "integer"
          },
          "overrideDaysWorkedPerWeek": {
            "description": "Is override days worked per week true or false?",
            "type": "boolean"
          },
          "remarks": {
            "description": "The occupation remarks.",
            "type": "string"
          },
          "selfEmployed": {
            "description": "Is occupation considered self-employed?",
            "type": "boolean"
          },
          "workPatternBasis": {
            "description": "The work pattern basis.",
            "type": "string"
          },
          "workScheduleDescription": {
            "description": "The work schedule description.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ReadDisabilityBenefitResult": {
        "properties": {
          "benefitSummary": {
            "$ref": "#/components/schemas/BenefitSummary"
          },
          "certificationPeriods": {
            "description": "The certification period details of the disability benefit.",
            "items": {
              "$ref": "#/components/schemas/CertificationPeriodDetails"
            },
            "type": "array"
          },
          "disabilityBenefit": {
            "$ref": "#/components/schemas/DisabilityBenefit"
          }
        },
        "type": "object"
      },
      "ReadDisabilityResult": {
        "properties": {
          "claimSummary": {
            "$ref": "#/components/schemas/ClaimSummary"
          },
          "disabilityClaim": {
            "$ref": "#/components/schemas/DisabilityClaim"
          }
        },
        "type": "object"
      },
      "ReadLumpSumBenefitResult": {
        "properties": {
          "benefitSummary": {
            "$ref": "#/components/schemas/BenefitSummary"
          },
          "lumpSumBenefit": {
            "$ref": "#/components/schemas/LumpSumBenefit"
          }
        },
        "type": "object"
      },
      "ReadOccupation": {
        "properties": {
          "additionalEmploymentCategory": {
            "description": "The alternate employment category.",
            "type": "string"
          },
          "codeId": {
            "description": "The occupation Code ID.",
            "type": "string"
          },
          "codeName": {
            "description": "The name associated with the specific occupation Code ID.",
            "type": "string"
          },
          "dateJobBegan": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "dateJobEnded": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "daysWorkedPerWeek": {
            "description": "The number of days worked per week.",
            "type": "number"
          },
          "employeeId": {
            "description": "The id of an employee in respect of its employer.",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "employer": {
            "description": "The name of the employer.",
            "type": "string"
          },
          "employmentCategory": {
            "description": "The employment category.",
            "type": "string"
          },
          "employmentLocation": {
            "description": "The employment location code.",
            "type": "string"
          },
          "employmentStatus": {
            "description": "The employment status.",
            "type": "string"
          },
          "employmentTitle": {
            "description": "The employment title.",
            "type": "string"
          },
          "endEmploymentReason": {
            "description": "The code for occupation ending.",
            "type": "string"
          },
          "endPosReason": {
            "description": "The reason for job ending.",
            "type": "string"
          },
          "extensionAttributes": {
            "description": "The extension attributes.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "hoursWorkedPerWeek": {
            "description": "The number of hours worked per week.",
            "type": "number"
          },
          "jobDesc": {
            "description": "The job description.",
            "type": "string"
          },
          "jobStrenuous": {
            "description": "The job strenuous.",
            "type": "string"
          },
          "jobTitle": {
            "description": "The job title.",
            "type": "string"
          },
          "occupationId": {
            "description": "The occupation ID.",
            "format": "int64",
            "type": "integer"
          },
          "overrideDaysWorkedPerWeek": {
            "description": "Is override days worked per week true or false?",
            "type": "boolean"
          },
          "primary": {
            "description": "Is occupation the primary one?",
            "type": "boolean"
          },
          "remarks": {
            "description": "The occupation remarks.",
            "type": "string"
          },
          "selfEmployed": {
            "description": "Is occupation considered self-employed?",
            "type": "boolean"
          },
          "workPatternBasis": {
            "description": "The work pattern basis.",
            "type": "string"
          },
          "workScheduleDescription": {
            "description": "The work schedule description.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ReasonRequest": {
        "description": "Reason for change request(domainId = 6870).Some example instance values include:'Employee Requested Removal','Add time for identical Absence Reason','Add time for different Absence Reason','Add time for unknown Absence Reason'.",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ReasonResponse": {
        "description": "Reason for change request(domainId = 6870).Some example instance values include:'Employee Requested Removal','Add time for identical Absence Reason','Add time for different Absence Reason','Add time for unknown Absence Reason'.",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "ReceivedViaResponse": {
        "description": "The method used to receive the reported actual associated to this reporting information for e.g Phone, Email, Fax, SMS, Paper, Mail Post. This maps to enum AbsenceMethodOfContact(domain id 33)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "ReducedScheduleLeavePeriod": {
        "properties": {
          "endDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "fridayOffHours": {
            "description": "The end date off hours for Friday.",
            "format": "int32",
            "type": "integer"
          },
          "fridayOffMinutes": {
            "description": "The end date off minutes for Friday.",
            "format": "int32",
            "type": "integer"
          },
          "mondayOffHours": {
            "description": "The end date off hours for Monday.",
            "format": "int32",
            "type": "integer"
          },
          "mondayOffMinutes": {
            "description": "The end date off minutes for Monday.",
            "format": "int32",
            "type": "integer"
          },
          "saturdayOffHours": {
            "description": "The end date off hours for Saturday.",
            "format": "int32",
            "type": "integer"
          },
          "saturdayOffMinutes": {
            "description": "The end date off minutes for Saturday.",
            "format": "int32",
            "type": "integer"
          },
          "startDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "status": {
            "description": "The status of this absence period. This maps to enum AbsenceStatus(domain id 6812).",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "sundayOffHours": {
            "description": "The end date off hours for Sunday.",
            "format": "int32",
            "type": "integer"
          },
          "sundayOffMinutes": {
            "description": "The end date off minutes for Sunday.",
            "format": "int32",
            "type": "integer"
          },
          "thursdayOffHours": {
            "description": "The end date off hours for Thursday.",
            "format": "int32",
            "type": "integer"
          },
          "thursdayOffMinutes": {
            "description": "The end date off minutes for Thursday.",
            "format": "int32",
            "type": "integer"
          },
          "tuesdayOffHours": {
            "description": "The end date off hours for Tuesday.",
            "format": "int32",
            "type": "integer"
          },
          "tuesdayOffMinutes": {
            "description": "The end date off minutes for Tuesday.",
            "format": "int32",
            "type": "integer"
          },
          "wednesdayOffHours": {
            "description": "The end date off hours for Wednesday.",
            "format": "int32",
            "type": "integer"
          },
          "wednesdayOffMinutes": {
            "description": "The end date off minutes for Wednesday.",
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "endDate",
          "startDate"
        ],
        "type": "object"
      },
      "ReflexiveQuestionResource": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "primaryRelationshipQuestionSet": {
            "description": "Set of question related to one or more primary relationship.",
            "items": {
              "$ref": "#/components/schemas/RelationshipQuestionSet"
            },
            "type": "array"
          },
          "reason": {
            "$ref": "#/components/schemas/AbsenceReasonSummary"
          },
          "reasonQuestionSet": {
            "$ref": "#/components/schemas/QuestionSet"
          },
          "secondaryRelationshipQuestionSet": {
            "description": "Set of question related to one or more secondary relationship.",
            "items": {
              "$ref": "#/components/schemas/RelationshipQuestionSet"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ReflexiveQuestionType": {
        "properties": {
          "booleanValue": {
            "description": "Boolean value of an attribute.",
            "type": "boolean"
          },
          "dateValue": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "decimalValue": {
            "description": "Decimal value of an attribute.",
            "type": "number"
          },
          "enumValue": {
            "$ref": "#/components/schemas/ModelEnum"
          },
          "fieldName": {
            "description": "The name of an attribute.",
            "maxLength": 300,
            "minLength": 0,
            "type": "string"
          },
          "integerValue": {
            "description": "Integer value of an attribute.",
            "format": "int32",
            "type": "integer"
          },
          "stringValue": {
            "description": "String value of an attribute.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          }
        },
        "required": [
          "fieldName"
        ],
        "type": "object"
      },
      "ReflexiveQuestions": {
        "properties": {
          "reflexiveQuestionDetails": {
            "items": {
              "$ref": "#/components/schemas/ReflexiveQuestionType"
            },
            "type": "array"
          },
          "reflexiveQuestionLevel": {
            "description": "The reflexive question level possible value can be 'reason', 'primary relationship' or 'secondary relationship'.",
            "maxLength": 25,
            "minLength": 0,
            "type": "string"
          }
        },
        "required": [
          "reflexiveQuestionLevel"
        ],
        "type": "object"
      },
      "RegionTaxCodeDetails": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/AUTaxCodeDetails"
          },
          {
            "$ref": "#/components/schemas/NZTaxCodeDetails"
          }
        ],
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RegistrationResponse": {
        "description": "Object with information about the registration status of a customer, e.g. is registered.",
        "properties": {
          "registered": {
            "description": "True if the customer is registered, false otherwise.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "Relationship": {
        "description": "A relationship is the way an employee is connected or linked to others relevant to this reason. Like Father, Daughter etc.",
        "properties": {
          "relationshipName": {
            "description": "Name of the relationship.",
            "type": "string"
          },
          "relationshipQualifier1": {
            "description": "The first qualifier for the relationship.",
            "type": "string"
          },
          "relationshipQualifier2": {
            "description": "The second qualifier for the relationship.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RelationshipQuestionSet": {
        "description": "Set of question related to one or more secondary relationship.",
        "properties": {
          "questions": {
            "items": {
              "$ref": "#/components/schemas/QuestionAttribute"
            },
            "type": "array"
          },
          "relationShips": {
            "description": "List of Relationship",
            "items": {
              "$ref": "#/components/schemas/Relationship"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ReportedByResponse": {
        "description": "The contact role that reported the actual absence period for e.g Employee, Employee Manager, Employer Representative. This maps to enum ContactRole(domain id 6842)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "ReportedReducedScheduleLeavePeriod": {
        "description": "The list of reduced scheduled leave periods.",
        "properties": {
          "decision": {
            "description": "Decison status for the absence period. This maps to enum DecisionStatus(domain id 6821).",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "endDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "fridayOffHours": {
            "description": "The end date off hours for Friday.",
            "format": "int32",
            "type": "integer"
          },
          "fridayOffMinutes": {
            "description": "The end date off minutes for Friday.",
            "format": "int32",
            "type": "integer"
          },
          "mondayOffHours": {
            "description": "The end date off hours for Monday.",
            "format": "int32",
            "type": "integer"
          },
          "mondayOffMinutes": {
            "description": "The end date off minutes for Monday.",
            "format": "int32",
            "type": "integer"
          },
          "saturdayOffHours": {
            "description": "The end date off hours for Saturday.",
            "format": "int32",
            "type": "integer"
          },
          "saturdayOffMinutes": {
            "description": "The end date off minutes for Saturday.",
            "format": "int32",
            "type": "integer"
          },
          "startDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "sundayOffHours": {
            "description": "The end date off hours for Sunday.",
            "format": "int32",
            "type": "integer"
          },
          "sundayOffMinutes": {
            "description": "The end date off minutes for Sunday.",
            "format": "int32",
            "type": "integer"
          },
          "thursdayOffHours": {
            "description": "The end date off hours for Thursday.",
            "format": "int32",
            "type": "integer"
          },
          "thursdayOffMinutes": {
            "description": "The end date off minutes for Thursday.",
            "format": "int32",
            "type": "integer"
          },
          "tuesdayOffHours": {
            "description": "The end date off hours for Tuesday.",
            "format": "int32",
            "type": "integer"
          },
          "tuesdayOffMinutes": {
            "description": "The end date off minutes for Tuesday.",
            "format": "int32",
            "type": "integer"
          },
          "wednesdayOffHours": {
            "description": "The end date off hours for Wednesday.",
            "format": "int32",
            "type": "integer"
          },
          "wednesdayOffMinutes": {
            "description": "The end date off minutes for Wednesday.",
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "endDate",
          "startDate"
        ],
        "type": "object"
      },
      "ReportedTimeOffLeavePeriod": {
        "description": "The list of time off leave periods.",
        "properties": {
          "decision": {
            "description": "Decison status for the absence period. This maps to enum DecisionStatus(domain id 6821).",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "endDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "endDateFullDay": {
            "description": "The end date full day.",
            "type": "boolean"
          },
          "endDateOffHours": {
            "description": "The end date off hours.",
            "format": "int32",
            "type": "integer"
          },
          "endDateOffMinutes": {
            "description": "The end date off minutes.",
            "format": "int32",
            "type": "integer"
          },
          "lastDayWorked": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "startDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "startDateFullDay": {
            "description": "The start date full day.",
            "type": "boolean"
          },
          "startDateOffHours": {
            "description": "The start date off hours.",
            "format": "int32",
            "type": "integer"
          },
          "startDateOffMinutes": {
            "description": "The start date off minutes.",
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "endDate",
          "startDate"
        ],
        "type": "object"
      },
      "RequestStatusResponse": {
        "description": "Status of processing of leave period change request(domainId = 29).Some example instance values include:'Open' - For request in Progress,'Close' - For completed request with no outstanding actions,'Cancelled' - For a cancelled request",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "RequestedEpisodicLeaveDetails": {
        "description": "The specified duration and frequency details for a period of time, typically associated with re-occurring unforeseeable absences for e.g. Requested Leave: Episodic / leave as needed (4 hours twice per day) due to Bereavement from Thursday, October 1st 2020 through Thursday, October 15th 2020.",
        "properties": {
          "duration": {
            "description": "The duration of each period of absence, for example, 3 (Hours).",
            "format": "int64",
            "type": "integer"
          },
          "durationBasis": {
            "description": "The unit of the duration of the period of absence, for example, Minutes, Hours, Days. This maps to a sub-set of the Enum TimeUnits (domain id 6757).",
            "type": "string"
          },
          "frequency": {
            "description": "How often individual periods of absence are taken, for example, 2 (times)",
            "format": "int64",
            "type": "integer"
          },
          "frequencyInterval": {
            "description": "The interval of time between the individual periods of absence, for example, 1 (Weeks).",
            "format": "int64",
            "type": "integer"
          },
          "frequencyIntervalBasis": {
            "description": "The unit of the interval between the periods of absence, for example, Minutes, Hours, Days. This maps to a sub-set of the Enum TimeUnits (domain id 6757)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ResidentialStatusRequest": {
        "description": "Indicates residential status. Sample values are 'Resident', 'Non Resident', 'Working Holiday'",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ResidentialStatusResponse": {
        "description": "Indicates residential status. Sample values are 'Resident', 'Non Resident', 'Working Holiday'",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "RestrictionsLimitations": {
        "properties": {
          "restrictionEffectiveDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "restrictions": {
            "description": "Specifies the disabilities/restrictions experienced by the injured party as a result of the claim.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SalaryAmountBasisRequest": {
        "description": "Basis for salary amount being used (domainId = 2514)",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SalaryAmountBasisResponse": {
        "description": "Basis for salary amount being used (domainId = 2514)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "SeriousHealthResponse": {
        "description": "The reason for leave is related to serious health condition or not. Enum domain id 6782.",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "SimpleQuestionAttribute": {
        "description": "It will used define the metadata of the simple question like caption/title, type.",
        "properties": {
          "caption": {
            "description": "The descriptive heading or title of a question.",
            "type": "string"
          },
          "fieldName": {
            "description": "The attribute Name of the question.",
            "type": "string"
          },
          "fieldType": {
            "description": "The type of value or data.",
            "enum": [
              "booleanValue",
              "dateValue",
              "decimalValue",
              "integerValue",
              "stringValue"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "SocialSecurityBenefitResponse": {
        "properties": {
          "authorityConsentDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "awardInformationReceivedDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "benefitAmount": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          },
          "claimStatus": {
            "description": "The status of the insureds application with the Social Security Administration.",
            "type": "string"
          },
          "disabilityBenefitsEligibleDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "earlyRetirementBenefitsEligibleDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "insuranceEndDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "reimbursementAgreementReceived": {
            "description": "Indicates that the reimbursement Agreement has been received.",
            "type": "boolean"
          },
          "reimbursementAgreementSignedDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "socialSecurityBenefitId": {
            "description": "The unique identification number(oid).",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SocialSecurityDecisionResponse": {
        "properties": {
          "applicationDate": {
            "description": "ISO 8601 date time format",
            "example": "1999-12-31T23:59:59Z",
            "format": "date-time",
            "type": "string"
          },
          "approvalType": {
            "description": "The level of decision made for the social security decision",
            "type": "string"
          },
          "decision": {
            "description": "This is the actual decision made for the social security decision",
            "type": "string"
          },
          "decisionDate": {
            "description": "ISO 8601 date time format",
            "example": "1999-12-31T23:59:59Z",
            "format": "date-time",
            "type": "string"
          },
          "socialSecurityDecisionId": {
            "description": "The unique identifier for the social security",
            "maxLength": 32,
            "minLength": 0,
            "type": "string"
          }
        },
        "required": [
          "socialSecurityDecisionId"
        ],
        "type": "object"
      },
      "SortOrderItem": {
        "properties": {
          "columnName": {
            "type": "string"
          },
          "direction": {
            "enum": [
              "ASC",
              "DESC"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "StartClaim": {
        "properties": {
          "claimIncurredDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "description": {
            "description": "Description for this case as entered by the user.",
            "maxLength": 2000,
            "minLength": 0,
            "type": "string"
          },
          "notificationCaseId": {
            "description": "The notification case number of the claim case if applicable.",
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "notificationReason": {
            "description": "Notification reason selected during notification case intake.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "policies": {
            "description": "An array of the policy objects with information about policies that will be added to the claim.",
            "items": {
              "$ref": "#/components/schemas/Policy"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "StartClaimSummary": {
        "properties": {
          "caseComplexity": {
            "description": "Case complexity on Claim",
            "type": "string"
          },
          "claimHandler": {
            "description": "The Person that is handling the claim.",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "claimHandlerEmailAddress": {
            "description": "The email address of the claim handler.",
            "maxLength": 40,
            "minLength": 0,
            "type": "string"
          },
          "claimHandlerPhoneNo": {
            "description": "The phone number of the claim handler.",
            "maxLength": 20,
            "minLength": 0,
            "type": "string"
          },
          "claimId": {
            "description": "The claim number of the claim",
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "claimType": {
            "description": "The name by which the claim type is referred.",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "classExtensionInformation": {
            "description": "An array of the extensionAttribute objects which contain extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "creationDate": {
            "description": "ISO 8601 date time format",
            "example": "1999-12-31T23:59:59Z",
            "format": "date-time",
            "type": "string"
          },
          "customerName": {
            "description": "The customer name of the claim",
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "description": {
            "description": "Description for this case as entered by the user.",
            "maxLength": 2000,
            "minLength": 0,
            "type": "string"
          },
          "effectiveDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "expectedReturnToWorkDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "notificationCaseId": {
            "description": "The notification case number of the claim case if applicable.",
            "maxLength": 256,
            "minLength": 0,
            "type": "string"
          },
          "notificationDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "policyReferences": {
            "description": "The reference(s) to the policy from within the relevant admin system.",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "stageName": {
            "description": "The current stage of claim case.",
            "type": "string"
          },
          "status": {
            "description": "This is the stage in the process that the case is currently at.",
            "maxLength": 10,
            "minLength": 0,
            "type": "string"
          }
        },
        "required": [
          "claimId",
          "claimType"
        ],
        "type": "object"
      },
      "StatusResponse": {
        "description": "The status for this absence period for e.g. Pending, In Review, Denied, Approved, Certified. This maps to enum DecisionStatus(domain id 6821)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "SupervisedAbsenceDay": {
        "description": "The absence days for this absence case.",
        "properties": {
          "date": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "decision": {
            "description": "Decision status of leave request",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "timeDeducted": {
            "description": "The total deducted time of absence associated with this day.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "timeDeductedBasis": {
            "description": "TaEnum<LengthBasis> value",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "timeRequested": {
            "description": "The total requested time of absence associated with this day.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "timeRequestedBasis": {
            "description": "TaEnum<LengthBasis> value",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          }
        },
        "type": "object"
      },
      "SupervisedAbsenceDetails": {
        "properties": {
          "absenceDays": {
            "description": "The absence days for this absence case.",
            "items": {
              "$ref": "#/components/schemas/SupervisedAbsenceDay"
            },
            "type": "array"
          },
          "absenceId": {
            "description": "The case number of this absence case.",
            "maxLength": 254,
            "minLength": 0,
            "type": "string"
          },
          "absencePeriods": {
            "description": "The absence periods for this absence case.",
            "items": {
              "$ref": "#/components/schemas/SupervisedAbsencePeriod"
            },
            "type": "array"
          },
          "actualPartialReturnToWorkDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "actualReturnToWorkDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "creationDate": {
            "description": "ISO 8601 date time format",
            "example": "1999-12-31T23:59:59Z",
            "format": "date-time",
            "type": "string"
          },
          "expectedReturnToWorkDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "lastUpdatedDate": {
            "description": "ISO 8601 date time format",
            "example": "1999-12-31T23:59:59Z",
            "format": "date-time",
            "type": "string"
          },
          "member": {
            "description": "Full name of the employee for whom the absence case was created.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "memberId": {
            "description": "The id of an employee in respect of its employer.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "notificationDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "notifiedBy": {
            "description": "The notifier for this absence case.",
            "maxLength": 254,
            "minLength": 0,
            "type": "string"
          },
          "partialReturnToWorkDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "releasedPartialReturnToWorkDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "releasedReturnToWorkDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "reportedReducedSchedule": {
            "description": "The list of supervised reduced schedule leave periods.",
            "items": {
              "$ref": "#/components/schemas/SupervisedReducedScheduleLeavePeriod"
            },
            "type": "array"
          },
          "reportedTimeOff": {
            "description": "The list of supervised time off leave periods.",
            "items": {
              "$ref": "#/components/schemas/SupervisedTimeOffLeavePeriod"
            },
            "type": "array"
          },
          "returnToWorkIntention": {
            "description": "Indicates the employees return to work plans once they have finished their leave.",
            "type": "string"
          },
          "status": {
            "description": "The status for this absence case.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          }
        },
        "type": "object"
      },
      "SupervisedAbsencePeriod": {
        "description": "The absence periods for this absence case.",
        "properties": {
          "absenceType": {
            "description": "The absenceType for the absence reason.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "endDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "episodicLeavePeriodDetail": {
            "$ref": "#/components/schemas/EpisodicLeavePeriodDetail"
          },
          "id": {
            "description": "Business Entity OID",
            "example": "PE-00012-0000001234",
            "format": "string",
            "type": "string"
          },
          "reason": {
            "description": "The name for the absence reason.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "reasonQualifier1": {
            "description": "The first qualifier for the absence reason.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "reasonQualifier2": {
            "description": "The second qualifier for the absence reason.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "requestStatus": {
            "description": "The status of the leave request.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "startDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "status": {
            "description": "The status for this absence period.",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          }
        },
        "type": "object"
      },
      "SupervisedAbsenceSummary": {
        "properties": {
          "absenceHandler": {
            "description": " The Person handling the absence case",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "absenceHandlerEmailAddress": {
            "description": "The phone number of the absence case handler",
            "maxLength": 40,
            "minLength": 0,
            "type": "string"
          },
          "absenceHandlerPhoneNumber": {
            "description": "The email address of the absence case handler",
            "maxLength": 20,
            "minLength": 0,
            "type": "string"
          },
          "absenceId": {
            "description": "Absence case identifier",
            "maxLength": 254,
            "minLength": 0,
            "type": "string"
          },
          "createdDate": {
            "description": "ISO 8601 date time format",
            "example": "1999-12-31T23:59:59Z",
            "format": "date-time",
            "type": "string"
          },
          "endDate": {
            "description": "ISO 8601 date time format",
            "example": "1999-12-31T23:59:59Z",
            "format": "date-time",
            "type": "string"
          },
          "hasFinancialInformation": {
            "description": "Absence case has financial information",
            "type": "boolean"
          },
          "member": {
            "description": "Full name of the employee",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "memberId": {
            "description": "The id of an employee in respect of its employer.",
            "maxLength": 50,
            "minLength": 0,
            "type": "string"
          },
          "notificationCaseId": {
            "description": "Notification case id, if applicable for the absence case",
            "type": "string"
          },
          "reason": {
            "description": "Reason for the absence",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "reasonQualifier1": {
            "description": "Qualifier 1",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "reasonQualifier2": {
            "description": "Qualifier 2",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "startDate": {
            "description": "ISO 8601 date time format",
            "example": "1999-12-31T23:59:59Z",
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "description": "Value expected to be from is for enum domain CurrentPhase",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          }
        },
        "type": "object"
      },
      "SupervisedReducedScheduleLeavePeriod": {
        "description": "The list of supervised reduced schedule leave periods.",
        "properties": {
          "endDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "fridayOffHours": {
            "description": "The end date off hours for Friday.",
            "format": "int32",
            "type": "integer"
          },
          "fridayOffMinutes": {
            "description": "The end date off minutes for Friday.",
            "format": "int32",
            "type": "integer"
          },
          "mondayOffHours": {
            "description": "The end date off hours for Monday.",
            "format": "int32",
            "type": "integer"
          },
          "mondayOffMinutes": {
            "description": "The end date off minutes for Monday.",
            "format": "int32",
            "type": "integer"
          },
          "saturdayOffHours": {
            "description": "The end date off hours for Saturday.",
            "format": "int32",
            "type": "integer"
          },
          "saturdayOffMinutes": {
            "description": "The end date off minutes for Saturday.",
            "format": "int32",
            "type": "integer"
          },
          "startDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "status": {
            "description": "The status of this absence period. This maps to enum AbsenceStatus(domain id 6812).",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "sundayOffHours": {
            "description": "The end date off hours for Sunday.",
            "format": "int32",
            "type": "integer"
          },
          "sundayOffMinutes": {
            "description": "The end date off minutes for Sunday.",
            "format": "int32",
            "type": "integer"
          },
          "thursdayOffHours": {
            "description": "The end date off hours for Thursday.",
            "format": "int32",
            "type": "integer"
          },
          "thursdayOffMinutes": {
            "description": "The end date off minutes for Thursday.",
            "format": "int32",
            "type": "integer"
          },
          "tuesdayOffHours": {
            "description": "The end date off hours for Tuesday.",
            "format": "int32",
            "type": "integer"
          },
          "tuesdayOffMinutes": {
            "description": "The end date off minutes for Tuesday.",
            "format": "int32",
            "type": "integer"
          },
          "wednesdayOffHours": {
            "description": "The end date off hours for Wednesday.",
            "format": "int32",
            "type": "integer"
          },
          "wednesdayOffMinutes": {
            "description": "The end date off minutes for Wednesday.",
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "endDate",
          "startDate"
        ],
        "type": "object"
      },
      "SupervisedTimeOffLeavePeriod": {
        "description": "The list of supervised time off leave periods.",
        "properties": {
          "decision": {
            "description": "Decison status for the absence period. This maps to enum DecisionStatus(domain id 6821).",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "endDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "endDateFullDay": {
            "description": "The end date full day.",
            "type": "boolean"
          },
          "endDateOffHours": {
            "description": "The end date off hours.",
            "format": "int32",
            "type": "integer"
          },
          "endDateOffMinutes": {
            "description": "The end date off minutes.",
            "format": "int32",
            "type": "integer"
          },
          "lastDayWorked": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "startDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "startDateFullDay": {
            "description": "The start date full day.",
            "type": "boolean"
          },
          "startDateOffHours": {
            "description": "The start date off hours.",
            "format": "int32",
            "type": "integer"
          },
          "startDateOffMinutes": {
            "description": "The start date off minutes.",
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "endDate",
          "startDate"
        ],
        "type": "object"
      },
      "TaEnum": {
        "properties": {
          "active": {
            "type": "boolean"
          },
          "alphaSort": {
            "type": "boolean"
          },
          "defaultFirst": {
            "type": "boolean"
          },
          "domainDescription": {
            "type": "string"
          },
          "domainId": {
            "format": "int32",
            "type": "integer"
          },
          "domainName": {
            "type": "string"
          },
          "dorder": {
            "format": "int32",
            "type": "integer"
          },
          "editable": {
            "type": "boolean"
          },
          "endDate": {
            "description": "ISO 8601 date time format",
            "example": "1999-12-31T23:59:59Z",
            "format": "date-time",
            "type": "string"
          },
          "fullId": {
            "format": "int64",
            "type": "integer"
          },
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "nameAttribute": {
            "type": "string"
          },
          "retired": {
            "type": "boolean"
          },
          "startDate": {
            "description": "ISO 8601 date time format",
            "example": "1999-12-31T23:59:59Z",
            "format": "date-time",
            "type": "string"
          },
          "subsetInfo": {
            "items": {
              "$ref": "#/components/schemas/EnumSubsetInfo"
            },
            "type": "array"
          },
          "subsets": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "typedInstances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumTaEnumType"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TaEnumAccommodationType": {
        "properties": {
          "active": {
            "type": "boolean"
          },
          "alphaSort": {
            "type": "boolean"
          },
          "defaultFirst": {
            "type": "boolean"
          },
          "domainDescription": {
            "type": "string"
          },
          "domainId": {
            "format": "int32",
            "type": "integer"
          },
          "domainName": {
            "type": "string"
          },
          "dorder": {
            "format": "int32",
            "type": "integer"
          },
          "editable": {
            "type": "boolean"
          },
          "endDate": {
            "description": "ISO 8601 date time format",
            "example": "1999-12-31T23:59:59Z",
            "format": "date-time",
            "type": "string"
          },
          "fullId": {
            "format": "int64",
            "type": "integer"
          },
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnum"
            },
            "type": "array"
          },
          "name": {
            "type": "string"
          },
          "nameAttribute": {
            "type": "string"
          },
          "retired": {
            "type": "boolean"
          },
          "startDate": {
            "description": "ISO 8601 date time format",
            "example": "1999-12-31T23:59:59Z",
            "format": "date-time",
            "type": "string"
          },
          "subsetInfo": {
            "items": {
              "$ref": "#/components/schemas/EnumSubsetInfo"
            },
            "type": "array"
          },
          "subsets": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "typedInstances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumAccommodationType"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TaEnumInstanceSwagger": {
        "description": "Full list of <b>active</b> enum instances in the enum domain. Only returned if the endpoint is invoked passing the query parameter <ul><li><code>?_include={enumPropertyName}.instances</code>, if we want to target specific enums, comma separated, for instance: <p><code>?_include=enumPropertyName1.instances,enumPropertyName2.instances</code></p><li> or <code>?_include=enum.instances</code> (all the instances in all the enum properties in the response will be returned)</ul>",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "type": "string"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "title": "EnumInstanceSwaggerResponse",
        "type": "object"
      },
      "TaEnumQuestionResponse": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "TaEnumResponseAccommodationType": {
        "properties": {
          "includeAttributes": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "taEnum": {
            "$ref": "#/components/schemas/TaEnumAccommodationType"
          }
        },
        "type": "object"
      },
      "TaEnumReturnToWorkIntention": {
        "description": "Indicates the employees return to work plans once they have finished their leave.",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "alphaSort": {
            "type": "boolean"
          },
          "defaultFirst": {
            "type": "boolean"
          },
          "domainDescription": {
            "type": "string"
          },
          "domainId": {
            "format": "int32",
            "type": "integer"
          },
          "domainName": {
            "type": "string"
          },
          "dorder": {
            "format": "int32",
            "type": "integer"
          },
          "editable": {
            "type": "boolean"
          },
          "endDate": {
            "description": "ISO 8601 date time format",
            "example": "1999-12-31T23:59:59Z",
            "format": "date-time",
            "type": "string"
          },
          "fullId": {
            "format": "int64",
            "type": "integer"
          },
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnum"
            },
            "type": "array"
          },
          "name": {
            "type": "string"
          },
          "nameAttribute": {
            "type": "string"
          },
          "retired": {
            "type": "boolean"
          },
          "startDate": {
            "description": "ISO 8601 date time format",
            "example": "1999-12-31T23:59:59Z",
            "format": "date-time",
            "type": "string"
          },
          "subsetInfo": {
            "items": {
              "$ref": "#/components/schemas/EnumSubsetInfo"
            },
            "type": "array"
          },
          "subsets": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "typedInstances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumReturnToWorkIntention"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TaEnumTaEnumType": {
        "properties": {
          "active": {
            "type": "boolean"
          },
          "alphaSort": {
            "type": "boolean"
          },
          "defaultFirst": {
            "type": "boolean"
          },
          "domainDescription": {
            "type": "string"
          },
          "domainId": {
            "format": "int32",
            "type": "integer"
          },
          "domainName": {
            "type": "string"
          },
          "dorder": {
            "format": "int32",
            "type": "integer"
          },
          "editable": {
            "type": "boolean"
          },
          "endDate": {
            "description": "ISO 8601 date time format",
            "example": "1999-12-31T23:59:59Z",
            "format": "date-time",
            "type": "string"
          },
          "fullId": {
            "format": "int64",
            "type": "integer"
          },
          "id": {
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "nameAttribute": {
            "type": "string"
          },
          "retired": {
            "type": "boolean"
          },
          "startDate": {
            "description": "ISO 8601 date time format",
            "example": "1999-12-31T23:59:59Z",
            "format": "date-time",
            "type": "string"
          },
          "subsetInfo": {
            "items": {
              "$ref": "#/components/schemas/EnumSubsetInfo"
            },
            "type": "array"
          },
          "subsets": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TaxCodeRecord": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "additionalWithholdAmount": {
            "$ref": "#/components/schemas/AdditionalWithholdAmountMoneyResponse"
          },
          "dependentDeductions": {
            "$ref": "#/components/schemas/DependentDeductionsMoneyResponse"
          },
          "effectiveDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "endDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "extensions": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "filingMaritalStatus": {
            "$ref": "#/components/schemas/FilingMaritalStatusResponse"
          },
          "id": {
            "description": "Tax Code Record ID (unique in the system)",
            "type": "string"
          },
          "nonStdDeductions": {
            "$ref": "#/components/schemas/NonStdDeductionsMoneyResponse"
          },
          "numberExemptions": {
            "description": "The tax exemptions e.g. number of exemptions accumulated.",
            "format": "int64",
            "type": "integer"
          },
          "otherIncome": {
            "$ref": "#/components/schemas/OtherIncomeMoneyResponse"
          },
          "percentageRate": {
            "description": "A percentage rate for tax record. The percentageRate must be of precision 10,2.",
            "type": "string"
          },
          "regionTaxCodeDetails": {
            "$ref": "#/components/schemas/RegionTaxCodeDetails"
          },
          "taxCode": {
            "$ref": "#/components/schemas/TaxCodeResponse"
          },
          "taxType": {
            "$ref": "#/components/schemas/TaxTypeResponse"
          },
          "version": {
            "$ref": "#/components/schemas/VersionResponse"
          }
        },
        "type": "object"
      },
      "TaxCodeRecordResourcesList": {
        "properties": {
          "_links": {
            "additionalProperties": {
              "format": "url",
              "type": "string"
            },
            "type": "object"
          },
          "elements": {
            "items": {
              "$ref": "#/components/schemas/TaxCodeRecord"
            },
            "type": "array"
          },
          "hasMoreElements": {
            "description": "<P>If the query has a <code>limit</code> set and the actual number of resources that match the query exceeds the limit this will be true if the number of resources is less than or equal to the limit this will be false.</P><P>Note:If the limit query pattern is not used, this value will not be returned.</P>",
            "type": "boolean"
          },
          "meta": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object"
          },
          "totalSize": {
            "description": "<P>The <code>totalSize</code> is the total number of resources that match the query. This can be greater than the page size in a paginated query if there are more queries.</P><P>Note:This field will not be returned if the query has a <code>limit</code> set for it.</P>",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "TaxCodeRequest": {
        "description": "Specifies a code for a subcategory of tax type (EnumDomainId=2232). Sample values are 'Unknown', 'Maximum Age Limit', 'Maximum Benefit Expiry Age'",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TaxCodeResponse": {
        "description": "Specifies a code for a subcategory of tax type (EnumDomainId=2232). Sample values are 'Unknown', 'Maximum Age Limit', 'Maximum Benefit Expiry Age'",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "TaxOffsetsMoneyRequest": {
        "description": "Specifies the Tax Offsets amount.",
        "properties": {
          "amountMinorUnits": {
            "description": "The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TaxOffsetsMoneyResponse": {
        "description": "Specifies the Tax Offsets amount.",
        "properties": {
          "amountMinorUnits": {
            "description": "The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
            "format": "int64",
            "type": "integer"
          },
          "currency": {
            "description": "The currency used in the Money amount",
            "type": "string"
          },
          "scale": {
            "description": "The scale used in the Money amount",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "TaxTypeDetails": {
        "properties": {
          "additionalWithholdAmount": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          },
          "classExtensionInformation": {
            "description": "An array of the extensionAttribute objects which contain claim extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "effectiveDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "filingMaritalStatus": {
            "description": "The marital status filed for tax purposes.",
            "type": "string"
          },
          "numberExemptions": {
            "description": "The tax exemptions e.g. number of exemptions accumulated.",
            "format": "int64",
            "type": "integer"
          },
          "percentageRate": {
            "description": "A percentage rate for tax record.",
            "type": "number"
          },
          "taxCode": {
            "description": "The specifies a code for a subcategory of tax type.",
            "type": "string"
          },
          "taxType": {
            "description": "The specifies the type of tax, e.g. Federal Income Tax, State Income Tax.",
            "type": "string"
          }
        },
        "required": [
          "taxCode",
          "taxType"
        ],
        "type": "object"
      },
      "TaxTypeDetailsResponse": {
        "properties": {
          "additionalWithholdAmount": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          },
          "classExtensionInformation": {
            "description": "An array of the extensionAttribute objects which contain claim extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "effectiveDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "filingMaritalStatus": {
            "description": "The marital status filed for tax purposes.",
            "type": "string"
          },
          "numberExemptions": {
            "description": "The tax exemptions e.g. number of exemptions accumulated.",
            "format": "int64",
            "type": "integer"
          },
          "percentageRate": {
            "description": "A percentage rate for tax record.",
            "type": "number"
          },
          "taxCode": {
            "description": "The specifies a code for a subcategory of tax type.",
            "type": "string"
          },
          "taxType": {
            "description": "The specifies the type of tax, e.g. Federal Income Tax, State Income Tax.",
            "type": "string"
          },
          "taxTypeDetailsId": {
            "description": "The id of the tax type details.",
            "type": "string"
          }
        },
        "required": [
          "taxCode",
          "taxType",
          "taxTypeDetailsId"
        ],
        "type": "object"
      },
      "TaxTypeRequest": {
        "description": "Specifies the type of tax, e.g. 'Federal Income Tax', 'State Income Tax' (EnumDomainId=2321). Sample values are 'Unknown', 'TaxTypeA', 'TaxTypeB'.",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TaxTypeResponse": {
        "description": "Specifies the type of tax, e.g. 'Federal Income Tax', 'State Income Tax' (EnumDomainId=2321). Sample values are 'Unknown', 'TaxTypeA', 'TaxTypeB'.",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "TimeOffLeavePeriod": {
        "properties": {
          "endDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "endDateFullDay": {
            "description": "The end date full day.",
            "type": "boolean"
          },
          "endDateOffHours": {
            "description": "The end date off hours.",
            "format": "int32",
            "type": "integer"
          },
          "endDateOffMinutes": {
            "description": "The end date off minutes.",
            "format": "int32",
            "type": "integer"
          },
          "lastDayWorked": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "startDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "startDateFullDay": {
            "description": "The start date full day.",
            "type": "boolean"
          },
          "startDateOffHours": {
            "description": "The start date off hours.",
            "format": "int32",
            "type": "integer"
          },
          "startDateOffMinutes": {
            "description": "The start date off minutes.",
            "format": "int32",
            "type": "integer"
          },
          "status": {
            "description": "The absence status for the absence period. This maps to enum AbsenceStatus(domain id 6812).",
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          }
        },
        "required": [
          "endDate",
          "startDate",
          "status"
        ],
        "type": "object"
      },
      "TimeZoneRequest": {
        "description": "The timezone of an employee's occupation when the actual absence period is requested. (Enum DomainId=300)",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TimeZoneResponse": {
        "description": "The timezone of an employee's occupation when the actual absence period is requested. (Enum DomainId=300)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "TypeResponse": {
        "description": "The type of actual period for e.g. Office Visit, InCapacity. This maps to enum AbsencePeriodType(domain id 6811)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "ValidationMessageModel": {
        "properties": {
          "validationMessage": {
            "type": "string"
          }
        },
        "required": [
          "validationMessage"
        ],
        "type": "object"
      },
      "VersionRequest": {
        "description": "Specifies the version for this tax record. Sample values are 'Pre 2020', '2020'",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "VersionResponse": {
        "description": "Specifies the version for this tax record. Sample values are 'Pre 2020', '2020'",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "WageBaseCalculationBasisResponse": {
        "description": "Indicates which Earnings are being used to calculate the Gross Entitlement Amount. ",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "WageBaseDetailsEmbeddable": {
        "description": "Wage base detail information.",
        "properties": {
          "calculationBasis": {
            "$ref": "#/components/schemas/WageBaseCalculationBasisResponse"
          },
          "effectiveDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "id": {
            "description": "id used to uniquely identify case handler",
            "type": "string"
          },
          "wageBaseType": {
            "$ref": "#/components/schemas/WageBaseTypeResponse"
          },
          "wagePeriodType": {
            "$ref": "#/components/schemas/PeriodPeriodTypeResponse"
          }
        },
        "type": "object"
      },
      "WageBaseTypeResponse": {
        "description": "Wage Base Type.",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "WebMessage": {
        "description": "The list of web messages belonging to the customer",
        "properties": {
          "caseId": {
            "description": "The case the web message is associated to (if any)",
            "maxLength": 254,
            "minLength": 0,
            "type": "string"
          },
          "classExtensionInformation": {
            "description": "An array of the extensionAttribute objects which contain web message information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "contactTime": {
            "description": "ISO 8601 date time format",
            "example": "1999-12-31T23:59:59Z",
            "format": "date-time",
            "type": "string"
          },
          "isRead": {
            "type": "boolean",
            "writeOnly": true
          },
          "messageId": {
            "description": "Message Id",
            "format": "int64",
            "type": "integer"
          },
          "msgOriginatesFromPortal": {
            "description": "A flag indicating whether the message originates from the customer on the portal or not (in which case the message originating from the insurer)",
            "type": "boolean"
          },
          "narrative": {
            "description": "The web message text",
            "maxLength": 4000,
            "minLength": 0,
            "type": "string"
          },
          "read": {
            "description": "A flag indicating whether the message has been read or not. All msgs which orginate from Portal (i.e. messages from the customer) will be automatically marked as read when created. All messages which do not originate from the portal (from the insurer to the customer) will be marked as read once the customer has read the message",
            "type": "boolean"
          },
          "subject": {
            "description": "Subject of the message",
            "maxLength": 200,
            "minLength": 0,
            "type": "string"
          }
        },
        "required": [
          "narrative",
          "subject"
        ],
        "type": "object"
      },
      "WebMessageId": {
        "properties": {
          "messageId": {
            "description": "Message Id",
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "WebMessageSummary": {
        "properties": {
          "unReadMessages": {
            "description": "The number of un-read web messages",
            "format": "int32",
            "type": "integer"
          },
          "webMessages": {
            "description": "The list of web messages belonging to the customer",
            "items": {
              "$ref": "#/components/schemas/WebMessage"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "WeekBasedWorkPattern": {
        "properties": {
          "patternStartDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "patternStatus": {
            "description": "Indicates whether the pattern is estimated by the Employee or confirmed by the Employer.",
            "type": "string"
          },
          "workPatternDays": {
            "description": "List of days which make up the pattern. There can be 7, 14, 21 or 28 of these.",
            "items": {
              "$ref": "#/components/schemas/WorkPatternDay"
            },
            "type": "array"
          },
          "workPatternType": {
            "description": "The Work Pattern Type, which can be any of the following: Fixed, 2 weeks Rotating, 3 weeks Rotating, 4 weeks Rotating. The Unknown, Variable and Weekly Work Pattern values will not be supported",
            "type": "string"
          },
          "workWeekStarts": {
            "description": "The day of the week on which the work week starts.",
            "type": "string"
          }
        },
        "required": [
          "workPatternDays",
          "workPatternType"
        ],
        "type": "object"
      },
      "WeekBasedWorkPatternTypeRequest": {
        "description": "Work pattern type for the occupation. Weekly Work Pattern, Fixed, 2 Weeks Rotating, etc.",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "WeekBasedWorkWeekStartsRequest": {
        "description": "Starting dy of the work weekk (Monday, Tuesday, etc)",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "WeekBasedWorkWeekStartsResponse": {
        "description": "Starting dy of the work weekk (Monday, Tuesday, etc)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "WeeklyAmountMoneyResponse": {
        "description": "Weekly earnings based on the actual earnings",
        "properties": {
          "amountMinorUnits": {
            "description": "The amount in minor units i.e. without a decimal point. So $100.27 will be 10027",
            "format": "int64",
            "type": "integer"
          },
          "currency": {
            "description": "The currency used in the Money amount",
            "type": "string"
          },
          "scale": {
            "description": "The scale used in the Money amount",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "WeeklyBasisEarningAmountsRequest": {
        "description": "Weekly Basis Earning Amounts Request Details.",
        "properties": {
          "overtimeHourlyRate": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          },
          "overtimeHours": {
            "description": "Number of overtime hours in a working week or bi-week.",
            "type": "number"
          },
          "shiftAllowance": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          },
          "shiftBasis": {
            "description": "Basis of weekly or bi-weekly shift earnings - either an additional hourly allowance or an additional amount.",
            "type": "string"
          },
          "shiftHours": {
            "description": "Number of shift hours in a working week or bi-week.",
            "type": "number"
          },
          "standardHourRate": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          },
          "standardHours": {
            "description": "The number of hours in a standard working week or bi-week.",
            "type": "number"
          },
          "statutoryBasis": {
            "description": "Additional weekly or bi-weekly vacation or statutory entitlements type. It may be an amount or percentage of regular hour.",
            "type": "string"
          },
          "statutoryValue": {
            "description": "Additional weekly or bi-weekly vacation or statutory entitlement amount or percentage of regular hours.",
            "type": "number"
          },
          "totalAmountOverridden": {
            "description": "This attribute indicates if the total weekly or bi-weekly amount has been manually overridden.",
            "type": "boolean"
          },
          "totalEarnings": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          }
        },
        "required": [
          "totalAmountOverridden"
        ],
        "type": "object"
      },
      "WeeklyBasisEarningAmountsResponse": {
        "description": "Weekly Basis Earning Amounts Response Details.",
        "properties": {
          "overtimeEarnings": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          },
          "overtimeHourlyRate": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          },
          "overtimeHours": {
            "description": "Number of overtime hours in a working week or bi-week.",
            "type": "number"
          },
          "shiftAllowance": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          },
          "shiftBasis": {
            "description": "Basis of weekly or bi-weekly shift earnings - either an additional hourly allowance or an additional amount.",
            "type": "string"
          },
          "shiftEarnings": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          },
          "shiftHours": {
            "description": "Number of shift hours in a working week or bi-week.",
            "type": "number"
          },
          "standardEarnings": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          },
          "standardHourRate": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          },
          "standardHours": {
            "description": "The number of hours in a standard working week or bi-week.",
            "type": "number"
          },
          "statutoryBasis": {
            "description": "Additional weekly or bi-weekly vacation or statutory entitlements type. It may be an amount or percentage of regular hour.",
            "type": "string"
          },
          "statutoryEarnings": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          },
          "statutoryValue": {
            "description": "Additional weekly or bi-weekly vacation or statutory entitlement amount or percentage of regular hours.",
            "type": "number"
          },
          "totalAmountOverridden": {
            "description": "This attribute indicates if the total weekly or bi-weekly amount has been manually overridden.",
            "type": "boolean"
          },
          "totalEarnings": {
            "description": "Money amount format",
            "example": "1500.50",
            "format": "money",
            "type": "string"
          }
        },
        "required": [
          "totalAmountOverridden"
        ],
        "type": "object"
      },
      "WeeklyEarningsRequest": {
        "properties": {
          "classExtensionInformation": {
            "description": "An array of the extensionAttribute objects which contain Earnings extension information.",
            "items": {
              "$ref": "#/components/schemas/ExtensionAttribute"
            },
            "type": "array"
          },
          "earningsBasis": {
            "description": "The earnings frequency.",
            "type": "string"
          },
          "effectiveDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "endDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "notes": {
            "description": "Notes relating to the earnings period.",
            "maxLength": 200,
            "minLength": 0,
            "type": "string"
          },
          "salaryAmountBasis": {
            "description": "Basis for salary amount being used.",
            "type": "string"
          },
          "weeklyBasisEarningAmountsRequest": {
            "$ref": "#/components/schemas/WeeklyBasisEarningAmountsRequest"
          }
        },
        "required": [
          "earningsBasis"
        ],
        "type": "object"
      },
      "WithholdingTaxStatusRequest": {
        "description": "For payments to caregivers, that are not subject to PAYE, does withholding tax apply.",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "WithholdingTaxStatusResponse": {
        "description": "For payments to caregivers, that are not subject to PAYE, does withholding tax apply.",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "WorkPatternDay": {
        "description": "List of days which make up the pattern. There can be 7, 14, 21 or 28 of these.",
        "properties": {
          "dayOfWeek": {
            "description": "The day of the week.",
            "type": "string"
          },
          "hours": {
            "description": "The number of whole working hours on this day in the work pattern.",
            "format": "int32",
            "type": "integer"
          },
          "minutes": {
            "description": "The number of minutes on this day in the work pattern.",
            "format": "int32",
            "type": "integer"
          },
          "weekNumber": {
            "description": "The number of the week in the pattern within which this day occurs (1, 2, 3 or 4)",
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "dayOfWeek",
          "hours",
          "minutes",
          "weekNumber"
        ],
        "type": "object"
      },
      "WorkPatternDayCommand": {
        "description": "Day Patterns associated to the work pattern",
        "properties": {
          "dayOfWeek": {
            "$ref": "#/components/schemas/WorkPatternDayOfWeekRequest"
          },
          "hours": {
            "description": "Hours worked on that particular day",
            "format": "int32",
            "type": "integer"
          },
          "minutes": {
            "description": "Minutes worked on that particular day",
            "format": "int32",
            "type": "integer"
          },
          "weekNumber": {
            "description": "The week number in a particular month (1,2,3,4)",
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "dayOfWeek",
          "hours",
          "minutes",
          "weekNumber"
        ],
        "type": "object"
      },
      "WorkPatternDayOfWeekRequest": {
        "description": "Day for which the hours and minutes are entered (Monday, Tuesday, etc)",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "WorkPatternStatusRequest": {
        "description": "Status of work pattern (Unknown, Estimate, etc)",
        "properties": {
          "fullId": {
            "description": "The <code>instance id</code> of the enum. If this attribute is specified, the <code>name</code> attribute doesn't need to be.",
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "WorkPatternStatusResponse": {
        "description": "Status of work pattern (Unknown, Estimate, etc)",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "WorkPatternTypeResponse": {
        "description": "Work pattern type for the occupation. Weekly Work Pattern, Fixed, 2 Weeks Rotating, etc.",
        "properties": {
          "_links": {
            "additionalProperties": {
              "description": "Links to the enum domain and enum instance for the API",
              "type": "string"
            },
            "description": "Links to the enum domain and enum instance for the API",
            "type": "object"
          },
          "domainId": {
            "description": "The <code>domain id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "domainName": {
            "description": "The enum domain name",
            "type": "string"
          },
          "fullId": {
            "description": "The <code>instance id</code> of the enum",
            "format": "int64",
            "type": "integer"
          },
          "instances": {
            "items": {
              "$ref": "#/components/schemas/TaEnumInstanceSwagger"
            },
            "type": "array"
          },
          "name": {
            "description": "The enum instance name",
            "type": "string"
          }
        },
        "required": [
          "_links",
          "domainId",
          "domainName",
          "fullId",
          "name"
        ],
        "type": "object"
      },
      "WorkPlaceAccommodation": {
        "description": "List of Accommodations for this accommodation case.",
        "properties": {
          "accommodationCategory": {
            "description": "The Category that identifies this association.",
            "type": "string"
          },
          "accommodationDescription": {
            "description": "The description of this accommodation.",
            "type": "string"
          },
          "accommodationType": {
            "description": "The Type that identifies this accommodation",
            "type": "string"
          }
        },
        "type": "object"
      },
      "WorkPlaceAccommodationDetail": {
        "description": "List of Accommodations for this accommodation case",
        "properties": {
          "accommodationCategory": {
            "description": "The Category that identifies this association.",
            "type": "string"
          },
          "accommodationDescription": {
            "description": "The description of this accommodation.",
            "type": "string"
          },
          "accommodationEndDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "accommodationType": {
            "description": "The Type that identifies this accommodation",
            "type": "string"
          },
          "creationDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier for this accommodation",
            "maxLength": 254,
            "minLength": 0,
            "type": "string"
          },
          "implementDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          },
          "implementedDate": {
            "description": "ISO 8601 date format",
            "example": "1999-12-31",
            "format": "date",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "info": {
    "license": {
      "name": "FINEOS License"
    },
    "title": "FINEOS Customer API",
    "version": "21.3"
  },
  "openapi": "3.0.1",
  "paths": {
    "/customer/absence/absence-period-decisions": {
      "get": {
        "description": "This API returns a list of decisions, taken in relation to leave periods requested by an employee; the period can be requested within an absence case or an absence takeover case. The list also includes reported actuals and blackout periods captured for the absence case or absence takeover case.",
        "operationId": "getAbsencePeriodDecisions_1",
        "parameters": [
          {
            "description": "Id of the user accessing the resource.",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "description": "Id of the user accessing the resource.",
              "type": "string"
            }
          },
          {
            "description": "The absence or absence takeover case number. If no case number is given, the API will return all requested periods for all available absences.<br><br>Either absenceId or Start Date and End Date must be provided.",
            "in": "query",
            "name": "absenceId",
            "schema": {
              "description": "The Absence or Absence Takeover Case Number for which we want to retrieve the Period Decisions.",
              "type": "string"
            }
          },
          {
            "description": "The search period start date. If a start date is given, only periods ending after this date will be returned.",
            "in": "query",
            "name": "startDate",
            "schema": {
              "description": "The Start Date from which we want to retrieve the Period Decisions",
              "type": "string"
            }
          },
          {
            "description": "The search period end date. If an end date is given, only periods starting before this date will be returned.",
            "in": "query",
            "name": "endDate",
            "schema": {
              "description": "The End Date to which we want to retrieve the Period Decisions",
              "type": "string"
            }
          },
          {
            "description": "The includeTrackerPlans controls whether, for each absence period decision returned, tracker plans should also be included in the list of leave plans that have been selected for the corresponding absence period. By default, includeTrackerPlans is true and tracker plans are included in the above list; if includeTrackerPlans is set to false, tracker plans are not included.",
            "in": "query",
            "name": "includeTrackerPlans",
            "schema": {
              "default": true,
              "description": "Controls whether tracker plans should be included.",
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PeriodDecisions"
                }
              }
            },
            "description": "List of Absence Period Decisions"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Retrieves decisions related to requested leave periods.",
        "tags": [
          "Absence"
        ]
      }
    },
    "/customer/absence/absence-reasons": {
      "get": {
        "description": "An absence reason is a unique combination of values that identies the need for absence. Examples include care for a family member, child bonding, and bereavement.<p>This API returns array of all the available absence reasons. Each absence reason includes the details like name of the reason, Qualifier 1 & 2, name of the notification reason etc. The data is sorted based on ascending order of Reason name, Qualifier 1 and 2.</p>",
        "operationId": "query",
        "parameters": [
          {
            "description": "The id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AbsenceReasonResources"
                }
              }
            },
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "This endpoint will return all the available absence reasons in application.",
        "tags": [
          "Absence Reason"
        ]
      }
    },
    "/customer/absence/absence-reasons/{absenceReasonId}": {
      "get": {
        "description": "An absence reason is a unique combination of values that identies the need for absence. Examples include care for a family member, child bonding, and bereavement.<p>This API returns the details of a specific absence reason as per the absence reason id provided in the URL.</p>",
        "operationId": "getSingle",
        "parameters": [
          {
            "description": "The id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Absence reason id.",
            "in": "path",
            "name": "absenceReasonId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AbsenceReasonResource"
                }
              }
            },
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "This endpoint will return the detail of the specific absence reason.",
        "tags": [
          "Absence Reason"
        ]
      }
    },
    "/customer/absence/absence-reasons/{absenceReasonId}/reflexive-question-set": {
      "get": {
        "description": "<p>A Reflexive Question Set is a set of questions that can be used to collect additional information for a specific absence reason. The questions may also pertain to human relationships. An additional information could be information/questions related to the family member details like first name, last name or Hospitalization details like Hospitalization date or discharge date. </p><p>This API returns all the additional information required for the specific absence reason.Reflexive Question or Additional Information  could be any one of the three type:<ul><li><b>Simple Question:</b> The question are based on the simple data type like String, Integer, Boolean.</li><li><b>Enum Question:</b> The question are based TaEnum Domain. Where the answer are based on the Enum value.</li><li><b>Compound Question:</b> A question which depending on the option selected presents other question. The options could be Yes, No or Unknown.</li></ul></p><P>This API returns the details of a specific absence reason as per the absence reason id provided in the URL.",
        "operationId": "getSingle_1",
        "parameters": [
          {
            "description": "The id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Absence reason id.",
            "in": "path",
            "name": "absenceReasonId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReflexiveQuestionResource"
                }
              }
            },
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "This endpoint returns all the additional information required for the specific absence reason.",
        "tags": [
          "Absence Reason"
        ]
      }
    },
    "/customer/absence/absenceReasons": {
      "get": {
        "description": "The API returns a list of non-hidden Absence Reasons. The API will accept an optional Notification Reason parameter, and when supplied, the list of Absence Reasons will be filtered by Notification Reason",
        "operationId": "getAbsenceReasons",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "String which contains Notification Reasons name.",
            "in": "query",
            "name": "notificationReason",
            "schema": {
              "default": "",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AbsenceReasonSummary"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Absence Reasons for an Employee"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Absence Reasons for an Employee",
        "tags": [
          "Absence"
        ]
      }
    },
    "/customer/absence/absences": {
      "get": {
        "description": "Lists the Absences of the user",
        "operationId": "getAbsences",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AbsenceCaseSummary"
                  },
                  "type": "array"
                }
              }
            },
            "description": "List of absences"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Absences for the user",
        "tags": [
          "Absence"
        ]
      }
    },
    "/customer/absence/absences/leave-plans/{leavePlanId}/leave-availability": {
      "get": {
        "description": "Get the available leave balance details of the absence customer as on given date. The leave balance will be approximate balance avilable with the absence customer as per the leave plan entitlement. The start and end date of the leave calculation period is calcualted based on the Leave Plan Calculation period.The Calculation period may be any of the following type.<UL><li><B>Rolling Back :</B> A Rolling Back period is a fixed-length period measured backwards from the date that an employee has requested leave under a leave plan. In this example, the leave request starts on 13-Oct-2018. As the Time Within Period is 12 months, the calculation period is from 14-Oct-2017 to 13-Oct-2018.</li><li><B>Rolling Forward :</B> A Rolling Forward period is a fixed-length period measured forward from the first approved date of absence taken by an employee under a leave plan. The next rolling forward period begins on the next approved date of absence taken by the same employee under the same leave plan following completion of the previous rolling forward period.In this example, the first leave request was on 11-Jan-2017. As the Time Within Period is 12 months, the calculation period runs until 10-Jan-2018.</li><li><B>Fixed Year :</B> With a Fixed Year calculation period, the entitlement period starts on a specified date and counts from this date each year. For example,If an employee requests leave on 24-May-2018 and the Starting From date is 13-Nov-2017, the entitlement period runs from 13-Nov-2017 to 12-Nov-2018.</li><li><B>Calendar Year :</B> This generally runs from Jan 01 to Dec 31 in each year. This is the case when it's a 12-month time within period. It's also possible to have a 24-month time within period and a Calendar year calculation period.For example, if an employee requests leave on 20-June-2018, the entitlement period the application considers is from 01-Jan 2018 to 31-Dec-2018.</li></UL>",
        "operationId": "getAbsenceCustomerLeaveAvailability",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "leavePlanId",
            "required": true,
            "schema": {
              "default": "",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "calculationDate",
            "schema": {
              "default": "",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeLeaveBalance"
                }
              }
            },
            "description": "Get the available leave balance details of the absence customer as on given date."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Get the available leave balance details of the absence customer as on given date.",
        "tags": [
          "Absence"
        ]
      }
    },
    "/customer/absence/absences/{absenceId}": {
      "get": {
        "description": "This API will return the details of the Absence case that has the absenceId provided in the URL.It will first validate that the absence case id provided is valid for the absence customer. If it is valid then the API returns the following data in the response:<UL><LI>Absence case basic details such as date created, status, etc.</LI><LI>List of requested absence periods from the absence case leave details. This list includes<br>requested time off periods, reduced schedule periods and the first episodic leave period.</LI><LI>List of Absence Days for this absence case.</LI><LI>List of Reported Time Off and Reduced Schedule periods from the Absence case leave details.</LI><LI>List of Selected leave plans for this Absence case.</LI><LI>List of Financial Case IDs from the Absence case.</LI><LI>List of Paid Leave Cases linked to this Absence case.</LI></UL>",
        "operationId": "getAbsenceDetail",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Absence Case ID",
            "in": "path",
            "name": "absenceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AbsenceDetails"
                }
              }
            },
            "description": "Details of the Absence"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Details of an absence",
        "tags": [
          "Absence"
        ]
      }
    },
    "/customer/absence/absences/{absenceId}/absence-period-decisions": {
      "get": {
        "description": "Return a list of Absence Period Decisions, reported actuals and blackout periods within an absence or an absence takeover case.",
        "operationId": "getAbsencePeriodDecisions",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "schema": {
              "description": "Id of the user accessing the resource.",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "absenceId",
            "required": true,
            "schema": {
              "default": "",
              "description": "The Absence or Absence Takeover Case Number for which we want to retrieve the Period Decisions.",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AbsencePeriodDecisions"
                }
              }
            },
            "description": "List of Absence Period Decisions"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "List of Absence Period Decisions",
        "tags": [
          "Absence"
        ]
      }
    },
    "/customer/absence/absences/{absenceId}/actual-absence-periods": {
      "get": {
        "description": "Actual time details the time reported by an employee relating to the employee's definitive period of absence where that absence period was initially specified as estimated or episodic. The time reported can be on an absence or an absence takeover case. The record are displayed ascending order of actual reported date. The sorting can be changed as per status, actualDate only.The records can be filter based on status, actualFromDate, actualToDate and managerAccepted only.",
        "operationId": "query_1",
        "parameters": [
          {
            "description": "The id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique absence or absence takeover case reference number",
            "in": "path",
            "name": "absenceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter the data based on the status of the actual record.",
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter the data based on the actual recorded date of the request. All the record actual date must be greater than or equal to given date.",
            "in": "query",
            "name": "_actualFromDate",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter the data based on the actual recorded date of the request. All the record actual date must be less than or equal to given date.",
            "in": "query",
            "name": "_actualToDate",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter the data based the manager acceptance status.",
            "in": "query",
            "name": "managerAccepted",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Comma separated list of sort parameters. Ascending by default, for descending prepended with <B>-</B>. Allowed sorting values are status and actualDate. For example ?sort=status.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualAbsencePeriodResources"
                }
              }
            },
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Employee can view the list of actual time taken on the episodic leave request.",
        "tags": [
          "Episodic Actual Absence Periods"
        ]
      }
    },
    "/customer/absence/absences/{absenceId}/actual-absence-periods/bulk-create": {
      "post": {
        "description": "Actual time details the time reported by an employee relating to the employee's definitive period of absence where that absence period was initially specified as estimated or episodic. Recording actual time taken as a period of absence provides an accurate record of the actual leave time that an employee has taken in an absence or absence takeover case.Employee can record actual time on a pending, approved, or declined leave request in an absence case or absence takeover case and when the absence case or absence takeover case is in the Adjudication, Manage Time, or Completion phase.<p>The application automatically approves actual time if the following conditions are true:</p><ul>  <li>The leave request is approved.</li>  <li>The actual reported time falls within the leave request absence period start and end dates.</li>  <li>The actual reported time falls within the certified period start and end date where a certification is required.</li>  <li>For episodic absence periods, the frequency and duration of the actual reported time matches the frequency and duration of the certification and the number of certified episodes has not been exceeded.</li>  <li>The actual reported time is less than or equal to today's date (cannot be a date in the future).</li>  <li>The actual reported dates are not denied dates on any leave plan.</li>  <li>The actual time is reported by an authorized party and through an authorized channel (as defined in the service agreement).</li>  <li>The actual reported time requires manager approval and is provided (as defined in the service agreement).</li><li>The actual reported time falls within the reporting policy procedure time frame (if defined in the service agreement).</li><li>The certification for episodic leave specifies frequency and duration details.</li></ul>",
        "operationId": "bulkCreate",
        "parameters": [
          {
            "description": "The id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique absence or absence takeover case reference number",
            "in": "path",
            "name": "absenceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkCreateActualAbsencePeriodCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualAbsencePeriodResources"
                }
              }
            },
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Employee can record the actual time taken on the episodic leave request.",
        "tags": [
          "Episodic Actual Absence Periods"
        ]
      }
    },
    "/customer/absence/absences/{absenceId}/actual-absence-periods/{actualAbsencePeriodId}": {
      "get": {
        "description": "Actual time details the time reported by an employee relating to the employee's definitive period of absence where that absence period was initially specified as estimated or episodic. The employee view of the detail of a specific actual time recorded.",
        "operationId": "getSingle_3",
        "parameters": [
          {
            "description": "The id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique absence or absence takeover case reference number",
            "in": "path",
            "name": "absenceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique id of the actual time record.",
            "in": "path",
            "name": "actualAbsencePeriodId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualAbsencePeriodResource"
                }
              }
            },
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Employee can view the detail of the actual time taken on the episodic leave request.",
        "tags": [
          "Episodic Actual Absence Periods"
        ]
      }
    },
    "/customer/absence/absences/{absenceId}/leave-periods-change-requests": {
      "get": {
        "description": "A leave periods change request represents a customer's request to change existing leave periods on an absence case or absence takeover case. For example:<ul><li>extend or add more time to an existing leave period on the case</li><li>remove or partially cancel one or more leave periods already requested on the case.</li></ul>This endpoint will return a list of all existing leave period change requests made by the customer on a particular absence case or absence takeover case.",
        "operationId": "query_3",
        "parameters": [
          {
            "description": "The id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique absence or absence takeover case reference number",
            "in": "path",
            "name": "absenceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Sort parameter. Ascending by default, for descending prefix with <B>-</B>. Allowed sorting value is id. For example ?sort=-id.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeavePeriodsChangeRequestResources"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Customer can view the details of all the leave period changes requested",
        "tags": [
          "Leave Periods Change Request"
        ]
      },
      "post": {
        "description": "A leave periods change request represents a customer's request to change existing leave periods on an absence case or absence takeover case. For example:<ul><li>extend or add more time to an existing leave period on the case</li><li>remove or partially cancel one or more leave periods already requested on the case.</li></ul>This endpoint will enable the customer to request changes on their existing leave requests.To add time to an existing leave period, customer will have to give the start date and end date of the new leave period and provide a reason from any of the following:<li>Add time for identical Absence Reason</li><li>Add time for different Absence Reason</li><li>Add time for unknown Absence Reason</li><p>To cancel existing leave requests, customer will have to provide the start date and end date of all the leave periods for which cancellation is needed. The reason for cancellation should be 'Employee Requested Removal'</p>",
        "operationId": "create",
        "parameters": [
          {
            "description": "The id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique absence or absence takeover case reference number",
            "in": "path",
            "name": "absenceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLeavePeriodsChangeRequestCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeavePeriodsChangeRequestResource"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Customer can request a call to action for the carrier to make a change to the leave periods of an absence or absence takeover case.",
        "tags": [
          "Leave Periods Change Request"
        ]
      }
    },
    "/customer/absence/absences/{absenceId}/leave-periods-change-requests/{leavePeriodsChangeRequestId}": {
      "get": {
        "description": "A leave periods change request represents a customer's request to change existing leave periods on an absence case or absence takeover case. For example:<ul><li>extend or add more time to an existing leave period on the case</li><li>remove or partially cancel one or more leave periods already requested on the case.</li></ul>This endpoint will return an existing leave period change request, indicated by leavePeriodsChangeRequestId.This includes the dates on the leave periods, status of the change request and whether the request is to cancel, extend etc.Customer will have to provide the specific leave period change request ID for which the details are needed",
        "operationId": "getSingle_5",
        "parameters": [
          {
            "description": "The id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique absence or absence takeover case reference number",
            "in": "path",
            "name": "absenceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identification of Change Request record.",
            "in": "path",
            "name": "leavePeriodsChangeRequestId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeavePeriodsChangeRequestResource"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Customer can view the details of a single leave period change request",
        "tags": [
          "Leave Periods Change Request"
        ]
      }
    },
    "/customer/absence/accommodation-cases/{accommodationCaseId}": {
      "get": {
        "description": "Reasonable accommodation is where a change is required in the work environment or to the way work duties are usually done that enables an individual with a disability or limitation to appropriately carry out their job duties. This is aligned with the Americans with Disabilities Act that prohibits discrimination in employment on the basis of disability and requires employers to provide reasonable accommodations to applicants and employees (unless this creates undue hardship for the employer).<p>This API returns the details of a specific accommodation case as per the accommodation case id provided in the URL.</p>",
        "operationId": "getSingle_2",
        "parameters": [
          {
            "description": "The id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Accommodation case id.",
            "in": "path",
            "name": "accommodationCaseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccommodationCaseResource"
                }
              }
            },
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "This endpoint will return the detail of the specific accommodation case.",
        "tags": [
          "Accommodation Case"
        ]
      }
    },
    "/customer/absence/agreement/documents": {
      "get": {
        "description": "Returns Service Agreement Documents of Employer",
        "operationId": "getEmployerDocuments",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DocumentSummary"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Service Agreement Documents of Employer"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Service Agreement Documents of Employer",
        "tags": [
          "Absence"
        ]
      }
    },
    "/customer/absence/agreement/leavePlans": {
      "get": {
        "description": "Returns the list of the Leave Plans associated with the employee's employer",
        "operationId": "getLeavePlans",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "pageNbr",
            "in": "query",
            "name": "pageNbr",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "pageSize",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/LeavePlanSummary"
                  },
                  "type": "array"
                }
              }
            },
            "description": "List of leave plans"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "List of leave plans",
        "tags": [
          "Absence"
        ]
      }
    },
    "/customer/absence/agreement/leavePlans/{leavePlanId}": {
      "get": {
        "description": "Returns the details of the Leave Plan for an employee, referenced by the ID",
        "operationId": "getLeavePlanDetail",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Leave Plan ID",
            "in": "path",
            "name": "leavePlanId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeavePlanModel"
                }
              }
            },
            "description": "Details of the leave plan"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Details of a leave plan",
        "tags": [
          "Absence"
        ]
      }
    },
    "/customer/absence/applicable-leave-plans": {
      "get": {
        "description": "The applicable leave plans result from a query that returns what leave plans are applicable, eligible, and available to an employee on the current date, based on the employee's occupation and an absence reason id.In absence management, a leave plan defines the available absence allowed to an employee and the conditions an employee must meet to be entitled to take leave.\nThis endpoint will enquire on the current leave entitlement for a leave reason, so the employee can reduce the risk of taking unprotected leave and can understand more closely his entitlement to leave.",
        "operationId": "query_2",
        "parameters": [
          {
            "description": "The id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Reason for the absence.",
            "in": "query",
            "name": "absenceReasonId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter the leave plan based on absence reason id.",
            "in": "query",
            "name": "absenceReasonId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicableLeavePlanResources"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "This endpoint will return what leave plans are applicable, eligible, and available to an employee.",
        "tags": [
          "Applicable Leave Plan"
        ]
      }
    },
    "/customer/absence/applicable-leave-plans/{applicableLeavePlanId}": {
      "get": {
        "description": "The applicable leave plans result from a query that returns what leave plans are applicable, eligible, and available to an employee on the current date, based on the employee's occupation and an absence reason id.This endpoint will return an existing leave period change request, indicated by leavePeriodsChangeRequestId.This includes the dates on the leave periods, status of the change request and whether the request is to cancel, extend etc.Customer will have to provide the specific leave period change request ID for which the details are needed",
        "operationId": "getSingle_4",
        "parameters": [
          {
            "description": "The id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Applicable leave plan.",
            "in": "path",
            "name": "applicableLeavePlanId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicableLeavePlanResource"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Customer can view the details of a single leave period change request",
        "tags": [
          "Applicable Leave Plan"
        ]
      }
    },
    "/customer/absence/employment": {
      "get": {
        "description": "Employment is a relationship between two parties, usually based on contract where work is paid for, where one party is the employer and the other is the employee. This API returns the most important employment details such as:<br><UL><LI><B> Date Of Hire </B></LI><LI><B> Job Title </B></LI><LI><B> Department </B></LI><LI><B> Work City </B></LI><LI><B> Work State </B></LI></UL><P>It is important to highlight that the Employment work state represents the US state where the employee works. It can be used when assessing the applicability of leave plans where the employee is not associated with any specific work site.<br>The work State should follow the same precedence as the absence leave plan applicability rules:<UL><LI><B> Absence Employment USA WorkState field </B></LI><LI><B> Occupation WorkSite State </B></LI><LI><B> Employer Business Address State </B></LI></UL>",
        "operationId": "getEmployeeEmploymentDetails",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmploymentDetails"
                }
              }
            },
            "description": "Employment Details of current user"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Employment details of current user",
        "tags": [
          "Absence"
        ]
      }
    },
    "/customer/absence/isRegistered": {
      "get": {
        "description": "Returns boolean depending on whether the employee is registered",
        "operationId": "isEmployeeRegistered",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The external user id",
            "in": "header",
            "name": "externalUserId",
            "required": true,
            "schema": {
              "default": "",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeRegistrationStatus"
                }
              }
            },
            "description": "User status whether the employee is registered or not"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "External user is registered Employee",
        "tags": [
          "Absence"
        ]
      }
    },
    "/customer/absence/notifications": {
      "get": {
        "description": "Returns Notifications for an Absence Customer. If absence management is taken over from another system or carrier, the Notification can also contain information on those absences. If a notification only contains withdrawn absence cases or void takeover cases, it is not returned.",
        "operationId": "getNotificationCases",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/NotificationCaseSummary"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Notifications for an Absence Customer"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Notifications for an Absence Customer",
        "tags": [
          "Absence"
        ]
      }
    },
    "/customer/absence/notifications/{notificationCaseId}/complete-intake": {
      "post": {
        "description": "This API will be used to complete the intake process associated with Notification Case. It will validate that the notification id provided in the URL is valid for the absence employee and that the user owns the notification case.<br> The APIs will process the wizard process of every child case as follows:<br>&nbsp;&nbsp;\t-&nbsp;\tThe API will check is there any Wizard process associated with the child case. If the child case has a wizard process, it will process each step of the wizard. Once all the steps of the process complete it create the task for back-office user for the child case.<br>&nbsp;&nbsp;\t-&nbsp;\tIf it fails to process any of the steps in the wizard process, it will stop processing that child case. In this case no task will be created for the back-office user and it will push on the managing process for the child case.<br> If for any reason, the wizard process does not complete for any of the child cases, no further processing will be completed.<br> If all child cases have been successfully processed, then it will check is there any Wizard process associated with the notification case. If the notification case has the wizard process, it will process each step of the wizard. No task will be created for the notification case. The managing process for the notification case will be pushed on.<br> If it fails to process any of the steps in the wizard process, it will stop processing.",
        "operationId": "completeIntake",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Notification Case ID",
            "in": "path",
            "name": "notificationCaseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationCaseSummary"
                }
              }
            },
            "description": "Successful Request"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Completes the intake process for absence user's notification case.",
        "tags": [
          "Absence"
        ]
      }
    },
    "/customer/absence/start-accommodation": {
      "post": {
        "operationId": "startAccommodation",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccommodationCase"
              }
            }
          },
          "description": "Start accommodation object details",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccommodationCaseSummary"
                }
              }
            },
            "description": "Absence case creation successfull"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "This API will be used to start an accommodation case for an absence employee.To start an accommodation case all the mandatory and valid data must be provided. The data must include at least any one of the Accommodation or Limitation detail.It will also create a notification case if notification id is not provided in the request data and the accommodation case is configured to have a notification case.If provided in the request it will validate that the notification case belong/ls to the employee, if yes, the newly created accommodation case will be added as a child case to the notification case.",
        "tags": [
          "Absence"
        ]
      }
    },
    "/customer/absence/startAbsence": {
      "post": {
        "description": "Create a new blank Absence case with no intake form details and with the data provided in the request payload. Depending on the Notification case configuration, create a standalone Absence or add it to an existing or new Notification Case.<br><br>It is expected that prior to calling this API, the customer has a week based work pattern defined on the chosen occupation. This could be done by calling the <i>GET /customer/occupations/{occupationId}/week-based-work-pattern. </i><br><br><b>Important Note:</b> If the week-based-work-pattern has not been setup, the internal availability calculations will not be performed.",
        "operationId": "startAbsence",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AbsenceCase"
              }
            }
          },
          "description": "Start absence object details",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AbsenceCaseSummary"
                }
              }
            },
            "description": "Absence case creation successfull"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "A new absence case",
        "tags": [
          "Absence"
        ]
      }
    },
    "/customer/absence/{absenceId}/reflexive-questions": {
      "post": {
        "description": "The reflexive questions allows to update additional information of an absence case leave request.",
        "operationId": "createReflexiveQuestions",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Absence Case ID",
            "in": "path",
            "name": "absenceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReflexiveQuestions"
              }
            }
          },
          "description": "Additional Information details",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Request"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "To process the additional information of a reason adaptive data question group for the specified absence case leave request.",
        "tags": [
          "Absence"
        ]
      }
    },
    "/customer/addPaymentPreference": {
      "post": {
        "deprecated": true,
        "description": "<p> Note: this endpoint is deprecated, please use <ul><li>​/customer​/payment-preferences</li></ul> instead</p>Add payment preference details for a party.",
        "operationId": "addPaymentPreference",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This header parameter will be used by the portal user.",
            "in": "header",
            "name": "role",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPaymentPreference"
              }
            }
          },
          "description": "Payment preference details to be added.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentPreferenceResponse"
                }
              }
            },
            "description": "Returns the payment preference details added related to the party."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ValidationMessageModel"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Request could not be processed by the application for some application specific reason e.g. validation error"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Add payment preference details for a party",
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/addTaxCodeRecord": {
      "post": {
        "description": "Add tax code details to a party.",
        "operationId": "addTaxCodeRecord",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This header parameter will be used by the portal user.",
            "in": "header",
            "name": "role",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxTypeDetails"
              }
            }
          },
          "description": "Tax code details to be added.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxTypeDetailsResponse"
                }
              }
            },
            "description": "Returns the tax code details of a party."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ValidationMessageModel"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Request could not be processed by the application for some application specific reason e.g. validation error"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Add tax code details to a party.",
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/addWebMessage": {
      "post": {
        "description": "Allows a customer to create a web message to communicate with the insurer through the customer portal",
        "operationId": "addWebMessage",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewWebMessage"
              }
            }
          },
          "description": "New Web Message",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewWebMessage"
                }
              }
            },
            "description": "Request successful. The Web Message that the customer created will be returned"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/cases/{caseId}/addEForm/{eformType}": {
      "post": {
        "description": "Adds a new EForm document to a Case, returning the newly created data",
        "operationId": "addEForm",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Claim case number",
            "in": "path",
            "name": "caseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the Simple Eform Type or Eform Type to create",
            "in": "path",
            "name": "eformType",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/EFormAttribute"
                },
                "type": "array"
              }
            }
          },
          "description": "List of eFormAttributes of the EForm document which will be created",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EForm"
                }
              }
            },
            "description": "Returns the newly created EForm"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Adds an EForm",
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/cases/{caseId}/caseStatusHistory": {
      "get": {
        "description": "Returns list of the case statuses that a particular case has cycled through",
        "operationId": "getCaseStatusHistory",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "case number",
            "in": "path",
            "name": "caseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/CaseStatusHistory"
                  },
                  "type": "array"
                }
              }
            },
            "description": "A list of the case statuses that a particular case has cycled through"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Returns list of the case statuses that a particular case.",
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/cases/{caseId}/documents": {
      "get": {
        "description": "Returns the documents that have been added to the claim or to a contact on the claim .",
        "operationId": "getDocuments",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of the claim. Only documents associated with this claim or this claims contacts are returned.",
            "in": "path",
            "name": "caseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Flag if set to TRUE, will also return documents that are linked to child cases of the provided CaseID, for the cases that are owned by the use",
            "in": "query",
            "name": "includeChildCases",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Document"
                  },
                  "type": "array"
                }
              }
            },
            "description": "A list of documents linked to the claim"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/cases/{caseId}/documents/base64Upload/{documentType}": {
      "post": {
        "description": "Upload documents to the FINEOS system using a JSON payload with Base64 encoding for the file content and file details.",
        "operationId": "uploadBase64EndodedFile",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The case number of the case for which we upload the document.",
            "in": "path",
            "name": "caseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of external document type we wish to upload.",
            "in": "path",
            "name": "documentType",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Base64EncodedFileData"
              }
            }
          },
          "description": "Basic information needed for Uploading a document",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            },
            "description": "Document will be successfully uploaded and Document Object will be returned as a JSON."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Upload documents to the FINEOS system using a JSON payload with Base64 encoding for the file content and file details.",
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/cases/{caseId}/documents/upload/{documentType}": {
      "post": {
        "description": "This API will provide the customer to upload documentation to the FINEOS system.",
        "operationId": "uploadFile",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The case number of the case for which we upload the document.",
            "in": "path",
            "name": "caseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of external document type we wish to upload.",
            "in": "path",
            "name": "documentType",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "documentContents": {
                    "description": "Uploaded file",
                    "format": "binary",
                    "type": "string"
                  },
                  "documentDescription": {
                    "type": "string"
                  },
                  "managedRequirementId": {
                    "format": "int64",
                    "type": "integer"
                  }
                },
                "required": [
                  "documentContents"
                ],
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Document successfully uploaded."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/cases/{caseId}/documents/{documentId}/base64Download": {
      "get": {
        "description": "Returns the document to download, base64 encoded, in a JSON object.",
        "operationId": "getDocumentContentsAsBase64EncodedString",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of the claim case.",
            "in": "path",
            "name": "caseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of the document to download. Only document associated with the claim is allowed to download.",
            "in": "path",
            "name": "documentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Base64EncodedFileDetails"
                }
              }
            },
            "description": "The document downloaded successfully."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/cases/{caseId}/documents/{documentId}/doc-received-for-outstanding-supporting-evidence": {
      "post": {
        "description": "The API expects that there is at least one outstanding supporting evidence item existing on either the provided case or one of it's child cases, that is either an open outstanding requirement on one of the cases, or a pending evidence request on one of the absence cases for the same document type.<BR> For all cases, it will link the document to the any open outstanding requirements where the document type for the outstanding requirement (as determined by an event) matches the document type of the provided document.<BR> In addition, where the case or any or it's sub cases are absence cases, it will also update the evidences on the absence cases for the same document type to mark them as received.<BR> A task will then be generated for the back office user to inform them that one or many outstanding supporting evidence items have been updated, so that they can view the related document and determine whether it satisfies the outstanding requirement. The task will be created on either an absence, accommodation, generic or a claim case. It will never be created for a notification case. If all outstanding supporting evidence items that are updated are specific to a claim or generic case only OR if there is a mix of claim and absence outstanding supporting evidence items updated, the task will be associated with a claim or generic case. Otherwise, it will be associated with an absence case.",
        "operationId": "updateOutstandingRequirementEvdience",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The case number to update the outstanding requirement and evdience receipt.",
            "in": "path",
            "name": "caseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "documentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Update's the outstanding supporting evidence items that exist on the case or any of it's child cases."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "This API will be used to update the outstanding supporting evidence items that exist on the case or any of it's child cases.",
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/cases/{caseId}/documents/{documentId}/download": {
      "get": {
        "description": "Returns the document to download.",
        "operationId": "getDocumentContentsAsStream",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of the claim case.",
            "in": "path",
            "name": "caseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of the document to download. Only document associated with the claim is allowed to download.",
            "in": "path",
            "name": "documentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The document downloaded successfully."
          },
          "400": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/cases/{caseId}/documents/{documentId}/markread": {
      "post": {
        "description": "Mark a document as read by user within the FINEOS system.",
        "operationId": "markDocumentAsRead",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The case number for the case to which the document is associated",
            "in": "path",
            "name": "caseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The I value of the document we wish to mark as read",
            "in": "path",
            "name": "documentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Document"
                }
              }
            },
            "description": "Document successfully updated"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Mark a document as read by customer or delegate within the FINEOS system.",
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/cases/{caseId}/eForms": {
      "get": {
        "description": "Returns a list of EForm documents for a claim.",
        "operationId": "getEForms",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Claim case number",
            "in": "path",
            "name": "caseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "String which contains comma delimited column names.",
            "in": "query",
            "name": "eFormTypes",
            "schema": {
              "default": "",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/EFormSummary"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Request successful. An array of eFormSummary objects will be returned"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/cases/{caseId}/employer-questions-answers": {
      "get": {
        "description": "Returns the latest customer answers to employer questions for the given category of questions for the employer on the selected case. <br> <br> <b> Error Messages:</b> <ul> <li>If this endpoint is used to retrieve the employer questions answers from a non-existent case, or from a case that does not belong to the user, a 403 error response will be returned.</li> </ul>",
        "operationId": "getAnswerQuestionsByCase",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Id of the case for which the employer questions and answers will be retrieved",
            "in": "path",
            "name": "caseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The category of the employer questions retrieved.",
            "in": "query",
            "name": "category",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployerQuestionAnswers"
                }
              }
            },
            "description": "Returns the latest customer answers to employer questions for the given category of questions for the employer on the case."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Returns the latest customer answers to employer questions for the given category of questions for the employer on the selected case.",
        "tags": [
          "Customer"
        ]
      },
      "post": {
        "description": "Creates or updates the answers to the employer questions for the given category of questions for the employer on the case.",
        "operationId": "updateEmployeeAnswers",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Id of the case for which the answers to employer questions will be created or updated.",
            "in": "path",
            "name": "caseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployeeAnswers"
              }
            }
          },
          "description": "List of eform answers",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployerQuestionAnswers"
                }
              }
            },
            "description": "Creates or updates the answers to the employer questions for the given category of questions for the employer on the case."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Creates or updates the answers to the employer questions for the given category of questions for the employer on the case.",
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/cases/{caseId}/managedRequirements": {
      "get": {
        "description": "Returns a list of managed requirements relating to / to be actioned by the customer",
        "operationId": "getManagedRequirements",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "claim case number",
            "in": "path",
            "name": "caseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ManagedRequirementSummary"
                  },
                  "type": "array"
                }
              }
            },
            "description": "List of managed requirements for the customer"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/cases/{caseId}/managedRequirements/{managedReqId}/documents": {
      "get": {
        "description": "Returns a list of documents linked to a managed requirement",
        "operationId": "getDocsForManagedReq",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "claim case number",
            "in": "path",
            "name": "caseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Managed Requirement Id",
            "in": "path",
            "name": "managedReqId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Document"
                  },
                  "type": "array"
                }
              }
            },
            "description": "List of documents linked to the managed requirement"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/cases/{caseId}/managedRequirements/{managedReqId}/eforms": {
      "get": {
        "description": "Get the documents for the managed requirement if the claim belongs to the customer and the managed requirement is linked to the claim.",
        "operationId": "getEformForManagedRequirement",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Claim case number",
            "in": "path",
            "name": "caseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The managed Requirement id",
            "in": "path",
            "name": "managedReqId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/EFormSummary"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Request successful. An array of eFormSummary objects will be returned"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/cases/{caseId}/managedRequirements/{managedReqId}/linkDocument/{docId}": {
      "post": {
        "description": "Links the document to the managed requirement if the claim belongs to the customer and the managed requirement is linked to the claim.",
        "operationId": "linkDocumentToManagedRequirement",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Claim case number",
            "in": "path",
            "name": "caseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The managed Requirement id",
            "in": "path",
            "name": "managedReqId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The document id",
            "in": "path",
            "name": "docId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/cases/{caseId}/occupations": {
      "get": {
        "description": "An occupation represents a party's employment with one particular employer. This API returns a list of Occupations for a customer at case level. <br> The API supports returning a list of occupations relating to the following case types: <ul> <li><b>Absence</b></li> <li><b>Accommodation</b></li> <li><b>Benefit</b></li> <li><b>Claim (direct link)</b></li> <li><b>Claim (linked to a wage base)</b></li> <li><b>Notification</b></li> </ul><p> For claim cases, a configuration property will determine whether the list of occupations should be returned for the claim or for the wage base associated to the claim. The system will return the occupation(s) ordered in descending order by <b>Date of Hire</b>. <br> <br> <b>Error Messages:</b> <ul> <li>If the employee is self-employed or if the employer linked to that case is not a party on the system, the endpoint will be returning a 500 error response. </li> <li>If the is retrieving occupations from a non-existent case, or from a case that does not belong to the user, a 403 error response will be returned. </li> </ul>",
        "operationId": "query_4",
        "parameters": [
          {
            "description": "The id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "id of the represented user",
            "in": "header",
            "name": "representedcustomerid",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Reference Number of the case for which earnings are to be returned",
            "in": "path",
            "name": "caseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OccupationResources"
                }
              }
            },
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Returns a list of Occupations for a Case",
        "tags": [
          "Case Occupation"
        ]
      },
      "post": {
        "description": "Represents a party's employment with one particular employer.\nThis endpoint supports the creation of an occupation record for the case pertaining one of the following case types:\n* Benefit case\n* Claim (direct link)\n\n\nThe API provides the ability for the customer to set the occupation record as primary.<br>Optional configuration allows for the creation of a task on successful creation of the occupation record to notify a user that a new occupation record has been added by the customer. In addition, a system administrator can define via configuration rules, whether to set the occupation as verified or unverified.",
        "operationId": "create_1",
        "parameters": [
          {
            "description": "The id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "id of the represented user",
            "in": "header",
            "name": "representedcustomerid",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Reference Number of the case for which earnings are to be returned",
            "in": "path",
            "name": "caseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOccupationCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Occupation"
                }
              }
            },
            "description": "Created",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Creates a Case Occupation",
        "tags": [
          "Case Occupation"
        ]
      }
    },
    "/customer/cases/{caseId}/occupations/{occupationId}": {
      "get": {
        "description": "Represents a party's employment with one particular employer.<br> This API returns the chosen occupation details for a customer at case level. <br> The API supports returning a list of occupations relating to the following case types: <ul> <li><b>Absence</b></li> <li><b>Accommodation</b></li> <li><b>Benefit</b></li> <li><b>Claim (direct link)</b></li> <li><b>Claim (linked to a wage base)</b></li> <li><b>Notification</b></li> </ul> <p> For claim cases, a configuration property will determine whether the list of occupations should be returned for the claim or for the wage base associated to the claim. The system will return the occupation(s) ordered in descending order by <b>Date of Hire</b>. <br> <br> <b>Error Messages:</b> <ul> <li>If the employee is self-employed or if the employer linked to that case is not a party on the system, the endpoint will be returning a 500 error response. </li> <li>If the is retrieving occupations from a non-existent case, or from a case that does not belong to the user, a 403 error response will be returned. </li> </ul>",
        "operationId": "getSingle_6",
        "parameters": [
          {
            "description": "The id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "id of the represented user",
            "in": "header",
            "name": "representedcustomerid",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Reference Number of the case for which earnings are to be returned",
            "in": "path",
            "name": "caseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "id of the Occupation for which for which earnings are to be read",
            "in": "path",
            "name": "occupationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Occupation"
                }
              }
            },
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Returns the details of an occupation for a Case",
        "tags": [
          "Case Occupation"
        ]
      }
    },
    "/customer/cases/{caseId}/occupations/{occupationId}/actual-earnings": {
      "get": {
        "description": "Returns the Actual Earnings records at Case level for the specified Case and Occupation. The following list of case types can have occupations linked to them and are covered by this API:\n* Absence\n* Accommodation\n* Benefit\n* Claim (direct link)\n* Claim (linked to a wage base)\n* Notification\n\n\nFor claim cases, a configuration property defines how the occupation should be retrieved (direct link or wage base).",
        "operationId": "query_5",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of the represented user",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Reference Number of the case for which earnings are to be returned",
            "in": "path",
            "name": "caseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of the Occupation for which for which earnings are to be read",
            "in": "path",
            "name": "occupationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualEarningsResources"
                }
              }
            },
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Returns the Actual Earnings records at case level for the specified Case and Occupation",
        "tags": [
          "Case Occupation"
        ]
      },
      "post": {
        "description": "This endpoint supports the creation of an Earnings Record linked to an Occupation pertaining one of the following case types:\n* Benefit case\n* Claim (direct link)\n\n\nOptional configuration allows for the creation of a task on successful creation of the occupation record to notify a user that a new occupation record has been added by the customer. In addition, a system administrator can configure via rules whether to set the occupation to verified or unverified.",
        "operationId": "create_2",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of the represented user",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Reference Number of the case for which earnings are to be returned",
            "in": "path",
            "name": "caseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of the Occupation for which for which earnings are to be read",
            "in": "path",
            "name": "occupationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateActualEarningsCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualEarnings"
                }
              }
            },
            "description": "Created",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Creates an Actual Earnings Record for the Occupation",
        "tags": [
          "Case Occupation"
        ]
      }
    },
    "/customer/cases/{caseId}/occupations/{occupationId}/actual-earnings/{actualEarningsId}": {
      "get": {
        "description": "Actual Earnings are earnings received for a specific period. A customer can have multiple earnings as long as effective dates don't overlap. Earnings are attached to Occupations and exist at Customer or Case level. \nReturns the Actual Earnings record at Case level for the specified Case and Occupation with the provided id. The following list of case types can have occupations linked to them and are covered by this API:\n* Absence\n* Accommodation\n* Benefit\n* Claim (direct link)\n* Claim (linked to a wage base)\n* Notification\n\n\nFor claim cases, a configuration property defines how the occupation should be retrieved (direct link or wage base).",
        "operationId": "getSingle_7",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of the represented user",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Reference Number of the case for which earnings are to be returned",
            "in": "path",
            "name": "caseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of the Occupation for which for which earnings are to be read",
            "in": "path",
            "name": "occupationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of the Actual Earnings to be read",
            "in": "path",
            "name": "actualEarningsId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActualEarnings"
                }
              }
            },
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Returns an Actual Earnings Record at Case level for the specified Earnings",
        "tags": [
          "Case Occupation"
        ]
      }
    },
    "/customer/cases/{caseId}/occupations/{occupationId}/week-based-work-pattern": {
      "get": {
        "description": "Week based work pattern. A Customer can have work pattern associated to any of their occupation, which can exist at Customer or Case level.\nThis API returns a list of Occupations for a customer at case level. If this API is used to try to retrieve occupations from a non-existent case, or from a case that does not belong to the user, an error response will be returned.\n\nThis API returns the work pattern, if any, linked to the occupation being retrieved. It is expected that prior to calling this API, the GET /customer/cases/{caseId}/occupations endpoint will have been used to retrieve information on the occupation. The API will only return work patterns where the work pattern basis on the occupation has been set to Week Based or Weekly.\n\nA Week Based work pattern is one that is set up in back office by selecting a Work Pattern type of Fixed, 2 weeks Rotating, 3 weeks Rotating or 4 weeks Rotating.\nIf this API is used to try to retrieve a work pattern from:\n* a non-existent occupation,\n* an occupation that does not have a work pattern defined,\na work pattern that is not Week Based\n\nan error response will be returned.\nIf this API is used to try to retrieve a work pattern from an Occupation linked to a non-existent Case or a Case that does not belong to the user, an error response will be returned.",
        "operationId": "getSingle_8",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of the represented user",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Reference Number of the case for which earnings are to be returned",
            "in": "path",
            "name": "caseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of the Occupation for which for which earnings are to be read",
            "in": "path",
            "name": "occupationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WeekBasedWorkPattern"
                }
              }
            },
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Returns the Work Pattern at Case level for the specified Case and Occupation",
        "tags": [
          "Case Occupation"
        ]
      },
      "post": {
        "description": "This API creates a Week Based or Weekly work pattern relating to the specified occupation. It is expected that prior to calling this API, the GET /cases/occupations endpoint will have been used to retrieve information on the occupation.\n\nA Week Based work pattern is one that is set up in back office by selecting a Work Pattern type of Fixed, 2 weeks Rotating, 3 weeks Rotating or 4 weeks Rotating. If this API is used to try to create a work pattern on a non-existent Occupation, or on an Occupation that already has a work pattern defined, an error response will be returned.\n\nA system administrator can configure, via rules, whether to set the occupation to verified or unverified.",
        "operationId": "create_3",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of the represented user",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Reference Number of the case for which earnings are to be returned",
            "in": "path",
            "name": "caseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of the Occupation for which for which earnings are to be read",
            "in": "path",
            "name": "occupationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OccupationWeekBasedWorkPatternCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WeekBasedWorkPattern"
                }
              }
            },
            "description": "Created",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Creates a Work Pattern at Case level for the specified Case and Occupation",
        "tags": [
          "Case Occupation"
        ]
      }
    },
    "/customer/cases/{caseId}/outstanding-supporting-evidence": {
      "get": {
        "description": "Returns a list of Evidences and Outstanding Requirements from the given case.<BR> If the case is a Notification, it returns all Evidences and Outstanding Requirements from all direct sub-cases accessible by the user.",
        "operationId": "getOutstandingSupportingEvidence",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of the case to get Evidences and Outstanding Requirements from.",
            "in": "path",
            "name": "caseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/OutstandingSupportingEvidence"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Returns a list of Evidences or Outstanding Requirements."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Returns a list of Evidences and Outstanding Requirements from the given case.",
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/cases/{caseId}/participants": {
      "get": {
        "description": "Retrieves a list of the participants for a particular case",
        "operationId": "getCaseParticipants",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Case number",
            "in": "path",
            "name": "caseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/CaseParticipantsSummary"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Read successful"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Retrieves a list of the participants for a particular case.",
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/cases/{caseId}/participants/{participantId}/readParticipantContactDetails": {
      "get": {
        "description": "Returns details for a particular case Participant (date of birth, gender, correspondence address etc.)",
        "operationId": "readParticipantContactDetails",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "claim case number",
            "in": "path",
            "name": "caseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "participant Id",
            "in": "path",
            "name": "participantId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ParticipantContactDetails"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Case Participant details for a customer"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Returns details for a particular case Participant.",
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/cases/{caseId}/participants/{participantId}/readParticipantDetails": {
      "get": {
        "description": "Returns a Case Participant details (date of birth, gender, correspondence address etc.) for a customer",
        "operationId": "readParticipantDetails",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the case number",
            "in": "path",
            "name": "caseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "the participant Id",
            "in": "path",
            "name": "participantId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Participant"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Case Participant details for a customer"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/cases/{caseId}/readEForm/{eFormId}": {
      "get": {
        "description": "Returns EForm document.",
        "operationId": "readEForm",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Claim case number",
            "in": "path",
            "name": "caseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of an EForm document",
            "in": "path",
            "name": "eFormId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EForm"
                }
              }
            },
            "description": "Successful response with EForm document with a given eFormId"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/cases/{caseId}/updateEForm/{eFormId}": {
      "post": {
        "description": "Update existing EForm document",
        "operationId": "updateEForm",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Claim case number",
            "in": "path",
            "name": "caseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of an EForm document",
            "in": "path",
            "name": "eFormId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/EFormAttribute"
                },
                "type": "array"
              }
            }
          },
          "description": "Updated EForm document",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EForm"
                }
              }
            },
            "description": "EForm document updated successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/claims": {
      "get": {
        "description": "Returns all claims from the system that the customer is authorised to access",
        "operationId": "getClaims",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This header parameter will be used by the portal user.",
            "in": "header",
            "name": "role",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ClaimSummary"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Claims from the system that the customer is authorised to access"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Lists the User's Claims",
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/claims/notifications": {
      "get": {
        "description": "Get all notification cases for the customer which has one or more child case along with child cases.",
        "operationId": "getNotificationCases_1",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This header parameter will be used by the portal user.",
            "in": "header",
            "name": "role",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/NotificationCaseSummaryForClaims"
                  },
                  "type": "array"
                }
              }
            },
            "description": "A list of notification case summary along with child claims summaries."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Get the notification cases for the customer.",
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/claims/startClaim/{claimCaseType}": {
      "post": {
        "description": "Creates a claim with the customer as the default participant and links policies to it",
        "operationId": "startClaim",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of a claim case type",
            "in": "path",
            "name": "claimCaseType",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StartClaim"
              }
            }
          },
          "description": "Basic information needed for creating a claim",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StartClaimSummary"
                }
              }
            },
            "description": "Claim Summary"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/claims/{claimId}/approvalOrders": {
      "get": {
        "description": "Returns Approval Orders for a customer",
        "operationId": "getApprovalOrders",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "claim case number",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "order type",
            "in": "query",
            "name": "orderType",
            "required": true,
            "schema": {
              "enum": [
                "expense",
                "service"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalOrders"
                }
              }
            },
            "description": "A Approval Orders for a customer"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/claims/{claimId}/approvalOrders/{approvalOrderId}/decisions": {
      "get": {
        "description": "Returns Approval Order decisions for a customer",
        "operationId": "getApprovalOrderDecisions",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "claim case number",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "approvalOrderId",
            "in": "path",
            "name": "approvalOrderId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalOrderDecisions"
                }
              }
            },
            "description": "A Approval Order decisions for a customer"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/claims/{claimId}/benefits": {
      "get": {
        "description": "Returns a list of benefits for a customer",
        "operationId": "getClaimBenefits",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "claim case number",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/BenefitSummary"
                  },
                  "type": "array"
                }
              }
            },
            "description": "A list of benefit summaries for a customer"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/claims/{claimId}/benefits/{benefitId}/mainPayeeDetails": {
      "get": {
        "description": "Returns details for the main payee on a recurring benefit for customer.",
        "operationId": "getPayeeDetails",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This header parameter will be used by the portal user.",
            "in": "header",
            "name": "role",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "claim case number",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "benefitId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MainPayeeDetails"
                }
              }
            },
            "description": "Returns details for the main payee on a recurring benefit"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Returns details for the main payee on a recurring benefit.",
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/claims/{claimId}/benefits/{benefitId}/readDisabilityBenefit": {
      "get": {
        "description": "Returns a disability Benefit for a customer",
        "operationId": "getClaimDisabilityBenefit",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "claim case number",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "benefit case number",
            "in": "path",
            "name": "benefitId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReadDisabilityBenefitResult"
                }
              }
            },
            "description": "A disability benefit for a customer"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/claims/{claimId}/benefits/{benefitId}/readLumpSumBenefit": {
      "get": {
        "description": "Returns a lump sum Benefit for a customer",
        "operationId": "getClaimLumpSumBenefit",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "claim case number",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "benefit case number",
            "in": "path",
            "name": "benefitId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReadLumpSumBenefitResult"
                }
              }
            },
            "description": "A lump sum benefit for a customer"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/claims/{claimId}/complete-intake": {
      "post": {
        "description": "This API will be used to complete the intake process associated with Claim Case. It will validate that the claim id provided in the URL is valid for the customer. Then it will check if there is any Wizard process associated with the case. <br> If the case has a wizard process, it will process each step of the wizard. Once all the steps of the process complete it will create a task for the back-office user and it will push on the managing process for the claim case.<br> If it fails to process any of the steps in the wizard process, it will stop processing and no task will be created for the back-office user.",
        "operationId": "processCompleteIntake",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This header parameter will be used by the portal user.",
            "in": "header",
            "name": "role",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Claim case number",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaimSummary"
                }
              }
            },
            "description": "Claim Summary"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "This API will be used to complete the intake process associated with Claim Case.",
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/claims/{claimId}/futurePayments": {
      "get": {
        "description": "Returns the list of future payment objects ",
        "operationId": "getFuturePayment",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This header parameter will be used by the portal user.",
            "in": "header",
            "name": "role",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "claim id of the customer",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/FuturePayment"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Request successful. The details of the recurring future payments to the customer will be returned"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Lists of  future payments for the customer.",
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/claims/{claimId}/lodgeClaim": {
      "post": {
        "description": "This operation is triggered by a customer when he/she is finished with updating a claim. This operation will notify head office users to take over this claim.",
        "operationId": "lodgeClaim",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Claim case number",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lodgement successful"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/claims/{claimId}/medicalDetails": {
      "get": {
        "description": "Returns medical details on a claim for a customer.",
        "operationId": "getClaimMedicalDetails",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This header parameter will be used by the portal user.",
            "in": "header",
            "name": "role",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "claim case number",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MedicalDetailsResponse"
                }
              }
            },
            "description": "Medical Details on a claim for a customer."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Returns medical details on a claim for a customer",
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/claims/{claimId}/medicalDetails/addDiagnosisCode": {
      "post": {
        "description": "Add diagnosis code to claim case medical details.",
        "operationId": "addDiagnosisDetailsForCustomer",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This header parameter will be used by the portal user.",
            "in": "header",
            "name": "role",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Claim case number",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewDiagnosisDetails"
              }
            }
          },
          "description": "The diagnosis details to be added to the claim case.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiagnosisDetails"
                }
              }
            },
            "description": "Diagnosis details Added"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Add diagnosis code to claim case medical details.",
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/claims/{claimId}/medicalDetails/addHospitalisationDetails": {
      "post": {
        "description": "Add the hospitalisation details associated to the claim case.",
        "operationId": "addHospitalisationDetails",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This header parameter will be used by the portal user.",
            "in": "header",
            "name": "role",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Claim case number",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HospitalisationDetails"
              }
            }
          },
          "description": "Hospitalization details to be added.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HospitalisationDetailsResponse"
                }
              }
            },
            "description": "Returns the hospitalisation details added related to the claim."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Add the hospitalisation details associated to the claim case.",
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/claims/{claimId}/medicalDetails/diagnosisCodes": {
      "get": {
        "description": "Returns Diagnosis Codes Details for Claim Medical Details for a Customer user",
        "operationId": "getClaimDiagnosisCodes",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This header parameter will be used by the portal user.",
            "in": "header",
            "name": "role",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "claim case number",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DiagnosisDetails"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Diagnosis Codes Details for Medical Details on a claim for a Customer user"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Get the Diagnosis Codes linked to the Medical Details recorded on Customer",
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/claims/{claimId}/medicalDetails/diagnosisCodes/{diagnosisCodeId}/removeDiagnosisCode": {
      "post": {
        "description": "Remove diagnosis code to claim case medical details.",
        "operationId": "removeDiagnosisDetailsForCustomer",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This header parameter will be used by the portal user.",
            "in": "header",
            "name": "role",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Claim case number",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The diagnosis code id.",
            "in": "path",
            "name": "diagnosisCodeId",
            "required": true,
            "schema": {
              "description": "Business Entity OID",
              "example": "PE-00012-0000001234",
              "format": "string",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiagnosisDetails"
                }
              }
            },
            "description": "Diagnosis details Updated"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Remove diagnosis code to claim case medical details.",
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/claims/{claimId}/medicalDetails/diagnosisCodes/{diagnosisCodeId}/updateDiagnosisCode": {
      "post": {
        "description": "Update diagnosis code to claim case medical details.",
        "operationId": "updateDiagnosisDetailsForCustomer",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This header parameter will be used by the portal user.",
            "in": "header",
            "name": "role",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Claim case number",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The diagnosis code id.",
            "in": "path",
            "name": "diagnosisCodeId",
            "required": true,
            "schema": {
              "description": "Business Entity OID",
              "example": "PE-00012-0000001234",
              "format": "string",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewDiagnosisDetails"
              }
            }
          },
          "description": "The diagnosis details to be updated to the claim case.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiagnosisDetails"
                }
              }
            },
            "description": "Diagnosis details Updated"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Update diagnosis code to claim case medical details.",
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/claims/{claimId}/medicalDetails/hospitalisationDetails": {
      "get": {
        "description": "Get the list of hospitalisation associated to the claim case.",
        "operationId": "getHospitalizationDetails",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This header parameter will be used by the portal user.",
            "in": "header",
            "name": "role",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "claim case number",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/HospitalisationDetailsResponse"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Returns the list of hospitalisation details for specified claim."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Get the list of hospitalisation associated to the claim case.",
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/claims/{claimId}/medicalDetails/hospitalisationDetails/{hospitalisationDetailsId}/removeHospitalisationDetails": {
      "post": {
        "description": "Remove hospitalisation medical details associated with claim case.",
        "operationId": "removeHospitalisationDetails",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This header parameter will be used by the portal user.",
            "in": "header",
            "name": "role",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The claim case number.",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The hospitalisation Oid received in the request.",
            "in": "path",
            "name": "hospitalisationDetailsId",
            "required": true,
            "schema": {
              "description": "Business Entity OID",
              "example": "PE-00012-0000001234",
              "format": "string",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Removed successfully."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Remove hospitalisation medical details associated with claim case.",
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/claims/{claimId}/medicalDetails/hospitalisationDetails/{hospitalisationDetailsId}/updateHospitalisationDetails": {
      "post": {
        "description": "Update hospitalisation medical details information of the claim case.",
        "operationId": "updateHospitalisationDetails",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This header parameter will be used by the portal user.",
            "in": "header",
            "name": "role",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The claim case number.",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The hospitalisation id received in the request.",
            "in": "path",
            "name": "hospitalisationDetailsId",
            "required": true,
            "schema": {
              "description": "Business Entity OID",
              "example": "PE-00012-0000001234",
              "format": "string",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HospitalisationDetails"
              }
            }
          },
          "description": "Hospitalization details to be updated.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HospitalisationDetailsResponse"
                }
              }
            },
            "description": "update hospitalisationDetails related information of the claim"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Update hospitalisation medical details information of the claim case.",
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/claims/{claimId}/medicalDetails/pregnancyDetails": {
      "get": {
        "description": "Returns pregnancy details on a claim for a customer.",
        "operationId": "getClaimPregnancyDetails",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This header parameter will be used by the portal user.",
            "in": "header",
            "name": "role",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "claim case number",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PregnancyDetails"
                }
              }
            },
            "description": "Pregnancy details on a claim for a customer."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Returns pregnancy details on a claim for a customer",
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/claims/{claimId}/medicalDetails/restrictionsLimitations": {
      "get": {
        "description": "Returns restrictions limitations on a claim for a customer",
        "operationId": "getClaimRestrictionsLimitations",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This header parameter will be used by the portal user.",
            "in": "header",
            "name": "role",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "claim case number",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestrictionsLimitations"
                }
              }
            },
            "description": "Read successful. Returns restrictions and limitations"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Returns restrictions limitations on a claim for a customer",
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/claims/{claimId}/medicalDetails/updatePregnancyDetails": {
      "post": {
        "description": "Update the pregnancy details associated to the claim case.",
        "operationId": "updatePregnancyDetails",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This header parameter will be used by the portal user.",
            "in": "header",
            "name": "role",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Claim case number",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PregnancyDetails"
              }
            }
          },
          "description": "Pregnancy details to be updated.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PregnancyDetails"
                }
              }
            },
            "description": "Returns the pregnancy details added related to the claim."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/claims/{claimId}/medicalDetails/updateRestrictionsLimitations": {
      "post": {
        "description": "Updates the restrictions limitations on a claim for a customer.",
        "operationId": "updateClaimRestrictionsLimitations",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This header parameter will be used by the portal user.",
            "in": "header",
            "name": "role",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Claim case number",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestrictionsLimitations"
              }
            }
          },
          "description": "restrictions and limitations related information of the claim.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestrictionsLimitations"
                }
              }
            },
            "description": "Returns the restrictions limitations which are updated on a claim for a customer."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Updates the restrictions limitations on a claim for a customer.",
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/claims/{claimId}/nextPayment": {
      "get": {
        "description": "Get the details of the next estimated payment (related to the specified claim) due to be sent to the customer (if any).",
        "operationId": "getCustomerNextPaymentForClaim",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of the claim. Only the next estimated payment associated to this claim is returned.",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NextPayment"
                }
              }
            },
            "description": "Request successful. The details of the next payment to the customer from the claim will be returned"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Get the details of the next estimated payment.",
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/claims/{claimId}/occupations": {
      "get": {
        "description": "An occupation represents a party's employment with one particular employer. This API returns the list of all available occupations for a customer at a claim level. Once a claim is created, a snapshot of the existing occupation is saved into the claim. This info can be modified without updating the occupation information at a party level. If the employee is self-employed or if the employer is not a party within the system, the endpoint will return whichever information is available on the snapshot of the claim at that moment. <br> <br> <b> Error Messages:</b> <ul> <li>If this endpoint is used to try to retrieve occupations from a non-existent claim, or from a claim that does not belong to the user, a 403 error response will be returned.</li> </ul>",
        "operationId": "getClaimOccupations",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Claim id of a claim associated with the customer.",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ReadOccupation"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The occupations of a claim"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Returns a list of Occupations for a claim.",
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/claims/{claimId}/occupations/addOccupation": {
      "post": {
        "description": "Adds an occupation detail for a claim case.",
        "operationId": "addOccupation",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The id of claim case.",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClaimOccupation"
              }
            }
          },
          "description": "The occupation detail to be added.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReadOccupation"
                }
              }
            },
            "description": "Returns the occupation details added."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ValidationMessageModel"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Request could not be processed by the application for some application specific reason e.g. validation error"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Adds an occupation detail for a claim case.",
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/claims/{claimId}/occupations/{occupationId}/addMonthlyBasisPreDisabilityEarnings": {
      "post": {
        "description": "Add monthly basis pre-disability earnings details for a customer.",
        "operationId": "addMonthlyBasisPreDisabilityEarnings",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Claim case number",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Occupation Id number",
            "in": "path",
            "name": "occupationId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MonthlyEarningsRequest"
              }
            }
          },
          "description": "EarningsRequest detail object to add monthly pre-disability earnings for a customer.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EarningsResponse"
                }
              }
            },
            "description": "Returns the newly created JSON monthly basis pre-disability earnings object."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Create monthly basis pre-disability earnings.",
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/claims/{claimId}/occupations/{occupationId}/addWeeklyBasisPreDisabilityEarnings": {
      "post": {
        "description": "Add weekly basis pre-disability earnings details for a customer.",
        "operationId": "addWeeklyBasisPreDisabilityEarnings",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Claim case number",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Occupation Id number",
            "in": "path",
            "name": "occupationId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WeeklyEarningsRequest"
              }
            }
          },
          "description": "EarningsRequest detail object to add weekly pre-disability earnings for a customer.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EarningsResponse"
                }
              }
            },
            "description": "Returns the newly created JSON weekly basis pre-disability earnings object."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Create weekly basis pre-disability earnings.",
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/claims/{claimId}/occupations/{occupationId}/earnings": {
      "get": {
        "description": "Returns the Pre-Disability Earnings Details for a customer",
        "operationId": "getEarnings",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "claim case number",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "occupation Id number",
            "in": "path",
            "name": "occupationId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/EarningsResponse"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Pre-Disability Earnings Details for a customer"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Get the Pre-Disability Earnings Details for a customer",
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/claims/{claimId}/occupations/{occupationId}/removeOccupation": {
      "post": {
        "description": "Removes an occupation detail for a claim case.",
        "operationId": "removeOccupation",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The id of claim case.",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The id of occupation to be removed.",
            "in": "path",
            "name": "occupationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Removes an occupation detail for a claim case.",
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/claims/{claimId}/occupations/{occupationId}/removePreDisabilityEarningsRecord/{earningsId}": {
      "post": {
        "description": "Removes the earnings record for the claim occupation.",
        "operationId": "removeEarnings",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The id of claim case.",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The id of occupation.",
            "in": "path",
            "name": "occupationId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The id of earning record to be removed.",
            "in": "path",
            "name": "earningsId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Earnings details successfully removed"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Remove the earnings record for the claim occupation.",
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/claims/{claimId}/occupations/{occupationId}/updateMonthlyBasisPreDisabilityEarnings/{earningsId}": {
      "post": {
        "description": "Updates and Returns the updated Pre-Disability Earnings Details for a customer",
        "operationId": "updateMonthlyBasisPreDisabilityEarnings",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "claim case number",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "occupation Id number",
            "in": "path",
            "name": "occupationId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "earnings Id",
            "in": "path",
            "name": "earningsId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MonthlyEarningsRequest"
              }
            }
          },
          "description": "Earnings record details to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/EarningsResponse"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Returns the JSON for updated monthly basis pre-disability earnings object."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Update monthly basis Pre-Disability Earnings for a customer",
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/claims/{claimId}/occupations/{occupationId}/updateOccupation": {
      "post": {
        "description": "Updates occupation details of a claim.",
        "operationId": "updateOccupation",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Claim id of a claim associated with the customer.",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Occupation id of a occupation associated with a claim.",
            "in": "path",
            "name": "occupationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClaimOccupation"
              }
            }
          },
          "description": "Occupation details to be updated.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReadOccupation"
                }
              }
            },
            "description": "Returns the updated occupation details of a claim."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Updates occupation details of a claim.",
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/claims/{claimId}/occupations/{occupationId}/updateWeeklyBasisPreDisabilityEarnings/{earningsId}": {
      "post": {
        "description": "Updates and Returns the updated Pre-Disability Earnings Details for a customer",
        "operationId": "updateWeeklyBasisPreDisabilityEarnings",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "claim case number",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "occupation Id number",
            "in": "path",
            "name": "occupationId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "earnings Id",
            "in": "path",
            "name": "earningsId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WeeklyEarningsRequest"
              }
            }
          },
          "description": "Earnings record details to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/EarningsResponse"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Returns the JSON for updated weekly basis pre-disability earnings object."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Update weekly basis Pre-Disability Earnings for a customer",
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/claims/{claimId}/otherIncomeSources": {
      "get": {
        "description": "Returns Income Sources listed on a claim for a customer",
        "operationId": "readIncomeSource",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This header parameter will be used by the portal user.",
            "in": "header",
            "name": "role",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "claim case number",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/IncomeSourceResponse"
                  },
                  "type": "array"
                }
              }
            },
            "description": "A list of Income Sources on a claim for a customer"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/claims/{claimId}/otherIncomeSources/addOtherIncomeSource": {
      "post": {
        "description": "Add the other income sources details associated to the claim case.",
        "operationId": "addOtherIncomeSource",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This header parameter will be used by the portal user.",
            "in": "header",
            "name": "role",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Claim case number",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IncomeSource"
              }
            }
          },
          "description": "OtherIncomeSource details to be added.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncomeSourceResponse"
                }
              }
            },
            "description": "Returns the other income sources details added to the claim."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Add the other income sources details associated to the claim case.",
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/claims/{claimId}/otherIncomeSources/{incomeSourceId}/removeOtherIncomeSource": {
      "post": {
        "description": "Remove other income source details associated with the claim case.",
        "operationId": "removeOtherIncomeSource",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This header parameter will be used by the portal user.",
            "in": "header",
            "name": "role",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "claim case number",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Other Income Source Id to be removed.",
            "in": "path",
            "name": "incomeSourceId",
            "required": true,
            "schema": {
              "description": "Business Entity OID",
              "example": "PE-00012-0000001234",
              "format": "string",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Other Income Source details successfully removed"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Remove other income source details associated with the claim case.",
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/claims/{claimId}/otherIncomeSources/{incomeSourceId}/updateOtherIncomeSource": {
      "post": {
        "description": "Update the other income sources details associated to the claim case.",
        "operationId": "updateOtherIncomeSource",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This header parameter will be used by the portal user.",
            "in": "header",
            "name": "role",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Claim case number",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The income sources id received in the request.",
            "in": "path",
            "name": "incomeSourceId",
            "required": true,
            "schema": {
              "description": "Business Entity OID",
              "example": "PE-00012-0000001234",
              "format": "string",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IncomeSource"
              }
            }
          },
          "description": "OtherIncomeSource details to be updated.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncomeSourceResponse"
                }
              }
            },
            "description": "Returns the other income sources details updated to the claim."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Update the other income sources details associated to the claim case.",
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/claims/{claimId}/payments": {
      "get": {
        "description": "Returns all the payments made (paid payments not payments waiting to be paid) on the claim which relate to the customer or which have been configured to be returned to the customer.",
        "operationId": "getPayments",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of the claim. Only payments associated to this claim are returned.",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Payment"
                  },
                  "type": "array"
                }
              }
            },
            "description": "A list of payments"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Returns all the payments made on the claim which relate to the customer or which have been configured to be returned to the customer.",
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/claims/{claimId}/payments/{paymentId}/paymentLines": {
      "get": {
        "description": "Returns the payment lines (breakdown of the adjustments comprising the payment amount) for the payment passed as a parameter",
        "operationId": "readPaymentLines",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This header parameter will be used by the portal user.",
            "in": "header",
            "name": "role",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of the claim. Only payments associated to this claim are returned.",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of payment for which to get the payment lines",
            "in": "path",
            "name": "paymentId",
            "required": true,
            "schema": {
              "description": "Business Entity OID",
              "example": "PE-00012-0000001234",
              "format": "string",
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PaymentLine"
                  },
                  "type": "array"
                }
              }
            },
            "description": "An Array of payment lines representing the adjustments which make up the payment amount"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Returns the payment lines for the payment passed as a parameter.",
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/claims/{claimId}/readDisabilityDetails": {
      "get": {
        "description": "Retrieves disability claims details, so that user can review some key information about the claim",
        "operationId": "readDisabilityClaim",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Claim case number",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReadDisabilityResult"
                }
              }
            },
            "description": "Read successful"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/claims/{claimId}/socialSecurityBenefit": {
      "get": {
        "description": "Get the detail of claims social security benefit detail for customer.",
        "operationId": "getSocialSecurityBenefit",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This header parameter will be used by the portal user.",
            "in": "header",
            "name": "role",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "claim case number",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SocialSecurityBenefitResponse"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Get the detail of claims social security benefit detail for customer."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "A Customer user should only be able to view Social Security Benefit information on claims which the Customer user is authorised to access. ",
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/claims/{claimId}/socialSecurityBenefit/decisions": {
      "get": {
        "operationId": "getSocialSecurityDecision",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This header parameter will be used by the portal user.",
            "in": "header",
            "name": "role",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "claim case number",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SocialSecurityDecisionResponse"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Read Successfull, get the details of claims social security decision associated to the claim case for customer."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Get the details of claims social security decision associated to the claim case for customer.",
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/claims/{claimId}/updateDisabilityDetails": {
      "post": {
        "description": "API to update a claim on-line of type Disability claim only.",
        "operationId": "updateDisabilityClaim",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Claim case number",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DisabilityClaim"
              }
            }
          },
          "description": "Set of disability claim information exposed to a customer for editing",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update successful"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/claims/{claimId}/updateMedicalDetails": {
      "post": {
        "description": "Updates the medical detail on a claim for a customer.",
        "operationId": "updateClaimMedicalDetails",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This header parameter will be used by the portal user.",
            "in": "header",
            "name": "role",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "claim case number",
            "in": "path",
            "name": "claimId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MedicalDetails"
              }
            }
          },
          "description": "Medical details to be added.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MedicalDetailsResponse"
                }
              }
            },
            "description": "Returns the medical details which are updated on a claim for a customer."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Updates the medical detail on a claim for a customer.",
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/isRegistered": {
      "get": {
        "description": "API to check if a user is currently registered in FINEOS.",
        "operationId": "isRegistered",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The customer's user id",
            "in": "header",
            "name": "ExternalUserId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationResponse"
                }
              }
            },
            "description": "isRegistered response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/login-time": {
      "post": {
        "description": "Update login details of a party.",
        "operationId": "UpdateLastPortalLoginDetails",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This header parameter will be used by the portal user.",
            "in": "header",
            "name": "role",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the login details of a party."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Update login details of a party.",
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/markWebMessagesAsRead": {
      "post": {
        "description": "Allows a customer to mark web message(s) as read",
        "operationId": "markMessagesAsRead",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/WebMessageId"
                },
                "type": "array"
              }
            }
          },
          "description": "List of Web Message ids. The messages matching these ids will be marked as read",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Request successful. The Web Message(s) that the customer specified to be marked as read have been updated"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/nextPaymentDetails": {
      "get": {
        "description": "Get the details of the next estimated payment (related to any of the customers claims) due to be sent to the customer (if any).",
        "operationId": "getCustomerNextPayment",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NextPayment"
                }
              }
            },
            "description": "Request successful. The details of the next payment to the customer will be returned"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Get the details of the next estimated payment detail.",
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/notifications/{notificationCaseId}/complete-intake": {
      "post": {
        "description": "This API will be used to complete the intake process associated with Notification Case. It will validate that the notification id provided in the URL is valid for the customer and that the user owns the notification case.<br> The APIs will process the wizard process of every child case as follows:<br>&nbsp;&nbsp;\t-&nbsp;\tThe API will check is there any Wizard process associated with the child case. If the child case has a wizard process, it will process each step of the wizard. Once all the steps of the process complete it create the task for back-office user for the child case.<br>&nbsp;&nbsp;\t-&nbsp;\tIf it fails to process any of the steps in the wizard process, it will stop processing that child case. In this case no task will be created for the back-office user and it will push on the managing process for the child case.<br> If for any reason, the wizard process does not complete for any of the child cases, no further processing will be completed.<br> If all child cases have been successfully processed, then it will check is there any Wizard process associated with the notification case. If the notification case has the wizard process, it will process each step of the wizard. No task will be created for the notification case. The managing process for the notification case will be pushed on.<br> If it fails to process any of the steps in the wizard process, it will stop processing.",
        "operationId": "completeNotificationCaseIntake",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This header parameter will be used by the portal user.",
            "in": "header",
            "name": "role",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Notification case number",
            "in": "path",
            "name": "notificationCaseId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/NotificationCaseSummaryForClaims"
                  },
                  "type": "array"
                }
              }
            },
            "description": "A list of notification case summary along with child claims summaries."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "This API will be used to complete the notification case intake process associated with Claim Case.",
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/occupations": {
      "get": {
        "description": "An Occupation represents a party's employment with one particular employer. This API returns the list of all available occupations for a customer. <br> <br> <b> Error Messages:</b>  <ul> <li>If the employee is self-employed or if the employer linked to that case is not a party on the system, the endpoint will be returning a 500 error response.</li> </ul>",
        "operationId": "getCustomerOccupation",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This header parameter will be used by the portal user.",
            "in": "header",
            "name": "role",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ReadCustomerOccupation"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The occupations of a customer"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Retrieve the occupations of a customer.",
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/occupations/{occupationId}/employer-questions": {
      "get": {
        "description": "Returns the employer questions for the given category of the questions for the employer on the given occupation with the questions effective on today's date. <br> If the employee is self-employed or if the employer linked to the case is not a party on the system, the endpoint will be returning an empty response. <br> <br> <b> Error Messages:</b> <ul> <li>If this endpoint is used to try to retrieve the employer questions from a non-existent occupationID, or from an occupation that does not belong to the user, a 403 error response will be returned</li> </ul>",
        "operationId": "getEmployerQuestions",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Id of the occupation having employer for which the questions will be retrieved.",
            "in": "path",
            "name": "occupationId",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The category of the employer questions retrieved.",
            "in": "query",
            "name": "category",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployerQuestions"
                }
              }
            },
            "description": "Returns an EmployerQuestions object that represents the employer questions for the given category of the questions for the employer on the given occupation with the questions effective on the today's date."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Returns the employer questions for the given category of the questions for the employer on the given occupation with the questions effective on today's date.",
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/occupations/{occupationId}/week-based-work-pattern": {
      "get": {
        "description": "This API returns the week-based work pattern (if any) linked to the Occupation identified by the occupationId provided in the URL, for a Customer at Party level. It is expected that prior to calling this API, the GET /customer/occupations endpoint will have been used to retrieve information on the occupation, including the workPatternBasis attribute which indicates the type of work pattern in use on the Occupation (Unknown, Week Based, Other). When workPatternBasis is Week Based, this API can then be used to retrieve the work pattern. A Week Based work pattern is one that is set up in back office by selecting a Work Pattern Type of Fixed, 2 weeks Rotating, 3 weeks Rotating or 4 weeks Rotating. If this API is used to try to retrieve a work pattern from a non-existent occupation, or from an Occupation that does not have a work pattern defined, or that has a work pattern that is not Week Based, an error response will be returned.",
        "operationId": "getWeekBasedWorkPattern",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of the Occupation for which the work pattern is to be returned",
            "in": "path",
            "name": "occupationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WeekBasedWorkPattern"
                }
              }
            },
            "description": "The week-based Work Pattern linked to an Occupation for a Customer"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Retrieve the week-based work pattern for a customer",
        "tags": [
          "Customer"
        ]
      },
      "post": {
        "description": "This API creates a week-based work pattern relating to the Occupation identified by the occupationId provided in the URL, for a Customer at Party level. <p> It is expected that prior to calling this API, the <i> GET /customer/occupations </i> endpoint will have been used to retrieve information on the occupation, including the workPatternBasis attribute which indicates the type of work pattern in use on the Occupation (Unknown, Week Based, Other).  <br><br> It is also expected that this API will have been called once prior to call <i>POST /customer/absence/startAbsence </i> because an absence case cannot be launched unless the week based work pattern has been established for the selected occupation. <br><br> When workPatternBasis is Unknown, this API can then be used to add a work pattern. A Week Based work pattern is one that is set up in back office by selecting a Work Pattern type of Fixed, 2 weeks Rotating, 3 weeks Rotating or 4 weeks Rotating. </p> <H3>Technical Note</H3> <H4>Error Messages:</H4> <UL> <LI> If this API is used to try to create a work pattern on a non-existent Occupation, or on an Occupation that already has a work pattern defined, an <b> 403 </b> error response will be returned. </LI> </UL>",
        "operationId": "addWeekBasedWorkPattern",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of the Occupation for which the work pattern is to be created",
            "in": "path",
            "name": "occupationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WeekBasedWorkPattern"
              }
            }
          },
          "description": "The work pattern to be created",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WeekBasedWorkPattern"
                }
              }
            },
            "description": "The week-based Work Pattern created for an Occupation for a Customer"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ValidationMessageModel"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Request could not be processed by the application for some application specific reason e.g. validation error"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Add a week-based work pattern for a customer",
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/occupations/{occupationId}/week-based-work-pattern/replace": {
      "post": {
        "description": "This API updates the week-based work pattern relating to the Occupation identified by the occupationId provided in the URL, for a Customer at Party level. It is expected that prior to calling this API, the GET /customer/occupations endpoint will have been used to retrieve information on the occupation, including the workPatternBasis attribute which indicates the type of work pattern in use on the Occupation (Unknown, Week Based, Other). When workPatternBasis is Week Based, this API can then be used to update the work pattern.\nA Week Based work pattern is one that is set up in back office by selecting a Work Pattern type of Fixed, 2 weeks Rotating, 3 weeks Rotating or 4 weeks Rotating. If this API is used to try to update a work pattern on a non-existent Occupation, or on an Occupation that does not have a week-based work pattern defined, an error response will be returned.",
        "operationId": "updateWeekBasedWorkPattern",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id of the Occupation for which the work pattern is to be updated",
            "in": "path",
            "name": "occupationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WeekBasedWorkPattern"
              }
            }
          },
          "description": "The details to be used to update the work pattern",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WeekBasedWorkPattern"
                }
              }
            },
            "description": "The week-based Work Pattern updated for an Occupation for a Customer"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ValidationMessageModel"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Request could not be processed by the application for some application specific reason e.g. validation error"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Update a week-based work pattern for a customer",
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/payment-preferences": {
      "get": {
        "description": "A Payment Preferences is a method how the customer receive the payment. The payment preferences outline the party's preferred method of payment, such as check or electronic funds transfer (EFT).Customer can have more than one payment preferences. One of the payment preferences must be marked as default payment type for customer. If the payment method is cheque then the Name to print on the cheque is not empty and similarly if the payment method is ETF then account details will not be empty.",
        "operationId": "query_6",
        "parameters": [
          {
            "description": "The id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentPreferenceCustomerResources"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "It returns all the available payment preferences of the customer.",
        "tags": [
          "Payment Preference"
        ]
      },
      "post": {
        "description": "A Payment Preferences is a method how the customer receive the payment. The payment preferences outline the party's preferred method of payment, such as check or electronic funds transfer (EFT). Allows to create a new payment preference for the given customer.<ul> <li> <b>Payment Method:</b> User needs to provide the method of payment for the party, such as check or Electronic Funds Transfer (EFT). If EFT is provided, then bank account details such as Bank Code, Bank Account, Account Name, Account Type, and Routing Number fields should be provided. If check payment method is provided, then Name to Print on Check field is required. Any one of the (Account Detail or Check) details should be provided.</li><li> <b>Address overriding:</b> If the user provide <b>overridePostalAddress=true</b> then address detail must be provided along with the other detail. if <b>overridePostalAddress=false</b>, then party's current active correspondence address will be set.</li></ul><p>The secure action required to add is - <b>PY_EDIT_PAYMENT_PREFERENCE</b>. If not assigned then it will return HTTP 403 response.",
        "operationId": "create_4",
        "parameters": [
          {
            "description": "The id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePaymentPreferenceCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentPreferenceResource"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Allows to create a new payment preference for the given customer.",
        "tags": [
          "Payment Preference"
        ]
      }
    },
    "/customer/payment-preferences/{paymentPreferenceId}": {
      "get": {
        "description": "A Payment Preferences is a method how the customer receive the payment. The payment preferences outline the party's preferred method of payment, such as check or electronic funds transfer (EFT).<P>Customer can view the detail of a specific payment preference.</P>",
        "operationId": "getSingle_9",
        "parameters": [
          {
            "description": "The id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Payment preference id",
            "in": "path",
            "name": "paymentPreferenceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentPreferenceResource"
                }
              }
            },
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Customer can view the detail of a specific payment preference.",
        "tags": [
          "Payment Preference"
        ]
      }
    },
    "/customer/payment-preferences/{paymentPreferenceId}/edit": {
      "post": {
        "description": "A Payment Preferences is a method how the customer receive the payment. The payment preferences outline the party's preferred method of payment, such as check or electronic funds transfer (EFT).Allows to update the specific payment preferences of the customer.",
        "operationId": "edit",
        "parameters": [
          {
            "description": "The id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Payment preference id",
            "in": "path",
            "name": "paymentPreferenceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The client sends the previously returned ETag value in the If-Match header to indicate the version of the Resource it wishes to update<P>If this is not the most up to date version, the server will return a 412 error.",
            "in": "header",
            "name": "If-Match",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditPaymentPreferenceCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentPreferenceResource"
                }
              }
            },
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Precondition Failed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Allows to update the specific payment preferences of the customer.",
        "tags": [
          "Payment Preference"
        ]
      }
    },
    "/customer/paymentPreference/{paymentPreferenceId}/updatePaymentPreference": {
      "post": {
        "deprecated": true,
        "description": "<p>Note: this endpoint is deprecated, please use <ul><li>/customer​/payment-preferences​/{paymentPreferenceId}​/edit</li></ul> instead</p>Updates a payment preference detail for a party.",
        "operationId": "updatePaymentPreference",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This header parameter will be used by the portal user.",
            "in": "header",
            "name": "role",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The payment preference id",
            "in": "path",
            "name": "paymentPreferenceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPaymentPreference"
              }
            }
          },
          "description": "Payment preference details to be updated.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentPreferenceResponse"
                }
              }
            },
            "description": "Returns the payment preference details updated related for a party."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ValidationMessageModel"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Request could not be processed by the application for some application specific reason e.g. validation error"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Updates a payment preference details for a party.",
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/paymentPreferences": {
      "get": {
        "deprecated": true,
        "description": "<p> Note: this endpoint is deprecated, please use <ul><li>/customer/payment-preferences/{paymentPreferenceId}</li><li>​/customer​/payment-preferences</li></ul> instead</p>Returns the list of payment preference objects.",
        "operationId": "getPaymentPreferences",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This header parameter will be used by the portal user.",
            "in": "header",
            "name": "role",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PaymentPreferenceResponse"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Request successful. The details of the payment preferences to the customer will be returned"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Lists of  payment preferences for the Customer",
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/readCustomerContactDetails": {
      "get": {
        "description": "Returns the Customer's contact details for the user. This includes email address and phone numbers.",
        "operationId": "readCustomerContactDetails",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactDetails"
                }
              }
            },
            "description": "The Customer Contact Details"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/readCustomerDetails": {
      "get": {
        "description": "Returns customer Details for the user. This includes Personal Details.",
        "operationId": "readCustomerDetails",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            },
            "description": "The Customer's personal Details."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/readRepresentedCustomers": {
      "get": {
        "description": "Returns all the represented customers for the user",
        "operationId": "readRepresentedCustomers",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/CustomerSummaryDetails"
                  },
                  "type": "array"
                }
              }
            },
            "description": "All the represented customers for the user"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Reads all represented customers",
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/registerCustomer": {
      "post": {
        "description": "Creates a new customer user in FINEOS. Once the customer is registered they cannot re-register with the same user id.",
        "operationId": "registerCustomer",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The user id to register",
            "in": "header",
            "name": "ExternalUserId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Customer"
              }
            }
          },
          "description": "Customer to add",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Customer user created successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/tax-code-records": {
      "get": {
        "description": "A tax code record represents a tax information entry for an individual customer. The tax information contains a tax type and a tax code. There can be more than one tax records for each customer.<ul><li>Allows to get a single tax code record (tax type details) by its Id.</li><li>The group client must have access to this cusotmer party.</li></ul>",
        "operationId": "query_7",
        "parameters": [
          {
            "description": "The id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "id of the represented user",
            "in": "header",
            "name": "representedcustomerid",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxCodeRecordResourcesList"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Returns all tax code records",
        "tags": [
          "Tax Code Record"
        ]
      },
      "post": {
        "description": "A tax code record represents a tax information entry for an individual customer. The tax information contains a tax type and a tax code. There can be more than one tax records for each customer.<li>Allows to create a new tax code record for the logged on customer.<li>CreateTaxCodeRecordCommand contains basic tax record data.</li><li>It can be extended using regionTaxCodeDetails attribute - it can contain CreateAUTaxCodeDetailsCommand or CreateNZTaxCodeDetailsCommand.</li><li>If regionTaxCodeDetails attribute is in use, a region specific (AU or NZ) tax record will be created.</li></ul>",
        "operationId": "create_5",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "id of the represented user",
            "in": "header",
            "name": "representedcustomerid",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTaxCodeRecordCommand"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxCodeRecord"
                }
              }
            },
            "description": "Created",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Creates a Tax Code Record for the Customer",
        "tags": [
          "Tax Code Record"
        ]
      }
    },
    "/customer/tax-code-records/{taxCodeRecordId}": {
      "get": {
        "description": "A tax code record represents a tax information entry for an individual customer. The tax information contains a tax type and a tax code. There can be more than one tax records for each customer.<ul><li>Allows to get a single tax code record (tax type details) by its Id.</li><li>The tax code record belong to the given customer party (selected by the customer Id) and the group client must have access to this customer party.</li></ul>",
        "operationId": "getSingle_10",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Tax Code Record ID (unique in the system)",
            "in": "path",
            "name": "taxCodeRecordId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxCodeRecord"
                }
              }
            },
            "description": "OK",
            "headers": {
              "ETag": {
                "description": "ETag represents the version of the Resource returned. The client sends the returned ETag in subsequent requests that update this Resource in the <code>If-Match</code> header.",
                "style": "simple"
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Returns specific Tax Code Record",
        "tags": [
          "Tax Code Record"
        ]
      }
    },
    "/customer/tax-code-records/{taxCodeRecordId}/edit": {
      "post": {
        "description": "A tax code record represents a tax information entry for an individual customer. The tax information contains a tax type and a tax code. There can be more than one tax records for each customer.<ul><li>Allows to update a new tax code record for the logged on customer. Customer must have access. Represented customer </li><li>CreateTaxCodeRecordCommand contains basic tax record data.</li><li>It can be extended using regionTaxCodeDetails attribute - it can contain CreateAUTaxCodeDetailsCommand or CreateNZTaxCodeDetailsCommand.</li><li>If regionTaxCodeDetails attribute is in use, a region specific (AU or NZ) tax record will be created.</li></ul>",
        "operationId": "edit_1",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "id of the represented user",
            "in": "header",
            "name": "representedcustomerid",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Tax Code Record ID (unique in the system)",
            "in": "path",
            "name": "taxCodeRecordId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The client sends the previously returned ETag value in the If-Match header to indicate the version of the Resource it wishes to update<P>If this is not the most up to date version, the server will return a 412 error.",
            "in": "header",
            "name": "If-Match",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditTaxCodeRecordCommand"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxCodeRecord"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "412": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Precondition Failed"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Updates a Tax Code Record for the Customer",
        "tags": [
          "Tax Code Record"
        ]
      }
    },
    "/customer/tax-code-records/{taxCodeRecordId}/remove": {
      "post": {
        "description": "A tax code record represents a tax information entry for an individual customer. The tax information contains a tax type and a tax code. There can be more than one tax records for each customer.<ul><li>Allows to remove a tax code record selected by its Id.</li><li>The tax code record must be related to the logged on customer or to the represented customer party if representedCustomerId is provided.</li></ul>",
        "operationId": "remove",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "id of the represented user",
            "in": "header",
            "name": "representedcustomerid",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Tax Code Record ID (unique in the system)",
            "in": "path",
            "name": "taxCodeRecordId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Removes a tax code record selected by its Id",
        "tags": [
          "Tax Code Record"
        ]
      }
    },
    "/customer/taxCodeRecords": {
      "get": {
        "description": "Returns the tax code records for the customer or the represented customer.",
        "operationId": "getTaxCodeRecords",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This header parameter will be used by the portal user.",
            "in": "header",
            "name": "role",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/TaxTypeDetailsResponse"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Tax code records for the customer."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Returns the tax code records for the customer.",
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/updateCustomerContactDetails": {
      "post": {
        "description": "Updates the Customer's contact details including email address and phone numbers, returns updated contact details as response.",
        "operationId": "updateCustomerContactDetails",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactDetails"
              }
            }
          },
          "description": "The CustomerContactDetails document.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactDetails"
                }
              }
            },
            "description": "Customer contact details have been updated successfully, returns updated contact details as response."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Updates customer contact details",
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/updateCustomerDetails": {
      "post": {
        "description": "Updates the Customer's Personal Details.",
        "operationId": "updateCustomerDetails",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerDetails"
              }
            }
          },
          "description": "The Customer document which contains the updated details.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "The Customer's details have been updated successfully."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/webMessages": {
      "get": {
        "description": "Gets the list of web messages sent by the customer to the insurer and sent by the insurer to the customer.",
        "operationId": "getWebMessages",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Flag indicating whether to return unRead messages only. If this flag is false, all messages will be returned by default.",
            "in": "query",
            "name": "unReadMessages",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "The Id of the case for which we want to retrieve the web messages",
            "in": "query",
            "name": "caseId",
            "schema": {
              "default": "",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebMessageSummary"
                }
              }
            },
            "description": "Request successful. The list of web messages related to the customer will be returned"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/{taxCodeId}/removeTaxCodeRecord": {
      "post": {
        "description": "Removes the tax code record for the customer or the represented customer.",
        "operationId": "removeTaxCodeRecord",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This header parameter will be used by the portal user.",
            "in": "header",
            "name": "role",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Tax code id",
            "in": "path",
            "name": "taxCodeId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tax code record removed for the customer."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Removes a tax code record for the customer.",
        "tags": [
          "Customer"
        ]
      }
    },
    "/customer/{taxCodeId}/updateTaxCodeRecord": {
      "post": {
        "description": "Update tax code details of a party.",
        "operationId": "updateTaxCodeRecord",
        "parameters": [
          {
            "description": "Id of the user accessing the resource",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "This header parameter will be used by the portal user.",
            "in": "header",
            "name": "role",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "customer number of the represented customer user accessing the resource",
            "in": "header",
            "name": "representedCustomerId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Tax code id.",
            "in": "path",
            "name": "taxCodeId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxTypeDetails"
              }
            }
          },
          "description": "Tax code details to be updated.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxTypeDetailsResponse"
                }
              }
            },
            "description": "Returns the tax code details of a party."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ValidationMessageModel"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Request could not be processed by the application for some application specific reason e.g. validation error"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Update tax code details of a party.",
        "tags": [
          "Customer"
        ]
      }
    },
    "/enum-domains": {
      "get": {
        "description": "An Enum Domain is a collection of Enum Instance.  For example, an Enum Domain could be <I>Title</I> and the instances be: <I>Mr., Mrs., Dr.</I><P>This API provides the ability to search and sort for various Enum Domains. All parameters are case senstive and no wildcards are accepted.<br><br> The name query parameters can be specified more than once. For example: `/enum-domains?name=Title&name=StudySkills` will return the Enum Domain with name 'Title' and the Enum Domain with name 'StudySkills'<br><br>If the query endpoint has no matches, an empty list is returned<br><br>If the request specifies query parameters different from the parameters allowed, the service will return a <b>400 error</b> code</P>",
        "operationId": "query_8",
        "parameters": [
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the enum domain. More than one can be specified",
            "in": "query",
            "name": "name",
            "required": true,
            "schema": {
              "items": {
                "type": "string"
              },
              "maxItems": 2147483647,
              "minItems": 1,
              "type": "array"
            }
          },
          {
            "description": "Comma separated list of sort parameters. Ascending by default, for descending preappend with <B>-</B>",
            "examples": {
              "Sort by name ascending": {
                "description": "Sort by name ascending",
                "summary": "Sorts by name ascending",
                "value": "name"
              },
              "Sort by name decending": {
                "description": "Sort by name decending",
                "summary": "Sorts by name decending",
                "value": "-name"
              }
            },
            "in": "query",
            "name": "sort",
            "schema": {
              "$ref": "#/components/schemas/QuerySortInfo"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnumDomains"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Get Enum Domains. Sort available and query available.",
        "tags": [
          "Enum Domain"
        ]
      }
    },
    "/enum-domains/{enumDomainId}": {
      "get": {
        "description": "An Enum Domain is grouping of Enum instances. For example <I>Title</I> which groups Mr., Mrs, Dr.<P>Gets specific Enum Domain as specified by the <CODE>enumDomainId</CODE></P>",
        "operationId": "getSingle_12",
        "parameters": [
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "enumDomainId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnumDomain"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Get specific Enum Domain",
        "tags": [
          "Enum Domain"
        ]
      }
    },
    "/enum-domains/{enumDomainId}/enum-instances": {
      "get": {
        "operationId": "query_9",
        "parameters": [
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "enumDomainId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Comma separated list of sort parameters. Ascending by default, for descending preappend with <B>-</B>",
            "examples": {
              "Sort by dOrder ascending, then dOrder ascending": {
                "description": "Sort by dOrder ascending, then dOrder ascending",
                "summary": "Sorts by dOrder ascending, then dOrder ascending",
                "value": "dOrder,name"
              },
              "Sort by dOrder descending, then name ascending": {
                "description": "Sort by dOrder descending, then name ascending",
                "summary": "Sorts by dOrder descending, then name ascending",
                "value": "-dOrder,name"
              },
              "Sort by name ascending": {
                "description": "Sort by name ascending",
                "summary": "Sorts by name ascending",
                "value": "name"
              },
              "Sort by name decending": {
                "description": "Sort by name decending",
                "summary": "Sorts by name decending",
                "value": "-name"
              }
            },
            "in": "query",
            "name": "sort",
            "schema": {
              "$ref": "#/components/schemas/QuerySortInfo"
            }
          },
          {
            "description": "Enum instance name",
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Enum instance fullId, corresponds to <code>TaEnum.fullId</code>",
            "in": "query",
            "name": "fullId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "If <code>true</code> retired Instances only are returned,if <code>false</code>(or not specified) non-retired instances only are returned",
            "in": "query",
            "name": "retired",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Date at which the Enum was activated",
            "in": "query",
            "name": "startDate",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Date at which the Enum will become inactive (since that date, enum should be considered inactive)",
            "in": "query",
            "name": "endDate",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Denotes the order the Enum resides within all Enum Instances within Domain",
            "in": "query",
            "name": "dOrder",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "The name of the subset to which the Enum Instance belongs",
            "in": "query",
            "name": "subsets.name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnumInstances"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Get Enum Instance that belong to a particular Enum Domain. Sort and equality search available",
        "tags": [
          "Enum Instance"
        ]
      }
    },
    "/enum-domains/{enumDomainId}/enum-instances/{enumInstanceId}": {
      "get": {
        "description": "An Enum Instance represents a specific value in an Enum Domain e.g. Mr. Mrs.\n<P>Gets a specific Enum Instance as specified by <code>enumInstanceId</code> in a specific Enum Domain as specified by <code>enumDomainId</code></P>",
        "operationId": "getSingle_13",
        "parameters": [
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "enumDomainId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "enumInstanceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnumInstance"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Get specified Enum Instance in a specified Enum Domain",
        "tags": [
          "Enum Instance"
        ]
      }
    },
    "/enum-instances/{enumInstanceId}": {
      "get": {
        "description": "An Enum Instance is an specific Enum value within an Enum Domain.  For example, an Enum Domain could be <I>Title</I> and the instances be: <I>Mr., Mrs., Dr.</I><P>Gets a specific Enum Instance as specified by <code>enumInstanceId</code>",
        "operationId": "getSingleEnumInstance",
        "parameters": [
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "enumInstanceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnumInstance"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Not Found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Gets Enum Instance as specified by enumInstanceId",
        "tags": [
          "Enum Instance"
        ]
      }
    },
    "/healthcheck": {
      "get": {
        "operationId": "getSingle_11",
        "parameters": [
          {
            "description": "user identification",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "401": {
            "description": "userid header not present or invalid"
          },
          "500": {
            "description": "internal server error"
          }
        },
        "summary": "check frameworks services status",
        "tags": [
          "Health Check"
        ]
      }
    },
    "/supervisor/absence/absences": {
      "get": {
        "description": "Lists the Absences managed by the supervisor",
        "operationId": "getSupervisedAbsences",
        "parameters": [
          {
            "description": "Id of the user accessing the resource.",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Enter search start date in yyyy-mm-dd format only.",
            "in": "query",
            "name": "searchStartDate",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Enter search end date in yyyy-mm-dd format only.",
            "in": "query",
            "name": "searchEndDate",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "employeeId",
            "in": "query",
            "name": "employeeId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "statuses",
            "in": "query",
            "name": "statuses",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "pageNbr",
            "in": "query",
            "name": "pageNbr",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "pageSize",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedSupervisedAbsences"
                }
              }
            },
            "description": "A list of absences with pagination information."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Absences managed by the supervisor",
        "tags": [
          "Supervisor"
        ]
      }
    },
    "/supervisor/absence/absences/{absenceId}": {
      "get": {
        "description": "This API will return the details of the Absence case that has the absenceId provided in the URL.It will first validate that the absence case id provided is valid for the supervisor. If it is valid then the API returns the following data in the response:<br>&nbsp;&nbsp;\t-&nbsp; Absence case basic details such as date created, status, etc.<br>&nbsp;&nbsp;\t-&nbsp; List of requested absence periods from the absence case leave details. This list includes<br>&nbsp;&nbsp;\t &nbsp; &nbsp;  requested time off periods, reduced schedule periods and the first episodic leave period<br>&nbsp;&nbsp;\t-&nbsp; List of absence days for this absence case.<br>&nbsp;&nbsp;\t-&nbsp; List of reported time off and reduced schedule periods from the absence case leave details<br>&nbsp;&nbsp;\t-&nbsp; List of selected leave plans for this absence case.<br>&nbsp;&nbsp;\t-&nbsp; List of Financial Case IDs from the Absence Case.",
        "operationId": "getSupervisedAbsenceDetail",
        "parameters": [
          {
            "description": "Id of the user accessing the resource.",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Absence Case ID",
            "in": "path",
            "name": "absenceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SupervisedAbsenceDetails"
                }
              }
            },
            "description": "Absence details managed by the supervisor."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Absence details managed by the supervisor",
        "tags": [
          "Supervisor"
        ]
      }
    },
    "/supervisor/absence/absences/{absenceId}/addEForm/{eformType}": {
      "post": {
        "description": "Adds new EForm document",
        "operationId": "addExtraData",
        "parameters": [
          {
            "description": "Id of the user accessing the resource.",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "absence case Number",
            "in": "path",
            "name": "absenceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the Simple Eform Type or Eform Type to create",
            "in": "path",
            "name": "eformType",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/EFormAttribute"
                },
                "type": "array"
              }
            }
          },
          "description": "List of eFormAttributes of the EForm document which will be created",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EForm"
                }
              }
            },
            "description": "EForm document added successfully"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Supervisor"
        ]
      }
    },
    "/supervisor/absence/employees": {
      "get": {
        "description": "Lists the employees managed by the supervisor",
        "operationId": "getSubordinateForSupervisor",
        "parameters": [
          {
            "description": "Id of the user accessing the resource.",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "pageNbr",
            "in": "query",
            "name": "pageNbr",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "pageSize",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedEmployeeSearchResults"
                }
              }
            },
            "description": "A list of employees with pagination information."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Employees managed by the supervisor",
        "tags": [
          "Supervisor"
        ]
      }
    },
    "/supervisor/absence/notifications": {
      "get": {
        "description": "Lists the absences notifications for the supervisor. If absence management is taken over from another system or carrier, the Notification can also contain information on those absences.  If a notification only contains withdrawn absence cases or void takeover cases, it is not returned.",
        "operationId": "getSupervisedNotifications",
        "parameters": [
          {
            "description": "Id of the user accessing the resource.",
            "in": "header",
            "name": "userid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Enter search start date in yyyy-mm-dd format only.",
            "in": "query",
            "name": "searchStartDate",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Enter search end date in yyyy-mm-dd format only.",
            "in": "query",
            "name": "searchEndDate",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "employeeId",
            "in": "query",
            "name": "employeeId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "statuses",
            "in": "query",
            "name": "statuses",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "pageNbr",
            "in": "query",
            "name": "pageNbr",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "pageSize",
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          },
          {
            "description": "String which contains comma delimited column names. Results can be sorted based on those columns.",
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationCaseSummaryForAbsenceTypes"
                }
              }
            },
            "description": "A list of notifications with pagination information."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Invalid"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Forbidden"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiBaseErrorResponse"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "summary": "Absence notifications for the supervisor",
        "tags": [
          "Supervisor"
        ]
      }
    }
  },
  "tags": [
    {
      "name": "Absence"
    },
    {
      "name": "Supervisor"
    },
    {
      "name": "Customer"
    },
    {
      "name": "Enum Domain"
    },
    {
      "name": "Enum Instance"
    },
    {
      "name": "Health Check"
    },
    {
      "name": "Episodic Actual Absence Periods"
    },
    {
      "name": "Leave Periods Change Request"
    }
  ]
}