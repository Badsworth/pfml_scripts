"""Add flag and flag log tables

Revision ID: 088ef24f8621
Revises: b09e9c9cfd01
Create Date: 2021-07-28 18:05:35.290435

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "088ef24f8621"
down_revision = "b09e9c9cfd01"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "flag",
        sa.Column("flag_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.Text(), nullable=False),
        sa.Column("options", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("start", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("end", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("enabled", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("flag_id"),
        sa.UniqueConstraint("flag_id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "flag_log",
        sa.Column("flag_log_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("flag_id", sa.Integer(), nullable=True),
        sa.Column("action", sa.Text(), nullable=True),
        sa.Column("name", sa.Text(), nullable=False),
        sa.Column("options", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("start", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("end", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("enabled", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(["flag_id"], ["flag.flag_id"],),
        sa.PrimaryKeyConstraint("flag_log_id"),
    )
    op.create_index(op.f("ix_flag_log_action"), "flag_log", ["action"], unique=False)
    # ### end Alembic commands ###
    op.execute(
        """
        CREATE OR REPLACE FUNCTION audit_flag_func() RETURNS TRIGGER AS $$\
            DECLARE affected_record record;\
            BEGIN\
                FOR affected_record IN SELECT * FROM new_table\
                    LOOP\
                        INSERT INTO flag_log(flag_id, name, action, options, updated_at, start,\
                            "end", enabled) VALUES (affected_record.flag_id,\
                            affected_record.name, TG_OP, affected_record.options,\
                            current_timestamp, affected_record.start,\
                            affected_record."end", affected_record.enabled);\
                    END loop;\
                RETURN NEW;\
            END;\
        $$ LANGUAGE plpgsql;
        """
    )
    op.execute(
        "CREATE TRIGGER after_flag_insert AFTER INSERT ON flag\
            REFERENCING NEW TABLE AS new_table\
            FOR EACH STATEMENT EXECUTE PROCEDURE audit_flag_func();"
    )
    op.execute(
        "CREATE TRIGGER after_flag_update AFTER UPDATE ON flag\
            REFERENCING OLD TABLE AS old_table NEW TABLE AS new_table\
            FOR EACH STATEMENT EXECUTE PROCEDURE audit_flag_func();"
    )
    op.execute(
        "CREATE TRIGGER after_flag_delete AFTER DELETE ON flag\
            REFERENCING OLD TABLE AS old_table\
            FOR EACH STATEMENT EXECUTE PROCEDURE audit_flag_func();"
    )


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_flag_log_action"), table_name="flag_log")
    op.drop_table("flag_log")
    op.drop_table("flag")
    op.execute("DROP TRIGGER IF EXISTS after_flag_insert on flag;")
    op.execute("DROP TRIGGER IF EXISTS after_flag_update on flag;")
    op.execute("DROP TRIGGER IF EXISTS after_flag_delete on flag;")
    op.execute("DROP FUNCTION IF EXISTS audit_flag_func CASCADE;")
    # ### end Alembic commands ###
