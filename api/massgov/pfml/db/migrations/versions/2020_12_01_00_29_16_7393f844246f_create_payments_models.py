"""Create payments models

Revision ID: 7393f844246f
Revises: 1e28741cdbd3
Create Date: 2020-12-01 00:29:16.649049

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "7393f844246f"
down_revision = "1e28741cdbd3"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "lk_flow",
        sa.Column("flow_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("flow_description", sa.Text(), nullable=True),
        sa.PrimaryKeyConstraint("flow_id"),
    )
    op.create_table(
        "lk_reference_file_type",
        sa.Column("reference_file_type_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("reference_file_type_description", sa.Text(), nullable=True),
        sa.PrimaryKeyConstraint("reference_file_type_id"),
    )
    op.create_table(
        "lk_state",
        sa.Column("state_id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("state_description", sa.Text(), nullable=True),
        sa.PrimaryKeyConstraint("state_id"),
    )
    op.create_table(
        "reference_file",
        sa.Column("reference_file_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("file_location", sa.Text(), nullable=False),
        sa.Column("reference_file_type_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["reference_file_type_id"], ["lk_reference_file_type.reference_file_type_id"],
        ),
        sa.PrimaryKeyConstraint("reference_file_id"),
    )
    op.create_table(
        "eft",
        sa.Column("eft_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("routing_nbr", sa.Integer(), nullable=False),
        sa.Column("account_nbr", sa.Integer(), nullable=False),
        sa.Column("bank_account_type_id", sa.Integer(), nullable=False),
        sa.Column("employee_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["bank_account_type_id"], ["lk_bank_account_type.bank_account_type_id"],
        ),
        sa.ForeignKeyConstraint(["employee_id"], ["employee.employee_id"],),
        sa.PrimaryKeyConstraint("eft_id"),
    )
    op.create_index(op.f("ix_eft_employee_id"), "eft", ["employee_id"], unique=False)
    op.create_table(
        "link_employee_reference_file",
        sa.Column("employee_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("reference_file_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("ctr_document_id", sa.Text(), nullable=True),
        sa.Column("ctr_batch_id", sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(["employee_id"], ["employee.employee_id"],),
        sa.ForeignKeyConstraint(["reference_file_id"], ["reference_file.reference_file_id"],),
        sa.PrimaryKeyConstraint("employee_id", "reference_file_id"),
    )
    op.create_index(
        op.f("ix_link_employee_reference_file_ctr_document_id"),
        "link_employee_reference_file",
        ["ctr_document_id"],
        unique=False,
    )
    op.create_table(
        "payment",
        sa.Column("payment_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("claim_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("payment_method_id", sa.Integer(), nullable=False),
        sa.Column("period_start_date", sa.Date(), nullable=True),
        sa.Column("period_end_date", sa.Date(), nullable=True),
        sa.Column("payment_date", sa.Date(), nullable=True),
        sa.Column("amount", sa.Numeric(), nullable=False),
        sa.Column("fineos_pei_c_value", sa.Text(), nullable=True),
        sa.Column("fineos_pei_i_value", sa.Text(), nullable=True),
        sa.Column("disb_check_eft_number", sa.Text(), nullable=True),
        sa.Column("disb_check_eft_issue_date", sa.Date(), nullable=True),
        sa.Column("disb_method_id", sa.Integer(), nullable=True),
        sa.Column("disb_amount", sa.Numeric(), nullable=True),
        sa.ForeignKeyConstraint(["claim_id"], ["claim.claim_id"],),
        sa.ForeignKeyConstraint(["disb_method_id"], ["lk_payment_method.payment_method_id"],),
        sa.ForeignKeyConstraint(["payment_method_id"], ["lk_payment_method.payment_method_id"],),
        sa.PrimaryKeyConstraint("payment_id"),
    )
    op.create_index(op.f("ix_payment_claim_id"), "payment", ["claim_id"], unique=False)
    op.create_table(
        "link_payment_reference_file",
        sa.Column("payment_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("reference_file_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("ctr_document_id", sa.Text(), nullable=True),
        sa.Column("ctr_batch_id", sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(["payment_id"], ["payment.payment_id"],),
        sa.ForeignKeyConstraint(["reference_file_id"], ["reference_file.reference_file_id"],),
        sa.PrimaryKeyConstraint("payment_id", "reference_file_id"),
    )
    op.create_index(
        op.f("ix_link_payment_reference_file_ctr_document_id"),
        "link_payment_reference_file",
        ["ctr_document_id"],
        unique=False,
    )
    op.create_table(
        "state_log",
        sa.Column("state_log_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("flow_id", sa.Integer(), nullable=True),
        sa.Column("state_id", sa.Integer(), nullable=False),
        sa.Column("started_at", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("ended_at", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("outcome", sa.Text(), nullable=True),
        sa.Column("success", sa.Boolean(), nullable=True),
        sa.Column("payment_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("reference_file_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("employee_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.ForeignKeyConstraint(["employee_id"], ["employee.employee_id"],),
        sa.ForeignKeyConstraint(["flow_id"], ["lk_flow.flow_id"],),
        sa.ForeignKeyConstraint(["payment_id"], ["payment.payment_id"],),
        sa.ForeignKeyConstraint(["reference_file_id"], ["reference_file.reference_file_id"],),
        sa.ForeignKeyConstraint(["state_id"], ["lk_state.state_id"],),
        sa.PrimaryKeyConstraint("state_log_id"),
    )
    op.create_index(op.f("ix_state_log_employee_id"), "state_log", ["employee_id"], unique=False)
    op.create_index(op.f("ix_state_log_ended_at"), "state_log", ["ended_at"], unique=False)
    op.create_index(op.f("ix_state_log_payment_id"), "state_log", ["payment_id"], unique=False)
    op.create_index(
        op.f("ix_state_log_reference_file_id"), "state_log", ["reference_file_id"], unique=False
    )
    op.create_index(op.f("ix_state_log_success"), "state_log", ["success"], unique=False)
    op.add_column("claim", sa.Column("employee_id", postgresql.UUID(as_uuid=True), nullable=True))
    op.add_column("claim", sa.Column("fineos_claim_number", sa.Text(), nullable=True))
    op.drop_column("claim", "claim_type_id")
    op.add_column("claim", sa.Column("claim_type_id", sa.Integer(), nullable=True))
    op.create_foreign_key(
        "claim_claim_type_id_fkey", "claim", "lk_claim_type", ["claim_type_id"], ["claim_type_id"]
    )
    op.create_index(op.f("ix_claim_employee_id"), "claim", ["employee_id"], unique=False)
    op.create_foreign_key(
        "claim_employee_id_fkey", "claim", "employee", ["employee_id"], ["employee_id"]
    )
    op.add_column("employee", sa.Column("ctr_vendor_customer_code", sa.Text(), nullable=True))
    op.add_column(
        "employee", sa.Column("mailing_address_id", postgresql.UUID(as_uuid=True), nullable=True)
    )
    op.create_index(
        op.f("ix_employee_mailing_address_id"), "employee", ["mailing_address_id"], unique=False
    )
    op.drop_constraint("employee_payment_info_id_fkey", "employee", type_="foreignkey")
    op.create_foreign_key(
        "employee_mailing_address_id_fkey",
        "employee",
        "address",
        ["mailing_address_id"],
        ["address_id"],
    )
    op.drop_column("employee", "payment_info_id")
    op.drop_table("payment_information")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "payment_information",
        sa.Column("payment_info_id", postgresql.UUID(), autoincrement=False, nullable=False),
        sa.Column("bank_routing_nbr", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("bank_account_nbr", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("gift_card_nbr", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("payment_method_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["payment_method_id"],
            ["lk_payment_method.payment_method_id"],
            name="payment_information_payment_method_id_fkey",
        ),
        sa.PrimaryKeyConstraint("payment_info_id", name="payment_information_pkey"),
    )
    op.add_column(
        "employee",
        sa.Column("payment_info_id", postgresql.UUID(), autoincrement=False, nullable=True),
    )
    op.drop_constraint("employee_mailing_address_id_fkey", "employee", type_="foreignkey")
    op.create_foreign_key(
        "employee_payment_info_id_fkey",
        "employee",
        "payment_information",
        ["payment_info_id"],
        ["payment_info_id"],
    )
    op.drop_index(op.f("ix_employee_mailing_address_id"), table_name="employee")
    op.drop_column("employee", "mailing_address_id")
    op.drop_column("employee", "ctr_vendor_customer_code")
    op.drop_constraint("claim_employee_id_fkey", "claim", type_="foreignkey")
    op.drop_index(op.f("ix_claim_employee_id"), table_name="claim")
    op.drop_column("claim", "fineos_claim_number")
    op.drop_column("claim", "employee_id")
    op.drop_column("claim", "claim_type_id")
    op.add_column(
        "claim", sa.Column("claim_type_id", postgresql.UUID(), nullable=True),
    )
    op.drop_index(op.f("ix_state_log_success"), table_name="state_log")
    op.drop_index(op.f("ix_state_log_reference_file_id"), table_name="state_log")
    op.drop_index(op.f("ix_state_log_payment_id"), table_name="state_log")
    op.drop_index(op.f("ix_state_log_ended_at"), table_name="state_log")
    op.drop_index(op.f("ix_state_log_employee_id"), table_name="state_log")
    op.drop_table("state_log")
    op.drop_index(
        op.f("ix_link_payment_reference_file_ctr_document_id"),
        table_name="link_payment_reference_file",
    )
    op.drop_table("link_payment_reference_file")
    op.drop_index(op.f("ix_payment_claim_id"), table_name="payment")
    op.drop_table("payment")
    op.drop_index(
        op.f("ix_link_employee_reference_file_ctr_document_id"),
        table_name="link_employee_reference_file",
    )
    op.drop_table("link_employee_reference_file")
    op.drop_index(op.f("ix_eft_employee_id"), table_name="eft")
    op.drop_table("eft")
    op.drop_table("reference_file")
    op.drop_table("lk_state")
    op.drop_table("lk_reference_file_type")
    op.drop_table("lk_flow")
    # ### end Alembic commands ###
