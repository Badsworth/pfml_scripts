"""Add exemption data to employer logs

Revision ID: d2db9ce77b21
Revises: 8b8795dc55a7
Create Date: 2021-09-16 16:00:57.707744

"""
import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "d2db9ce77b21"
down_revision = "8b8795dc55a7"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column("employer_log", sa.Column("exemption_cease_date", sa.Date(), nullable=True))
    op.add_column("employer_log", sa.Column("exemption_commence_date", sa.Date(), nullable=True))
    op.add_column("employer_log", sa.Column("family_exemption", sa.Boolean(), nullable=True))
    op.add_column("employer_log", sa.Column("medical_exemption", sa.Boolean(), nullable=True))
    # ### end Alembic commands ###
    op.execute(
        "CREATE OR REPLACE FUNCTION audit_employer_func() RETURNS TRIGGER AS $$\
            DECLARE affected_record record;\
            BEGIN\
                IF (TG_OP = 'DELETE') THEN\
                    FOR affected_record IN SELECT * FROM old_table\
                        LOOP\
                            INSERT INTO employer_log(employer_log_id, employer_id, action, modified_at)\
                                VALUES (gen_random_uuid(), affected_record.employer_id,\
                                    TG_OP, current_timestamp);\
                        END loop;\
                ELSEIF (TG_OP = 'UPDATE') THEN\
                    FOR affected_record IN SELECT * FROM old_table\
                        LOOP\
                            INSERT INTO employer_log(employer_log_id, employer_id,\
                                action, modified_at, exemption_cease_date,\
                                exemption_commence_date, family_exemption, medical_exemption)\
                                VALUES (gen_random_uuid(), affected_record.employer_id,\
                                    TG_OP, current_timestamp,\
                                    affected_record.exemption_cease_date,\
                                    affected_record.exemption_commence_date,\
                                    affected_record.family_exemption,\
                                    affected_record.medical_exemption);\
                        END loop;\
                ELSE\
                    FOR affected_record IN SELECT * FROM new_table\
                        LOOP\
                            INSERT INTO employer_log(employer_log_id, employer_id,\
                                action, modified_at)\
                                VALUES (gen_random_uuid(), affected_record.employer_id,\
                                    TG_OP, current_timestamp);\
                        END loop;\
                END IF;\
                RETURN NEW;\
            END;\
        $$ LANGUAGE plpgsql;"
    )


def downgrade():
    op.execute(
        "CREATE OR REPLACE FUNCTION audit_employer_func() RETURNS TRIGGER AS $$\
            DECLARE affected_record record;\
            BEGIN\
                IF (TG_OP = 'DELETE') THEN\
                    FOR affected_record IN SELECT * FROM old_table\
                        LOOP\
                            INSERT INTO employer_log(employer_log_id, employer_id, action, modified_at)\
                                VALUES (gen_random_uuid(), affected_record.employer_id,\
                                    TG_OP, current_timestamp);\
                        END loop;\
                ELSE\
                    FOR affected_record IN SELECT * FROM new_table\
                        LOOP\
                            INSERT INTO employer_log(employer_log_id, employer_id, action, modified_at)\
                                VALUES (gen_random_uuid(), affected_record.employer_id,\
                                    TG_OP, current_timestamp);\
                        END loop;\
                END IF;\
                RETURN NEW;\
            END;\
        $$ LANGUAGE plpgsql;"
    )
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("employer_log", "medical_exemption")
    op.drop_column("employer_log", "family_exemption")
    op.drop_column("employer_log", "exemption_commence_date")
    op.drop_column("employer_log", "exemption_cease_date")
    # ### end Alembic commands ###
